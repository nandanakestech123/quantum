{"ast":null,"code":"/**\r\n * DevExtreme (viz/sankey/layout.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _graph = _interopRequireDefault(require(\"./graph\"));\n\nvar _data_validator = _interopRequireDefault(require(\"./data_validator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar _SPLINE_TENSION = .3;\nvar _ALIGNMENT_CENTER = \"center\";\nvar _ALIGNMENT_BOTTOM = \"bottom\";\nvar _ALIGNMENT_DEFAULT = _ALIGNMENT_CENTER;\nvar layout = {\n  _weightPerPixel: null,\n  _getCascadeIdx: function (nodeTitle, cascadesConfig) {\n    var nodeInfo = cascadesConfig.filter(function (c) {\n      return c.name === nodeTitle;\n    })[0];\n\n    if (nodeInfo.outgoing.length > 0) {\n      return nodeInfo.lp;\n    } else {\n      return _graph.default.routines.maxOfArray(cascadesConfig.map(function (c) {\n        return c.lp;\n      }));\n    }\n  },\n  _getInWeightForNode: function (nodeTitle, links) {\n    var w = 0;\n    links.forEach(function (link) {\n      if (link[1] === nodeTitle) {\n        w += link[2];\n      }\n    });\n    return w;\n  },\n  _getOutWeightForNode: function (nodeTitle, links) {\n    var w = 0;\n    links.forEach(function (link) {\n      if (link[0] === nodeTitle) {\n        w += link[2];\n      }\n    });\n    return w;\n  },\n  _computeCascades: function (links) {\n    var _this = this;\n\n    var cascadesConfig = _graph.default.struct.computeLongestPaths(links);\n\n    var maxCascade = _graph.default.routines.maxOfArray(cascadesConfig.map(function (c) {\n      return c.lp;\n    }));\n\n    var cascades = [];\n\n    for (var i = 0; i < maxCascade + 1; i++) {\n      cascades.push({});\n    }\n\n    links.forEach(function (link) {\n      var cascade = cascades[_this._getCascadeIdx(link[0], cascadesConfig)];\n\n      if (!cascade[link[0]]) {\n        cascade[link[0]] = {\n          nodeTitle: link[0]\n        };\n      }\n\n      cascade = cascades[_this._getCascadeIdx(link[1], cascadesConfig)];\n\n      if (!cascade[link[1]]) {\n        cascade[link[1]] = {\n          nodeTitle: link[1]\n        };\n      }\n    });\n    cascades.forEach(function (cascade) {\n      Object.keys(cascade).forEach(function (nodeTitle) {\n        var node = cascade[nodeTitle];\n        node.inWeight = _this._getInWeightForNode(node.nodeTitle, links);\n        node.outWeight = _this._getOutWeightForNode(node.nodeTitle, links);\n        node.maxWeight = Math.max(node.inWeight, node.outWeight);\n      });\n    });\n    return cascades;\n  },\n  _getWeightForCascade: function (cascades, cascadeIdx) {\n    var wMax = 0;\n    var cascade = cascades[cascadeIdx];\n    Object.keys(cascade).forEach(function (nodeTitle) {\n      wMax += Math.max(cascade[nodeTitle].inWeight, cascade[nodeTitle].outWeight);\n    });\n    return wMax;\n  },\n  _getMaxWeightThroughCascades: function (cascades) {\n    var max = [];\n    cascades.forEach(function (cascade) {\n      var mW = 0;\n      Object.keys(cascade).forEach(function (nodeTitle) {\n        var node = cascade[nodeTitle];\n        mW += Math.max(node.inWeight, node.outWeight);\n      });\n      max.push(mW);\n    });\n    return _graph.default.routines.maxOfArray(max);\n  },\n  _computeNodes: function (cascades, options) {\n    var _this2 = this;\n\n    var rects = [];\n\n    var maxWeight = this._getMaxWeightThroughCascades(cascades);\n\n    var maxNodeNum = _graph.default.routines.maxOfArray(cascades.map(function (nodesInCascade) {\n      return Object.keys(nodesInCascade).length;\n    }));\n\n    var nodePadding = options.nodePadding;\n    var heightAvailable = options.height - nodePadding * (maxNodeNum - 1);\n\n    if (heightAvailable < 0) {\n      nodePadding = 0;\n      heightAvailable = options.height - nodePadding * (maxNodeNum - 1);\n    }\n\n    this._weightPerPixel = maxWeight / heightAvailable;\n    var cascadeIdx = 0;\n    cascades.forEach(function (cascade) {\n      var cascadeRects = [];\n      var y = 0;\n      var nodesInCascade = Object.keys(cascade).length;\n      var cascadeHeight = _this2._getWeightForCascade(cascades, cascadeIdx) / _this2._weightPerPixel + nodePadding * (nodesInCascade - 1);\n      var cascadeAlign = _ALIGNMENT_DEFAULT;\n\n      if (Array.isArray(options.nodeAlign)) {\n        cascadeAlign = cascadeIdx < options.nodeAlign.length ? options.nodeAlign[cascadeIdx] : _ALIGNMENT_DEFAULT;\n      } else {\n        cascadeAlign = options.nodeAlign;\n      }\n\n      if (cascadeAlign === _ALIGNMENT_BOTTOM) {\n        y = options.height - cascadeHeight;\n      } else {\n        if (cascadeAlign === _ALIGNMENT_CENTER) {\n          y = .5 * (options.height - cascadeHeight);\n        }\n      }\n\n      y = Math.round(y);\n      Object.keys(cascade).forEach(function (nodeTitle) {\n        cascade[nodeTitle].sort = _this2._sort && Object.prototype.hasOwnProperty.call(_this2._sort, nodeTitle) ? _this2._sort[nodeTitle] : 1;\n      });\n      Object.keys(cascade).sort(function (a, b) {\n        return cascade[a].sort - cascade[b].sort;\n      }).forEach(function (nodeTitle) {\n        var node = cascade[nodeTitle];\n        var height = Math.floor(heightAvailable * node.maxWeight / maxWeight);\n        var x = Math.round(cascadeIdx * options.width / (cascades.length - 1)) - (0 === cascadeIdx ? 0 : options.nodeWidth);\n        var rect = {};\n        rect._name = nodeTitle;\n        rect.width = options.nodeWidth;\n        rect.height = height;\n        rect.x = x + options.x;\n        rect.y = y + options.y;\n        y += height + nodePadding;\n        cascadeRects.push(rect);\n      });\n      cascadeIdx++;\n      rects.push(cascadeRects);\n    });\n    return rects;\n  },\n  _findRectByName: function (rects, name) {\n    for (var c = 0; c < rects.length; c++) {\n      for (var r = 0; r < rects[c].length; r++) {\n        if (name === rects[c][r]._name) {\n          return rects[c][r];\n        }\n      }\n    }\n\n    return null;\n  },\n  _findIndexByName: function (rects, nodeTitle) {\n    var index = 0;\n\n    for (var c = 0; c < rects.length; c++) {\n      for (var r = 0; r < rects[c].length; r++) {\n        if (nodeTitle === rects[c][r]._name) {\n          return index;\n        }\n\n        index++;\n      }\n    }\n\n    return null;\n  },\n  _computeLinks: function (links, rects, cascades) {\n    var _this3 = this;\n\n    var yOffsets = {};\n    var paths = [];\n    var result = [];\n    cascades.forEach(function (cascade) {\n      Object.keys(cascade).forEach(function (nodeTitle) {\n        yOffsets[nodeTitle] = {\n          \"in\": 0,\n          out: 0\n        };\n      });\n    });\n    rects.forEach(function (rectsOfCascade) {\n      rectsOfCascade.forEach(function (nodeRect) {\n        var nodeTitle = nodeRect._name;\n\n        var rectFrom = _this3._findRectByName(rects, nodeTitle);\n\n        var linksFromNode = links.filter(function (link) {\n          return link[0] === nodeTitle;\n        });\n        linksFromNode.forEach(function (link) {\n          link.sort = _this3._findIndexByName(rects, link[1]);\n        });\n        linksFromNode.sort(function (a, b) {\n          return a.sort - b.sort;\n        }).forEach(function (link) {\n          var rectTo = _this3._findRectByName(rects, link[1]);\n\n          var height = Math.round(link[2] / _this3._weightPerPixel);\n          var yOffsetFrom = yOffsets[link[0]].out;\n          var yOffsetTo = yOffsets[link[1]].in;\n          var heightFrom = yOffsets[link[0]].out + height > rectFrom.height ? rectFrom.height - yOffsets[link[0]].out : height;\n          var heightTo = yOffsets[link[1]].in + height > rectTo.height ? rectTo.height - yOffsets[link[1]].in : height;\n          paths.push({\n            from: {\n              x: rectFrom.x,\n              y: rectFrom.y + yOffsetFrom,\n              width: rectFrom.width,\n              height: heightFrom,\n              node: rectFrom,\n              weight: link[2]\n            },\n            to: {\n              x: rectTo.x,\n              y: rectTo.y + yOffsetTo,\n              width: rectTo.width,\n              height: heightTo,\n              node: rectTo\n            }\n          });\n          yOffsets[link[0]].out += height;\n          yOffsets[link[1]].in += height;\n        });\n      });\n    });\n    paths.forEach(function (link) {\n      var path = {\n        d: _this3._spline(link.from, link.to),\n        _boundingRect: {\n          x: link.from.x + link.from.width,\n          y: Math.min(link.from.y, link.to.y),\n          width: link.to.x - (link.from.x + link.from.width),\n          height: Math.max(link.from.x + link.from.height, link.to.y + link.to.height) - Math.min(link.from.y, link.to.y)\n        },\n        _weight: link.from.weight,\n        _from: link.from.node,\n        _to: link.to.node\n      };\n      result.push(path);\n    });\n\n    this._fitAllNodesHeight(rects, paths);\n\n    return result;\n  },\n  _fitNodeHeight: function (nodeName, nodeRects, paths) {\n    var targetRect = this._findRectByName(nodeRects, nodeName);\n\n    var heightOfLinksSummaryIn = 0;\n    var heightOfLinksSummaryOut = 0;\n    paths.forEach(function (path) {\n      if (path.from.node._name === nodeName) {\n        heightOfLinksSummaryOut += path.from.height;\n      }\n\n      if (path.to.node._name === nodeName) {\n        heightOfLinksSummaryIn += path.to.height;\n      }\n    });\n    targetRect.height = Math.max(heightOfLinksSummaryIn, heightOfLinksSummaryOut);\n  },\n  _fitAllNodesHeight: function (nodeRects, paths) {\n    for (var c = 0; c < nodeRects.length; c++) {\n      for (var r = 0; r < nodeRects[c].length; r++) {\n        this._fitNodeHeight(nodeRects[c][r]._name, nodeRects, paths);\n      }\n    }\n  },\n  _spline: function (rectLeft, rectRight) {\n    var p_UpLeft = {\n      x: rectLeft.x + rectLeft.width,\n      y: rectLeft.y\n    };\n    var p_DownLeft = {\n      x: rectLeft.x + rectLeft.width,\n      y: rectLeft.y + rectLeft.height\n    };\n    var p_UpRight = {\n      x: rectRight.x,\n      y: rectRight.y\n    };\n    var p_DownRight = {\n      x: rectRight.x,\n      y: rectRight.y + rectRight.height\n    };\n    var curve_width = _SPLINE_TENSION * (p_UpRight.x - p_UpLeft.x);\n    var result = \"M \".concat(p_UpLeft.x, \" \").concat(p_UpLeft.y, \" C \").concat(p_UpLeft.x + curve_width, \" \").concat(p_UpLeft.y, \" \").concat(p_UpRight.x - curve_width, \" \").concat(p_UpRight.y, \" \").concat(p_UpRight.x, \" \").concat(p_UpRight.y, \" L \").concat(p_DownRight.x, \" \").concat(p_DownRight.y, \" C \").concat(p_DownRight.x - curve_width, \" \").concat(p_DownRight.y, \" \").concat(p_DownLeft.x + curve_width, \" \").concat(p_DownLeft.y, \" \").concat(p_DownLeft.x, \" \").concat(p_DownLeft.y, \" Z\");\n    return result;\n  },\n  computeLayout: function (linksData, sortData, options, incidentOccurred) {\n    this._sort = sortData;\n    var result = {};\n\n    var validateResult = _data_validator.default.validate(linksData, incidentOccurred);\n\n    if (!validateResult) {\n      result.cascades = this._computeCascades(linksData);\n      result.nodes = this._computeNodes(result.cascades, {\n        width: options.availableRect.width,\n        height: options.availableRect.height,\n        x: options.availableRect.x,\n        y: options.availableRect.y,\n        nodePadding: options.nodePadding,\n        nodeWidth: options.nodeWidth,\n        nodeAlign: options.nodeAlign\n      });\n      result.links = this._computeLinks(linksData, result.nodes, result.cascades);\n    } else {\n      result.error = validateResult;\n    }\n\n    return result;\n  },\n  overlap: function (box1, box2) {\n    return !(box2.x > box1.x + box1.width || box2.x + box2.width < box1.x || box2.y >= box1.y + box1.height || box2.y + box2.height <= box1.y);\n  }\n};\nvar _default = layout;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/sankey/layout.js"],"names":["exports","default","_graph","_interopRequireDefault","require","_data_validator","obj","__esModule","_SPLINE_TENSION","_ALIGNMENT_CENTER","_ALIGNMENT_BOTTOM","_ALIGNMENT_DEFAULT","layout","_weightPerPixel","_getCascadeIdx","nodeTitle","cascadesConfig","nodeInfo","filter","c","name","outgoing","length","lp","routines","maxOfArray","map","_getInWeightForNode","links","w","forEach","link","_getOutWeightForNode","_computeCascades","_this","struct","computeLongestPaths","maxCascade","cascades","i","push","cascade","Object","keys","node","inWeight","outWeight","maxWeight","Math","max","_getWeightForCascade","cascadeIdx","wMax","_getMaxWeightThroughCascades","mW","_computeNodes","options","_this2","rects","maxNodeNum","nodesInCascade","nodePadding","heightAvailable","height","cascadeRects","y","cascadeHeight","cascadeAlign","Array","isArray","nodeAlign","round","sort","_sort","prototype","hasOwnProperty","call","a","b","floor","x","width","nodeWidth","rect","_name","_findRectByName","r","_findIndexByName","index","_computeLinks","_this3","yOffsets","paths","result","out","rectsOfCascade","nodeRect","rectFrom","linksFromNode","rectTo","yOffsetFrom","yOffsetTo","in","heightFrom","heightTo","from","weight","to","path","d","_spline","_boundingRect","min","_weight","_from","_to","_fitAllNodesHeight","_fitNodeHeight","nodeName","nodeRects","targetRect","heightOfLinksSummaryIn","heightOfLinksSummaryOut","rectLeft","rectRight","p_UpLeft","p_DownLeft","p_UpRight","p_DownRight","curve_width","concat","computeLayout","linksData","sortData","incidentOccurred","validateResult","validate","nodes","availableRect","error","overlap","box1","box2","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/sankey/layout.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _graph = _interopRequireDefault(require(\"./graph\"));\r\nvar _data_validator = _interopRequireDefault(require(\"./data_validator\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar _SPLINE_TENSION = .3;\r\nvar _ALIGNMENT_CENTER = \"center\";\r\nvar _ALIGNMENT_BOTTOM = \"bottom\";\r\nvar _ALIGNMENT_DEFAULT = _ALIGNMENT_CENTER;\r\nvar layout = {\r\n    _weightPerPixel: null,\r\n    _getCascadeIdx: function(nodeTitle, cascadesConfig) {\r\n        var nodeInfo = cascadesConfig.filter(function(c) {\r\n            return c.name === nodeTitle\r\n        })[0];\r\n        if (nodeInfo.outgoing.length > 0) {\r\n            return nodeInfo.lp\r\n        } else {\r\n            return _graph.default.routines.maxOfArray(cascadesConfig.map(function(c) {\r\n                return c.lp\r\n            }))\r\n        }\r\n    },\r\n    _getInWeightForNode: function(nodeTitle, links) {\r\n        var w = 0;\r\n        links.forEach(function(link) {\r\n            if (link[1] === nodeTitle) {\r\n                w += link[2]\r\n            }\r\n        });\r\n        return w\r\n    },\r\n    _getOutWeightForNode: function(nodeTitle, links) {\r\n        var w = 0;\r\n        links.forEach(function(link) {\r\n            if (link[0] === nodeTitle) {\r\n                w += link[2]\r\n            }\r\n        });\r\n        return w\r\n    },\r\n    _computeCascades: function(links) {\r\n        var _this = this;\r\n        var cascadesConfig = _graph.default.struct.computeLongestPaths(links);\r\n        var maxCascade = _graph.default.routines.maxOfArray(cascadesConfig.map(function(c) {\r\n            return c.lp\r\n        }));\r\n        var cascades = [];\r\n        for (var i = 0; i < maxCascade + 1; i++) {\r\n            cascades.push({})\r\n        }\r\n        links.forEach(function(link) {\r\n            var cascade = cascades[_this._getCascadeIdx(link[0], cascadesConfig)];\r\n            if (!cascade[link[0]]) {\r\n                cascade[link[0]] = {\r\n                    nodeTitle: link[0]\r\n                }\r\n            }\r\n            cascade = cascades[_this._getCascadeIdx(link[1], cascadesConfig)];\r\n            if (!cascade[link[1]]) {\r\n                cascade[link[1]] = {\r\n                    nodeTitle: link[1]\r\n                }\r\n            }\r\n        });\r\n        cascades.forEach(function(cascade) {\r\n            Object.keys(cascade).forEach(function(nodeTitle) {\r\n                var node = cascade[nodeTitle];\r\n                node.inWeight = _this._getInWeightForNode(node.nodeTitle, links);\r\n                node.outWeight = _this._getOutWeightForNode(node.nodeTitle, links);\r\n                node.maxWeight = Math.max(node.inWeight, node.outWeight)\r\n            })\r\n        });\r\n        return cascades\r\n    },\r\n    _getWeightForCascade: function(cascades, cascadeIdx) {\r\n        var wMax = 0;\r\n        var cascade = cascades[cascadeIdx];\r\n        Object.keys(cascade).forEach(function(nodeTitle) {\r\n            wMax += Math.max(cascade[nodeTitle].inWeight, cascade[nodeTitle].outWeight)\r\n        });\r\n        return wMax\r\n    },\r\n    _getMaxWeightThroughCascades: function(cascades) {\r\n        var max = [];\r\n        cascades.forEach(function(cascade) {\r\n            var mW = 0;\r\n            Object.keys(cascade).forEach(function(nodeTitle) {\r\n                var node = cascade[nodeTitle];\r\n                mW += Math.max(node.inWeight, node.outWeight)\r\n            });\r\n            max.push(mW)\r\n        });\r\n        return _graph.default.routines.maxOfArray(max)\r\n    },\r\n    _computeNodes: function(cascades, options) {\r\n        var _this2 = this;\r\n        var rects = [];\r\n        var maxWeight = this._getMaxWeightThroughCascades(cascades);\r\n        var maxNodeNum = _graph.default.routines.maxOfArray(cascades.map(function(nodesInCascade) {\r\n            return Object.keys(nodesInCascade).length\r\n        }));\r\n        var nodePadding = options.nodePadding;\r\n        var heightAvailable = options.height - nodePadding * (maxNodeNum - 1);\r\n        if (heightAvailable < 0) {\r\n            nodePadding = 0;\r\n            heightAvailable = options.height - nodePadding * (maxNodeNum - 1)\r\n        }\r\n        this._weightPerPixel = maxWeight / heightAvailable;\r\n        var cascadeIdx = 0;\r\n        cascades.forEach(function(cascade) {\r\n            var cascadeRects = [];\r\n            var y = 0;\r\n            var nodesInCascade = Object.keys(cascade).length;\r\n            var cascadeHeight = _this2._getWeightForCascade(cascades, cascadeIdx) / _this2._weightPerPixel + nodePadding * (nodesInCascade - 1);\r\n            var cascadeAlign = _ALIGNMENT_DEFAULT;\r\n            if (Array.isArray(options.nodeAlign)) {\r\n                cascadeAlign = cascadeIdx < options.nodeAlign.length ? options.nodeAlign[cascadeIdx] : _ALIGNMENT_DEFAULT\r\n            } else {\r\n                cascadeAlign = options.nodeAlign\r\n            }\r\n            if (cascadeAlign === _ALIGNMENT_BOTTOM) {\r\n                y = options.height - cascadeHeight\r\n            } else {\r\n                if (cascadeAlign === _ALIGNMENT_CENTER) {\r\n                    y = .5 * (options.height - cascadeHeight)\r\n                }\r\n            }\r\n            y = Math.round(y);\r\n            Object.keys(cascade).forEach(function(nodeTitle) {\r\n                cascade[nodeTitle].sort = _this2._sort && Object.prototype.hasOwnProperty.call(_this2._sort, nodeTitle) ? _this2._sort[nodeTitle] : 1\r\n            });\r\n            Object.keys(cascade).sort(function(a, b) {\r\n                return cascade[a].sort - cascade[b].sort\r\n            }).forEach(function(nodeTitle) {\r\n                var node = cascade[nodeTitle];\r\n                var height = Math.floor(heightAvailable * node.maxWeight / maxWeight);\r\n                var x = Math.round(cascadeIdx * options.width / (cascades.length - 1)) - (0 === cascadeIdx ? 0 : options.nodeWidth);\r\n                var rect = {};\r\n                rect._name = nodeTitle;\r\n                rect.width = options.nodeWidth;\r\n                rect.height = height;\r\n                rect.x = x + options.x;\r\n                rect.y = y + options.y;\r\n                y += height + nodePadding;\r\n                cascadeRects.push(rect)\r\n            });\r\n            cascadeIdx++;\r\n            rects.push(cascadeRects)\r\n        });\r\n        return rects\r\n    },\r\n    _findRectByName: function(rects, name) {\r\n        for (var c = 0; c < rects.length; c++) {\r\n            for (var r = 0; r < rects[c].length; r++) {\r\n                if (name === rects[c][r]._name) {\r\n                    return rects[c][r]\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    _findIndexByName: function(rects, nodeTitle) {\r\n        var index = 0;\r\n        for (var c = 0; c < rects.length; c++) {\r\n            for (var r = 0; r < rects[c].length; r++) {\r\n                if (nodeTitle === rects[c][r]._name) {\r\n                    return index\r\n                }\r\n                index++\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    _computeLinks: function(links, rects, cascades) {\r\n        var _this3 = this;\r\n        var yOffsets = {};\r\n        var paths = [];\r\n        var result = [];\r\n        cascades.forEach(function(cascade) {\r\n            Object.keys(cascade).forEach(function(nodeTitle) {\r\n                yOffsets[nodeTitle] = {\r\n                    \"in\": 0,\r\n                    out: 0\r\n                }\r\n            })\r\n        });\r\n        rects.forEach(function(rectsOfCascade) {\r\n            rectsOfCascade.forEach(function(nodeRect) {\r\n                var nodeTitle = nodeRect._name;\r\n                var rectFrom = _this3._findRectByName(rects, nodeTitle);\r\n                var linksFromNode = links.filter(function(link) {\r\n                    return link[0] === nodeTitle\r\n                });\r\n                linksFromNode.forEach(function(link) {\r\n                    link.sort = _this3._findIndexByName(rects, link[1])\r\n                });\r\n                linksFromNode.sort(function(a, b) {\r\n                    return a.sort - b.sort\r\n                }).forEach(function(link) {\r\n                    var rectTo = _this3._findRectByName(rects, link[1]);\r\n                    var height = Math.round(link[2] / _this3._weightPerPixel);\r\n                    var yOffsetFrom = yOffsets[link[0]].out;\r\n                    var yOffsetTo = yOffsets[link[1]].in;\r\n                    var heightFrom = yOffsets[link[0]].out + height > rectFrom.height ? rectFrom.height - yOffsets[link[0]].out : height;\r\n                    var heightTo = yOffsets[link[1]].in + height > rectTo.height ? rectTo.height - yOffsets[link[1]].in : height;\r\n                    paths.push({\r\n                        from: {\r\n                            x: rectFrom.x,\r\n                            y: rectFrom.y + yOffsetFrom,\r\n                            width: rectFrom.width,\r\n                            height: heightFrom,\r\n                            node: rectFrom,\r\n                            weight: link[2]\r\n                        },\r\n                        to: {\r\n                            x: rectTo.x,\r\n                            y: rectTo.y + yOffsetTo,\r\n                            width: rectTo.width,\r\n                            height: heightTo,\r\n                            node: rectTo\r\n                        }\r\n                    });\r\n                    yOffsets[link[0]].out += height;\r\n                    yOffsets[link[1]].in += height\r\n                })\r\n            })\r\n        });\r\n        paths.forEach(function(link) {\r\n            var path = {\r\n                d: _this3._spline(link.from, link.to),\r\n                _boundingRect: {\r\n                    x: link.from.x + link.from.width,\r\n                    y: Math.min(link.from.y, link.to.y),\r\n                    width: link.to.x - (link.from.x + link.from.width),\r\n                    height: Math.max(link.from.x + link.from.height, link.to.y + link.to.height) - Math.min(link.from.y, link.to.y)\r\n                },\r\n                _weight: link.from.weight,\r\n                _from: link.from.node,\r\n                _to: link.to.node\r\n            };\r\n            result.push(path)\r\n        });\r\n        this._fitAllNodesHeight(rects, paths);\r\n        return result\r\n    },\r\n    _fitNodeHeight: function(nodeName, nodeRects, paths) {\r\n        var targetRect = this._findRectByName(nodeRects, nodeName);\r\n        var heightOfLinksSummaryIn = 0;\r\n        var heightOfLinksSummaryOut = 0;\r\n        paths.forEach(function(path) {\r\n            if (path.from.node._name === nodeName) {\r\n                heightOfLinksSummaryOut += path.from.height\r\n            }\r\n            if (path.to.node._name === nodeName) {\r\n                heightOfLinksSummaryIn += path.to.height\r\n            }\r\n        });\r\n        targetRect.height = Math.max(heightOfLinksSummaryIn, heightOfLinksSummaryOut)\r\n    },\r\n    _fitAllNodesHeight: function(nodeRects, paths) {\r\n        for (var c = 0; c < nodeRects.length; c++) {\r\n            for (var r = 0; r < nodeRects[c].length; r++) {\r\n                this._fitNodeHeight(nodeRects[c][r]._name, nodeRects, paths)\r\n            }\r\n        }\r\n    },\r\n    _spline: function(rectLeft, rectRight) {\r\n        var p_UpLeft = {\r\n            x: rectLeft.x + rectLeft.width,\r\n            y: rectLeft.y\r\n        };\r\n        var p_DownLeft = {\r\n            x: rectLeft.x + rectLeft.width,\r\n            y: rectLeft.y + rectLeft.height\r\n        };\r\n        var p_UpRight = {\r\n            x: rectRight.x,\r\n            y: rectRight.y\r\n        };\r\n        var p_DownRight = {\r\n            x: rectRight.x,\r\n            y: rectRight.y + rectRight.height\r\n        };\r\n        var curve_width = _SPLINE_TENSION * (p_UpRight.x - p_UpLeft.x);\r\n        var result = \"M \".concat(p_UpLeft.x, \" \").concat(p_UpLeft.y, \" C \").concat(p_UpLeft.x + curve_width, \" \").concat(p_UpLeft.y, \" \").concat(p_UpRight.x - curve_width, \" \").concat(p_UpRight.y, \" \").concat(p_UpRight.x, \" \").concat(p_UpRight.y, \" L \").concat(p_DownRight.x, \" \").concat(p_DownRight.y, \" C \").concat(p_DownRight.x - curve_width, \" \").concat(p_DownRight.y, \" \").concat(p_DownLeft.x + curve_width, \" \").concat(p_DownLeft.y, \" \").concat(p_DownLeft.x, \" \").concat(p_DownLeft.y, \" Z\");\r\n        return result\r\n    },\r\n    computeLayout: function(linksData, sortData, options, incidentOccurred) {\r\n        this._sort = sortData;\r\n        var result = {};\r\n        var validateResult = _data_validator.default.validate(linksData, incidentOccurred);\r\n        if (!validateResult) {\r\n            result.cascades = this._computeCascades(linksData);\r\n            result.nodes = this._computeNodes(result.cascades, {\r\n                width: options.availableRect.width,\r\n                height: options.availableRect.height,\r\n                x: options.availableRect.x,\r\n                y: options.availableRect.y,\r\n                nodePadding: options.nodePadding,\r\n                nodeWidth: options.nodeWidth,\r\n                nodeAlign: options.nodeAlign\r\n            });\r\n            result.links = this._computeLinks(linksData, result.nodes, result.cascades)\r\n        } else {\r\n            result.error = validateResult\r\n        }\r\n        return result\r\n    },\r\n    overlap: function(box1, box2) {\r\n        return !(box2.x > box1.x + box1.width || box2.x + box2.width < box1.x || box2.y >= box1.y + box1.height || box2.y + box2.height <= box1.y)\r\n    }\r\n};\r\nvar _default = layout;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}