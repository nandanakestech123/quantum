{"ast":null,"code":"import { CustomerActionType, CommonActionType } from 'redux/actions/actionType';\nimport { authApi } from 'service/apiVariables';\nimport { addQuery } from 'service/helperFunctions';\nimport { history } from '../../helpers';\nimport { Salon, Staff, customer, Services, Products } from '../../service/apiVariables';\nimport { api } from '../../service/api';\nimport { Toast } from '../../service/toast';\nimport { NotificationManager } from 'react-notifications'; // create customer action\n\nexport const CreateCustomer = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customer.addCustomer,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // update customer action\n\nexport const updateCustomer = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customer.updateCustomer.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...customer.updateCustomer,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getCustomer = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customer.getCustomer.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...customer.getCustomer\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: CustomerActionType.getCustomerDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n};\nexport const CreateHoldItem = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customer.addHoldItem,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/customer.js"],"names":["CustomerActionType","CommonActionType","authApi","addQuery","history","Salon","Staff","customer","Services","Products","api","Toast","NotificationManager","CreateCustomer","body","dispatch","getState","Promise","resolve","reject","addCustomer","then","response","message","status","type","catch","updateCustomer","id","key","payload","getCustomer","data","getCustomerDetail","CreateHoldItem","addHoldItem"],"mappings":"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","sourcesContent":["import { CustomerActionType, CommonActionType } from 'redux/actions/actionType';\r\nimport { authApi } from 'service/apiVariables';\r\nimport { addQuery } from 'service/helperFunctions';\r\nimport { history } from '../../helpers';\r\nimport { Salon, Staff, customer, Services, Products } from '../../service/apiVariables'\r\nimport { api } from '../../service/api'\r\nimport { Toast } from '../../service/toast';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\n// create customer action\r\nexport const CreateCustomer = body => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...customer.addCustomer, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } = response\r\n        if (status === 200) {\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// update customer action\r\nexport const updateCustomer = (id, body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    customer.updateCustomer.addQuery = { key: 'id', payload: id };\r\n    api({ ...customer.updateCustomer, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } = response\r\n        if (status === 200) {\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// get customer action\r\nexport const getCustomer = (id) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n\r\n    customer.getCustomer.addQuery = { key: 'id', payload: id };\r\n    \r\n    api({ ...customer.getCustomer })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } = response\r\n        if (status === 200) {\r\n          dispatch({ type: CustomerActionType.getCustomerDetail, payload: data });\r\n          // Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n\r\nexport const CreateHoldItem = body => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...customer.addHoldItem, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } = response\r\n        if (status === 200) {\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          //Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}