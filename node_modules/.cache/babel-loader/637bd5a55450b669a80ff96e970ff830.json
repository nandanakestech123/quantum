{"ast":null,"code":"/**\r\n * DevExtreme (viz/tree_map/plain_data_source.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _tree_map = _interopRequireDefault(require(\"./tree_map.base\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar proto = _tree_map.default.prototype;\nproto._optionChangesMap.idField = proto._optionChangesMap.parentField = \"NODES_CREATE\";\n\nproto._processDataSourceItems = function (items) {\n  var i;\n  var struct = {};\n  var currentItem;\n\n  var idField = this._getOption(\"idField\", true);\n\n  var parentField = this._getOption(\"parentField\", true);\n\n  var parentId;\n  var rootNodes = [];\n  var tmpItems;\n  var item;\n\n  if (!idField || !parentField || 0 === items.length) {\n    return {\n      items: items,\n      isPlain: true\n    };\n  }\n\n  for (i = 0; i < items.length; i++) {\n    currentItem = items[i];\n    parentId = currentItem[parentField];\n\n    if (parentId) {\n      struct[parentId] = struct[parentId] || {\n        items: []\n      };\n      tmpItems = struct[parentId].items;\n    } else {\n      tmpItems = rootNodes;\n    }\n\n    tmpItems.push(currentItem);\n  }\n\n  treeFiller({\n    struct: struct,\n    idField: idField\n  }, rootNodes);\n\n  for (item in struct) {\n    struct[item] && rootNodes.push(struct[item]);\n  }\n\n  return {\n    items: rootNodes,\n    isPlain: true\n  };\n};\n\nfunction treeFiller(context, items) {\n  var currentItem;\n  var i;\n  var struct = context.struct;\n  var id;\n\n  for (i = 0; i < items.length; i++) {\n    currentItem = items[i];\n    id = currentItem[context.idField];\n\n    if (struct[id]) {\n      currentItem.items = struct[id].items;\n      struct[id] = null;\n      treeFiller(context, currentItem.items);\n    }\n  }\n}","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/tree_map/plain_data_source.js"],"names":["_tree_map","_interopRequireDefault","require","obj","__esModule","proto","default","prototype","_optionChangesMap","idField","parentField","_processDataSourceItems","items","i","struct","currentItem","_getOption","parentId","rootNodes","tmpItems","item","length","isPlain","push","treeFiller","context","id"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/tree_map/plain_data_source.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _tree_map = _interopRequireDefault(require(\"./tree_map.base\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar proto = _tree_map.default.prototype;\r\nproto._optionChangesMap.idField = proto._optionChangesMap.parentField = \"NODES_CREATE\";\r\nproto._processDataSourceItems = function(items) {\r\n    var i;\r\n    var struct = {};\r\n    var currentItem;\r\n    var idField = this._getOption(\"idField\", true);\r\n    var parentField = this._getOption(\"parentField\", true);\r\n    var parentId;\r\n    var rootNodes = [];\r\n    var tmpItems;\r\n    var item;\r\n    if (!idField || !parentField || 0 === items.length) {\r\n        return {\r\n            items: items,\r\n            isPlain: true\r\n        }\r\n    }\r\n    for (i = 0; i < items.length; i++) {\r\n        currentItem = items[i];\r\n        parentId = currentItem[parentField];\r\n        if (parentId) {\r\n            struct[parentId] = struct[parentId] || {\r\n                items: []\r\n            };\r\n            tmpItems = struct[parentId].items\r\n        } else {\r\n            tmpItems = rootNodes\r\n        }\r\n        tmpItems.push(currentItem)\r\n    }\r\n    treeFiller({\r\n        struct: struct,\r\n        idField: idField\r\n    }, rootNodes);\r\n    for (item in struct) {\r\n        struct[item] && rootNodes.push(struct[item])\r\n    }\r\n    return {\r\n        items: rootNodes,\r\n        isPlain: true\r\n    }\r\n};\r\n\r\nfunction treeFiller(context, items) {\r\n    var currentItem;\r\n    var i;\r\n    var struct = context.struct;\r\n    var id;\r\n    for (i = 0; i < items.length; i++) {\r\n        currentItem = items[i];\r\n        id = currentItem[context.idField];\r\n        if (struct[id]) {\r\n            currentItem.items = struct[id].items;\r\n            struct[id] = null;\r\n            treeFiller(context, currentItem.items)\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}