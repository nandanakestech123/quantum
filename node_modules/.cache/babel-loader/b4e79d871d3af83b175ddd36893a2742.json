{"ast":null,"code":"/**\r\n * DevExtreme (ui/tree_list/ui.tree_list.selection.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _uiTree_list = _interopRequireDefault(require(\"./ui.tree_list.core\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiGrid_core = _interopRequireDefault(require(\"../grid_core/ui.grid_core.selection\"));\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TREELIST_SELECT_ALL_CLASS = \"dx-treelist-select-all\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar originalRowClick = _uiGrid_core.default.extenders.views.rowsView._rowClick;\nvar originalHandleDataChanged = _uiGrid_core.default.extenders.controllers.data._handleDataChanged;\n\nvar nodeExists = function (array, currentKey) {\n  return !!array.filter(function (key) {\n    return key === currentKey;\n  }).length;\n};\n\n_uiTree_list.default.registerModule(\"selection\", (0, _extend.extend)(true, {}, _uiGrid_core.default, {\n  defaultOptions: function () {\n    return (0, _extend.extend)(true, _uiGrid_core.default.defaultOptions(), {\n      selection: {\n        showCheckBoxesMode: \"always\",\n        recursive: false\n      }\n    });\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _handleDataChanged: function (e) {\n          var selectionController = this.getController(\"selection\");\n          var isRecursiveSelection = selectionController.isRecursiveSelection();\n\n          if (isRecursiveSelection && (!e || \"updateSelectionState\" !== e.changeType)) {\n            selectionController.updateSelectionState({\n              selectedItemKeys: this.option(\"selectedRowKeys\")\n            });\n          }\n\n          originalHandleDataChanged.apply(this, arguments);\n        },\n        loadDescendants: function () {\n          var that = this;\n          var d = that.callBase.apply(that, arguments);\n          var selectionController = that.getController(\"selection\");\n          var isRecursiveSelection = selectionController.isRecursiveSelection();\n\n          if (isRecursiveSelection) {\n            d.done(function () {\n              selectionController.updateSelectionState({\n                selectedItemKeys: that.option(\"selectedRowKeys\")\n              });\n            });\n          }\n\n          return d;\n        }\n      },\n      selection: {\n        init: function () {\n          this.callBase.apply(this, arguments);\n          this._selectionStateByKey = {};\n        },\n        _getSelectionConfig: function () {\n          var _arguments = arguments,\n              _this = this;\n\n          var config = this.callBase.apply(this, arguments);\n          var plainItems = config.plainItems;\n\n          config.plainItems = function (all) {\n            if (all) {\n              return _this._dataController.getCachedStoreData() || [];\n            }\n\n            return plainItems.apply(_this, _arguments).map(function (item) {\n              return item.data;\n            });\n          };\n\n          config.isItemSelected = function (item) {\n            var key = _this._dataController.keyOf(item);\n\n            return _this.isRowSelected(key);\n          };\n\n          config.isSelectableItem = function () {\n            return true;\n          };\n\n          config.getItemData = function (item) {\n            return item;\n          };\n\n          return config;\n        },\n        renderSelectCheckBoxContainer: function ($container, model) {\n          var that = this;\n          var rowsView = that.component.getView(\"rowsView\");\n          $container.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n          var $checkbox = rowsView._renderSelectCheckBox($container, {\n            value: model.row.isSelected,\n            row: model.row,\n            column: model.column\n          });\n\n          rowsView._attachCheckBoxClickEvent($checkbox);\n        },\n        _updateSelectColumn: _common.noop,\n        _getSelectAllNodeKeys: function () {\n          var component = this.component;\n          var root = component.getRootNode();\n          var cache = {};\n          var keys = [];\n          var isRecursiveSelection = this.isRecursiveSelection();\n          root && _uiTree_list.default.foreachNodes(root.children, function (node) {\n            if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {\n              keys.push(node.key);\n            }\n\n            if (!node.visible) {\n              return true;\n            }\n\n            return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache);\n          });\n          return keys;\n        },\n        isSelectAll: function () {\n          var component = this.component;\n\n          var visibleKeys = this._getSelectAllNodeKeys();\n\n          var selectedVisibleKeys = visibleKeys.filter(function (key) {\n            return component.isRowSelected(key);\n          });\n\n          if (!selectedVisibleKeys.length) {\n            var hasIndeterminateState = visibleKeys.some(function (key) {\n              return void 0 === component.isRowSelected(key);\n            });\n            return hasIndeterminateState ? void 0 : false;\n          } else {\n            if (selectedVisibleKeys.length === visibleKeys.length) {\n              return true;\n            }\n          }\n        },\n        selectAll: function () {\n          var that = this;\n\n          var visibleKeys = that._getSelectAllNodeKeys().filter(function (key) {\n            return !that.isRowSelected(key);\n          });\n\n          return that.selectRows(visibleKeys, true);\n        },\n        deselectAll: function () {\n          var visibleKeys = this._getSelectAllNodeKeys();\n\n          return this.deselectRows(visibleKeys);\n        },\n        selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n          var that = this;\n          var selectedRowKeys = that.option(\"selectedRowKeys\");\n          var isRecursiveSelection = this.isRecursiveSelection();\n\n          var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({\n            keys: (0, _type.isDefined)(value) ? value : []\n          }, !isDeselect);\n\n          if (normalizedArgs && !(0, _common.equalByValue)(normalizedArgs.selectedRowKeys, selectedRowKeys)) {\n            that._isSelectionNormalizing = true;\n            return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always(function () {\n              that._isSelectionNormalizing = false;\n            }).done(function (items) {\n              normalizedArgs.selectedRowsData = items;\n\n              that._fireSelectionChanged(normalizedArgs);\n            });\n          }\n\n          return this.callBase(value, preserve, isDeselect, isSelectAll);\n        },\n        changeItemSelection: function (itemIndex, keyboardKeys) {\n          var isRecursiveSelection = this.isRecursiveSelection();\n\n          if (isRecursiveSelection && !keyboardKeys.shift) {\n            var key = this._dataController.getKeyByRowIndex(itemIndex);\n\n            return this.selectedItemKeys(key, true, this.isRowSelected(key));\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateParentSelectionState: function (node, isSelected) {\n          var that = this;\n          var state = isSelected;\n          var parentNode = node.parent;\n\n          if (parentNode) {\n            if (parentNode.children.length > 1) {\n              if (false === isSelected) {\n                var hasSelectedState = parentNode.children.some(function (childNode, index, children) {\n                  return that._selectionStateByKey[childNode.key];\n                });\n                state = hasSelectedState ? void 0 : false;\n              } else {\n                if (true === isSelected) {\n                  var hasNonSelectedState = parentNode.children.some(function (childNode) {\n                    return !that._selectionStateByKey[childNode.key];\n                  });\n                  state = hasNonSelectedState ? void 0 : true;\n                }\n              }\n            }\n\n            this._selectionStateByKey[parentNode.key] = state;\n\n            if (parentNode.parent && parentNode.parent.level >= 0) {\n              this._updateParentSelectionState(parentNode, state);\n            }\n          }\n        },\n        _updateChildrenSelectionState: function (node, isSelected) {\n          var that = this;\n          var children = node.children;\n          children && children.forEach(function (childNode) {\n            that._selectionStateByKey[childNode.key] = isSelected;\n\n            if (childNode.children.length > 0) {\n              that._updateChildrenSelectionState(childNode, isSelected);\n            }\n          });\n        },\n        _updateSelectionStateCore: function (keys, isSelected) {\n          var dataController = this._dataController;\n\n          for (var i = 0; i < keys.length; i++) {\n            this._selectionStateByKey[keys[i]] = isSelected;\n            var node = dataController.getNodeByKey(keys[i]);\n\n            if (node) {\n              this._updateParentSelectionState(node, isSelected);\n\n              this._updateChildrenSelectionState(node, isSelected);\n            }\n          }\n        },\n        _getSelectedParentKeys: function (key, selectedItemKeys, useCash) {\n          var selectedParentNode;\n\n          var node = this._dataController.getNodeByKey(key);\n\n          var parentNode = node && node.parent;\n          var result = [];\n\n          while (parentNode && parentNode.level >= 0) {\n            result.unshift(parentNode.key);\n            var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;\n\n            if (isSelected) {\n              selectedParentNode = parentNode;\n              result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);\n              break;\n            } else {\n              if (useCash) {\n                break;\n              }\n            }\n\n            parentNode = parentNode.parent;\n          }\n\n          return selectedParentNode && result || [];\n        },\n        _getSelectedChildKeys: function (node, keysToIgnore) {\n          var that = this;\n          var childKeys = [];\n          node && _uiTree_list.default.foreachNodes(node.children, function (childNode) {\n            var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);\n\n            if (ignoreKeyIndex < 0) {\n              childKeys.push(childNode.key);\n            }\n\n            return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === that._selectionStateByKey[childNode.key];\n          });\n          return childKeys;\n        },\n        _normalizeParentKeys: function (key, args) {\n          var that = this;\n          var keysToIgnore = [key];\n\n          var parentNodeKeys = that._getSelectedParentKeys(key, args.selectedRowKeys);\n\n          if (parentNodeKeys.length) {\n            keysToIgnore = keysToIgnore.concat(parentNodeKeys);\n            keysToIgnore.forEach(function (key) {\n              var index = args.selectedRowKeys.indexOf(key);\n\n              if (index >= 0) {\n                args.selectedRowKeys.splice(index, 1);\n              }\n            });\n\n            var parentNode = that._dataController.getNodeByKey(parentNodeKeys[0]);\n\n            var childKeys = that._getSelectedChildKeys(parentNode, keysToIgnore);\n\n            args.selectedRowKeys = args.selectedRowKeys.concat(childKeys);\n          }\n        },\n        _normalizeChildrenKeys: function (key, args) {\n          var that = this;\n\n          var node = that._dataController.getNodeByKey(key);\n\n          node && node.children.forEach(function (childNode) {\n            var index = args.selectedRowKeys.indexOf(childNode.key);\n\n            if (index >= 0) {\n              args.selectedRowKeys.splice(index, 1);\n            }\n\n            that._normalizeChildrenKeys(childNode.key, args);\n          });\n        },\n        _normalizeSelectedRowKeysCore: function (keys, args, isSelect) {\n          var that = this;\n          keys.forEach(function (key) {\n            if (that.isRowSelected(key) === isSelect) {\n              return;\n            }\n\n            that._normalizeChildrenKeys(key, args);\n\n            var index = args.selectedRowKeys.indexOf(key);\n\n            if (isSelect) {\n              if (index < 0) {\n                args.selectedRowKeys.push(key);\n              }\n\n              args.currentSelectedRowKeys.push(key);\n            } else {\n              if (index >= 0) {\n                args.selectedRowKeys.splice(index, 1);\n              }\n\n              args.currentDeselectedRowKeys.push(key);\n\n              that._normalizeParentKeys(key, args);\n            }\n          });\n        },\n        _normalizeSelectionArgs: function (args, isSelect) {\n          var result;\n          var keys = Array.isArray(args.keys) ? args.keys : [args.keys];\n          var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n          if (keys.length) {\n            result = {\n              currentSelectedRowKeys: [],\n              currentDeselectedRowKeys: [],\n              selectedRowKeys: selectedRowKeys.slice(0)\n            };\n\n            this._normalizeSelectedRowKeysCore(keys, result, isSelect);\n          }\n\n          return result;\n        },\n        _updateSelectedItems: function (args) {\n          this.updateSelectionState(args);\n          this.callBase(args);\n        },\n        _fireSelectionChanged: function () {\n          if (!this._isSelectionNormalizing) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isModeLeavesOnly: function (mode) {\n          return \"leavesOnly\" === mode;\n        },\n        _getAllSelectedRowKeys: function (parentKeys) {\n          var that = this;\n          var result = [];\n          parentKeys.forEach(function (key) {\n            var insertIndex = result.length;\n\n            var parentKeys = that._getSelectedParentKeys(key, result, true);\n\n            var childKeys = that._dataController.getChildNodeKeys(key);\n\n            result.splice.apply(result, [insertIndex, 0].concat(parentKeys));\n            result.push(key);\n            result = result.concat(childKeys);\n          });\n          return result;\n        },\n        _getParentSelectedRowKeys: function (keys) {\n          var that = this;\n          var result = [];\n          keys.forEach(function (key) {\n            var parentKeys = that._getSelectedParentKeys(key, keys);\n\n            !parentKeys.length && result.push(key);\n          });\n          return result;\n        },\n        _getLeafSelectedRowKeys: function (keys) {\n          var that = this;\n          var result = [];\n          var dataController = that._dataController;\n          keys.forEach(function (key) {\n            var node = dataController.getNodeByKey(key);\n            node && !node.hasChildren && result.push(key);\n          });\n          return result;\n        },\n        isRecursiveSelection: function () {\n          var selectionMode = this.option(\"selection.mode\");\n          var isRecursive = this.option(\"selection.recursive\");\n          return \"multiple\" === selectionMode && isRecursive;\n        },\n        updateSelectionState: function (options) {\n          var removedItemKeys = options.removedItemKeys || [];\n          var selectedItemKeys = options.selectedItemKeys || [];\n\n          this._updateSelectionStateCore(removedItemKeys, false);\n\n          this._updateSelectionStateCore(selectedItemKeys, true);\n        },\n        isRowSelected: function (key) {\n          var result = this.callBase.apply(this, arguments);\n          var isRecursiveSelection = this.isRecursiveSelection();\n\n          if (!result && isRecursiveSelection) {\n            if (key in this._selectionStateByKey) {\n              return this._selectionStateByKey[key];\n            }\n\n            return false;\n          }\n\n          return result;\n        },\n        getSelectedRowKeys: function (mode) {\n          var that = this;\n\n          if (!that._dataController) {\n            return [];\n          }\n\n          var selectedRowKeys = that.callBase.apply(that, arguments);\n\n          if (mode) {\n            if (this.isRecursiveSelection()) {\n              selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys);\n            }\n\n            if (\"all\" !== mode) {\n              if (\"excludeRecursive\" === mode) {\n                selectedRowKeys = that._getParentSelectedRowKeys(selectedRowKeys);\n              } else {\n                if (that._isModeLeavesOnly(mode)) {\n                  selectedRowKeys = that._getLeafSelectedRowKeys(selectedRowKeys);\n                }\n              }\n            }\n          }\n\n          return selectedRowKeys;\n        },\n        getSelectedRowsData: function (mode) {\n          var that = this;\n          var dataController = that._dataController;\n          var selectedKeys = this.getSelectedRowKeys(mode) || [];\n          var selectedRowsData = [];\n          selectedKeys.forEach(function (key) {\n            var node = dataController.getNodeByKey(key);\n            node && selectedRowsData.push(node.data);\n          });\n          return selectedRowsData;\n        },\n        refresh: function () {\n          this._selectionStateByKey = {};\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var renderingTemplate = this.callBase(template, options);\n\n          var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();\n\n          if (renderingTemplate && \"header\" === options.rowType && options.column.index === firstDataColumnIndex) {\n            resultTemplate = {\n              render: function (options) {\n                if (\"multiple\" === that.option(\"selection.mode\")) {\n                  that.renderSelectAll(options.container, options.model);\n                }\n\n                renderingTemplate.render(options);\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n\n          return resultTemplate;\n        },\n        renderSelectAll: function ($cell, options) {\n          $cell.addClass(TREELIST_SELECT_ALL_CLASS);\n\n          this._renderSelectAllCheckBox($cell);\n        },\n        _isSortableElement: function ($target) {\n          return this.callBase($target) && !$target.closest(\".\" + SELECT_CHECKBOX_CLASS).length;\n        }\n      },\n      rowsView: {\n        _renderIcons: function ($iconContainer, options) {\n          this.callBase.apply(this, arguments);\n\n          if (\"multiple\" === this.option(\"selection.mode\")) {\n            this.getController(\"selection\").renderSelectCheckBoxContainer($iconContainer, options);\n          }\n\n          return $iconContainer;\n        },\n        _rowClick: function (e) {\n          var $targetElement = (0, _renderer.default)(e.event.target);\n\n          if (this.isExpandIcon($targetElement)) {\n            this.callBase.apply(this, arguments);\n          } else {\n            originalRowClick.apply(this, arguments);\n          }\n        }\n      }\n    }\n  }\n}));","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/tree_list/ui.tree_list.selection.js"],"names":["_renderer","_interopRequireDefault","require","_uiTree_list","_common","_uiGrid_core","_extend","_type","obj","__esModule","TREELIST_SELECT_ALL_CLASS","CELL_FOCUS_DISABLED_CLASS","SELECT_CHECKBOX_CLASS","originalRowClick","default","extenders","views","rowsView","_rowClick","originalHandleDataChanged","controllers","data","_handleDataChanged","nodeExists","array","currentKey","filter","key","length","registerModule","extend","defaultOptions","selection","showCheckBoxesMode","recursive","e","selectionController","getController","isRecursiveSelection","changeType","updateSelectionState","selectedItemKeys","option","apply","arguments","loadDescendants","that","d","callBase","done","init","_selectionStateByKey","_getSelectionConfig","_arguments","_this","config","plainItems","all","_dataController","getCachedStoreData","map","item","isItemSelected","keyOf","isRowSelected","isSelectableItem","getItemData","renderSelectCheckBoxContainer","$container","model","component","getView","addClass","$checkbox","_renderSelectCheckBox","value","row","isSelected","column","_attachCheckBoxClickEvent","_updateSelectColumn","noop","_getSelectAllNodeKeys","root","getRootNode","cache","keys","foreachNodes","children","node","visible","push","isRowExpanded","isSelectAll","visibleKeys","selectedVisibleKeys","hasIndeterminateState","some","selectAll","selectRows","deselectAll","deselectRows","preserve","isDeselect","selectedRowKeys","normalizedArgs","_normalizeSelectionArgs","isDefined","equalByValue","_isSelectionNormalizing","always","items","selectedRowsData","_fireSelectionChanged","changeItemSelection","itemIndex","keyboardKeys","shift","getKeyByRowIndex","_updateParentSelectionState","state","parentNode","parent","hasSelectedState","childNode","index","hasNonSelectedState","level","_updateChildrenSelectionState","forEach","_updateSelectionStateCore","dataController","i","getNodeByKey","_getSelectedParentKeys","useCash","selectedParentNode","result","unshift","indexOf","concat","_getSelectedChildKeys","keysToIgnore","childKeys","ignoreKeyIndex","_normalizeParentKeys","args","parentNodeKeys","splice","_normalizeChildrenKeys","_normalizeSelectedRowKeysCore","isSelect","currentSelectedRowKeys","currentDeselectedRowKeys","Array","isArray","slice","_updateSelectedItems","_isModeLeavesOnly","mode","_getAllSelectedRowKeys","parentKeys","insertIndex","getChildNodeKeys","_getParentSelectedRowKeys","_getLeafSelectedRowKeys","hasChildren","selectionMode","isRecursive","options","removedItemKeys","getSelectedRowKeys","getSelectedRowsData","selectedKeys","refresh","columnHeadersView","_processTemplate","template","resultTemplate","renderingTemplate","firstDataColumnIndex","_columnsController","getFirstDataColumnIndex","rowType","render","renderSelectAll","container","$cell","_renderSelectAllCheckBox","_isSortableElement","$target","closest","_renderIcons","$iconContainer","$targetElement","event","target","isExpandIcon"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/tree_list/ui.tree_list.selection.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _uiTree_list = _interopRequireDefault(require(\"./ui.tree_list.core\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _uiGrid_core = _interopRequireDefault(require(\"../grid_core/ui.grid_core.selection\"));\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _type = require(\"../../core/utils/type\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar TREELIST_SELECT_ALL_CLASS = \"dx-treelist-select-all\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar originalRowClick = _uiGrid_core.default.extenders.views.rowsView._rowClick;\r\nvar originalHandleDataChanged = _uiGrid_core.default.extenders.controllers.data._handleDataChanged;\r\nvar nodeExists = function(array, currentKey) {\r\n    return !!array.filter(function(key) {\r\n        return key === currentKey\r\n    }).length\r\n};\r\n_uiTree_list.default.registerModule(\"selection\", (0, _extend.extend)(true, {}, _uiGrid_core.default, {\r\n    defaultOptions: function() {\r\n        return (0, _extend.extend)(true, _uiGrid_core.default.defaultOptions(), {\r\n            selection: {\r\n                showCheckBoxesMode: \"always\",\r\n                recursive: false\r\n            }\r\n        })\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                _handleDataChanged: function(e) {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isRecursiveSelection = selectionController.isRecursiveSelection();\r\n                    if (isRecursiveSelection && (!e || \"updateSelectionState\" !== e.changeType)) {\r\n                        selectionController.updateSelectionState({\r\n                            selectedItemKeys: this.option(\"selectedRowKeys\")\r\n                        })\r\n                    }\r\n                    originalHandleDataChanged.apply(this, arguments)\r\n                },\r\n                loadDescendants: function() {\r\n                    var that = this;\r\n                    var d = that.callBase.apply(that, arguments);\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var isRecursiveSelection = selectionController.isRecursiveSelection();\r\n                    if (isRecursiveSelection) {\r\n                        d.done(function() {\r\n                            selectionController.updateSelectionState({\r\n                                selectedItemKeys: that.option(\"selectedRowKeys\")\r\n                            })\r\n                        })\r\n                    }\r\n                    return d\r\n                }\r\n            },\r\n            selection: {\r\n                init: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._selectionStateByKey = {}\r\n                },\r\n                _getSelectionConfig: function() {\r\n                    var _arguments = arguments,\r\n                        _this = this;\r\n                    var config = this.callBase.apply(this, arguments);\r\n                    var plainItems = config.plainItems;\r\n                    config.plainItems = function(all) {\r\n                        if (all) {\r\n                            return _this._dataController.getCachedStoreData() || []\r\n                        }\r\n                        return plainItems.apply(_this, _arguments).map(function(item) {\r\n                            return item.data\r\n                        })\r\n                    };\r\n                    config.isItemSelected = function(item) {\r\n                        var key = _this._dataController.keyOf(item);\r\n                        return _this.isRowSelected(key)\r\n                    };\r\n                    config.isSelectableItem = function() {\r\n                        return true\r\n                    };\r\n                    config.getItemData = function(item) {\r\n                        return item\r\n                    };\r\n                    return config\r\n                },\r\n                renderSelectCheckBoxContainer: function($container, model) {\r\n                    var that = this;\r\n                    var rowsView = that.component.getView(\"rowsView\");\r\n                    $container.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                    var $checkbox = rowsView._renderSelectCheckBox($container, {\r\n                        value: model.row.isSelected,\r\n                        row: model.row,\r\n                        column: model.column\r\n                    });\r\n                    rowsView._attachCheckBoxClickEvent($checkbox)\r\n                },\r\n                _updateSelectColumn: _common.noop,\r\n                _getSelectAllNodeKeys: function() {\r\n                    var component = this.component;\r\n                    var root = component.getRootNode();\r\n                    var cache = {};\r\n                    var keys = [];\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    root && _uiTree_list.default.foreachNodes(root.children, function(node) {\r\n                        if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {\r\n                            keys.push(node.key)\r\n                        }\r\n                        if (!node.visible) {\r\n                            return true\r\n                        }\r\n                        return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache)\r\n                    });\r\n                    return keys\r\n                },\r\n                isSelectAll: function() {\r\n                    var component = this.component;\r\n                    var visibleKeys = this._getSelectAllNodeKeys();\r\n                    var selectedVisibleKeys = visibleKeys.filter(function(key) {\r\n                        return component.isRowSelected(key)\r\n                    });\r\n                    if (!selectedVisibleKeys.length) {\r\n                        var hasIndeterminateState = visibleKeys.some(function(key) {\r\n                            return void 0 === component.isRowSelected(key)\r\n                        });\r\n                        return hasIndeterminateState ? void 0 : false\r\n                    } else {\r\n                        if (selectedVisibleKeys.length === visibleKeys.length) {\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                selectAll: function() {\r\n                    var that = this;\r\n                    var visibleKeys = that._getSelectAllNodeKeys().filter(function(key) {\r\n                        return !that.isRowSelected(key)\r\n                    });\r\n                    return that.selectRows(visibleKeys, true)\r\n                },\r\n                deselectAll: function() {\r\n                    var visibleKeys = this._getSelectAllNodeKeys();\r\n                    return this.deselectRows(visibleKeys)\r\n                },\r\n                selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n                    var that = this;\r\n                    var selectedRowKeys = that.option(\"selectedRowKeys\");\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({\r\n                        keys: (0, _type.isDefined)(value) ? value : []\r\n                    }, !isDeselect);\r\n                    if (normalizedArgs && !(0, _common.equalByValue)(normalizedArgs.selectedRowKeys, selectedRowKeys)) {\r\n                        that._isSelectionNormalizing = true;\r\n                        return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always(function() {\r\n                            that._isSelectionNormalizing = false\r\n                        }).done(function(items) {\r\n                            normalizedArgs.selectedRowsData = items;\r\n                            that._fireSelectionChanged(normalizedArgs)\r\n                        })\r\n                    }\r\n                    return this.callBase(value, preserve, isDeselect, isSelectAll)\r\n                },\r\n                changeItemSelection: function(itemIndex, keyboardKeys) {\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    if (isRecursiveSelection && !keyboardKeys.shift) {\r\n                        var key = this._dataController.getKeyByRowIndex(itemIndex);\r\n                        return this.selectedItemKeys(key, true, this.isRowSelected(key))\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateParentSelectionState: function(node, isSelected) {\r\n                    var that = this;\r\n                    var state = isSelected;\r\n                    var parentNode = node.parent;\r\n                    if (parentNode) {\r\n                        if (parentNode.children.length > 1) {\r\n                            if (false === isSelected) {\r\n                                var hasSelectedState = parentNode.children.some(function(childNode, index, children) {\r\n                                    return that._selectionStateByKey[childNode.key]\r\n                                });\r\n                                state = hasSelectedState ? void 0 : false\r\n                            } else {\r\n                                if (true === isSelected) {\r\n                                    var hasNonSelectedState = parentNode.children.some(function(childNode) {\r\n                                        return !that._selectionStateByKey[childNode.key]\r\n                                    });\r\n                                    state = hasNonSelectedState ? void 0 : true\r\n                                }\r\n                            }\r\n                        }\r\n                        this._selectionStateByKey[parentNode.key] = state;\r\n                        if (parentNode.parent && parentNode.parent.level >= 0) {\r\n                            this._updateParentSelectionState(parentNode, state)\r\n                        }\r\n                    }\r\n                },\r\n                _updateChildrenSelectionState: function(node, isSelected) {\r\n                    var that = this;\r\n                    var children = node.children;\r\n                    children && children.forEach(function(childNode) {\r\n                        that._selectionStateByKey[childNode.key] = isSelected;\r\n                        if (childNode.children.length > 0) {\r\n                            that._updateChildrenSelectionState(childNode, isSelected)\r\n                        }\r\n                    })\r\n                },\r\n                _updateSelectionStateCore: function(keys, isSelected) {\r\n                    var dataController = this._dataController;\r\n                    for (var i = 0; i < keys.length; i++) {\r\n                        this._selectionStateByKey[keys[i]] = isSelected;\r\n                        var node = dataController.getNodeByKey(keys[i]);\r\n                        if (node) {\r\n                            this._updateParentSelectionState(node, isSelected);\r\n                            this._updateChildrenSelectionState(node, isSelected)\r\n                        }\r\n                    }\r\n                },\r\n                _getSelectedParentKeys: function(key, selectedItemKeys, useCash) {\r\n                    var selectedParentNode;\r\n                    var node = this._dataController.getNodeByKey(key);\r\n                    var parentNode = node && node.parent;\r\n                    var result = [];\r\n                    while (parentNode && parentNode.level >= 0) {\r\n                        result.unshift(parentNode.key);\r\n                        var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;\r\n                        if (isSelected) {\r\n                            selectedParentNode = parentNode;\r\n                            result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);\r\n                            break\r\n                        } else {\r\n                            if (useCash) {\r\n                                break\r\n                            }\r\n                        }\r\n                        parentNode = parentNode.parent\r\n                    }\r\n                    return selectedParentNode && result || []\r\n                },\r\n                _getSelectedChildKeys: function(node, keysToIgnore) {\r\n                    var that = this;\r\n                    var childKeys = [];\r\n                    node && _uiTree_list.default.foreachNodes(node.children, function(childNode) {\r\n                        var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);\r\n                        if (ignoreKeyIndex < 0) {\r\n                            childKeys.push(childNode.key)\r\n                        }\r\n                        return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === that._selectionStateByKey[childNode.key]\r\n                    });\r\n                    return childKeys\r\n                },\r\n                _normalizeParentKeys: function(key, args) {\r\n                    var that = this;\r\n                    var keysToIgnore = [key];\r\n                    var parentNodeKeys = that._getSelectedParentKeys(key, args.selectedRowKeys);\r\n                    if (parentNodeKeys.length) {\r\n                        keysToIgnore = keysToIgnore.concat(parentNodeKeys);\r\n                        keysToIgnore.forEach(function(key) {\r\n                            var index = args.selectedRowKeys.indexOf(key);\r\n                            if (index >= 0) {\r\n                                args.selectedRowKeys.splice(index, 1)\r\n                            }\r\n                        });\r\n                        var parentNode = that._dataController.getNodeByKey(parentNodeKeys[0]);\r\n                        var childKeys = that._getSelectedChildKeys(parentNode, keysToIgnore);\r\n                        args.selectedRowKeys = args.selectedRowKeys.concat(childKeys)\r\n                    }\r\n                },\r\n                _normalizeChildrenKeys: function(key, args) {\r\n                    var that = this;\r\n                    var node = that._dataController.getNodeByKey(key);\r\n                    node && node.children.forEach(function(childNode) {\r\n                        var index = args.selectedRowKeys.indexOf(childNode.key);\r\n                        if (index >= 0) {\r\n                            args.selectedRowKeys.splice(index, 1)\r\n                        }\r\n                        that._normalizeChildrenKeys(childNode.key, args)\r\n                    })\r\n                },\r\n                _normalizeSelectedRowKeysCore: function(keys, args, isSelect) {\r\n                    var that = this;\r\n                    keys.forEach(function(key) {\r\n                        if (that.isRowSelected(key) === isSelect) {\r\n                            return\r\n                        }\r\n                        that._normalizeChildrenKeys(key, args);\r\n                        var index = args.selectedRowKeys.indexOf(key);\r\n                        if (isSelect) {\r\n                            if (index < 0) {\r\n                                args.selectedRowKeys.push(key)\r\n                            }\r\n                            args.currentSelectedRowKeys.push(key)\r\n                        } else {\r\n                            if (index >= 0) {\r\n                                args.selectedRowKeys.splice(index, 1)\r\n                            }\r\n                            args.currentDeselectedRowKeys.push(key);\r\n                            that._normalizeParentKeys(key, args)\r\n                        }\r\n                    })\r\n                },\r\n                _normalizeSelectionArgs: function(args, isSelect) {\r\n                    var result;\r\n                    var keys = Array.isArray(args.keys) ? args.keys : [args.keys];\r\n                    var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n                    if (keys.length) {\r\n                        result = {\r\n                            currentSelectedRowKeys: [],\r\n                            currentDeselectedRowKeys: [],\r\n                            selectedRowKeys: selectedRowKeys.slice(0)\r\n                        };\r\n                        this._normalizeSelectedRowKeysCore(keys, result, isSelect)\r\n                    }\r\n                    return result\r\n                },\r\n                _updateSelectedItems: function(args) {\r\n                    this.updateSelectionState(args);\r\n                    this.callBase(args)\r\n                },\r\n                _fireSelectionChanged: function() {\r\n                    if (!this._isSelectionNormalizing) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isModeLeavesOnly: function(mode) {\r\n                    return \"leavesOnly\" === mode\r\n                },\r\n                _getAllSelectedRowKeys: function(parentKeys) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    parentKeys.forEach(function(key) {\r\n                        var insertIndex = result.length;\r\n                        var parentKeys = that._getSelectedParentKeys(key, result, true);\r\n                        var childKeys = that._dataController.getChildNodeKeys(key);\r\n                        result.splice.apply(result, [insertIndex, 0].concat(parentKeys));\r\n                        result.push(key);\r\n                        result = result.concat(childKeys)\r\n                    });\r\n                    return result\r\n                },\r\n                _getParentSelectedRowKeys: function(keys) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    keys.forEach(function(key) {\r\n                        var parentKeys = that._getSelectedParentKeys(key, keys);\r\n                        !parentKeys.length && result.push(key)\r\n                    });\r\n                    return result\r\n                },\r\n                _getLeafSelectedRowKeys: function(keys) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var dataController = that._dataController;\r\n                    keys.forEach(function(key) {\r\n                        var node = dataController.getNodeByKey(key);\r\n                        node && !node.hasChildren && result.push(key)\r\n                    });\r\n                    return result\r\n                },\r\n                isRecursiveSelection: function() {\r\n                    var selectionMode = this.option(\"selection.mode\");\r\n                    var isRecursive = this.option(\"selection.recursive\");\r\n                    return \"multiple\" === selectionMode && isRecursive\r\n                },\r\n                updateSelectionState: function(options) {\r\n                    var removedItemKeys = options.removedItemKeys || [];\r\n                    var selectedItemKeys = options.selectedItemKeys || [];\r\n                    this._updateSelectionStateCore(removedItemKeys, false);\r\n                    this._updateSelectionStateCore(selectedItemKeys, true)\r\n                },\r\n                isRowSelected: function(key) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    if (!result && isRecursiveSelection) {\r\n                        if (key in this._selectionStateByKey) {\r\n                            return this._selectionStateByKey[key]\r\n                        }\r\n                        return false\r\n                    }\r\n                    return result\r\n                },\r\n                getSelectedRowKeys: function(mode) {\r\n                    var that = this;\r\n                    if (!that._dataController) {\r\n                        return []\r\n                    }\r\n                    var selectedRowKeys = that.callBase.apply(that, arguments);\r\n                    if (mode) {\r\n                        if (this.isRecursiveSelection()) {\r\n                            selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys)\r\n                        }\r\n                        if (\"all\" !== mode) {\r\n                            if (\"excludeRecursive\" === mode) {\r\n                                selectedRowKeys = that._getParentSelectedRowKeys(selectedRowKeys)\r\n                            } else {\r\n                                if (that._isModeLeavesOnly(mode)) {\r\n                                    selectedRowKeys = that._getLeafSelectedRowKeys(selectedRowKeys)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return selectedRowKeys\r\n                },\r\n                getSelectedRowsData: function(mode) {\r\n                    var that = this;\r\n                    var dataController = that._dataController;\r\n                    var selectedKeys = this.getSelectedRowKeys(mode) || [];\r\n                    var selectedRowsData = [];\r\n                    selectedKeys.forEach(function(key) {\r\n                        var node = dataController.getNodeByKey(key);\r\n                        node && selectedRowsData.push(node.data)\r\n                    });\r\n                    return selectedRowsData\r\n                },\r\n                refresh: function() {\r\n                    this._selectionStateByKey = {};\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                _processTemplate: function(template, options) {\r\n                    var that = this;\r\n                    var resultTemplate;\r\n                    var renderingTemplate = this.callBase(template, options);\r\n                    var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();\r\n                    if (renderingTemplate && \"header\" === options.rowType && options.column.index === firstDataColumnIndex) {\r\n                        resultTemplate = {\r\n                            render: function(options) {\r\n                                if (\"multiple\" === that.option(\"selection.mode\")) {\r\n                                    that.renderSelectAll(options.container, options.model)\r\n                                }\r\n                                renderingTemplate.render(options)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        resultTemplate = renderingTemplate\r\n                    }\r\n                    return resultTemplate\r\n                },\r\n                renderSelectAll: function($cell, options) {\r\n                    $cell.addClass(TREELIST_SELECT_ALL_CLASS);\r\n                    this._renderSelectAllCheckBox($cell)\r\n                },\r\n                _isSortableElement: function($target) {\r\n                    return this.callBase($target) && !$target.closest(\".\" + SELECT_CHECKBOX_CLASS).length\r\n                }\r\n            },\r\n            rowsView: {\r\n                _renderIcons: function($iconContainer, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"multiple\" === this.option(\"selection.mode\")) {\r\n                        this.getController(\"selection\").renderSelectCheckBoxContainer($iconContainer, options)\r\n                    }\r\n                    return $iconContainer\r\n                },\r\n                _rowClick: function(e) {\r\n                    var $targetElement = (0, _renderer.default)(e.event.target);\r\n                    if (this.isExpandIcon($targetElement)) {\r\n                        this.callBase.apply(this, arguments)\r\n                    } else {\r\n                        originalRowClick.apply(this, arguments)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}