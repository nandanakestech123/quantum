{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\quantumCode20082022\\\\src\\\\component\\\\Admin\\\\Cart\\\\cart\\\\paymentgate.js\";\nimport React, { useState } from \"react\";\nimport { useStripe, useElements, CardNumberElement, CardExpiryElement, CardCvcElement } from \"@stripe/react-stripe-js\";\nimport { stripePaymentMethodHandler } from \"./server\";\nimport { Toast } from \"service/toast\";\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      lineHeight: \"27px\",\n      color: \"#212529\",\n      fontSize: \"1.1rem\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\nconst API_ENDPOINT = \"http://103.253.15.184:8107/api/stripecustomercreate\";\nconst API_ENDPOINT1 = \"http://103.253.15.184:8107/api/stripepaymentintentcreate\";\nexport function Paymentcheckout(props) {\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [paymentid, setpaymentId] = useState(null);\n  const [customer_id, setcustomer_id] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  let customercreate;\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    console.log(props.cust_id, props.cust_stripeid);\n\n    if (props.cust_stripeid == null) {\n      customercreate = await stripecustomer({\n        cust_noid: props.cust_id\n      });\n      setcustomer_id(customercreate.customer_id);\n      console.log(customercreate.customer_id);\n\n      if (customercreate.status !== 200) {\n        Toast({\n          type: \"error\",\n          message: customercreate.message\n        });\n      } else {\n        const paymentintentcreate = await stripepaymentintentcreate({\n          customerId: props.cust_stripeid == null ? customercreate.customer_id : props.cust_stripeid,\n          amount: props.amount * 100,\n          currency: \"sgd\"\n        });\n\n        if (paymentintentcreate.status !== 200) {\n          Toast({\n            type: \"error\",\n            message: paymentintentcreate.message\n          });\n        } else {\n          setpaymentId(paymentintentcreate.result.id);\n          console.log(paymentintentcreate);\n          setLoading(true);\n          setErrorMsg(\"\");\n          const paymentMethodObj = {\n            type: \"card\",\n            card: elements.getElement(CardNumberElement),\n            billing_details: {\n              name,\n              email\n            }\n          };\n          console.log(paymentMethodObj);\n          const paymentMethodResult = await stripe.createPaymentMethod(paymentMethodObj);\n          stripePaymentMethodHandler({\n            result: paymentMethodResult,\n            amount: props.amount,\n            cartid: props.cartId,\n            id: paymentintentcreate.result.id,\n            cust_id: props.cust_id,\n            cust_stripeid: paymentintentcreate.result.customer\n          }, handleResponse);\n        }\n      }\n    } else {\n      const paymentintentcreate = await stripepaymentintentcreate({\n        customerId: props.cust_stripeid == null ? customer_id : props.cust_stripeid,\n        amount: props.amount * 100,\n        currency: \"sgd\"\n      });\n      setpaymentId(paymentintentcreate.result.id);\n      console.log(paymentintentcreate);\n      setLoading(true);\n      setErrorMsg(\"\");\n      const paymentMethodObj = {\n        type: \"card\",\n        card: elements.getElement(CardNumberElement),\n        billing_details: {\n          name,\n          email\n        }\n      };\n      console.log(paymentMethodObj);\n      const paymentMethodResult = await stripe.createPaymentMethod(paymentMethodObj);\n\n      if (paymentintentcreate.status == 200) {\n        stripePaymentMethodHandler({\n          result: paymentMethodResult,\n          amount: props.amount,\n          cartid: props.cartId,\n          id: paymentintentcreate.result.id,\n          cust_id: props.cust_id,\n          cust_stripeid: props.cust_stripeid\n        }, handleResponse);\n      } else {\n        Toast({\n          type: \"error\",\n          message: paymentintentcreate.message\n        });\n      }\n    }\n  }; // callback method to handle the response\n\n\n  const handleResponse = response => {\n    console.log(\"Successfulll\", response);\n    setLoading(false);\n\n    if (response.error) {\n      setErrorMsg(response.error.message);\n      return;\n    }\n\n    props.parentCallback(response.error ? null : true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"d-flex justify-content-between align-items-center mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Pay with card\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cc-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, \"Customer Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cc-name\",\n    type: \"text\",\n    className: \"form-control\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cc-email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cc-email\",\n    type: \"text\",\n    className: \"form-control\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cc-number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  }, \"Card Number\"), /*#__PURE__*/React.createElement(CardNumberElement, {\n    id: \"cc-number\",\n    className: \"form-control\",\n    options: CARD_ELEMENT_OPTIONS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"expiry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, \"Expiration Date\"), /*#__PURE__*/React.createElement(CardExpiryElement, {\n    id: \"expiry\",\n    className: \"form-control\",\n    options: CARD_ELEMENT_OPTIONS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cvc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, \"CVC\"), /*#__PURE__*/React.createElement(CardCvcElement, {\n    id: \"cvc\",\n    className: \"form-control\",\n    options: CARD_ELEMENT_OPTIONS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-dark w-100\",\n    type: \"submit\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner-border spinner-border-sm text-light\",\n    role: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }) : `PAY ₹${props.amount}`), errorMsg && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-danger mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 24\n    }\n  }, errorMsg))));\n} // place backend API call for payment\n\nconst stripecustomer = async data => {\n  let token_id = localStorage.getItem(\"AuthToken\");\n  console.log(token_id);\n  const res = await fetch(`${API_ENDPOINT}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"token\" + \" \" + token_id\n    },\n    body: JSON.stringify(data)\n  });\n  return await res.json();\n}; // place backend API call for payment\n\n\nconst stripepaymentintentcreate = async data => {\n  let token_id = localStorage.getItem(\"AuthToken\");\n  console.log(token_id);\n  const res = await fetch(`${API_ENDPOINT1}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"token\" + \" \" + token_id\n    },\n    body: JSON.stringify(data)\n  });\n  return await res.json();\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/component/Admin/Cart/cart/paymentgate.js"],"names":["React","useState","useStripe","useElements","CardNumberElement","CardExpiryElement","CardCvcElement","stripePaymentMethodHandler","Toast","CARD_ELEMENT_OPTIONS","style","base","lineHeight","color","fontSize","invalid","iconColor","API_ENDPOINT","API_ENDPOINT1","Paymentcheckout","props","loading","setLoading","errorMsg","setErrorMsg","paymentid","setpaymentId","customer_id","setcustomer_id","name","setName","email","setEmail","customercreate","stripe","elements","handleSubmit","event","preventDefault","console","log","cust_id","cust_stripeid","stripecustomer","cust_noid","status","type","message","paymentintentcreate","stripepaymentintentcreate","customerId","amount","currency","result","id","paymentMethodObj","card","getElement","billing_details","paymentMethodResult","createPaymentMethod","cartid","cartId","customer","handleResponse","response","error","parentCallback","e","target","value","data","token_id","localStorage","getItem","res","fetch","method","headers","Authorization","body","JSON","stringify","json"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  useStripe,\r\n  useElements,\r\n  CardNumberElement,\r\n  CardExpiryElement,\r\n  CardCvcElement,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { stripePaymentMethodHandler } from \"./server\";\r\nimport { Toast } from \"service/toast\";\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      lineHeight: \"27px\",\r\n      color: \"#212529\",\r\n      fontSize: \"1.1rem\",\r\n      \"::placeholder\": {\r\n        color: \"#aab7c4\",\r\n      },\r\n    },\r\n    invalid: {\r\n      color: \"#fa755a\",\r\n      iconColor: \"#fa755a\",\r\n    },\r\n  },\r\n};\r\nconst API_ENDPOINT = \"http://103.253.15.184:8107/api/stripecustomercreate\";\r\nconst API_ENDPOINT1 =\r\n  \"http://103.253.15.184:8107/api/stripepaymentintentcreate\";\r\nexport function Paymentcheckout(props) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  const [paymentid, setpaymentId] = useState(null);\r\n  const [customer_id, setcustomer_id] = useState(null);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  let customercreate;\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n    console.log(props.cust_id, props.cust_stripeid);\r\n\r\n    if (props.cust_stripeid == null) {\r\n      customercreate = await stripecustomer({\r\n        cust_noid: props.cust_id,\r\n      });\r\n      setcustomer_id(customercreate.customer_id);\r\n      console.log(customercreate.customer_id);\r\n      if (customercreate.status !== 200) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: customercreate.message,\r\n        });\r\n      } else {\r\n        const paymentintentcreate = await stripepaymentintentcreate({\r\n          customerId:\r\n            props.cust_stripeid == null\r\n              ? customercreate.customer_id\r\n              : props.cust_stripeid,\r\n          amount: props.amount * 100,\r\n          currency: \"sgd\",\r\n        });\r\n        if (paymentintentcreate.status !== 200) {\r\n          Toast({\r\n            type: \"error\",\r\n            message: paymentintentcreate.message,\r\n          });\r\n        } else {\r\n          setpaymentId(paymentintentcreate.result.id);\r\n          console.log(paymentintentcreate);\r\n\r\n          setLoading(true);\r\n          setErrorMsg(\"\");\r\n\r\n          const paymentMethodObj = {\r\n            type: \"card\",\r\n            card: elements.getElement(CardNumberElement),\r\n            billing_details: {\r\n              name,\r\n              email,\r\n            },\r\n          };\r\n          console.log(paymentMethodObj);\r\n          const paymentMethodResult = await stripe.createPaymentMethod(\r\n            paymentMethodObj\r\n          );\r\n\r\n          stripePaymentMethodHandler(\r\n            {\r\n              result: paymentMethodResult,\r\n              amount: props.amount,\r\n              cartid: props.cartId,\r\n              id: paymentintentcreate.result.id,\r\n              cust_id: props.cust_id,\r\n              cust_stripeid: paymentintentcreate.result.customer,\r\n            },\r\n\r\n            handleResponse\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      const paymentintentcreate = await stripepaymentintentcreate({\r\n        customerId:\r\n          props.cust_stripeid == null ? customer_id : props.cust_stripeid,\r\n        amount: props.amount * 100,\r\n        currency: \"sgd\",\r\n      });\r\n      setpaymentId(paymentintentcreate.result.id);\r\n      console.log(paymentintentcreate);\r\n\r\n      setLoading(true);\r\n      setErrorMsg(\"\");\r\n\r\n      const paymentMethodObj = {\r\n        type: \"card\",\r\n        card: elements.getElement(CardNumberElement),\r\n        billing_details: {\r\n          name,\r\n          email,\r\n        },\r\n      };\r\n      console.log(paymentMethodObj);\r\n      const paymentMethodResult = await stripe.createPaymentMethod(\r\n        paymentMethodObj\r\n      );\r\n      if (paymentintentcreate.status == 200) {\r\n        stripePaymentMethodHandler(\r\n          {\r\n            result: paymentMethodResult,\r\n            amount: props.amount,\r\n            cartid: props.cartId,\r\n            id: paymentintentcreate.result.id,\r\n            cust_id: props.cust_id,\r\n            cust_stripeid: props.cust_stripeid,\r\n          },\r\n\r\n          handleResponse\r\n        );\r\n      } else {\r\n        Toast({\r\n          type: \"error\",\r\n          message: paymentintentcreate.message,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  // callback method to handle the response\r\n  const handleResponse = (response) => {\r\n    console.log(\"Successfulll\", response);\r\n    setLoading(false);\r\n    if (response.error) {\r\n      setErrorMsg(response.error.message);\r\n      return;\r\n    }\r\n    props.parentCallback(response.error ? null : true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <React.Fragment>\r\n        <h4 className=\"d-flex justify-content-between align-items-center mb-3\">\r\n          <span className=\"text-muted\">Pay with card</span>\r\n        </h4>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 mb-3\">\r\n              <label htmlFor=\"cc-name\">Customer Name</label>\r\n              <input\r\n                id=\"cc-name\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6 mb-3\">\r\n              <label htmlFor=\"cc-email\">Email</label>\r\n              <input\r\n                id=\"cc-email\"\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12 mb-3\">\r\n              <label htmlFor=\"cc-number\">Card Number</label>\r\n              <CardNumberElement\r\n                id=\"cc-number\"\r\n                className=\"form-control\"\r\n                options={CARD_ELEMENT_OPTIONS}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 mb-3\">\r\n              <label htmlFor=\"expiry\">Expiration Date</label>\r\n              <CardExpiryElement\r\n                id=\"expiry\"\r\n                className=\"form-control\"\r\n                options={CARD_ELEMENT_OPTIONS}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6 mb-3\">\r\n              <label htmlFor=\"cvc\">CVC</label>\r\n              <CardCvcElement\r\n                id=\"cvc\"\r\n                className=\"form-control\"\r\n                options={CARD_ELEMENT_OPTIONS}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <hr className=\"mb-4\" />\r\n          <button\r\n            className=\"btn btn-dark w-100\"\r\n            type=\"submit\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? (\r\n              <div\r\n                className=\"spinner-border spinner-border-sm text-light\"\r\n                role=\"status\"\r\n              ></div>\r\n            ) : (\r\n              `PAY ₹${props.amount}`\r\n            )}\r\n          </button>\r\n          {errorMsg && <div className=\"text-danger mt-2\">{errorMsg}</div>}\r\n        </form>\r\n      </React.Fragment>\r\n    </>\r\n  );\r\n}\r\n\r\n// place backend API call for payment\r\nconst stripecustomer = async (data) => {\r\n  let token_id = localStorage.getItem(\"AuthToken\");\r\n  console.log(token_id);\r\n  const res = await fetch(`${API_ENDPOINT}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"token\" + \" \" + token_id,\r\n    },\r\n\r\n    body: JSON.stringify(data),\r\n  });\r\n  return await res.json();\r\n};\r\n\r\n// place backend API call for payment\r\nconst stripepaymentintentcreate = async (data) => {\r\n  let token_id = localStorage.getItem(\"AuthToken\");\r\n  console.log(token_id);\r\n  const res = await fetch(`${API_ENDPOINT1}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"token\" + \" \" + token_id,\r\n    },\r\n\r\n    body: JSON.stringify(data),\r\n  });\r\n  return await res.json();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}