{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\Admin\\\\TCM\\\\TCMCustomerList\\\\index.js\";\nimport React from \"react\";\nimport { NormalButton, NormalSelect, TableWrapper } from \"component/common\";\nimport { getTcmApi, tcmCreateApi } from \"redux/actions/TCM\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport _ from \"lodash\";\nimport { withTranslation } from \"react-i18next\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport { PDFViewer, PDFDownloadLink, BlobProvider } from \"@react-pdf/renderer\";\nimport Receipt from \"../Report/Receipt\";\nexport class TCMCustomerListClass extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      headerDetails: [{\n        label: \"Customer Code\"\n      }, {\n        label: \"Customer Name\"\n      }, {\n        label: \"Contact\"\n      }, {\n        label: \"Gender\"\n      }, {\n        label: \"Appointment Timing\"\n      }, {\n        label: \"Location\"\n      }, {\n        label: \"Physician\"\n      }, {\n        label: \"Status\"\n      }, {\n        label: \"\"\n      }],\n      tcmCustomerList: [],\n      pageMeta: {},\n      active: false,\n      currentIndex: -1,\n      isPrintPdfClick: false,\n      accountHeader: {},\n      tcmPrescriptionMain: []\n    };\n\n    this.queryHandler = data => {\n      let payload = {\n        siteCode: this.props.tokenDetails.site_code,\n        date: dateFormat(new Date(), \"yyyy-mm-dd\")\n      };\n      this.props.tcmCreateApi(`tcmCustomerListFronDesk/`, payload).then(res => {\n        console.log(res, \"dsfdfaafg\");\n        let {\n          result,\n          success\n        } = res;\n        let {\n          tcmCustomerList\n        } = this.state;\n\n        if (success == \"1\" && result) {\n          tcmCustomerList = result;\n          this.setState({\n            tcmCustomerList\n          });\n        }\n      });\n    };\n\n    this.getSiteBaseTitle = () => {\n      this.props.getTcmApi(`getInvoiceTitle/?siteCode=${this.props.tokenDetails.site_code}`).then(res => {\n        console.log(res, \"invoicetitle\");\n        let {\n          result,\n          success\n        } = res;\n\n        if (success == \"1\" && result) {\n          this.setState({\n            accountHeader: result\n          });\n        }\n      });\n    };\n\n    this.handlePrintPdfFormat = url => {\n      let {\n        tcmPrescriptionMain\n      } = this.state;\n      this.setState({\n        isPrintPdfClick: false\n      });\n      var a = document.createElement(\"a\");\n      a.setAttribute(\"download\", `${tcmPrescriptionMain[0].prescriptionNo}.pdf`);\n      a.setAttribute(\"href\", url);\n      a.click();\n      window.open(url);\n    };\n\n    this.handleReceipt = data => {\n      this.props.getTcmApi(`tcmPrescriptionReceipt/?PrescriptionNo=${data.prescriptionNo}`).then(res => {\n        let {\n          result,\n          success\n        } = res;\n\n        if (success == \"1\" && result) {\n          this.getSiteBaseTitle();\n          this.setState({\n            tcmPrescriptionMain: result,\n            isPrintPdfClick: true\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.queryHandler({});\n    this.getSiteBaseTitle();\n  } // api call for list\n\n\n  render() {\n    let {\n      headerDetails,\n      tcmCustomerList,\n      isPrintPdfClick,\n      accountHeader,\n      tcmPrescriptionMain\n    } = this.state;\n    let {\n      t\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container table-responsive mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TableWrapper, {\n      headerDetails: headerDetails // queryHandler={this.handlePagination}\n      // pageMeta={pageMeta}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, tcmCustomerList.length > 0 ? tcmCustomerList.map((data, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }\n      }, data.customerCode)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, data.customerName)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, data.contactNo)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }, data.gender)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, data.apptDate)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, data.location)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, data.physician)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }\n      }, data.apptStatus)), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"position-relative\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        className: \"fs-12\",\n        label: \"Receipt\",\n        mainbgrev: true,\n        onClick: () => this.handleReceipt(data),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      })));\n    }) : null), isPrintPdfClick ? /*#__PURE__*/React.createElement(PDFDownloadLink, {\n      document: /*#__PURE__*/React.createElement(Receipt, {\n        MainInfo: tcmPrescriptionMain,\n        accountHeader: accountHeader,\n        landscape: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, ({\n      blob,\n      url,\n      loading,\n      error\n    }) => !loading && url ? this.handlePrintPdfFormat(url) : null) : null));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  // filter: state.dashboard\n  tokenDetails: state.authStore.tokenDetails\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getTcmApi,\n    tcmCreateApi\n  }, dispatch);\n};\n\nexport const TCMCustomerList = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(TCMCustomerListClass));","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/Admin/TCM/TCMCustomerList/index.js"],"names":["React","NormalButton","NormalSelect","TableWrapper","getTcmApi","tcmCreateApi","connect","bindActionCreators","_","withTranslation","dateFormat","PDFViewer","PDFDownloadLink","BlobProvider","Receipt","TCMCustomerListClass","Component","state","headerDetails","label","tcmCustomerList","pageMeta","active","currentIndex","isPrintPdfClick","accountHeader","tcmPrescriptionMain","queryHandler","data","payload","siteCode","props","tokenDetails","site_code","date","Date","then","res","console","log","result","success","setState","getSiteBaseTitle","handlePrintPdfFormat","url","a","document","createElement","setAttribute","prescriptionNo","click","window","open","handleReceipt","componentDidMount","render","t","length","map","index","customerCode","customerName","contactNo","gender","apptDate","location","physician","apptStatus","blob","loading","error","mapStateToProps","authStore","mapDispatchToProps","dispatch","TCMCustomerList"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NormalButton, NormalSelect, TableWrapper } from \"component/common\";\r\nimport { getTcmApi, tcmCreateApi } from \"redux/actions/TCM\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport _ from \"lodash\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport { PDFViewer, PDFDownloadLink, BlobProvider } from \"@react-pdf/renderer\";\r\n\r\nimport Receipt from \"../Report/Receipt\";\r\n\r\nexport class TCMCustomerListClass extends React.Component {\r\n  state = {\r\n    headerDetails: [\r\n      { label: \"Customer Code\" },\r\n      { label: \"Customer Name\" },\r\n      { label: \"Contact\" },\r\n      { label: \"Gender\" },\r\n      { label: \"Appointment Timing\" },\r\n      { label: \"Location\" },\r\n      { label: \"Physician\" },\r\n      { label: \"Status\" },\r\n      { label: \"\" },\r\n    ],\r\n    tcmCustomerList: [],\r\n    pageMeta: {},\r\n    active: false,\r\n    currentIndex: -1,\r\n    isPrintPdfClick: false,\r\n    accountHeader: {},\r\n    tcmPrescriptionMain: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.queryHandler({});\r\n    this.getSiteBaseTitle();\r\n  }\r\n\r\n  // api call for list\r\n  queryHandler = data => {\r\n    let payload = {\r\n      siteCode: this.props.tokenDetails.site_code,\r\n      date: dateFormat(new Date(), \"yyyy-mm-dd\"),\r\n    };\r\n    this.props.tcmCreateApi(`tcmCustomerListFronDesk/`, payload).then(res => {\r\n      console.log(res, \"dsfdfaafg\");\r\n      let { result, success } = res;\r\n      let { tcmCustomerList } = this.state;\r\n      if (success == \"1\" && result) {\r\n        tcmCustomerList = result;\r\n        this.setState({\r\n          tcmCustomerList,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  getSiteBaseTitle = () => {\r\n    this.props\r\n      .getTcmApi(\r\n        `getInvoiceTitle/?siteCode=${this.props.tokenDetails.site_code}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"invoicetitle\");\r\n        let { result, success } = res;\r\n        if (success == \"1\" && result) {\r\n          this.setState({\r\n            accountHeader: result,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  handlePrintPdfFormat = url => {\r\n    let { tcmPrescriptionMain } = this.state;\r\n    this.setState({\r\n      isPrintPdfClick: false,\r\n    });\r\n    var a = document.createElement(\"a\");\r\n    a.setAttribute(\"download\", `${tcmPrescriptionMain[0].prescriptionNo}.pdf`);\r\n    a.setAttribute(\"href\", url);\r\n    a.click();\r\n    window.open(url);\r\n  };\r\n  handleReceipt = data => {\r\n    this.props\r\n      .getTcmApi(\r\n        `tcmPrescriptionReceipt/?PrescriptionNo=${data.prescriptionNo}`\r\n      )\r\n      .then(res => {\r\n        let { result, success } = res;\r\n        if (success == \"1\" && result) {\r\n          this.getSiteBaseTitle();\r\n          this.setState({\r\n            tcmPrescriptionMain: result,\r\n            isPrintPdfClick: true,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  render() {\r\n    let {\r\n      headerDetails,\r\n      tcmCustomerList,\r\n      isPrintPdfClick,\r\n      accountHeader,\r\n      tcmPrescriptionMain,\r\n    } = this.state;\r\n    let { t } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"table-container table-responsive mt-3\">\r\n          <TableWrapper\r\n            headerDetails={headerDetails}\r\n            // queryHandler={this.handlePagination}\r\n            // pageMeta={pageMeta}\r\n          >\r\n            {tcmCustomerList.length > 0\r\n              ? tcmCustomerList.map((data, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.customerCode}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.customerName}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.contactNo}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.gender}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.apptDate}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.location}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.physician}\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"d-flex align-items-center justify-content-center\">\r\n                          {data.apptStatus}\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"position-relative\">\r\n                        <NormalButton\r\n                          className=\"fs-12\"\r\n                          label=\"Receipt\"\r\n                          mainbgrev={true}\r\n                          onClick={() => this.handleReceipt(data)}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </TableWrapper>\r\n\r\n          {isPrintPdfClick ? (\r\n            <PDFDownloadLink\r\n              document={\r\n                <Receipt\r\n                  MainInfo={tcmPrescriptionMain}\r\n                  accountHeader={accountHeader}\r\n                  landscape={false}\r\n                />\r\n              }\r\n            >\r\n              {({ blob, url, loading, error }) =>\r\n                !loading && url ? this.handlePrintPdfFormat(url) : null\r\n              }\r\n            </PDFDownloadLink>\r\n          ) : null}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // filter: state.dashboard\r\n  tokenDetails: state.authStore.tokenDetails,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getTcmApi,\r\n      tcmCreateApi,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const TCMCustomerList = withTranslation()(\r\n  connect(mapStateToProps, mapDispatchToProps)(TCMCustomerListClass)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}