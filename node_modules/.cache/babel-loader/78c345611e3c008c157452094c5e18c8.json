{"ast":null,"code":"import { CustomerActionType, CommonActionType } from \"redux/actions/actionType\";\nimport { authApi } from \"service/apiVariables\";\nimport { addQuery } from \"service/helperFunctions\";\nimport { history } from \"../../helpers\";\nimport { Salon, Staff, customer, Services, Products } from \"../../service/apiVariables\";\nimport { api } from \"../../service/api\";\nimport { Toast } from \"../../service/toast\";\nimport { NotificationManager } from \"react-notifications\"; // create customer action\n\nexport const CreateCustomer = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customer.addCustomer,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update customer action\n\nexport const updateCustomer = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customer.updateCustomer.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...customer.updateCustomer,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getCustomer = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customer.getCustomer.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...customer.getCustomer\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CustomerActionType.getCustomerDetail,\n          payload: data\n        }); // //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const CreateHoldItem = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customer.addHoldItem,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/customer.js"],"names":["CustomerActionType","CommonActionType","authApi","addQuery","history","Salon","Staff","customer","Services","Products","api","Toast","NotificationManager","CreateCustomer","body","dispatch","getState","Promise","resolve","reject","addCustomer","then","response","message","status","type","catch","updateCustomer","id","key","payload","getCustomer","data","getCustomerDetail","CreateHoldItem","addHoldItem"],"mappings":"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","sourcesContent":["import { CustomerActionType, CommonActionType } from \"redux/actions/actionType\";\r\nimport { authApi } from \"service/apiVariables\";\r\nimport { addQuery } from \"service/helperFunctions\";\r\nimport { history } from \"../../helpers\";\r\nimport {\r\n  Salon,\r\n  Staff,\r\n  customer,\r\n  Services,\r\n  Products,\r\n} from \"../../service/apiVariables\";\r\nimport { api } from \"../../service/api\";\r\nimport { Toast } from \"../../service/toast\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\n// create customer action\r\nexport const CreateCustomer =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...customer.addCustomer, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// update customer action\r\nexport const updateCustomer =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      customer.updateCustomer.addQuery = { key: \"id\", payload: id };\r\n      api({ ...customer.updateCustomer, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getCustomer =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      customer.getCustomer.addQuery = { key: \"id\", payload: id };\r\n\r\n      api({ ...customer.getCustomer })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: CustomerActionType.getCustomerDetail,\r\n              payload: data,\r\n            });\r\n            // //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const CreateHoldItem =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...customer.addHoldItem, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}