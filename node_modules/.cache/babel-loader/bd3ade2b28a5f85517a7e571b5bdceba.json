{"ast":null,"code":"import { QuotationActionType } from \"redux/actions/actionType\";\nimport { quotation } from \"../../service/apiVariables\";\nexport const updateQuotation = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.updateQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.updateQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createQuotation = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...quotation.addQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const removePaymentSchedule = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.removePaymentSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.removePaymentSchedule,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const addPaymentSchedule = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...quotation.addPaymentSchedule,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {} else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const removeManualPaymentSchedule = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.removeManualPaymentSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.removeManualPaymentSchedule,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const addManualPaymentSchedule = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...quotation.addManualPaymentSchedule,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {} else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getQuotation = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.getQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.getQuotation\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: QuotationActionType.getQuotationListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteQuotation = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.deleteQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.deleteQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/quotation.js"],"names":["QuotationActionType","quotation","updateQuotation","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","addQuery","key","payload","then","response","message","status","type","catch","createQuotation","addQuotation","data","removePaymentSchedule","addPaymentSchedule","removeManualPaymentSchedule","addManualPaymentSchedule","getQuotation","getQuotationListing","deleteQuotation"],"mappings":"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","sourcesContent":["import { QuotationActionType } from \"redux/actions/actionType\";\r\nimport { quotation } from \"../../service/apiVariables\";\r\n\r\nexport const updateQuotation =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.updateQuotation.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.updateQuotation, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createQuotation =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...quotation.addQuotation, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n  export const removePaymentSchedule =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.removePaymentSchedule.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.removePaymentSchedule, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n  export const addPaymentSchedule =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...quotation.addPaymentSchedule, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n  export const removeManualPaymentSchedule =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.removeManualPaymentSchedule.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.removeManualPaymentSchedule, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n  export const addManualPaymentSchedule =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...quotation.addManualPaymentSchedule, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n// get customer action\r\nexport const getQuotation =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.getQuotation.addQuery = { key: \"id\", payload: id };\r\n\r\n      api({ ...quotation.getQuotation })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: QuotationActionType.getQuotationListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deleteQuotation =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.deleteQuotation.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.deleteQuotation, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}