{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\Admin\\\\NewAppointment\\\\NewListAppointment\\\\Scheduler\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { NewSchedulerModal } from \"component/common/Plugins/NewScheduler\"; // import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\n\nimport { getCustomer, getCommonApi, commonDeleteApi } from \"redux/actions/common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\"; // import timeOption from 'data/timeOption.json'\n\nimport { dateFormat } from \"service/helperFunctions\";\nimport { history } from \"helpers\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { CreateAppointment, updateForm } from \"redux/actions/appointment\";\nimport { NewCreateAppointment } from \"../../NewCreateAppointment/index\";\nimport { LoadPanel } from \"devextreme-react/load-panel\";\nconst position = {\n  of: \"#appointment\"\n};\nexport class SchedulerClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appointment: [{\n        time: \"10.00 AM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Benjamin\",\n        treatment: \"Head Massage\"\n      }, {\n        time: \"12.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Daniel\",\n        treatment: \"Pedicure\"\n      }, {\n        time: \"1.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"John\",\n        treatment: \"Haircut\"\n      }, {\n        time: \"2.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Josua\",\n        treatment: \"Manicure\"\n      }, {\n        time: \"4.00 PM, \",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Derrik\",\n        treatment: \"Body Massage\"\n      }],\n      events: [],\n      brachList: [],\n      formField: {\n        branchId: \"\",\n        time: \"\",\n        staff_id: \"\"\n      },\n      list: [],\n      filterDate: new Date(),\n      filterType: \"day\",\n      selectedId: \"\",\n      staffList: [],\n      page: 1,\n      limit: 6,\n      meta: [],\n      searchtext: \"\",\n      staffSortlist: [],\n      isOpenModal: false,\n      loadPanelVisible: false,\n      showIndicator: true,\n      shading: true,\n      showPane: true,\n      groupByType: \"staff\"\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      }); //this.getAvailability();\n      // this.getAppointment();\n\n      this.getAppointmentWithStaff(); // let { brachList, appointment, formField, filterDate } = this.state;\n      // this.props.getCommonApi(`treatment/Outlet/`).then(key => {\n      //   let { status, data } = key;\n      //   if (status === 200) {\n      //     for (let value of data) {\n      //       brachList.push({ value: value.id, label: value.itemsite_desc });\n      //     }\n      //     this.setState({ brachList });\n      //   }\n      // });\n    };\n\n    this.handleAppointmentOpen = (id, e) => {\n      console.log(e, id, \"hgjsydfisuyfsdfm ==== handleAppointmentOpen\");\n    };\n\n    this.getHoursFromDate = date => {\n      let hour = date.getHours();\n      let minute = date.getMinutes();\n      let hours = hour > 9 ? hour : \"0\" + hour;\n      let minutes;\n\n      if (minute < 15) {\n        minutes = \"00\";\n      } else if (minute >= 15 && minute < 30) {\n        minutes = \"15\";\n      } else if (minute >= 30 && minute < 45) {\n        minutes = \"30\";\n      } else if (minute >= 45 && minute < 59) {\n        minutes = \"45\";\n      }\n\n      return hours + \":\" + minutes;\n    };\n\n    this.handleEmptyEvent = async (date, e) => {\n      let {\n        customerDetail\n      } = this.props;\n      let {\n        formField\n      } = this.state;\n      let time = new Date(date);\n      formField[\"time\"] = this.getHoursFromDate(time);\n      formField[\"date\"] = date;\n      formField[\"appt_id\"] = 0;\n\n      if (e.groups) {\n        formField[\"staff_id\"] = e.groups.id;\n      }\n\n      if (e.appt_id) {\n        formField[\"appt_id\"] = e.appt_id;\n      }\n\n      await this.setState({\n        formField\n      });\n      console.log(date, e, \"hgjsydfisuyfsdfm ==== handleEmptyEvent\", time.getHours);\n      await this.props.updateForm(\"basicApptDetail\", formField);\n      await this.setState({\n        isOpenModal: true\n      });\n    };\n\n    this.handleCloseDialog = async () => {\n      await this.props.updateForm(\"treatmentList\", []);\n      await this.props.updateForm(\"basicApptDetail\", {});\n      await this.props.updateForm(\"appointmentCustomerDetail\", {});\n      await this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleChangeFilter = async (prevMode, prevDate, newMode, newDate, search) => {\n      let {\n        filterDate,\n        filterType,\n        searchtext\n      } = this.state;\n      filterDate = newDate;\n      filterType = newMode;\n      searchtext = search;\n      await this.setState({\n        filterDate,\n        filterType,\n        searchtext\n      });\n      console.log(\"dfhgfhjhjghjdfhg\", prevMode, prevDate, newMode, newDate);\n\n      if (prevMode !== newMode || prevDate !== newDate) {\n        // this.getAvailability();\n        //this.getAppointment();\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.handleChange = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        formField\n      } = this.state;\n      formField[name] = value;\n      await this.setState({\n        formField\n      });\n\n      if (name === \"branchId\") {\n        //this.getAvailability();\n        // this.getAppointment();\n        this.getAppointmentWithStaff();\n      } // console.log(formField, \"afasfasdfdfasd\")\n\n\n      this.props.updateForm(\"basicApptDetail\", formField);\n    };\n\n    this.handleDelete = async (id, event) => {\n      let {\n        selectedId\n      } = this.state;\n      console.log(id, \"===afasfasdfdfasd=====\", selectedId);\n\n      if (id !== selectedId) {\n        await this.setState({\n          selectedId: id\n        });\n        await this.props.commonDeleteApi(`appointment/${id}/`).then(res => {});\n      }\n    };\n\n    this.handleOpenStaff = (one, two, three) => {\n      console.log(\"namdfsfgsghsfghf\", one, two, three);\n      let {\n        filterDate\n      } = this.state;\n      this.props.handleOpen(filterDate);\n    };\n\n    this.getAppointmentWithStaff = () => {\n      this.setState({\n        loadPanelVisible: true\n      }, () => {\n        let {\n          filterDate,\n          filterType,\n          page,\n          limit,\n          searchtext,\n          staffList,\n          events,\n          meta,\n          groupByType\n        } = this.state;\n        this.props.getCommonApi(`empappointmentview/?date=${dateFormat(filterDate)}&check=${filterType}&page=${page}&limit=${limit}&search=${searchtext}&type=${groupByType}`).then(async key => {\n          let {\n            status,\n            data,\n            event\n          } = key;\n\n          if (status === 200) {\n            staffList = data.dataList;\n            meta = data.meta;\n            events = event;\n            await this.setState({\n              events,\n              staffList,\n              meta\n            });\n          }\n        });\n        setTimeout(this.hideLoadPanel, 3000);\n      });\n    };\n\n    this.handleNext = async () => {\n      let {\n        page\n      } = this.state;\n      page = page + 1;\n      await this.setState({\n        page\n      });\n\n      if (page > 0) {\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.handleBack = async () => {\n      let {\n        page\n      } = this.state;\n      page = page - 1;\n      await this.setState({\n        page\n      });\n\n      if (page > 0) {\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.hideLoadPanel = () => {\n      this.setState({\n        loadPanelVisible: false\n      });\n    };\n\n    this.groupByAppointment = async groupBy => {\n      debugger;\n      await this.setState({\n        groupByType: groupBy\n      });\n      this.getAppointmentWithStaff();\n    };\n  }\n\n  render() {\n    let {\n      appointment,\n      brachList,\n      branchId,\n      formField,\n      list,\n      events,\n      filterType,\n      filterDate,\n      staffList,\n      limit,\n      meta,\n      searchtext,\n      staffSortlist,\n      isLoading,\n      isOpenModal\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row m-0\",\n      id: \"appointment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LoadPanel, {\n      shadingColor: \"rgba(0,0,0,0.4)\",\n      position: position,\n      onHiding: this.hideLoadPanel,\n      visible: this.state.loadPanelVisible,\n      showIndicator: this.state.showIndicator,\n      shading: this.state.shading,\n      showPane: this.state.showPane,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scheduler-container pr-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NewSchedulerModal, {\n      staffList: staffList,\n      meta: meta,\n      event: events,\n      onClick: (id, e) => this.handleAppointmentOpen(id, e),\n      onEmptyClick: (date, e) => this.handleEmptyEvent(date, e),\n      handleChangeFilter: this.handleChangeFilter,\n      filterType: filterType,\n      filterDate: filterDate,\n      searchtext: searchtext,\n      onDeleteEvent: this.handleDelete,\n      handleBack: this.handleBack,\n      handleNext: this.handleNext,\n      staffSortlist: staffSortlist,\n      getAppointmentWithStaff: this.getAppointmentWithStaff,\n      groupByAppointment: groupBy => this.groupByAppointment(groupBy),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(NewCreateAppointment, {\n      style: {\n        minWidth: \"1000px\"\n      },\n      isOpenModal: isOpenModal,\n      handleCloseDialog: this.handleCloseDialog,\n      handleSaveorUpdate: this.getAppointmentWithStaff,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customerDetail: state.appointment.customerDetail,\n  customerList: state.common.customerList,\n  multipleCustomerForm: state.appointment.multipleCustomerForm\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getCustomer,\n    getCommonApi,\n    updateForm,\n    commonDeleteApi\n  }, dispatch);\n};\n\nexport const Scheduler = connect(mapStateToProps, mapDispatchToProps)(SchedulerClass);","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/Admin/NewAppointment/NewListAppointment/Scheduler/index.js"],"names":["React","Component","NewSchedulerModal","getCustomer","getCommonApi","commonDeleteApi","connect","bindActionCreators","dateFormat","history","SimpleReactValidator","CreateAppointment","updateForm","NewCreateAppointment","LoadPanel","position","of","SchedulerClass","state","appointment","time","date","name","treatment","events","brachList","formField","branchId","staff_id","list","filterDate","Date","filterType","selectedId","staffList","page","limit","meta","searchtext","staffSortlist","isOpenModal","loadPanelVisible","showIndicator","shading","showPane","groupByType","componentWillMount","validator","element","message","autoForceUpdate","getAppointmentWithStaff","handleAppointmentOpen","id","e","console","log","getHoursFromDate","hour","getHours","minute","getMinutes","hours","minutes","handleEmptyEvent","customerDetail","props","groups","appt_id","setState","handleCloseDialog","handleChangeFilter","prevMode","prevDate","newMode","newDate","search","handleChange","target","value","handleDelete","event","then","res","handleOpenStaff","one","two","three","handleOpen","key","status","data","dataList","setTimeout","hideLoadPanel","handleNext","handleBack","groupByAppointment","groupBy","render","isLoading","minWidth","mapStateToProps","customerList","common","multipleCustomerForm","mapDispatchToProps","dispatch","Scheduler"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NewSchedulerModal } from \"component/common/Plugins/NewScheduler\";\r\n// import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\r\n\r\nimport {\r\n  getCustomer,\r\n  getCommonApi,\r\n  commonDeleteApi,\r\n} from \"redux/actions/common\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n// import timeOption from 'data/timeOption.json'\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport { history } from \"helpers\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { CreateAppointment, updateForm } from \"redux/actions/appointment\";\r\nimport { NewCreateAppointment } from \"../../NewCreateAppointment/index\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nconst position = { of: \"#appointment\" };\r\nexport class SchedulerClass extends Component {\r\n  state = {\r\n    appointment: [\r\n      {\r\n        time: \"10.00 AM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Benjamin\",\r\n        treatment: \"Head Massage\",\r\n      },\r\n      {\r\n        time: \"12.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Daniel\",\r\n        treatment: \"Pedicure\",\r\n      },\r\n      {\r\n        time: \"1.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"John\",\r\n        treatment: \"Haircut\",\r\n      },\r\n      {\r\n        time: \"2.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Josua\",\r\n        treatment: \"Manicure\",\r\n      },\r\n      {\r\n        time: \"4.00 PM, \",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Derrik\",\r\n        treatment: \"Body Massage\",\r\n      },\r\n    ],\r\n    events: [],\r\n    brachList: [],\r\n    formField: {\r\n      branchId: \"\",\r\n      time: \"\",\r\n      staff_id: \"\",\r\n    },\r\n    list: [],\r\n    filterDate: new Date(),\r\n    filterType: \"day\",\r\n    selectedId: \"\",\r\n    staffList: [],\r\n    page: 1,\r\n    limit: 6,\r\n    meta: [],\r\n    searchtext: \"\",\r\n    staffSortlist: [],\r\n    isOpenModal: false,\r\n    loadPanelVisible: false,\r\n    showIndicator: true,\r\n    shading: true,\r\n    showPane: true,\r\n    groupByType: \"staff\",\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n    //this.getAvailability();\r\n    // this.getAppointment();\r\n    this.getAppointmentWithStaff();\r\n    // let { brachList, appointment, formField, filterDate } = this.state;\r\n    // this.props.getCommonApi(`treatment/Outlet/`).then(key => {\r\n    //   let { status, data } = key;\r\n    //   if (status === 200) {\r\n    //     for (let value of data) {\r\n    //       brachList.push({ value: value.id, label: value.itemsite_desc });\r\n    //     }\r\n    //     this.setState({ brachList });\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  // getAvailability = () => {\r\n  //   let { filterDate } = this.state;\r\n  //   this.props\r\n  //     .getCommonApi(\r\n  //       `staffsavailable/?Appt_date=${dateFormat(filterDate, \"yyyy-mm-dd\")}`\r\n  //     )\r\n  //     .then(key => {\r\n  //       let { status, data } = key;\r\n  //       if (status === 200) {\r\n  //         // for (let value of data) {\r\n  //         //     staffList.push({ value: value.id, label: value.emp_name })\r\n  //         // }\r\n  //         this.setState({ list: data });\r\n  //       }\r\n  //     });\r\n  // };\r\n\r\n  handleAppointmentOpen = (id, e) => {\r\n    console.log(e, id, \"hgjsydfisuyfsdfm ==== handleAppointmentOpen\");\r\n  };\r\n  getHoursFromDate = date => {\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let hours = hour > 9 ? hour : \"0\" + hour;\r\n    let minutes;\r\n    if (minute < 15) {\r\n      minutes = \"00\";\r\n    } else if (minute >= 15 && minute < 30) {\r\n      minutes = \"15\";\r\n    } else if (minute >= 30 && minute < 45) {\r\n      minutes = \"30\";\r\n    } else if (minute >= 45 && minute < 59) {\r\n      minutes = \"45\";\r\n    }\r\n    return hours + \":\" + minutes;\r\n  };\r\n\r\n  handleEmptyEvent = async (date, e) => {\r\n    let { customerDetail } = this.props;\r\n    let { formField } = this.state;\r\n\r\n    let time = new Date(date);\r\n\r\n    formField[\"time\"] = this.getHoursFromDate(time);\r\n    formField[\"date\"] = date;\r\n    formField[\"appt_id\"] = 0;\r\n    if (e.groups) {\r\n      formField[\"staff_id\"] = e.groups.id;\r\n    }\r\n    if (e.appt_id) {\r\n      formField[\"appt_id\"] = e.appt_id;\r\n    }\r\n\r\n    await this.setState({ formField });\r\n    console.log(\r\n      date,\r\n      e,\r\n      \"hgjsydfisuyfsdfm ==== handleEmptyEvent\",\r\n      time.getHours\r\n    );\r\n    await this.props.updateForm(\"basicApptDetail\", formField);\r\n    await this.setState({ isOpenModal: true });\r\n  };\r\n  handleCloseDialog = async () => {\r\n    await this.props.updateForm(\"treatmentList\", []);\r\n    await this.props.updateForm(\"basicApptDetail\", {});\r\n    await this.props.updateForm(\"appointmentCustomerDetail\", {});\r\n    await this.setState({\r\n      isOpenModal: false,\r\n    });\r\n  };\r\n  // getAppointment = () => {\r\n  //   let { brachList, events, formField, filterType, filterDate } = this.state;\r\n  //   this.props\r\n  //     .getCommonApi(\r\n  //       `appointmentcalender/?date=${dateFormat(\r\n  //         filterDate\r\n  //       )}&check=${filterType}`\r\n  //     )\r\n  //     .then(async key => {\r\n  //       let { status, data } = key;\r\n  //       if (status === 200) {\r\n  //         events = [];\r\n  //         await this.setState({ events: null });\r\n  //         events = data;\r\n  //         await this.setState({ events });\r\n  //         console.log(events, \"appointmentlist\", key);\r\n  //       }\r\n  //     });\r\n  // };\r\n  handleChangeFilter = async (prevMode, prevDate, newMode, newDate, search) => {\r\n    let { filterDate, filterType, searchtext } = this.state;\r\n    filterDate = newDate;\r\n    filterType = newMode;\r\n    searchtext = search;\r\n    await this.setState({\r\n      filterDate,\r\n      filterType,\r\n      searchtext,\r\n    });\r\n    console.log(\"dfhgfhjhjghjdfhg\", prevMode, prevDate, newMode, newDate);\r\n    if (prevMode !== newMode || prevDate !== newDate) {\r\n      // this.getAvailability();\r\n      //this.getAppointment();\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n\r\n  handleChange = async ({ target: { value, name } }) => {\r\n    let { formField } = this.state;\r\n    formField[name] = value;\r\n    await this.setState({\r\n      formField,\r\n    });\r\n    if (name === \"branchId\") {\r\n      //this.getAvailability();\r\n      // this.getAppointment();\r\n      this.getAppointmentWithStaff();\r\n    }\r\n    // console.log(formField, \"afasfasdfdfasd\")\r\n    this.props.updateForm(\"basicApptDetail\", formField);\r\n  };\r\n\r\n  handleDelete = async (id, event) => {\r\n    let { selectedId } = this.state;\r\n    console.log(id, \"===afasfasdfdfasd=====\", selectedId);\r\n    if (id !== selectedId) {\r\n      await this.setState({\r\n        selectedId: id,\r\n      });\r\n      await this.props.commonDeleteApi(`appointment/${id}/`).then(res => {});\r\n    }\r\n  };\r\n\r\n  handleOpenStaff = (one, two, three) => {\r\n    console.log(\"namdfsfgsghsfghf\", one, two, three);\r\n    let { filterDate } = this.state;\r\n    this.props.handleOpen(filterDate);\r\n  };\r\n\r\n  getAppointmentWithStaff = () => {\r\n    this.setState(\r\n      {\r\n        loadPanelVisible: true,\r\n      },\r\n      () => {\r\n        let {\r\n          filterDate,\r\n          filterType,\r\n          page,\r\n          limit,\r\n          searchtext,\r\n          staffList,\r\n          events,\r\n          meta,\r\n          groupByType,\r\n        } = this.state;\r\n        this.props\r\n          .getCommonApi(\r\n            `empappointmentview/?date=${dateFormat(\r\n              filterDate\r\n            )}&check=${filterType}&page=${page}&limit=${limit}&search=${searchtext}&type=${groupByType}`\r\n          )\r\n          .then(async key => {\r\n            let { status, data, event } = key;\r\n\r\n            if (status === 200) {\r\n              staffList = data.dataList;\r\n              meta = data.meta;\r\n              events = event;\r\n              await this.setState({ events, staffList, meta });\r\n            }\r\n          });\r\n        setTimeout(this.hideLoadPanel, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleNext = async () => {\r\n    let { page } = this.state;\r\n    page = page + 1;\r\n    await this.setState({\r\n      page,\r\n    });\r\n    if (page > 0) {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n\r\n  handleBack = async () => {\r\n    let { page } = this.state;\r\n    page = page - 1;\r\n    await this.setState({\r\n      page,\r\n    });\r\n    if (page > 0) {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n  hideLoadPanel = () => {\r\n    this.setState({\r\n      loadPanelVisible: false,\r\n    });\r\n  };\r\n\r\n  groupByAppointment = async groupBy => {\r\n    debugger;\r\n    await this.setState({\r\n      groupByType: groupBy,\r\n    });\r\n    this.getAppointmentWithStaff();\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      appointment,\r\n      brachList,\r\n      branchId,\r\n      formField,\r\n      list,\r\n      events,\r\n      filterType,\r\n      filterDate,\r\n      staffList,\r\n      limit,\r\n      meta,\r\n      searchtext,\r\n      staffSortlist,\r\n      isLoading,\r\n      isOpenModal,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"row m-0\" id=\"appointment\">\r\n          <LoadPanel\r\n            shadingColor=\"rgba(0,0,0,0.4)\"\r\n            position={position}\r\n            onHiding={this.hideLoadPanel}\r\n            visible={this.state.loadPanelVisible}\r\n            showIndicator={this.state.showIndicator}\r\n            shading={this.state.shading}\r\n            showPane={this.state.showPane}\r\n          />\r\n          <div className=\"scheduler-container pr-0\">\r\n            <NewSchedulerModal\r\n              staffList={staffList}\r\n              meta={meta}\r\n              event={events}\r\n              onClick={(id, e) => this.handleAppointmentOpen(id, e)}\r\n              onEmptyClick={(date, e) => this.handleEmptyEvent(date, e)}\r\n              handleChangeFilter={this.handleChangeFilter}\r\n              filterType={filterType}\r\n              filterDate={filterDate}\r\n              searchtext={searchtext}\r\n              onDeleteEvent={this.handleDelete}\r\n              handleBack={this.handleBack}\r\n              handleNext={this.handleNext}\r\n              staffSortlist={staffSortlist}\r\n              getAppointmentWithStaff={this.getAppointmentWithStaff}\r\n              groupByAppointment={groupBy => this.groupByAppointment(groupBy)}\r\n            />\r\n          </div>\r\n          <NewCreateAppointment\r\n           style={{ minWidth: \"1000px\" }}\r\n            isOpenModal={isOpenModal}\r\n            handleCloseDialog={this.handleCloseDialog}\r\n            handleSaveorUpdate={this.getAppointmentWithStaff}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  customerDetail: state.appointment.customerDetail,\r\n  customerList: state.common.customerList,\r\n  multipleCustomerForm: state.appointment.multipleCustomerForm,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getCustomer,\r\n      getCommonApi,\r\n      updateForm,\r\n      commonDeleteApi,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const Scheduler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SchedulerClass);\r\n"]},"metadata":{},"sourceType":"module"}