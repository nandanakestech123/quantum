{"ast":null,"code":"import { StaffActionType } from 'redux/actions/actionType';\nimport { staff } from 'service/apiVariables'; // create staff action\n\nexport const createStaff = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...staff.addStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // update staff action\n\nexport const updateStaff = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staff.updateStaff.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...staff.updateStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // delete staff action\n\nexport const deleteStaff = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staff.deleteStaff.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...staff.deleteStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // get staff  action\n\nexport const getStaff = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staff.getStaff.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...staff.getStaff\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffActionType.getStaffDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // get staff availability action\n\nexport const getStaffAvailability = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staff.getStaffAvailability.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...staff.getStaffAvailability\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // get staff branchwise action\n\nexport const getStaffBranchwise = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staff.getStaffBranchwise.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...staff.getStaffBranchwise\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/staff.js"],"names":["StaffActionType","staff","createStaff","body","dispatch","getState","api","Toast","Promise","resolve","reject","addStaff","then","response","message","status","data","type","catch","updateStaff","id","addQuery","key","payload","deleteStaff","getStaff","getStaffDetail","getStaffAvailability","getStaffBranchwise"],"mappings":"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","sourcesContent":["import { StaffActionType } from 'redux/actions/actionType';\r\nimport { staff } from 'service/apiVariables';\r\n\r\n// create staff action\r\nexport const createStaff = (body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...staff.addStaff, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } =  response\r\n        if(status===200){\r\n          // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// update staff action\r\nexport const updateStaff = (id, body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    staff.updateStaff.addQuery = { key: 'id', payload: id };\r\n    api({ ...staff.updateStaff, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } =  response\r\n        if(status===200){\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// delete staff action\r\nexport const deleteStaff = (id, body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    staff.deleteStaff.addQuery = { key: 'id', payload: id };\r\n    api({ ...staff.deleteStaff, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } =  response\r\n        if(status===200){\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// get staff  action\r\nexport const getStaff = (id) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    staff.getStaff.addQuery = { key: 'id', payload: id };\r\n    api({ ...staff.getStaff })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } =  response\r\n        if(status===200){\r\n          dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n          // Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// get staff availability action\r\nexport const getStaffAvailability = (id) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    staff.getStaffAvailability.addQuery = { key: 'id', payload: id };\r\n    api({ ...staff.getStaffAvailability })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } =  response\r\n        if(status===200){\r\n          // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n          // Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// get staff branchwise action\r\nexport const getStaffBranchwise = (id) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    staff.getStaffBranchwise.addQuery = { key: 'id', payload: id };\r\n    api({ ...staff.getStaffBranchwise })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } =  response\r\n        if(status===200){\r\n          // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n          // Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}