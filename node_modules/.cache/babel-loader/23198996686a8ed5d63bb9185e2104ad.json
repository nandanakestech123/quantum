{"ast":null,"code":"/**\r\n * DevExtreme (viz/vector_map/projection.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"projection\", {\n  enumerable: true,\n  get: function () {\n    return _projection.projection;\n  }\n});\n\nvar _projection = require(\"./projection.main\");\n\nvar _min = Math.min;\nvar _max = Math.max;\nvar _sin = Math.sin;\nvar _asin = Math.asin;\nvar _tan = Math.tan;\nvar _atan = Math.atan;\nvar _exp = Math.exp;\nvar _log = Math.log;\nvar PI = Math.PI;\nvar PI_DIV_4 = PI / 4;\nvar GEO_LON_BOUND = 180;\nvar GEO_LAT_BOUND = 90;\nvar RADIANS = PI / 180;\nvar MERCATOR_LAT_BOUND = (2 * _atan(_exp(PI)) - PI / 2) / RADIANS;\nvar MILLER_LAT_BOUND = (2.5 * _atan(_exp(.8 * PI)) - .625 * PI) / RADIANS;\n\nfunction clamp(value, threshold) {\n  return _max(_min(value, +threshold), -threshold);\n}\n\n_projection.projection.add(\"mercator\", (0, _projection.projection)({\n  aspectRatio: 1,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, _log(_tan(PI_DIV_4 + clamp(coordinates[1], MERCATOR_LAT_BOUND) * RADIANS / 2)) / PI];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, (2 * _atan(_exp(coordinates[1] * PI)) - PI / 2) / RADIANS];\n  }\n}));\n\n_projection.projection.add(\"equirectangular\", (0, _projection.projection)({\n  aspectRatio: 2,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, coordinates[1] / GEO_LAT_BOUND];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, coordinates[1] * GEO_LAT_BOUND];\n  }\n}));\n\n_projection.projection.add(\"lambert\", (0, _projection.projection)({\n  aspectRatio: 2,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, _sin(clamp(coordinates[1], GEO_LAT_BOUND) * RADIANS)];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, _asin(clamp(coordinates[1], 1)) / RADIANS];\n  }\n}));\n\n_projection.projection.add(\"miller\", (0, _projection.projection)({\n  aspectRatio: 1,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, 1.25 * _log(_tan(PI_DIV_4 + clamp(coordinates[1], MILLER_LAT_BOUND) * RADIANS * .4)) / PI];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, (2.5 * _atan(_exp(.8 * coordinates[1] * PI)) - .625 * PI) / RADIANS];\n  }\n}));","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/vector_map/projection.js"],"names":["Object","defineProperty","exports","enumerable","get","_projection","projection","require","_min","Math","min","_max","max","_sin","sin","_asin","asin","_tan","tan","_atan","atan","_exp","exp","_log","log","PI","PI_DIV_4","GEO_LON_BOUND","GEO_LAT_BOUND","RADIANS","MERCATOR_LAT_BOUND","MILLER_LAT_BOUND","clamp","value","threshold","add","aspectRatio","to","coordinates","from"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/vector_map/projection.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"projection\", {\r\n    enumerable: true,\r\n    get: function() {\r\n        return _projection.projection\r\n    }\r\n});\r\nvar _projection = require(\"./projection.main\");\r\nvar _min = Math.min;\r\nvar _max = Math.max;\r\nvar _sin = Math.sin;\r\nvar _asin = Math.asin;\r\nvar _tan = Math.tan;\r\nvar _atan = Math.atan;\r\nvar _exp = Math.exp;\r\nvar _log = Math.log;\r\nvar PI = Math.PI;\r\nvar PI_DIV_4 = PI / 4;\r\nvar GEO_LON_BOUND = 180;\r\nvar GEO_LAT_BOUND = 90;\r\nvar RADIANS = PI / 180;\r\nvar MERCATOR_LAT_BOUND = (2 * _atan(_exp(PI)) - PI / 2) / RADIANS;\r\nvar MILLER_LAT_BOUND = (2.5 * _atan(_exp(.8 * PI)) - .625 * PI) / RADIANS;\r\n\r\nfunction clamp(value, threshold) {\r\n    return _max(_min(value, +threshold), -threshold)\r\n}\r\n_projection.projection.add(\"mercator\", (0, _projection.projection)({\r\n    aspectRatio: 1,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, _log(_tan(PI_DIV_4 + clamp(coordinates[1], MERCATOR_LAT_BOUND) * RADIANS / 2)) / PI]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, (2 * _atan(_exp(coordinates[1] * PI)) - PI / 2) / RADIANS]\r\n    }\r\n}));\r\n_projection.projection.add(\"equirectangular\", (0, _projection.projection)({\r\n    aspectRatio: 2,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, coordinates[1] / GEO_LAT_BOUND]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, coordinates[1] * GEO_LAT_BOUND]\r\n    }\r\n}));\r\n_projection.projection.add(\"lambert\", (0, _projection.projection)({\r\n    aspectRatio: 2,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, _sin(clamp(coordinates[1], GEO_LAT_BOUND) * RADIANS)]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, _asin(clamp(coordinates[1], 1)) / RADIANS]\r\n    }\r\n}));\r\n_projection.projection.add(\"miller\", (0, _projection.projection)({\r\n    aspectRatio: 1,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, 1.25 * _log(_tan(PI_DIV_4 + clamp(coordinates[1], MILLER_LAT_BOUND) * RADIANS * .4)) / PI]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, (2.5 * _atan(_exp(.8 * coordinates[1] * PI)) - .625 * PI) / RADIANS]\r\n    }\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}