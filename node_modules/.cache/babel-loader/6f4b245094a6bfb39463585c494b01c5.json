{"ast":null,"code":"import { AuthActionType, AppointmentActionType } from \"redux/actions/actionType\";\nimport { addQuery } from \"service/helperFunctions\";\nimport { appointment } from \"../../service/apiVariables\"; // create appointment postmethod\n\nexport const CreateAppointment = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...appointment.addAppointment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 201 || status === 200) {\n        dispatch({\n          type: AppointmentActionType.appointmentDetail,\n          payload: data\n        }); ////  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // create treatment post method\n\nexport const CreateTreatment = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...appointment.addTreatment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getTreatmentDetail,\n          payload: data\n        }); ////  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // create Booking post method\n\nexport const createBooking = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.addBooking.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.addBooking,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\n        ////  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // cart update method\n\nexport const UpdateCart = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.updateTreatment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.updateTreatment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // cart hold action\n\nexport const HoldCart = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.holdTreatment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.holdTreatment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // cart delete action\n\nexport const DeleteCart = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.deleteTreatment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.deleteTreatment\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {//  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get method for treatment action\n\nexport const getTreatment = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getTreatment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getTreatment\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get method treatment detail list\n\nexport const getTreatmentDetailList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getTreatmentDetailList.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getTreatmentDetailList\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: CustomerActionType.getCustomerDetail, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get method Treatment detail\n\nexport const getTreatmentDetail = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getTreatmentDetail.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getTreatmentDetail\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getTreatmentDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get outlet\n\nexport const getOutletDetail = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getOutletDetail.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getOutletDetail\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getOutletDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // selected treatment get method\n\nexport const getSelectedTreatmentList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getOutletDetail.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getOutletDetail\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getSelectedTreatmentList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // appointment get method\n\nexport const getAppointmentList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getAppointment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getAppointment\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getConfirmedBookingList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // booked appointment list get method\n\nexport const getBookAppointmentList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getOutletDetail.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getOutletDetail\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getBookAppointmentList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // appointment cart list get method\n\nexport const getAppointmentCartList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    appointment.getCartList.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...appointment.getCartList\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: AppointmentActionType.getAppointmentCartList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // store data action for form field\n\nexport function updateForm(type, data) {\n  return {\n    type: type,\n    payload: data\n  };\n}","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/appointment.js"],"names":["AuthActionType","AppointmentActionType","addQuery","appointment","CreateAppointment","body","dispatch","getState","api","Toast","Promise","resolve","reject","addAppointment","then","response","message","status","data","type","appointmentDetail","payload","catch","CreateTreatment","addTreatment","getTreatmentDetail","createBooking","id","addBooking","key","UpdateCart","updateTreatment","HoldCart","holdTreatment","DeleteCart","deleteTreatment","getTreatment","getTreatmentDetailList","getOutletDetail","getSelectedTreatmentList","getAppointmentList","getAppointment","getConfirmedBookingList","getBookAppointmentList","getAppointmentCartList","getCartList","updateForm"],"mappings":"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","sourcesContent":["import {\r\n  AuthActionType,\r\n  AppointmentActionType,\r\n} from \"redux/actions/actionType\";\r\nimport { addQuery } from \"service/helperFunctions\";\r\nimport { appointment } from \"../../service/apiVariables\";\r\n\r\n// create appointment postmethod\r\nexport const CreateAppointment =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...appointment.addAppointment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 201 || status === 200) {\r\n            dispatch({\r\n              type: AppointmentActionType.appointmentDetail,\r\n              payload: data,\r\n            });\r\n            ////  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// create treatment post method\r\nexport const CreateTreatment =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...appointment.addTreatment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getTreatmentDetail,\r\n              payload: data,\r\n            });\r\n            ////  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// create Booking post method\r\nexport const createBooking =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.addBooking.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.addBooking, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\r\n            ////  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// cart update method\r\nexport const UpdateCart =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.updateTreatment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.updateTreatment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// cart hold action\r\nexport const HoldCart =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.holdTreatment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.holdTreatment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: AppointmentActionType.appointmentDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// cart delete action\r\nexport const DeleteCart =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.deleteTreatment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.deleteTreatment })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get method for treatment action\r\nexport const getTreatment =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getTreatment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getTreatment })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get method treatment detail list\r\nexport const getTreatmentDetailList =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getTreatmentDetailList.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getTreatmentDetailList })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: CustomerActionType.getCustomerDetail, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get method Treatment detail\r\nexport const getTreatmentDetail =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getTreatmentDetail.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getTreatmentDetail })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getTreatmentDetail,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get outlet\r\nexport const getOutletDetail =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getOutletDetail.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getOutletDetail })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getOutletDetail,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// selected treatment get method\r\nexport const getSelectedTreatmentList =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getOutletDetail.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getOutletDetail })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getSelectedTreatmentList,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// appointment get method\r\nexport const getAppointmentList =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getAppointment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getAppointment })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getConfirmedBookingList,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// booked appointment list get method\r\nexport const getBookAppointmentList =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getOutletDetail.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getOutletDetail })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getBookAppointmentList,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// appointment cart list get method\r\nexport const getAppointmentCartList =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      appointment.getCartList.addQuery = { key: \"id\", payload: id };\r\n      api({ ...appointment.getCartList })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: AppointmentActionType.getAppointmentCartList,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// store data action for form field\r\nexport function updateForm(type, data) {\r\n  return {\r\n    type: type,\r\n    payload: data,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}