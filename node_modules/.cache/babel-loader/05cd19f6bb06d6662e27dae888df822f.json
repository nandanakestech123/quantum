{"ast":null,"code":"/**\r\n * DevExtreme (ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nrequire(\"./ui.tree_list.editor_factory\");\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _uiTree_list2 = _interopRequireDefault(require(\"./ui.tree_list.core\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"../grid_core/ui.grid_core.utils\"));\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"../grid_core/ui.grid_core.editing\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\n\nvar EditingController = _uiGrid_core2.default.controllers.editing.inherit(function () {\n  return {\n    _generateNewItem: function (key) {\n      var item = this.callBase(key);\n      item.data = {\n        key: key\n      };\n      item.children = [];\n      item.level = 0;\n      item.parentKey = this.option(\"rootValue\");\n      return item;\n    },\n    _needInsertItem: function (change, changeType, items, item) {\n      var parentKey = change.key.parentKey;\n\n      if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n        var rowIndex = _uiGrid_core.default.getIndexByKey(parentKey, items);\n\n        if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\n          items.splice(rowIndex + 1, 0, item);\n        }\n\n        return false;\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    _isEditColumnVisible: function () {\n      var result = this.callBase.apply(this, arguments);\n      var editingOptions = this.option(\"editing\");\n      return result || editingOptions && editingOptions.allowAdding;\n    },\n    _isDefaultButtonVisible: function (button, options) {\n      var result = this.callBase.apply(this, arguments);\n      var row = options.row;\n\n      if (\"add\" === button.name) {\n        return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow);\n      }\n\n      return result;\n    },\n    _getEditingButtons: function (options) {\n      var buttons = this.callBase.apply(this, arguments);\n\n      if (!options.column.buttons) {\n        buttons.unshift(this._getButtonConfig(\"add\", options));\n      }\n\n      return buttons;\n    },\n    _beforeSaveEditData: function (change) {\n      var dataController = this._dataController;\n      var result = this.callBase.apply(this, arguments);\n\n      if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\n        var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\n        var key = null === store || void 0 === store ? void 0 : store.key();\n\n        if (!(0, _type.isDefined)(key)) {\n          throw _ui.default.Error(\"E1045\");\n        }\n      }\n\n      return result;\n    },\n    addRowByRowIndex: function (rowIndex) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.getVisibleRows()[rowIndex];\n      return this.addRow(row ? row.key : void 0);\n    },\n    addRow: function (key) {\n      var that = this;\n      var callBase = that.callBase;\n      var dataController = that.getController(\"data\");\n\n      if (void 0 !== key && !dataController.isRowExpanded(key)) {\n        var deferred = new _deferred.Deferred();\n        dataController.expandRow(key).done(function () {\n          setTimeout(function () {\n            callBase.call(that, key).done(deferred.resolve).fail(deferred.reject);\n          });\n        }).fail(deferred.reject);\n        return deferred.promise();\n      }\n\n      if (void 0 === key) {\n        key = that.option(\"rootValue\");\n      }\n\n      return callBase.call(that, key);\n    },\n    _initNewRow: function (options, parentKey) {\n      var dataController = this.getController(\"data\");\n      var dataSourceAdapter = dataController.dataSource();\n      var parentIdSetter = dataSourceAdapter.createParentIdSetter();\n      parentIdSetter(options.data, parentKey);\n      return this.callBase.apply(this, arguments);\n    },\n    allowAdding: function (options) {\n      return this._allowEditAction(\"allowAdding\", options);\n    },\n    _needToCloseEditableCell: function ($targetElement) {\n      return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing();\n    },\n    getButtonLocalizationNames: function () {\n      var names = this.callBase.apply(this);\n      names.add = \"dxTreeList-editingAddRowToNode\";\n      return names;\n    }\n  };\n}());\n\nvar originalRowClick = _uiGrid_core2.default.extenders.views.rowsView._rowClick;\nvar originalRowDblClick = _uiGrid_core2.default.extenders.views.rowsView._rowDblClick;\n\nvar validateClick = function (e) {\n  var $targetElement = (0, _renderer.default)(e.event.target);\n  var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\n\n  if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n    return false;\n  }\n\n  return !needToCallOriginalClickHandler.call(this, e, originalClickHandler);\n};\n\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\n  var $targetElement = (0, _renderer.default)(e.event.target);\n\n  if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\n    originalClickHandler.call(this, e);\n    return true;\n  }\n\n  return false;\n}\n\nvar RowsViewExtender = (0, _extend.extend)({}, _uiGrid_core2.default.extenders.views.rowsView, {\n  _renderCellCommandContent: function ($container, options) {\n    var editingController = this._editingController;\n    var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\n    var isEditing = options.isEditing || isEditRow;\n\n    if (!isEditing) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return false;\n  },\n  _rowClick: function (e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _rowDblClick: function (e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  }\n});\n\n_uiTree_list2.default.registerModule(\"editing\", {\n  defaultOptions: function () {\n    return (0, _extend.extend)(true, _uiGrid_core2.default.defaultOptions(), {\n      editing: {\n        texts: {\n          addRowToNode: _message.default.format(\"dxTreeList-editingAddRowToNode\")\n        }\n      }\n    });\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: (0, _extend.extend)(true, {}, _uiGrid_core2.default.extenders.controllers, {\n      data: {\n        changeRowExpand: function () {\n          this._editingController.refresh();\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    }),\n    views: {\n      rowsView: RowsViewExtender,\n      headerPanel: _uiGrid_core2.default.extenders.views.headerPanel\n    }\n  }\n});","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/tree_list/ui.tree_list.editing.js"],"names":["require","_renderer","_interopRequireDefault","_ui","_type","_extend","_deferred","_message","_uiTree_list2","_uiGrid_core","_uiGrid_core2","obj","__esModule","TREELIST_EXPAND_ICON_CONTAINER_CLASS","SELECT_CHECKBOX_CLASS","DATA_EDIT_DATA_INSERT_TYPE","EditingController","default","controllers","editing","inherit","_generateNewItem","key","item","callBase","data","children","level","parentKey","option","_needInsertItem","change","changeType","items","rowIndex","getIndexByKey","_dataController","isRowExpanded","splice","apply","arguments","_isEditColumnVisible","result","editingOptions","allowAdding","_isDefaultButtonVisible","button","options","row","name","_getVisibleEditRowIndex","removed","isNewRow","_getEditingButtons","buttons","column","unshift","_getButtonConfig","_beforeSaveEditData","dataController","type","store","isDefined","Error","addRowByRowIndex","getController","getVisibleRows","addRow","that","deferred","Deferred","expandRow","done","setTimeout","call","resolve","fail","reject","promise","_initNewRow","dataSourceAdapter","dataSource","parentIdSetter","createParentIdSetter","_allowEditAction","_needToCloseEditableCell","$targetElement","closest","length","isEditing","getButtonLocalizationNames","names","add","originalRowClick","extenders","views","rowsView","_rowClick","originalRowDblClick","_rowDblClick","validateClick","e","event","target","originalClickHandler","needToCallOriginalClickHandler","RowsViewExtender","extend","_renderCellCommandContent","$container","editingController","_editingController","isEditRow","registerModule","defaultOptions","texts","addRowToNode","format","changeRowExpand","refresh","headerPanel"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nrequire(\"./ui.tree_list.editor_factory\");\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _uiTree_list2 = _interopRequireDefault(require(\"./ui.tree_list.core\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"../grid_core/ui.grid_core.utils\"));\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"../grid_core/ui.grid_core.editing\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar EditingController = _uiGrid_core2.default.controllers.editing.inherit(function() {\r\n    return {\r\n        _generateNewItem: function(key) {\r\n            var item = this.callBase(key);\r\n            item.data = {\r\n                key: key\r\n            };\r\n            item.children = [];\r\n            item.level = 0;\r\n            item.parentKey = this.option(\"rootValue\");\r\n            return item\r\n        },\r\n        _needInsertItem: function(change, changeType, items, item) {\r\n            var parentKey = change.key.parentKey;\r\n            if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\r\n                var rowIndex = _uiGrid_core.default.getIndexByKey(parentKey, items);\r\n                if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\r\n                    items.splice(rowIndex + 1, 0, item)\r\n                }\r\n                return false\r\n            }\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            var editingOptions = this.option(\"editing\");\r\n            return result || editingOptions && editingOptions.allowAdding\r\n        },\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = this.callBase.apply(this, arguments);\r\n            var row = options.row;\r\n            if (\"add\" === button.name) {\r\n                return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow)\r\n            }\r\n            return result\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttons = this.callBase.apply(this, arguments);\r\n            if (!options.column.buttons) {\r\n                buttons.unshift(this._getButtonConfig(\"add\", options))\r\n            }\r\n            return buttons\r\n        },\r\n        _beforeSaveEditData: function(change) {\r\n            var dataController = this._dataController;\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\r\n                var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\r\n                var key = null === store || void 0 === store ? void 0 : store.key();\r\n                if (!(0, _type.isDefined)(key)) {\r\n                    throw _ui.default.Error(\"E1045\")\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        addRowByRowIndex: function(rowIndex) {\r\n            var dataController = this.getController(\"data\");\r\n            var row = dataController.getVisibleRows()[rowIndex];\r\n            return this.addRow(row ? row.key : void 0)\r\n        },\r\n        addRow: function(key) {\r\n            var that = this;\r\n            var callBase = that.callBase;\r\n            var dataController = that.getController(\"data\");\r\n            if (void 0 !== key && !dataController.isRowExpanded(key)) {\r\n                var deferred = new _deferred.Deferred;\r\n                dataController.expandRow(key).done(function() {\r\n                    setTimeout(function() {\r\n                        callBase.call(that, key).done(deferred.resolve).fail(deferred.reject)\r\n                    })\r\n                }).fail(deferred.reject);\r\n                return deferred.promise()\r\n            }\r\n            if (void 0 === key) {\r\n                key = that.option(\"rootValue\")\r\n            }\r\n            return callBase.call(that, key)\r\n        },\r\n        _initNewRow: function(options, parentKey) {\r\n            var dataController = this.getController(\"data\");\r\n            var dataSourceAdapter = dataController.dataSource();\r\n            var parentIdSetter = dataSourceAdapter.createParentIdSetter();\r\n            parentIdSetter(options.data, parentKey);\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        allowAdding: function(options) {\r\n            return this._allowEditAction(\"allowAdding\", options)\r\n        },\r\n        _needToCloseEditableCell: function($targetElement) {\r\n            return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing()\r\n        },\r\n        getButtonLocalizationNames: function() {\r\n            var names = this.callBase.apply(this);\r\n            names.add = \"dxTreeList-editingAddRowToNode\";\r\n            return names\r\n        }\r\n    }\r\n}());\r\nvar originalRowClick = _uiGrid_core2.default.extenders.views.rowsView._rowClick;\r\nvar originalRowDblClick = _uiGrid_core2.default.extenders.views.rowsView._rowDblClick;\r\nvar validateClick = function(e) {\r\n    var $targetElement = (0, _renderer.default)(e.event.target);\r\n    var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\r\n    if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n        return false\r\n    }\r\n    return !needToCallOriginalClickHandler.call(this, e, originalClickHandler)\r\n};\r\n\r\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\r\n    var $targetElement = (0, _renderer.default)(e.event.target);\r\n    if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\r\n        originalClickHandler.call(this, e);\r\n        return true\r\n    }\r\n    return false\r\n}\r\nvar RowsViewExtender = (0, _extend.extend)({}, _uiGrid_core2.default.extenders.views.rowsView, {\r\n    _renderCellCommandContent: function($container, options) {\r\n        var editingController = this._editingController;\r\n        var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\r\n        var isEditing = options.isEditing || isEditRow;\r\n        if (!isEditing) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return false\r\n    },\r\n    _rowClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _rowDblClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    }\r\n});\r\n_uiTree_list2.default.registerModule(\"editing\", {\r\n    defaultOptions: function() {\r\n        return (0, _extend.extend)(true, _uiGrid_core2.default.defaultOptions(), {\r\n            editing: {\r\n                texts: {\r\n                    addRowToNode: _message.default.format(\"dxTreeList-editingAddRowToNode\")\r\n                }\r\n            }\r\n        })\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: (0, _extend.extend)(true, {}, _uiGrid_core2.default.extenders.controllers, {\r\n            data: {\r\n                changeRowExpand: function() {\r\n                    this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }),\r\n        views: {\r\n            rowsView: RowsViewExtender,\r\n            headerPanel: _uiGrid_core2.default.extenders.views.headerPanel\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}