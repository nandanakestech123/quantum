{"ast":null,"code":"import _classCallCheck from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";// import React, { useState } from 'react'\n// import Dropzone from 'react-dropzone'\n// // import { api } from \"services/api\"\n// import { Toast } from \"service/toast\";\n// // import { fileUpload } from \"services/apiVariables\"\n// import uploaderImg from 'assets/images/uploader-img.svg';\n// export const DragFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\n//     const [loader, changeLoader] = useState(false);\n//     return (\n//         <Dropzone\n//             disabled={disabled}\n//             onDrop={(files, a) => {\n//                 if (files.length) {\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\n//                         return ''\n//                     }\n//                     changeLoader(true)\n//                     handleFileUpload(files)\n//                     uploadFile(files).then((res) => {\n//                         if (handleFileUpload) {\n//                             handleFileUpload(res.data)\n//                             changeLoader(false)\n//                         }\n//                     }).catch((err) => {\n//                         changeLoader(false)\n//                     })\n//                 } else {\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\n//                 }\n//             }}>\n//             {({ getRootProps, getInputProps }) => (\n//                 <>\n//                     {(multiButton) ?\n//                         <div className={`${className} position-relative `}>\n//                             {children}\n//                             {(multiButton) ?\n//                                 <input {...getInputProps()} />\n//                                 : <input />}\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                             {(multiButton) ?\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Upload</span>\n//                                     </div>\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Remove</span>\n//                                     </div>\n//                                 </div>\n//                                 : ''}\n//                         </div>\n//                         :\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\n//                             {children}\n//                             <input {...getInputProps()} />\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                         </div>\n//                     }\n//                 </>\n//             )\n//             }\n//         </Dropzone >\n//     )\n// }\n// const uploadFile = ([file]) => {\n//     return new Promise((resolve, reject) => {\n//         let formData = new FormData()\n//         formData.append('key1', file)\n//         // fileUpload.body = formData\n//         // api(fileUpload).then((res) => {\n//         //     resolve(res)\n//         // }).catch((err) => {\n//         //     reject(reject)\n//         //     if (err.statusCode === 413) {\n//         //         Toast({ type: 'error', message: err.message });\n//         //     }\n//         // })\n//     })\n// }\n// const checkFileValidation = (files, validationType) => {\n//     return files.every((file) => {\n//         let temp = file.name.split('.')\n//         let type = temp[temp.length - 1]\n//         return validationType.indexOf(type) != -1\n//     })\n// }\n// const accept = (type) => {\n//     if (type == 'image') {\n//         return 'image/*'\n//     } else if (type == 'pdf') {\n//         return 'pdf/*'\n//     }\n// }\nimport React,{Component}from\"react\";import{withTranslation}from\"react-i18next\";var DragFileUploadClass=/*#__PURE__*/function(_Component){_inherits(DragFileUploadClass,_Component);var _super=_createSuper(DragFileUploadClass);function DragFileUploadClass(){var _this;_classCallCheck(this,DragFileUploadClass);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={fileArray:[],imageArray:[]};_this.uploadImageFiles=function(e){var _this$state=_this.state,fileArray=_this$state.fileArray,imageArray=_this$state.imageArray;if(fileArray.length<5){fileArray.push(URL.createObjectURL(e.target.files[0]));imageArray.push(e.target.files[0]);_this.setState({fileArray:fileArray,imageArray:imageArray});}};_this.handlefile=function(e){var img=new FormData();img.append(\"images\",e.target.files[0]);_this.props.handleFileUpload(e.target.files[0]);// console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\n};_this.removepostImage=function(e,name){var fileArray=_this.state.fileArray;var index=fileArray.indexOf(name);if(index===0){fileArray.shift();}else{fileArray.pop();}_this.setState({fileArray:fileArray});};return _this;}_createClass(DragFileUploadClass,[{key:\"render\",value:function render(){var _this2=this;var fileArray=this.state.fileArray;var t=this.props.t;console.log(fileArray);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex flex-wrap image-upload\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p-0\",onChange:this.uploadImageFiles},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"imageUpload\",className:\"btn upload-btn cursor-pointer\"},t(\"Upload Image\")),/*#__PURE__*/React.createElement(\"input\",{onChange:this.handlefile,type:\"file\",id:\"imageUpload\",accept:\"image/*\",className:\"d-none\"})),(fileArray||[]).map(function(url){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"position-relative image-folder\"},/*#__PURE__*/React.createElement(\"img\",{src:url,alt:\"...\",className:\"image-upload position-relative\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"close-icon\"},/*#__PURE__*/React.createElement(\"span\",{className:\"icon-close fs-10\",onClick:function onClick(e){return _this2.removepostImage(e,url);}}))));})));}}]);return DragFileUploadClass;}(Component);export var DragFileUpload=withTranslation()(DragFileUploadClass);","map":{"version":3,"sources":["F:/webfe/src/component/common/DragFileUpload/index.js"],"names":["React","Component","withTranslation","DragFileUploadClass","state","fileArray","imageArray","uploadImageFiles","e","length","push","URL","createObjectURL","target","files","setState","handlefile","img","FormData","append","props","handleFileUpload","removepostImage","name","index","indexOf","shift","pop","t","console","log","map","url","DragFileUpload"],"mappings":"oggBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,eAAT,KAAgC,eAAhC,C,GAEMC,CAAAA,mB,+WACJC,K,CAAQ,CACNC,SAAS,CAAE,EADL,CAENC,UAAU,CAAE,EAFN,C,OAKRC,gB,CAAmB,SAACC,CAAD,CAAO,CACxB,gBAAgC,MAAKJ,KAArC,CAAMC,SAAN,aAAMA,SAAN,CAAiBC,UAAjB,aAAiBA,UAAjB,CACA,GAAID,SAAS,CAACI,MAAV,CAAmB,CAAvB,CAA0B,CACxBJ,SAAS,CAACK,IAAV,CAAeC,GAAG,CAACC,eAAJ,CAAoBJ,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAApB,CAAf,EACAR,UAAU,CAACI,IAAX,CAAgBF,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAAhB,EACA,MAAKC,QAAL,CAAc,CAAEV,SAAS,CAATA,SAAF,CAAaC,UAAU,CAAVA,UAAb,CAAd,EACD,CACF,C,OAEDU,U,CAAa,SAACR,CAAD,CAAO,CAClB,GAAIS,CAAAA,GAAG,CAAG,GAAIC,CAAAA,QAAJ,EAAV,CACAD,GAAG,CAACE,MAAJ,CAAW,QAAX,CAAqBX,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB,EACA,MAAKM,KAAL,CAAWC,gBAAX,CAA4Bb,CAAC,CAACK,MAAF,CAASC,KAAT,CAAe,CAAf,CAA5B,EACA;AACD,C,OAEDQ,e,CAAkB,SAACd,CAAD,CAAIe,IAAJ,CAAa,CAC7B,GAAMlB,CAAAA,SAAN,CAAoB,MAAKD,KAAzB,CAAMC,SAAN,CACA,GAAImB,CAAAA,KAAK,CAAGnB,SAAS,CAACoB,OAAV,CAAkBF,IAAlB,CAAZ,CACA,GAAIC,KAAK,GAAK,CAAd,CAAiB,CACfnB,SAAS,CAACqB,KAAV,GACD,CAFD,IAEO,CACLrB,SAAS,CAACsB,GAAV,GACD,CACD,MAAKZ,QAAL,CAAc,CACZV,SAAS,CAATA,SADY,CAAd,EAGD,C,qEAED,iBAAS,iBACP,GAAMA,CAAAA,SAAN,CAAoB,KAAKD,KAAzB,CAAMC,SAAN,CACA,GAAKuB,CAAAA,CAAL,CAAU,KAAKR,KAAf,CAAKQ,CAAL,CACAC,OAAO,CAACC,GAAR,CAAYzB,SAAZ,EACA,mBACE,qDACE,2BAAK,SAAS,CAAC,+BAAf,eACE,2BAAK,SAAS,CAAC,KAAf,CAAqB,QAAQ,CAAE,KAAKE,gBAApC,eAEE,6BACE,OAAO,CAAC,aADV,CAEE,SAAS,CAAC,+BAFZ,EAIGqB,CAAC,CAAC,cAAD,CAJJ,CAFF,cAQE,6BACE,QAAQ,CAAE,KAAKZ,UADjB,CAEE,IAAI,CAAC,MAFP,CAGE,EAAE,CAAC,aAHL,CAIE,MAAM,CAAC,SAJT,CAKE,SAAS,CAAC,QALZ,EARF,CADF,CAiBG,CAACX,SAAS,EAAI,EAAd,EAAkB0B,GAAlB,CAAsB,SAACC,GAAD,qBACrB,qDACE,2BAAK,SAAS,CAAC,gCAAf,eACE,2BACE,GAAG,CAAEA,GADP,CAEE,GAAG,CAAC,KAFN,CAGE,SAAS,CAAC,gCAHZ,EADF,cAME,2BAAK,SAAS,CAAC,YAAf,eACE,4BACE,SAAS,CAAC,kBADZ,CAEE,OAAO,CAAE,iBAACxB,CAAD,QAAO,CAAA,MAAI,CAACc,eAAL,CAAqBd,CAArB,CAAwBwB,GAAxB,CAAP,EAFX,EADF,CANF,CADF,CADqB,EAAtB,CAjBH,CADF,CADF,CAuCD,C,iCA9E+B/B,S,EAgFlC,MAAO,IAAMgC,CAAAA,cAAc,CAAG/B,eAAe,GAAGC,mBAAH,CAAtC","sourcesContent":["// import React, { useState } from 'react'\r\n// import Dropzone from 'react-dropzone'\r\n// // import { api } from \"services/api\"\r\n// import { Toast } from \"service/toast\";\r\n// // import { fileUpload } from \"services/apiVariables\"\r\n\r\n// import uploaderImg from 'assets/images/uploader-img.svg';\r\n\r\n// export const DragFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\r\n\r\n//     const [loader, changeLoader] = useState(false);\r\n\r\n//     return (\r\n//         <Dropzone\r\n//             disabled={disabled}\r\n//             onDrop={(files, a) => {\r\n//                 if (files.length) {\r\n\r\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\r\n\r\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\r\n\r\n//                         return ''\r\n//                     }\r\n\r\n//                     changeLoader(true)\r\n\r\n//                     handleFileUpload(files)\r\n\r\n//                     uploadFile(files).then((res) => {\r\n\r\n//                         if (handleFileUpload) {\r\n\r\n//                             handleFileUpload(res.data)\r\n\r\n//                             changeLoader(false)\r\n\r\n//                         }\r\n\r\n//                     }).catch((err) => {\r\n\r\n//                         changeLoader(false)\r\n\r\n//                     })\r\n\r\n//                 } else {\r\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\r\n//                 }\r\n\r\n//             }}>\r\n\r\n//             {({ getRootProps, getInputProps }) => (\r\n//                 <>\r\n//                     {(multiButton) ?\r\n//                         <div className={`${className} position-relative `}>\r\n//                             {children}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <input {...getInputProps()} />\r\n//                                 : <input />}\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\r\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Upload</span>\r\n//                                     </div>\r\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Remove</span>\r\n//                                     </div>\r\n//                                 </div>\r\n//                                 : ''}\r\n//                         </div>\r\n//                         :\r\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\r\n\r\n//                             {children}\r\n\r\n//                             <input {...getInputProps()} />\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n//                         </div>\r\n//                     }\r\n\r\n//                 </>\r\n\r\n//             )\r\n//             }\r\n//         </Dropzone >\r\n//     )\r\n// }\r\n\r\n// const uploadFile = ([file]) => {\r\n\r\n//     return new Promise((resolve, reject) => {\r\n\r\n//         let formData = new FormData()\r\n\r\n//         formData.append('key1', file)\r\n\r\n//         // fileUpload.body = formData\r\n\r\n//         // api(fileUpload).then((res) => {\r\n//         //     resolve(res)\r\n//         // }).catch((err) => {\r\n//         //     reject(reject)\r\n//         //     if (err.statusCode === 413) {\r\n//         //         Toast({ type: 'error', message: err.message });\r\n//         //     }\r\n//         // })\r\n//     })\r\n// }\r\n\r\n// const checkFileValidation = (files, validationType) => {\r\n\r\n//     return files.every((file) => {\r\n\r\n//         let temp = file.name.split('.')\r\n\r\n//         let type = temp[temp.length - 1]\r\n\r\n//         return validationType.indexOf(type) != -1\r\n\r\n//     })\r\n\r\n// }\r\n\r\n// const accept = (type) => {\r\n\r\n//     if (type == 'image') {\r\n\r\n//         return 'image/*'\r\n\r\n//     } else if (type == 'pdf') {\r\n\r\n//         return 'pdf/*'\r\n\r\n//     }\r\n\r\n// }\r\n\r\nimport React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nclass DragFileUploadClass extends Component {\r\n  state = {\r\n    fileArray: [],\r\n    imageArray: [],\r\n  };\r\n\r\n  uploadImageFiles = (e) => {\r\n    let { fileArray, imageArray } = this.state;\r\n    if (fileArray.length < 5) {\r\n      fileArray.push(URL.createObjectURL(e.target.files[0]));\r\n      imageArray.push(e.target.files[0]);\r\n      this.setState({ fileArray, imageArray });\r\n    }\r\n  };\r\n\r\n  handlefile = (e) => {\r\n    let img = new FormData();\r\n    img.append(\"images\", e.target.files[0]);\r\n    this.props.handleFileUpload(e.target.files[0]);\r\n    // console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\r\n  };\r\n\r\n  removepostImage = (e, name) => {\r\n    let { fileArray } = this.state;\r\n    let index = fileArray.indexOf(name);\r\n    if (index === 0) {\r\n      fileArray.shift();\r\n    } else {\r\n      fileArray.pop();\r\n    }\r\n    this.setState({\r\n      fileArray,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { fileArray } = this.state;\r\n    let {t} = this.props;\r\n    console.log(fileArray);\r\n    return (\r\n      <>\r\n        <div className=\"d-flex flex-wrap image-upload\">\r\n          <div className=\"p-0\" onChange={this.uploadImageFiles}>\r\n            {/* <input type=\"file\" className=\"px-2 cursor-pointer custom-file-input\" accept=\"image/*,video/*\"  /> */}\r\n            <label\r\n              htmlFor=\"imageUpload\"\r\n              className=\"btn upload-btn cursor-pointer\"\r\n            >\r\n              {t(\"Upload Image\")}\r\n            </label>\r\n            <input\r\n              onChange={this.handlefile}\r\n              type=\"file\"\r\n              id=\"imageUpload\"\r\n              accept=\"image/*\"\r\n              className=\"d-none\"\r\n            ></input>\r\n          </div>\r\n          {(fileArray || []).map((url) => (\r\n            <>\r\n              <div className=\"position-relative image-folder\">\r\n                <img\r\n                  src={url}\r\n                  alt=\"...\"\r\n                  className=\"image-upload position-relative\"\r\n                />\r\n                <div className=\"close-icon\">\r\n                  <span\r\n                    className=\"icon-close fs-10\"\r\n                    onClick={(e) => this.removepostImage(e, url)}\r\n                  ></span>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport const DragFileUpload = withTranslation()(DragFileUploadClass);\r\n"]},"metadata":{},"sourceType":"module"}