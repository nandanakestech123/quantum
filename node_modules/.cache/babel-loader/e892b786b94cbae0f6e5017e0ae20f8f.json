{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\component\\\\Admin\\\\Cart\\\\cart\\\\payment.js\";\nimport React, { Component } from \"react\";\nimport { NormalInput, NormalTextarea, NormalButton, NormalSelect, NormalDate, NormalModal, NormalDateTime } from \"component/common\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\nimport { getPayment, createPayment } from \"redux/actions/payment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { history } from \"helpers\";\nimport { getCommonApi, updateForm } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport closeIcon from \"assets/images/close.png\";\nimport helpers from \"../../../../service/Helper\";\nimport { Toast } from \"service/toast\";\nimport { withTranslation } from \"react-i18next\";\nimport moment from \"moment\";\nimport { isMoment } from \"moment\";\nexport class MakePaymentClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formFields: {\n        name: \"\",\n        contact: \"\",\n        address: \"\",\n        searchStaff: \"\",\n        payTableDropDownValue: \"\"\n      },\n      responseData: {},\n      premisesOption: [],\n      selectedCards: [],\n      selectedCardsPayAmount: 0,\n      cardOption: [],\n      ewalletoptions: [],\n      ewalletField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true\n      },\n      cardField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true,\n        pay_rem1: \"\",\n        pay_rem2: \"\",\n        pay_rem3: \"\",\n        pay_rem4: \"\",\n        App_code: \"\"\n      },\n      balance: 0,\n      errorMessage: \"123\",\n      prepaidCustomerData: [],\n      voucherCustomerData: [],\n      creditNoteCustomerData: [],\n      accountHeader: [],\n      isMakePaymentButtonClicked: \"false\",\n      isTreatmentDoneButton: true,\n      itemProductAmount: 0,\n      itemServiceAmount: 0,\n      itemProductServiceVoucherAmount: 0,\n      displayTablePrepaid: [],\n      displayTableCreditNote: [],\n      displayTableVoucher: [],\n      paytableData: [],\n      paytableFullData: [],\n      payGroupData: [],\n      selectPaymentGroup: \"\",\n      selectPaymentGroupId: \"\",\n      isSelectedPaymentType: \"\",\n      displayModelPaymentType: \"\",\n      txtUserPayAmount: 0,\n      isOpenSubPayment: false,\n      pay_rem4: \"\",\n      DateofPay: new Date(),\n      MinimumDate: new Date(),\n      is_paymentdate: false,\n      isMakePaymentLoading: false\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n    };\n\n    this.getPayment = () => {\n      let {\n        id,\n        cartId,\n        cartData\n      } = this.props; //id = 82318;\n      //cartId = \"ICMD100226\";\n      //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\n\n      if (id) {\n        this.props.getPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`).then(res => {\n          console.log(\"Payment Details:\", res);\n          let {\n            data,\n            status,\n            prepaid_data\n          } = res;\n\n          if (status === 200) {\n            this.setState({\n              responseData: data,\n              balance: Number(data.billable_amount),\n              txtUserPayAmount: Number(data.billable_amount),\n              prepaid_data: prepaid_data.prepaid,\n              product_only: prepaid_data.product_only,\n              service_only: prepaid_data.service_only,\n              all_only: prepaid_data.all_only,\n              is_paymentdate: data.is_paymentdate\n            });\n          }\n        });\n      } //let {cartData} = this.props;\n\n\n      let stringifiedCartData = cartData.data;\n      let {\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      } = this.state;\n\n      if (stringifiedCartData) {\n        stringifiedCartData.map(item => {\n          //alert(JSON.stringify(item));\n          if (item.recorddetail === \"Product\") {\n            itemProductAmount += parseFloat(item.total_price);\n          }\n\n          if (item.recorddetail === \"Service\" && item.itemdesc.indexOf(\"(FOC)\") <= 0) {\n            itemServiceAmount += parseFloat(item.total_price);\n            console.log(itemServiceAmount);\n            console.log(item.total_price);\n          }\n\n          if (item.recorddetail === \"Product\" || item.recorddetail === \"Service\" || item.recorddetail === \"Voucher\") {\n            itemProductServiceVoucherAmount += parseFloat(item.total_price);\n          }\n        });\n      }\n\n      this.setState({\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      });\n    };\n\n    this.getDataFromResponses = data => {\n      let {\n        cardOption,\n        premisesOption\n      } = this.state;\n\n      for (let key of data.CARD) {\n        cardOption.push({\n          label: key.pay_description,\n          value: key.id\n        });\n      }\n\n      for (let key of data.CASH) {\n        premisesOption.push({\n          label: key.pay_description,\n          value: key.id\n        });\n      }\n\n      this.setState({\n        cardOption,\n        premisesOption\n      });\n    };\n\n    this.handleMultiple = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      console.log(\"handleMultiple\", value, name);\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n    };\n\n    this.getVoucherData = api => {\n      this.props.getCommonApi(`voucher/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          voucherCustomerData\n        } = this.state;\n        voucherCustomerData = data;\n        console.log(\"voucherCustomerData\", data); // accountHeader = header_data;\n\n        this.setState({\n          voucherCustomerData\n        }, () => {\n          console.log(\"test\");\n          this.HideVoucherTableData();\n        });\n      });\n    };\n\n    this.getPrepaidData = () => {\n      this.getPrepaidAccountData(\"\");\n    };\n\n    this.getPrepaidAccountData = api => {\n      console.log(\"dd\");\n      this.props.getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          prepaidCustomerData\n        } = this.state; //prepaidCustomerData = data;\n\n        prepaidCustomerData = [];\n        console.log(\"prepaidCustomerData\", data);\n\n        for (let item of data) {\n          let itemData = {};\n          itemData[\"conditiontype1\"] = item.conditiontype1;\n          itemData[\"cust_code\"] = item.cust_code;\n          itemData[\"all\"] = item.all;\n          itemData[\"exp_status\"] = item.exp_status;\n          itemData[\"exp_date\"] = item.exp_date;\n          itemData[\"last_update\"] = item.last_update;\n          itemData[\"line_no\"] = item.line_no;\n          itemData[\"id\"] = item.id;\n          itemData[\"pp_amt\"] = item.pp_amt;\n          itemData[\"pp_bonus\"] = item.pp_bonus;\n          itemData[\"outstanding\"] = item.outstanding;\n          itemData[\"pp_no\"] = item.pp_no;\n          itemData[\"pp_total\"] = item.pp_total;\n          itemData[\"prepaid\"] = item.prepaid;\n          itemData[\"product\"] = item.product;\n          itemData[\"remain\"] = item.remain;\n          itemData[\"sa_date\"] = item.sa_date;\n          itemData[\"service\"] = item.service;\n          itemData[\"topup_amt\"] = item.topup_amt;\n          itemData[\"type\"] = item.type;\n          itemData[\"use_amt\"] = item.use_amt;\n          itemData[\"pp_desc\"] = item.pp_desc;\n\n          if (item.conditiontype1 === \"Service Only\") {\n            if (Number(this.state.service_only) > Number(item.remain)) {\n              itemData[\"Finaluse_amt\"] = item.remain;\n            } else {\n              itemData[\"Finaluse_amt\"] = this.state.service_only;\n            }\n          }\n\n          if (item.conditiontype1 === \"Product Only\") {\n            if (Number(this.state.product_only) > Number(item.remain)) {\n              itemData[\"Finaluse_amt\"] = item.remain;\n            } else {\n              itemData[\"Finaluse_amt\"] = this.state.product_only;\n            }\n          }\n\n          if (item.conditiontype1 === \"All\") {\n            let finalamount = Number(this.state.all_only);\n\n            if (this.state.prepaid_data) {\n              this.state.prepaid_data.filter(dataitem => dataitem.prepaid_id == item.id).map(filteritem => {\n                finalamount = Number(this.state.all_only) - Number(filteritem.deposit);\n              });\n            }\n\n            if (Number(finalamount) > Number(item.remain)) {\n              itemData[\"Finaluse_amt\"] = Number(item.remain).toFixed(2);\n            } else {\n              itemData[\"Finaluse_amt\"] = Number(finalamount).toFixed(2);\n            }\n          }\n\n          prepaidCustomerData.push(itemData);\n        }\n\n        this.setState({\n          prepaidCustomerData\n        }, () => {\n          this.HidePrepaidTableData();\n        });\n      }); // accountHeader = header_data;\n    };\n\n    this.getCreditNoteAccountData = api => {\n      this.props.getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          creditNoteCustomerData\n        } = this.state;\n        creditNoteCustomerData = data; // accountHeader = header_data;\n\n        this.setState({\n          creditNoteCustomerData\n        }, () => {\n          this.HideCreditNoteTableData();\n        });\n      });\n    };\n\n    this.getPayGroup = () => {\n      this.props.getCommonApi(`paygroup/`).then(res => {\n        let {\n          payGroupData\n        } = this.state;\n\n        for (let key of res.data) {\n          payGroupData.push({\n            label: key.pay_group_code,\n            value: key.id,\n            picturelocation: key.picturelocation\n          });\n        }\n\n        this.setState({\n          payGroupData\n        });\n      });\n    };\n\n    this.getFullPayTable = () => {\n      this.props.getCommonApi(`paytablenew/`).then(res => {\n        let {\n          paytableFullData\n        } = this.state;\n        paytableFullData = res.data;\n        this.setState({\n          paytableFullData\n        });\n      });\n    };\n\n    this.getPayTableNameBasedOnId = payTableId => {\n      //debugger;\n      console.log(payTableId);\n      let {\n        paytableFullData\n      } = this.state;\n      const test = paytableFullData.filter(res => res.id == payTableId);\n      return test[0].pay_description;\n    };\n\n    this.handleChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n      let {\n        balance,\n        selectedCards,\n        txtUserPayAmount,\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      selectedCards.push({\n        pay_typeid: value,\n        pay_amt: parseFloat(txtUserPayAmount),\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false,\n        pay_rem4: this.state.pay_rem4\n      });\n      balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n      txtUserPayAmount = balance;\n      this.setState({\n        txtUserPayAmount,\n        balance,\n        isOpenSubPayment\n      });\n    };\n\n    this.handleCreditChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      this.setState({\n        cardField\n      });\n    };\n\n    this.handleTreatmentDone = () => {\n      let {\n        selectedCards,\n        DateofPay\n      } = this.state;\n      selectedCards.push({\n        //pay_typeid: 31, //twoherbs\n        //pay_typeid: 2, //normal\n        pay_typeid: 1,\n        //sensuous\n        pay_amt: 0,\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false,\n        pay_rem4: this.state.pay_rem4\n      });\n      let data = selectedCards;\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}&pay_date=${dateFormat(new Date(DateofPay), \"yyyy-mm-dd\")}`, data).then(res => {\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.setState({\n        isMakePaymentLoading: true\n      });\n      let {\n        selectedCards,\n        DateofPay\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"true\"\n      });\n      console.log(\"Selected Date: \", dateFormat(new Date(DateofPay), \"yyyy-mm-dd\"));\n      let data = selectedCards;\n      console.log(\"SubmitDatapayment\", data);\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}&pay_date=${dateFormat(new Date(DateofPay), \"yyyy-mm-dd\")}`, data).then(res => {\n        this.setState({\n          isMakePaymentLoading: false\n        });\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n      this.setState({\n        isMakePaymentLoading: false\n      });\n    };\n\n    this.addCreditCard = async () => {\n      if (!this.validator.fieldValid(\"cardFieldType\")) {\n        this.validator.showMessageFor(\"cardFieldType\");\n        return;\n      }\n\n      let {\n        cardField,\n        selectedCards,\n        balance,\n        responseData,\n        txtUserPayAmount\n      } = this.state;\n      let userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (parseFloat(this.state.responseData.billable_amount) > 0) {\n        if (userPayAmount == 0) {\n          return;\n        }\n      }\n\n      if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\n        let result = this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\";\n        Toast({\n          type: \"error\",\n          message: result\n        }); // alert(\n        //   this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\"\n        // );\n\n        return;\n      } else {\n        selectedCards.push({\n          pay_typeid: cardField.pay_typeid,\n          pay_amt: userPayAmount,\n          credit_debit: true,\n          pay_premise: false,\n          pay_rem1: cardField.pay_rem1,\n          pay_rem2: cardField.pay_rem2,\n          pay_rem3: cardField.pay_rem3,\n          pay_rem4: this.state.pay_rem4,\n          prepaid: false\n        });\n      }\n\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addPrepaid = selectedPrepaid => {\n      const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\"YYYY-MM-DD\");\n      const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n      const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\n      let userPayAmount = 0;\n      let {\n        itemServiceAmount,\n        itemProductAmount,\n        itemProductServiceVoucherAmount,\n        txtUserPayAmount\n      } = this.state;\n      console.log(txtUserPayAmount);\n      userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (isValid) {\n        Toast({\n          type: \"error\",\n          message: \"Check Expiry Date\"\n        });\n        return;\n      }\n\n      if (userPayAmount <= 0) {\n        // alert(\"hi\");\n        Toast({\n          type: \"error\",\n          message: \"Prepaid is Not allowed\"\n        });\n        return;\n      }\n\n      let selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\n\n      if (selectedRemainingPrepaidAmount < userPayAmount) {//return\n      } else if (selectedRemainingPrepaidAmount > userPayAmount) {\n        selectedRemainingPrepaidAmount = parseFloat(userPayAmount);\n      }\n      /*\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      */\n\n\n      if (selectedPrepaid.conditiontype1 === \"Service Only\") {\n        //For Service\n        if (parseFloat(itemServiceAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is Not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemServiceAmount);\n          console.log(itemServiceAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemServiceAmount = itemServiceAmount - userPayAmount;\n        this.setState({\n          itemServiceAmount\n        });\n      } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\n        //For Product\n        if (parseFloat(itemProductAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductAmount = itemProductAmount - userPayAmount;\n        this.setState({\n          itemProductAmount\n        });\n      } else {\n        if (parseFloat(itemProductServiceVoucherAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemProductServiceVoucherAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductServiceVoucherAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductServiceVoucherAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductServiceVoucherAmount = itemProductServiceVoucherAmount - userPayAmount;\n        this.setState({\n          itemProductServiceVoucherAmount\n        });\n      }\n\n      if (userPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Prepaid is not allowed\"\n        });\n        return;\n      }\n\n      const payTypeId = 23; //normal twoherbs\n      //const payTypeId = 19; //healspa sensuous\n      //const payTypeId = 8; //glamour\n      //const payTypeId = 9; //beskin\n\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        selectedCards,\n        isOpenSubPayment\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: true,\n        pay_amt: userPayAmount,\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedPrepaid.pp_no + \" - \" + selectedPrepaid.line_no + \" - \" + selectedPrepaid.pp_desc,\n        pay_rem2: selectedPrepaid.id,\n        pay_rem4: this.state.pay_rem4,\n        prepaid_ct: selectedPrepaid.conditiontype1\n      });\n      console.log(\"BeforeAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      let setdisplayTablePrepaid = this.state.displayTablePrepaid;\n      setdisplayTablePrepaid.push(selectedPrepaid.id);\n      this.setState({\n        displayTablePrepaid: setdisplayTablePrepaid\n      });\n      console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      this.HidePrepaidTableData();\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setBalanceToAllTextBoxes(balance);\n      console.log(balance);\n      this.setState({\n        isOpenSubPayment: false\n      });\n    };\n\n    this.addVoucher = selectedVoucher => {\n      debugger;\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        isOpenSubPayment,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Voucher is not allowed\"\n        });\n        return;\n      }\n\n      const selectedVoucherAmount = parseFloat(selectedVoucher.value);\n      let pay_amt_setup = 0;\n\n      if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedVoucherAmount;\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Partial Amount is not applicable in voucher\"\n        });\n        return; // alert(\"Partial Amount is not applicable in voucher\");\n        // return;\n      }\n\n      const payTypeId = 9; //normal\n      //const payTypeId = 8; //healspa sens\n      //const payTypeId = 25; //twoherbs\n      //const payTypeId = 4; //glamour\n      //const payTypeId = 5; //beskin\n\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedVoucher.voucher_no,\n        pay_rem2: selectedVoucher.voucher_no,\n        pay_rem4: this.state.pay_rem4\n      });\n      console.log(\"BeforeAdd-displayTableVoucher\", this.state.displayTableVoucher);\n      let setdisplayTableVoucher = this.state.displayTableVoucher;\n      setdisplayTableVoucher.push(selectedVoucher.voucher_no);\n      this.setState({\n        displayTableVoucher: setdisplayTableVoucher\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableVoucher);\n      this.HideVoucherTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addCreditNote = selectedCreditNote => {\n      console.log(selectedCreditNote);\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Credit Note is not allowed\"\n        });\n        return;\n      }\n\n      const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\n      console.log(selectedCreditNoteAmount);\n      let pay_amt_setup = 0;\n\n      if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedCreditNoteAmount;\n      } else {\n        pay_amt_setup = txtUserPayAmount;\n      }\n\n      const payTypeId = 17; //normal\n      //const payTypeId = 24; //twoherbs\n      //const payTypeId = 12; //healspa sens\n      //const payTypeId = 5; //glamour\n      //const payTypeId = 6; //beskin\n\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedCreditNote.credit_code,\n        pay_rem2: selectedCreditNote.transaction,\n        pay_rem4: this.state.pay_rem4\n      });\n      console.log(\"BeforeAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      let setdisplayTableCreditNote = this.state.displayTableCreditNote;\n      setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\n      this.setState({\n        displayTableCreditNote: setdisplayTableCreditNote\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      this.HideCreditNoteTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.removeCards = idx => () => {\n      let {\n        selectedCards,\n        balance,\n        cardField,\n        ewalletField,\n        itemProductServiceVoucherAmount,\n        itemProductAmount,\n        itemServiceAmount\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"false\"\n      });\n      balance = parseFloat(balance) + parseFloat(idx.pay_amt);\n      var array = [...selectedCards]; // make a separate copy of the array\n\n      var index = array.indexOf(idx);\n\n      if (idx.pay_typeid == 23) {\n        //normal twoherbs\n        //if (idx.pay_typeid == 19) { //healspa sens\n        //if (idx.pay_typeid == 8) { //glamour\n        //if (idx.pay_typeid == 9) { //beskin\n        if (idx.prepaid_ct == \"Product Only\") {\n          itemProductAmount = itemProductAmount + idx.pay_amt;\n        } else if (idx.prepaid_ct == \"Service Only\") {\n          itemServiceAmount = itemServiceAmount + idx.pay_amt;\n        } else {\n          itemProductServiceVoucherAmount = itemProductServiceVoucherAmount + idx.pay_amt;\n        }\n\n        this.setState({\n          itemProductServiceVoucherAmount,\n          itemProductAmount,\n          itemServiceAmount\n        });\n      }\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        this.setState({\n          selectedCards: array,\n          balance\n        });\n      } //console.log(\"idx\", idx);\n\n\n      var removedTerm = idx.pay_typeid; //console.log(\"removedTerm\", removedTerm);\n      //console.log(\"idx.pay_rem2\", idx.pay_rem2);\n\n      if (removedTerm == \"23\") {\n        //normal twoherbs\n        //if (removedTerm == \"19\") { //healspa sens\n        //if (removedTerm == \"8\") { //glamour\n        //if (removedTerm == \"9\") { //beskin\n        const items = this.state.displayTablePrepaid;\n        console.log(\"BeforeRemove-displayTablePrepaid\", items);\n        const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTablePrepaid: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTablePrepaid\", this.state.displayTablePrepaid);\n        });\n        this.getPrepaidAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"17\") {\n        //normal\n        //if (removedTerm == \"24\") { //twoherbs\n        //if (removedTerm == \"12\") { //healspa sens\n        //if (removedTerm == \"5\") { //glamour\n        //if (removedTerm == \"6\") { //beskin\n        const items = this.state.displayTableCreditNote;\n        console.log(\"BeforeRemove-displayTableCreditNote\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableCreditNote: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableCreditNote\", this.state.displayTableCreditNote);\n        });\n        this.getCreditNoteAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"9\") {\n        //normal\n        //if (removedTerm == \"25\") { //twoherbs\n        //if (removedTerm == \"8\") { //healspa sens\n        //if (removedTerm == \"4\") { //glamour\n        //if (removedTerm == \"5\") { //beskin\n        const items = this.state.displayTableVoucher;\n        console.log(\"BeforeRemove-displayTableVoucher\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableVoucher: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableVoucher\", this.state.displayTableVoucher);\n        });\n        this.getVoucherData(\"\");\n      }\n\n      cardField[\"pay_amt\"] = balance;\n      ewalletField[\"pay_amt\"] = balance;\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      this.props.getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`).then(res => {\n        this.setState({\n          paytableData: []\n        });\n        let {\n          paytableData,\n          isSelectedPaymentType,\n          displayModelPaymentType\n        } = this.state;\n        isSelectedPaymentType = selPayTypeName.trim();\n        displayModelPaymentType = selPayTypeName.trim();\n\n        for (let key of res.data) {\n          paytableData.push({\n            label: key.pay_description,\n            value: key.id\n          });\n        }\n\n        this.setState({\n          paytableData\n        }, () => {\n          let {\n            isOpenSubPayment\n          } = this.state;\n\n          if (paytableData.length == 0) {\n            Toast({\n              type: \"error\",\n              message: \"Pay Table Not Exists\"\n            });\n            return;\n          } else if (selPayTypeName.trim() === \"VOUCHER\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"PREPAID\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"Credit\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"CARD\") {\n            isOpenSubPayment = true;\n          } else if (paytableData.length == 1) {\n            isOpenSubPayment = false;\n            let payTypeId = paytableData[0].value;\n            let {\n              balance,\n              selectedCards,\n              txtUserPayAmount\n            } = this.state;\n\n            if (parseFloat(this.state.responseData.billable_amount) > 0) {\n              if (parseFloat(txtUserPayAmount) == 0) {\n                return;\n              }\n            }\n\n            if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\n              // alert(\n              //   this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"\n              // );\n              let result = this.getPayTableNameBasedOnId(payTypeId) + \" already exists\";\n              Toast({\n                type: \"error\",\n                message: result\n              }); //alert(\"Already Exists\");\n\n              return;\n            } else {\n              selectedCards.push({\n                pay_typeid: payTypeId,\n                pay_amt: parseFloat(txtUserPayAmount),\n                credit_debit: false,\n                pay_premise: true,\n                prepaid: false,\n                pay_rem4: this.state.pay_rem4\n              });\n              balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n              txtUserPayAmount = balance;\n              this.setState({\n                txtUserPayAmount,\n                balance\n              });\n              return;\n            }\n          } else if (paytableData.length >= 1) {\n            isOpenSubPayment = true;\n            isSelectedPaymentType = \"Multiple\";\n          }\n\n          this.setState({\n            isOpenSubPayment,\n            isSelectedPaymentType,\n            displayModelPaymentType\n          });\n        });\n      });\n    };\n\n    this.handleDialog = async () => {\n      let {\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      await this.setState({\n        isOpenSubPayment\n      });\n    };\n\n    this.handleChangeCard = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      await this.setState({\n        cardField\n      });\n    };\n\n    this.handleDatePick = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        DateofPay\n      } = this.state;\n      DateofPay = value;\n      await this.setState({\n        DateofPay\n      });\n      let DatePayment = {};\n      DatePayment[\"DateofPayment\"] = value;\n      await this.props.updateForm(\"CartPaymentDate\", DatePayment);\n    };\n  }\n\n  componentDidMount() {\n    //debugger;\n    let From = new Date();\n    let {\n      MinimumDate,\n      DateofPay\n    } = this.state;\n    let firstdayMonth = new Date(From.getFullYear(), From.getMonth() - 6, From.getDate() + 1);\n\n    if (this.props.CartPaymentDate && this.props.CartPaymentDate[\"DateofPayment\"]) {\n      DateofPay = new Date(this.props.CartPaymentDate.DateofPayment);\n    } else {\n      DateofPay = new Date();\n    }\n\n    MinimumDate = firstdayMonth;\n    this.setState({\n      MinimumDate,\n      DateofPay\n    });\n    this.getPayment();\n    this.getPayGroup();\n    this.getFullPayTable();\n    this.getPrepaidData();\n    this.getCreditNoteAccountData(\"\");\n    this.getVoucherData(\"\");\n    console.log(\"cartdata From cart\", this.props.cartData);\n  }\n\n  handleChangeTextBox(event) {\n    this.setState({\n      txtUserPayAmount: event.target.value\n    });\n  }\n\n  handleChangeRemarkBox(event) {\n    this.setState({\n      pay_rem4: event.target.value\n    });\n  }\n\n  checkPayTypeIdAlreadyExists(val) {\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\n  }\n\n  HidePrepaidTableData() {\n    let {\n      prepaidCustomerData,\n      displayTablePrepaid\n    } = this.state;\n    displayTablePrepaid.map(item => {\n      var selectedPrepaid = prepaidCustomerData.filter(prepaid => prepaid.id != item);\n      this.setState({\n        prepaidCustomerData: selectedPrepaid\n      });\n    });\n  }\n\n  HideCreditNoteTableData() {\n    let {\n      creditNoteCustomerData,\n      displayTableCreditNote\n    } = this.state;\n    displayTableCreditNote.map(item => {\n      var selectedCreditNote = creditNoteCustomerData.filter(creditNote => creditNote.credit_code != item);\n      this.setState({\n        creditNoteCustomerData: selectedCreditNote\n      });\n    });\n  }\n\n  HideVoucherTableData() {\n    let {\n      voucherCustomerData,\n      displayTableVoucher\n    } = this.state;\n    displayTableVoucher.map(item => {\n      var selectedVoucher = voucherCustomerData.filter(voucher => voucher.voucher_no != item);\n      this.setState({\n        voucherCustomerData: selectedVoucher\n      });\n    });\n  }\n\n  setBalanceToAllTextBoxes(balance) {\n    this.setState({\n      balance: balance,\n      txtUserPayAmount: balance\n    });\n  }\n\n  checkTypeOfCartItemContainsDeposit(cartData) {\n    let stringifiedCartData = cartData.data;\n\n    if (stringifiedCartData) {\n      stringifiedCartData.map(item => {\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\n          this.state.isTreatmentDoneButton = false;\n        }\n      });\n    }\n  }\n\n  render() {\n    let {\n      responseData,\n      balance,\n      isTreatmentDoneButton,\n      payGroupData,\n      paytableData,\n      isOpenSubPayment,\n      isSelectedPaymentType,\n      displayModelPaymentType,\n      cardField,\n      pay_rem4,\n      DateofPay,\n      MinimumDate,\n      is_paymentdate,\n      isMakePaymentLoading\n    } = this.state;\n    let {\n      t\n    } = this.props;\n    let {\n      payTableDropDownValue\n    } = this.state.formFields;\n    console.log(payTableDropDownValue);\n    let insideRadioButtonData;\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\n\n    if (isSelectedPaymentType == \"VOUCHER\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-bordered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 15\n        }\n      }, t(\"Vocucher No\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 15\n        }\n      }, t(\"Value\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 15\n        }\n      }, t(\"Exp. Date\"))), this.state.voucherCustomerData.map((selectedVoucher, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addVoucher.bind(this, selectedVoucher),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 17\n        }\n      }, selectedVoucher.voucher_no), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 17\n        }\n      }, selectedVoucher.value), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 17\n        }\n      }, selectedVoucher.issued_expiry_date)))));\n    } else if (isSelectedPaymentType == \"PREPAID\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1107,\n          columnNumber: 15\n        }\n      }, t(\"Category\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 15\n        }\n      }, t(\"Amount\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 15\n        }\n      }, t(\"Remaining\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1110,\n          columnNumber: 15\n        }\n      }, t(\"Invoice No.\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 15\n        }\n      }, t(\"Exp. Date\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 15\n        }\n      }, t(\"Condition Type\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 15\n        }\n      }, t(\"Use Amount\"))), this.state.prepaidCustomerData.map((selectedPrepaid, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addPrepaid.bind(this, selectedPrepaid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_desc), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_total), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.remain), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.prepaid), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.exp_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.conditiontype1), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.Finaluse_amt)))));\n    } else if (isSelectedPaymentType == \"Credit\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1135,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1136,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1138,\n          columnNumber: 15\n        }\n      }, t(\"Credit\"), \" #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 15\n        }\n      }, t(\"Date\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 15\n        }\n      }, t(\"Amount\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1141,\n          columnNumber: 15\n        }\n      }, t(\"Balance\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1142,\n          columnNumber: 15\n        }\n      }, t(\"Status\"))), this.state.creditNoteCustomerData.map((creditNote, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addCreditNote.bind(this, creditNote),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1150,\n          columnNumber: 17\n        }\n      }, creditNote.credit_code), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 17\n        }\n      }, creditNote.sa_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152,\n          columnNumber: 17\n        }\n      }, creditNote.amount), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153,\n          columnNumber: 17\n        }\n      }, creditNote.balance), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 17\n        }\n      }, creditNote.status)))));\n    } else if (isSelectedPaymentType == \"CARD\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1162,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex flex-wrap justify-content-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1164,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 15\n        }\n      }, t(\"Select Card\"), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: cardField.pay_typeid,\n        name: \"pay_typeid\",\n        onChange: this.handleCreditChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1168,\n          columnNumber: 17\n        }\n      })), this.validator.message(\"cardFieldType\", cardField.pay_typeid, \"required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1183,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 15\n        }\n      }, t(\"Card No.\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem1,\n        name: \"pay_rem1\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1186,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1193,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1194,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1195,\n          columnNumber: 15\n        }\n      }, t(\"Name\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem2,\n        name: \"pay_rem2\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1204,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206,\n          columnNumber: 15\n        }\n      }, t(\"Exp Month\"), \" / \", t(\"Year\"), /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"mm/YYYY\",\n        value: cardField.pay_rem3,\n        name: \"pay_rem3\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1208,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 15\n        }\n      }, t(\"Approval Code\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.App_code,\n        name: \"App_code\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1220,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1228,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1229,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1230,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        mainbg: false,\n        className: \"col-12 mt-4 ml-2 btn-outline-success\",\n        label: \"CONFIRM\",\n        onClick: () => this.addCreditCard(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1238,\n          columnNumber: 15\n        }\n      }))));\n    } else if (isSelectedPaymentType == \"Multiple\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1255,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1256,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1257,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1258,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        className: \"col-12 fs-15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1259,\n          columnNumber: 17\n        }\n      }, t(\"Choose Option\")), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: payTableDropDownValue,\n        name: \"payTableDropDownValue\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 17\n        }\n      })))));\n    } else {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1273,\n          columnNumber: 31\n        }\n      });\n    }\n\n    let payGroupDataContent = [];\n    console.log(payGroupData);\n    payGroupData.forEach((item, i) => {\n      payGroupDataContent.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-4 payment-item cursor-pointer\",\n        style: {\n          width: \"50px\",\n          padding: \"15px\"\n        },\n        key: i,\n        onClick: () => this.addNewPaymentData(item.value, item.label),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1279,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1285,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: helpers.getMediaUrl() + \"media/\" + item.picturelocation,\n        label: item.label,\n        style: {\n          textAlign: \"center\"\n        },\n        width: \"40\",\n        height: \"40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1286,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1294,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          width: \"100px\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 13\n        }\n      }, item.label))));\n    });\n    let {\n      cartId,\n      cartData,\n      tokenDetails\n    } = this.props;\n    console.log(cartId, tokenDetails, this.props.cartData);\n    this.checkTypeOfCartItemContainsDeposit(cartData);\n    let userAddedPayTableData = /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-bordered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1306,\n        columnNumber: 7\n      }\n    }, this.state.selectedCards.map((selectedCards, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309,\n        columnNumber: 13\n      }\n    }, this.getPayTableNameBasedOnId(selectedCards.pay_typeid)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1312,\n        columnNumber: 13\n      }\n    }, selectedCards.pay_amt.toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 p-0 fs-20 cursor-pointer\",\n      onClick: this.removeCards(selectedCards),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 17\n      }\n    }))))));\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-2 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-left text-black common-label-text \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 13\n      }\n    }, t(\"Enter Amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: this.state.txtUserPayAmount,\n      onChange: this.handleChangeTextBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 15\n      }\n    }), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|min:0,num\"), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|max:\" + this.state.balance + \",num\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 13\n      }\n    }, t(\"Remark\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: pay_rem4,\n      name: \"pay_rem4\",\n      onChange: this.handleChangeRemarkBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-2 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 11\n      }\n    }, is_paymentdate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 17\n      }\n    }, t(\"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalDate, {\n      value: new Date(DateofPay),\n      name: \"DateofPay\",\n      type: \"date\",\n      onChange: this.handleDatePick,\n      minDate: new Date(MinimumDate),\n      maxDate: new Date(),\n      showDisabledMonthNavigation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 19\n      }\n    }))) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4 col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 13\n      }\n    }, isTreatmentDoneButton ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 mr-2 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15\",\n      label: \"TREATMENT DONE\",\n      onClick: () => this.handleTreatmentDone(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 19\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1394,\n        columnNumber: 15\n      }\n    }, isMakePaymentLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"d-flex align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"spinner-border\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398,\n        columnNumber: 23\n      }\n    }, t(\"Loading...\")))) : this.state.isMakePaymentButtonClicked == \"true\" ? /*#__PURE__*/React.createElement(NormalButton, {\n      submitBtn: true,\n      className: \"col-12\",\n      label: \"Make payment\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(NormalButton, {\n      submitBtn: true,\n      className: \"col-12\",\n      label: \"Make payment\",\n      onClick: () => this.handleSubmit(),\n      disabled: this.state.selectedCards.length <= 0 || balance > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1409,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 9\n      }\n    }, t(\"Select Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row paymentGroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1426,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 13\n      }\n    }, payGroupDataContent)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 make-payment-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1430,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431,\n        columnNumber: 13\n      }\n    }, t(\"List of Selections\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-1 mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-7 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 23\n      }\n    }, t(\"Subtotal\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.subtotal), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1439,\n        columnNumber: 23\n      }\n    }, t(\"Discount ($)\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.discount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 23\n      }\n    }, t(\"Transac amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.trans_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 23\n      }\n    }, t(\"Deposit\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.deposit_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 23\n      }\n    }, responseData.tax_lable), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.tax_amt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 23\n      }\n    }, t(\"Billing Amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 fw-700 text-center text-orenge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.billable_amount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 f-600 text-center mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 23\n      }\n    }, t(\"Balance Amount\"), \": \", Number(balance).toFixed(2))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-2 payment-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 15\n      }\n    }, userAddedPayTableData)))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"payment-modal\",\n      style: {\n        minWidth: \"70%\"\n      },\n      modal: isOpenSubPayment,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1522,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"fs-18 f-600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523,\n        columnNumber: 13\n      }\n    }, displayModelPaymentType)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 11\n      }\n    }), insideRadioButtonData));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetail: state.appointment.appointmentDetail,\n  selected_cstomer: state.common.selected_cstomer,\n  tokenDetails: state.authStore.tokenDetails,\n  CartPaymentDate: state.appointment.CartPaymentDate\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getPayment,\n    getCommonApi,\n    createPayment,\n    updateForm\n  }, dispatch);\n};\n\nexport const Payment = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(MakePaymentClass));","map":{"version":3,"sources":["F:/webfe/src/component/Admin/Cart/cart/payment.js"],"names":["React","Component","NormalInput","NormalTextarea","NormalButton","NormalSelect","NormalDate","NormalModal","NormalDateTime","Button","Form","FormGroup","Label","Input","FormText","getPayment","createPayment","connect","bindActionCreators","history","getCommonApi","updateForm","dateFormat","SimpleReactValidator","closeIcon","helpers","Toast","withTranslation","moment","isMoment","MakePaymentClass","state","formFields","name","contact","address","searchStaff","payTableDropDownValue","responseData","premisesOption","selectedCards","selectedCardsPayAmount","cardOption","ewalletoptions","ewalletField","pay_typeid","pay_amt","credit_debit","cardField","pay_rem1","pay_rem2","pay_rem3","pay_rem4","App_code","balance","errorMessage","prepaidCustomerData","voucherCustomerData","creditNoteCustomerData","accountHeader","isMakePaymentButtonClicked","isTreatmentDoneButton","itemProductAmount","itemServiceAmount","itemProductServiceVoucherAmount","displayTablePrepaid","displayTableCreditNote","displayTableVoucher","paytableData","paytableFullData","payGroupData","selectPaymentGroup","selectPaymentGroupId","isSelectedPaymentType","displayModelPaymentType","txtUserPayAmount","isOpenSubPayment","DateofPay","Date","MinimumDate","is_paymentdate","isMakePaymentLoading","componentWillMount","validator","element","message","autoForceUpdate","id","cartId","cartData","props","then","res","console","log","data","status","prepaid_data","setState","Number","billable_amount","prepaid","product_only","service_only","all_only","stringifiedCartData","map","item","recorddetail","parseFloat","total_price","itemdesc","indexOf","getDataFromResponses","key","CARD","push","label","pay_description","value","CASH","handleMultiple","target","Object","assign","getVoucherData","api","HideVoucherTableData","getPrepaidData","getPrepaidAccountData","itemData","conditiontype1","cust_code","all","exp_status","exp_date","last_update","line_no","pp_amt","pp_bonus","outstanding","pp_no","pp_total","product","remain","sa_date","service","topup_amt","type","use_amt","pp_desc","finalamount","filter","dataitem","prepaid_id","filteritem","deposit","toFixed","HidePrepaidTableData","getCreditNoteAccountData","HideCreditNoteTableData","getPayGroup","pay_group_code","picturelocation","getFullPayTable","getPayTableNameBasedOnId","payTableId","test","handleChange","pay_premise","handleCreditChange","handleTreatmentDone","sa_transacno","handleSubmit","addCreditCard","fieldValid","showMessageFor","userPayAmount","checkPayTypeIdAlreadyExists","result","setBalanceToAllTextBoxes","addPrepaid","selectedPrepaid","prepaidExpDate","format","todaysDate","isValid","isSameOrAfter","selectedRemainingPrepaidAmount","payTypeId","prepaid_ct","setdisplayTablePrepaid","addVoucher","selectedVoucher","selectedVoucherAmount","pay_amt_setup","voucher_no","setdisplayTableVoucher","addCreditNote","selectedCreditNote","selectedCreditNoteAmount","credit_code","transaction","setdisplayTableCreditNote","removeCards","idx","array","index","splice","removedTerm","items","valueToRemove","filteredItems","addNewPaymentData","selPayTypeId","selPayTypeName","trim","length","handleDialog","handleChangeCard","handleDatePick","DatePayment","componentDidMount","From","firstdayMonth","getFullYear","getMonth","getDate","CartPaymentDate","DateofPayment","handleChangeTextBox","event","handleChangeRemarkBox","val","some","creditNote","voucher","checkTypeOfCartItemContainsDeposit","render","t","insideRadioButtonData","cursor","bind","issued_expiry_date","Finaluse_amt","amount","payGroupDataContent","forEach","i","width","padding","getMediaUrl","textAlign","tokenDetails","userAddedPayTableData","subtotal","discount","trans_amt","deposit_amt","tax_lable","tax_amt","minWidth","mapStateToProps","appointmentDetail","appointment","selected_cstomer","common","authStore","mapDispatchToProps","dispatch","Payment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalInput,\r\n  NormalTextarea,\r\n  NormalButton,\r\n  NormalSelect,\r\n  NormalDate,\r\n  NormalModal,\r\n  NormalDateTime,\r\n} from \"component/common\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\nimport { getPayment, createPayment } from \"redux/actions/payment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { history } from \"helpers\";\r\nimport { getCommonApi, updateForm } from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport helpers from \"../../../../service/Helper\";\r\nimport { Toast } from \"service/toast\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport moment from \"moment\";\r\nimport { isMoment } from \"moment\";\r\n\r\nexport class MakePaymentClass extends Component {\r\n  state = {\r\n    formFields: {\r\n      name: \"\",\r\n      contact: \"\",\r\n      address: \"\",\r\n      searchStaff: \"\",\r\n      payTableDropDownValue: \"\",\r\n    },\r\n    responseData: {},\r\n\r\n    premisesOption: [],\r\n    selectedCards: [],\r\n    selectedCardsPayAmount: 0,\r\n    cardOption: [],\r\n    ewalletoptions: [],\r\n\r\n    ewalletField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n    },\r\n    cardField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n      pay_rem1: \"\",\r\n      pay_rem2: \"\",\r\n      pay_rem3: \"\",\r\n      pay_rem4: \"\",\r\n      App_code: \"\",\r\n    },\r\n    balance: 0,\r\n    errorMessage: \"123\",\r\n    prepaidCustomerData: [],\r\n    voucherCustomerData: [],\r\n    creditNoteCustomerData: [],\r\n    accountHeader: [],\r\n    isMakePaymentButtonClicked: \"false\",\r\n    isTreatmentDoneButton: true,\r\n    itemProductAmount: 0,\r\n    itemServiceAmount: 0,\r\n    itemProductServiceVoucherAmount: 0,\r\n    displayTablePrepaid: [],\r\n    displayTableCreditNote: [],\r\n    displayTableVoucher: [],\r\n    paytableData: [],\r\n    paytableFullData: [],\r\n    payGroupData: [],\r\n    selectPaymentGroup: \"\",\r\n    selectPaymentGroupId: \"\",\r\n    isSelectedPaymentType: \"\",\r\n    displayModelPaymentType: \"\",\r\n    txtUserPayAmount: 0,\r\n    isOpenSubPayment: false,\r\n    pay_rem4: \"\",\r\n    DateofPay: new Date(),\r\n    MinimumDate: new Date(),\r\n    is_paymentdate: false,\r\n    isMakePaymentLoading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    //debugger;\r\n    let From = new Date();\r\n    let { MinimumDate, DateofPay } = this.state;\r\n    let firstdayMonth = new Date(\r\n      From.getFullYear(),\r\n      From.getMonth() - 6,\r\n      From.getDate() + 1\r\n    );\r\n\r\n    if (\r\n      this.props.CartPaymentDate &&\r\n      this.props.CartPaymentDate[\"DateofPayment\"]\r\n    ) {\r\n      DateofPay = new Date(this.props.CartPaymentDate.DateofPayment);\r\n    } else {\r\n      DateofPay = new Date();\r\n    }\r\n    MinimumDate = firstdayMonth;\r\n    this.setState({\r\n      MinimumDate,\r\n      DateofPay,\r\n    });\r\n    this.getPayment();\r\n    this.getPayGroup();\r\n    this.getFullPayTable();\r\n    this.getPrepaidData();\r\n    this.getCreditNoteAccountData(\"\");\r\n    this.getVoucherData(\"\");\r\n    console.log(\"cartdata From cart\", this.props.cartData);\r\n  }\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  };\r\n  // get method for payment detail against appointment\r\n  getPayment = () => {\r\n    let { id, cartId, cartData } = this.props;\r\n\r\n    //id = 82318;\r\n    //cartId = \"ICMD100226\";\r\n    //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\r\n    if (id) {\r\n      this.props\r\n        .getPayment(\r\n          `?cart_date=${dateFormat(\r\n            new Date(),\r\n            \"yyyy-mm-dd\"\r\n          )}&cust_noid=${id}&cart_id=${cartId}`\r\n        )\r\n        .then(res => {\r\n          console.log(\"Payment Details:\", res);\r\n          let { data, status, prepaid_data } = res;\r\n          if (status === 200) {\r\n            this.setState({\r\n              responseData: data,\r\n              balance: Number(data.billable_amount),\r\n              txtUserPayAmount: Number(data.billable_amount),\r\n              prepaid_data: prepaid_data.prepaid,\r\n              product_only: prepaid_data.product_only,\r\n              service_only: prepaid_data.service_only,\r\n              all_only: prepaid_data.all_only,\r\n              is_paymentdate: data.is_paymentdate,\r\n            });\r\n          }\r\n        });\r\n    }\r\n\r\n    //let {cartData} = this.props;\r\n    let stringifiedCartData = cartData.data;\r\n\r\n    let {\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    } = this.state;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map(item => {\r\n        //alert(JSON.stringify(item));\r\n        if (item.recorddetail === \"Product\") {\r\n          itemProductAmount += parseFloat(item.total_price);\r\n        }\r\n        if (item.recorddetail === \"Service\" && item.itemdesc.indexOf(\"(FOC)\") <= 0 ) {\r\n          itemServiceAmount += parseFloat(item.total_price);\r\n          console.log(itemServiceAmount);\r\n          console.log(item.total_price);\r\n        }\r\n        if (\r\n          item.recorddetail === \"Product\" ||\r\n          item.recorddetail === \"Service\" ||\r\n          item.recorddetail === \"Voucher\"\r\n        ) {\r\n          itemProductServiceVoucherAmount += parseFloat(item.total_price);\r\n        }\r\n      });\r\n    }\r\n    this.setState({\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    });\r\n  };\r\n  // set data to dropdown fields\r\n  getDataFromResponses = data => {\r\n    let { cardOption, premisesOption } = this.state;\r\n    for (let key of data.CARD) {\r\n      cardOption.push({ label: key.pay_description, value: key.id });\r\n    }\r\n    for (let key of data.CASH) {\r\n      premisesOption.push({ label: key.pay_description, value: key.id });\r\n    }\r\n    this.setState({\r\n      cardOption,\r\n      premisesOption,\r\n    });\r\n  };\r\n\r\n  handleMultiple = ({ target: { value, name } }) => {\r\n    console.log(\"handleMultiple\", value, name);\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n\r\n    this.setState({\r\n      formFields,\r\n    });\r\n  };\r\n  getVoucherData = api => {\r\n    this.props\r\n      .getCommonApi(`voucher/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { voucherCustomerData } = this.state;\r\n        voucherCustomerData = data;\r\n        console.log(\"voucherCustomerData\", data);\r\n        // accountHeader = header_data;\r\n        this.setState({ voucherCustomerData }, () => {\r\n          console.log(\"test\");\r\n          this.HideVoucherTableData();\r\n        });\r\n      });\r\n  };\r\n\r\n  getPrepaidData = () => {\r\n    this.getPrepaidAccountData(\"\");\r\n  };\r\n  getPrepaidAccountData = api => {\r\n    console.log(\"dd\");\r\n\r\n    this.props\r\n      .getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { prepaidCustomerData } = this.state;\r\n        //prepaidCustomerData = data;\r\n        prepaidCustomerData = [];\r\n        console.log(\"prepaidCustomerData\", data);\r\n        for (let item of data) {\r\n          let itemData = {};\r\n          itemData[\"conditiontype1\"] = item.conditiontype1;\r\n          itemData[\"cust_code\"] = item.cust_code;\r\n          itemData[\"all\"] = item.all;\r\n          itemData[\"exp_status\"] = item.exp_status;\r\n          itemData[\"exp_date\"] = item.exp_date;\r\n          itemData[\"last_update\"] = item.last_update;\r\n          itemData[\"line_no\"] = item.line_no;\r\n          itemData[\"id\"] = item.id;\r\n          itemData[\"pp_amt\"] = item.pp_amt;\r\n          itemData[\"pp_bonus\"] = item.pp_bonus;\r\n          itemData[\"outstanding\"] = item.outstanding;\r\n          itemData[\"pp_no\"] = item.pp_no;\r\n          itemData[\"pp_total\"] = item.pp_total;\r\n          itemData[\"prepaid\"] = item.prepaid;\r\n          itemData[\"product\"] = item.product;\r\n          itemData[\"remain\"] = item.remain;\r\n          itemData[\"sa_date\"] = item.sa_date;\r\n          itemData[\"service\"] = item.service;\r\n          itemData[\"topup_amt\"] = item.topup_amt;\r\n          itemData[\"type\"] = item.type;\r\n          itemData[\"use_amt\"] = item.use_amt;\r\n          itemData[\"pp_desc\"] = item.pp_desc;\r\n\r\n          if (item.conditiontype1 === \"Service Only\") {\r\n            if (Number(this.state.service_only) > Number(item.remain)) {\r\n              itemData[\"Finaluse_amt\"] = item.remain;\r\n            } else {\r\n              itemData[\"Finaluse_amt\"] = this.state.service_only;\r\n            }\r\n          }\r\n          if (item.conditiontype1 === \"Product Only\") {\r\n            if (Number(this.state.product_only) > Number(item.remain)) {\r\n              itemData[\"Finaluse_amt\"] = item.remain;\r\n            } else {\r\n              itemData[\"Finaluse_amt\"] = this.state.product_only;\r\n            }\r\n          }\r\n          if (item.conditiontype1 === \"All\") {\r\n            let finalamount = Number(this.state.all_only);\r\n            if (this.state.prepaid_data) {\r\n              this.state.prepaid_data\r\n                .filter(dataitem => dataitem.prepaid_id == item.id)\r\n                .map(filteritem => {\r\n                  finalamount =\r\n                    Number(this.state.all_only) - Number(filteritem.deposit);\r\n                });\r\n            }\r\n\r\n            if (Number(finalamount) > Number(item.remain)) {\r\n              itemData[\"Finaluse_amt\"] = Number(item.remain).toFixed(2);\r\n            } else {\r\n              itemData[\"Finaluse_amt\"] = Number(finalamount).toFixed(2);\r\n            }\r\n          }\r\n\r\n          prepaidCustomerData.push(itemData);\r\n        }\r\n        this.setState({ prepaidCustomerData }, () => {\r\n          this.HidePrepaidTableData();\r\n        });\r\n      });\r\n\r\n    // accountHeader = header_data;\r\n  };\r\n  getCreditNoteAccountData = api => {\r\n    this.props\r\n      .getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { creditNoteCustomerData } = this.state;\r\n        creditNoteCustomerData = data;\r\n        // accountHeader = header_data;\r\n        this.setState({ creditNoteCustomerData }, () => {\r\n          this.HideCreditNoteTableData();\r\n        });\r\n      });\r\n  };\r\n  getPayGroup = () => {\r\n    this.props.getCommonApi(`paygroup/`).then(res => {\r\n      let { payGroupData } = this.state;\r\n      for (let key of res.data) {\r\n        payGroupData.push({\r\n          label: key.pay_group_code,\r\n          value: key.id,\r\n          picturelocation: key.picturelocation,\r\n        });\r\n      }\r\n      this.setState({\r\n        payGroupData,\r\n      });\r\n    });\r\n  };\r\n  getFullPayTable = () => {\r\n    this.props.getCommonApi(`paytablenew/`).then(res => {\r\n      let { paytableFullData } = this.state;\r\n      paytableFullData = res.data;\r\n      this.setState({\r\n        paytableFullData,\r\n      });\r\n    });\r\n  };\r\n\r\n  getPayTableNameBasedOnId = payTableId => {\r\n    //debugger;\r\n    console.log(payTableId);\r\n    let { paytableFullData } = this.state;\r\n    const test = paytableFullData.filter(res => res.id == payTableId);\r\n    return test[0].pay_description;\r\n  };\r\n\r\n  handleChangeTextBox(event) {\r\n    this.setState({\r\n      txtUserPayAmount: event.target.value,\r\n    });\r\n  }\r\n  handleChangeRemarkBox(event) {\r\n    this.setState({\r\n      pay_rem4: event.target.value,\r\n    });\r\n  }\r\n  handleChange = ({ target: { value, name } }) => {\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n    this.setState({\r\n      formFields,\r\n    });\r\n    let { balance, selectedCards, txtUserPayAmount, isOpenSubPayment } =\r\n      this.state;\r\n    isOpenSubPayment = false;\r\n    selectedCards.push({\r\n      pay_typeid: value,\r\n      pay_amt: parseFloat(txtUserPayAmount),\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n    txtUserPayAmount = balance;\r\n    this.setState({ txtUserPayAmount, balance, isOpenSubPayment });\r\n  };\r\n  handleCreditChange = ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n    this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  handleTreatmentDone = () => {\r\n    let { selectedCards, DateofPay } = this.state;\r\n    selectedCards.push({\r\n      //pay_typeid: 31, //twoherbs\r\n      //pay_typeid: 2, //normal\r\n      pay_typeid: 1, //sensuous\r\n      pay_amt: 0,\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    let data = selectedCards;\r\n    let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}&pay_date=${dateFormat(\r\n          new Date(DateofPay),\r\n          \"yyyy-mm-dd\"\r\n        )}`,\r\n        data\r\n      )\r\n      .then(res => {\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n  };\r\n  // create payment detail\r\n  handleSubmit = () => {\r\n    this.setState({\r\n      isMakePaymentLoading: true,\r\n    });\r\n    let { selectedCards, DateofPay } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"true\" });\r\n    console.log(\r\n      \"Selected Date: \",\r\n      dateFormat(new Date(DateofPay), \"yyyy-mm-dd\")\r\n    );\r\n    let data = selectedCards;\r\n    console.log(\"SubmitDatapayment\", data);\r\n    let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}&pay_date=${dateFormat(\r\n          new Date(DateofPay),\r\n          \"yyyy-mm-dd\"\r\n        )}`,\r\n        data\r\n      )\r\n      .then(res => {\r\n        this.setState({\r\n          isMakePaymentLoading: false,\r\n        });\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n    this.setState({\r\n      isMakePaymentLoading: false,\r\n    });\r\n  };\r\n  checkPayTypeIdAlreadyExists(val) {\r\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\r\n  }\r\n  addCreditCard = async () => {\r\n    if (!this.validator.fieldValid(\"cardFieldType\")) {\r\n      this.validator.showMessageFor(\"cardFieldType\");\r\n      return;\r\n    }\r\n\r\n    let { cardField, selectedCards, balance, responseData, txtUserPayAmount } =\r\n      this.state;\r\n    let userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n      if (userPayAmount == 0) {\r\n        return;\r\n      }\r\n    }\r\n    if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\r\n      let result =\r\n        this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\";\r\n      Toast({\r\n        type: \"error\",\r\n        message: result,\r\n      });\r\n      // alert(\r\n      //   this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\"\r\n      // );\r\n      return;\r\n    } else {\r\n      selectedCards.push({\r\n        pay_typeid: cardField.pay_typeid,\r\n        pay_amt: userPayAmount,\r\n        credit_debit: true,\r\n        pay_premise: false,\r\n        pay_rem1: cardField.pay_rem1,\r\n        pay_rem2: cardField.pay_rem2,\r\n        pay_rem3: cardField.pay_rem3,\r\n        pay_rem4: this.state.pay_rem4,\r\n        prepaid: false,\r\n      });\r\n    }\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addPrepaid = selectedPrepaid => {\r\n    const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\r\n    let userPayAmount = 0;\r\n    let {\r\n      itemServiceAmount,\r\n      itemProductAmount,\r\n      itemProductServiceVoucherAmount,\r\n      txtUserPayAmount,\r\n    } = this.state;\r\n    console.log(txtUserPayAmount);\r\n    userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (isValid) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Check Expiry Date\",\r\n      });\r\n      return;\r\n    }\r\n    if (userPayAmount <= 0) {\r\n      // alert(\"hi\");\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Prepaid is Not allowed\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    let selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\r\n\r\n    if (selectedRemainingPrepaidAmount < userPayAmount) {\r\n      //return\r\n    } else if (selectedRemainingPrepaidAmount > userPayAmount) {\r\n      selectedRemainingPrepaidAmount = parseFloat(userPayAmount);\r\n    }\r\n    /*\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n*/\r\n    if (selectedPrepaid.conditiontype1 === \"Service Only\") {\r\n      //For Service\r\n      if (parseFloat(itemServiceAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is Not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemServiceAmount);\r\n        console.log(itemServiceAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemServiceAmount = itemServiceAmount - userPayAmount;\r\n      this.setState({ itemServiceAmount });\r\n    } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\r\n      //For Product\r\n      if (parseFloat(itemProductAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductAmount = itemProductAmount - userPayAmount;\r\n      this.setState({ itemProductAmount });\r\n    } else {\r\n      if (parseFloat(itemProductServiceVoucherAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (\r\n        parseFloat(itemProductServiceVoucherAmount) <=\r\n        selectedRemainingPrepaidAmount\r\n      ) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) <\r\n          parseFloat(itemProductServiceVoucherAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductServiceVoucherAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductServiceVoucherAmount =\r\n        itemProductServiceVoucherAmount - userPayAmount;\r\n      this.setState({ itemProductServiceVoucherAmount });\r\n    }\r\n    if (userPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Prepaid is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const payTypeId = 23; //normal twoherbs\r\n    //const payTypeId = 19; //healspa sensuous\r\n    //const payTypeId = 8; //glamour\r\n    //const payTypeId = 9; //beskin\r\n\r\n    let { cardField, ewalletField, balance, selectedCards, isOpenSubPayment } =\r\n      this.state;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: true,\r\n      pay_amt: userPayAmount,\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1:\r\n        selectedPrepaid.pp_no +\r\n        \" - \" +\r\n        selectedPrepaid.line_no +\r\n        \" - \" +\r\n        selectedPrepaid.pp_desc,\r\n      pay_rem2: selectedPrepaid.id,\r\n      pay_rem4: this.state.pay_rem4,\r\n      prepaid_ct: selectedPrepaid.conditiontype1,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTablePrepaid\",\r\n      this.state.displayTablePrepaid\r\n    );\r\n    let setdisplayTablePrepaid = this.state.displayTablePrepaid;\r\n    setdisplayTablePrepaid.push(selectedPrepaid.id);\r\n    this.setState({ displayTablePrepaid: setdisplayTablePrepaid });\r\n    console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\r\n    this.HidePrepaidTableData();\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setBalanceToAllTextBoxes(balance);\r\n    console.log(balance);\r\n    this.setState({ isOpenSubPayment: false });\r\n  };\r\n  HidePrepaidTableData() {\r\n    let { prepaidCustomerData, displayTablePrepaid } = this.state;\r\n    displayTablePrepaid.map(item => {\r\n      var selectedPrepaid = prepaidCustomerData.filter(\r\n        prepaid => prepaid.id != item\r\n      );\r\n      this.setState({ prepaidCustomerData: selectedPrepaid });\r\n    });\r\n  }\r\n  HideCreditNoteTableData() {\r\n    let { creditNoteCustomerData, displayTableCreditNote } = this.state;\r\n    displayTableCreditNote.map(item => {\r\n      var selectedCreditNote = creditNoteCustomerData.filter(\r\n        creditNote => creditNote.credit_code != item\r\n      );\r\n      this.setState({ creditNoteCustomerData: selectedCreditNote });\r\n    });\r\n  }\r\n  HideVoucherTableData() {\r\n    let { voucherCustomerData, displayTableVoucher } = this.state;\r\n    displayTableVoucher.map(item => {\r\n      var selectedVoucher = voucherCustomerData.filter(\r\n        voucher => voucher.voucher_no != item\r\n      );\r\n      this.setState({ voucherCustomerData: selectedVoucher });\r\n    });\r\n  }\r\n  addVoucher = selectedVoucher => {\r\n    debugger;\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      txtUserPayAmount,\r\n      isOpenSubPayment,\r\n      selectedCards,\r\n    } = this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Voucher is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const selectedVoucherAmount = parseFloat(selectedVoucher.value);\r\n    let pay_amt_setup = 0;\r\n    if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedVoucherAmount;\r\n    } else {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Partial Amount is not applicable in voucher\",\r\n      });\r\n      return;\r\n      // alert(\"Partial Amount is not applicable in voucher\");\r\n      // return;\r\n    }\r\n    const payTypeId = 9; //normal\r\n    //const payTypeId = 8; //healspa sens\r\n    //const payTypeId = 25; //twoherbs\r\n    //const payTypeId = 4; //glamour\r\n    //const payTypeId = 5; //beskin\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedVoucher.voucher_no,\r\n      pay_rem2: selectedVoucher.voucher_no,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableVoucher\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    let setdisplayTableVoucher = this.state.displayTableVoucher;\r\n    setdisplayTableVoucher.push(selectedVoucher.voucher_no);\r\n    this.setState({ displayTableVoucher: setdisplayTableVoucher });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    this.HideVoucherTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addCreditNote = selectedCreditNote => {\r\n    console.log(selectedCreditNote);\r\n    let { cardField, ewalletField, balance, txtUserPayAmount, selectedCards } =\r\n      this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Credit Note is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\r\n    console.log(selectedCreditNoteAmount);\r\n    let pay_amt_setup = 0;\r\n    if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedCreditNoteAmount;\r\n    } else {\r\n      pay_amt_setup = txtUserPayAmount;\r\n    }\r\n    const payTypeId = 17; //normal\r\n    //const payTypeId = 24; //twoherbs\r\n    //const payTypeId = 12; //healspa sens\r\n    //const payTypeId = 5; //glamour\r\n    //const payTypeId = 6; //beskin\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedCreditNote.credit_code,\r\n      pay_rem2: selectedCreditNote.transaction,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    let setdisplayTableCreditNote = this.state.displayTableCreditNote;\r\n    setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\r\n    this.setState({ displayTableCreditNote: setdisplayTableCreditNote });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    this.HideCreditNoteTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n\r\n  setBalanceToAllTextBoxes(balance) {\r\n    this.setState({\r\n      balance: balance,\r\n      txtUserPayAmount: balance,\r\n    });\r\n  }\r\n  removeCards = idx => () => {\r\n    let {\r\n      selectedCards,\r\n      balance,\r\n      cardField,\r\n      ewalletField,\r\n      itemProductServiceVoucherAmount,\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n    } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"false\" });\r\n    balance = parseFloat(balance) + parseFloat(idx.pay_amt);\r\n    var array = [...selectedCards]; // make a separate copy of the array\r\n    var index = array.indexOf(idx);\r\n    if (idx.pay_typeid == 23) { //normal twoherbs\r\n    //if (idx.pay_typeid == 19) { //healspa sens\r\n    //if (idx.pay_typeid == 8) { //glamour\r\n    //if (idx.pay_typeid == 9) { //beskin\r\n        if (idx.prepaid_ct == \"Product Only\") {\r\n        itemProductAmount = itemProductAmount + idx.pay_amt;\r\n      } else if (idx.prepaid_ct == \"Service Only\") {\r\n        itemServiceAmount = itemServiceAmount + idx.pay_amt;\r\n      } else {\r\n        itemProductServiceVoucherAmount =\r\n          itemProductServiceVoucherAmount + idx.pay_amt;\r\n      }\r\n      this.setState({\r\n        itemProductServiceVoucherAmount,\r\n        itemProductAmount,\r\n        itemServiceAmount,\r\n      });\r\n    }\r\n    if (index !== -1) {\r\n      array.splice(index, 1);\r\n      this.setState({ selectedCards: array, balance });\r\n    }\r\n    //console.log(\"idx\", idx);\r\n    var removedTerm = idx.pay_typeid;\r\n    //console.log(\"removedTerm\", removedTerm);\r\n    //console.log(\"idx.pay_rem2\", idx.pay_rem2);\r\n\r\n    if (removedTerm == \"23\") { //normal twoherbs\r\n    //if (removedTerm == \"19\") { //healspa sens\r\n    //if (removedTerm == \"8\") { //glamour\r\n    //if (removedTerm == \"9\") { //beskin\r\n      const items = this.state.displayTablePrepaid;\r\n      console.log(\"BeforeRemove-displayTablePrepaid\", items);\r\n      const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTablePrepaid: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTablePrepaid\",\r\n          this.state.displayTablePrepaid\r\n        );\r\n      });\r\n      this.getPrepaidAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n    if (removedTerm == \"17\") { //normal\r\n    //if (removedTerm == \"24\") { //twoherbs\r\n    //if (removedTerm == \"12\") { //healspa sens\r\n    //if (removedTerm == \"5\") { //glamour\r\n    //if (removedTerm == \"6\") { //beskin\r\n        const items = this.state.displayTableCreditNote;\r\n      console.log(\"BeforeRemove-displayTableCreditNote\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableCreditNote: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableCreditNote\",\r\n          this.state.displayTableCreditNote\r\n        );\r\n      });\r\n      this.getCreditNoteAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n    if (removedTerm == \"9\") { //normal\r\n    //if (removedTerm == \"25\") { //twoherbs\r\n    //if (removedTerm == \"8\") { //healspa sens\r\n    //if (removedTerm == \"4\") { //glamour\r\n    //if (removedTerm == \"5\") { //beskin\r\n        const items = this.state.displayTableVoucher;\r\n      console.log(\"BeforeRemove-displayTableVoucher\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableVoucher: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableVoucher\",\r\n          this.state.displayTableVoucher\r\n        );\r\n      });\r\n      this.getVoucherData(\"\");\r\n    }\r\n    cardField[\"pay_amt\"] = balance;\r\n    ewalletField[\"pay_amt\"] = balance;\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  checkTypeOfCartItemContainsDeposit(cartData) {\r\n    let stringifiedCartData = cartData.data;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map(item => {\r\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\r\n          this.state.isTreatmentDoneButton = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n\r\n    this.props\r\n      .getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`)\r\n      .then(res => {\r\n        this.setState({\r\n          paytableData: [],\r\n        });\r\n        let { paytableData, isSelectedPaymentType, displayModelPaymentType } =\r\n          this.state;\r\n        isSelectedPaymentType = selPayTypeName.trim();\r\n        displayModelPaymentType = selPayTypeName.trim();\r\n        for (let key of res.data) {\r\n          paytableData.push({ label: key.pay_description, value: key.id });\r\n        }\r\n        this.setState(\r\n          {\r\n            paytableData,\r\n          },\r\n          () => {\r\n            let { isOpenSubPayment } = this.state;\r\n            if (paytableData.length == 0) {\r\n              Toast({\r\n                type: \"error\",\r\n                message: \"Pay Table Not Exists\",\r\n              });\r\n              return;\r\n            } else if (selPayTypeName.trim() === \"VOUCHER\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"PREPAID\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"Credit\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"CARD\") {\r\n              isOpenSubPayment = true;\r\n            } else if (paytableData.length == 1) {\r\n              isOpenSubPayment = false;\r\n              let payTypeId = paytableData[0].value;\r\n              let { balance, selectedCards, txtUserPayAmount } = this.state;\r\n              if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n                if (parseFloat(txtUserPayAmount) == 0) {\r\n                  return;\r\n                }\r\n              }\r\n              if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\r\n                // alert(\r\n                //   this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"\r\n                // );\r\n                let result =\r\n                  this.getPayTableNameBasedOnId(payTypeId) + \" already exists\";\r\n                Toast({\r\n                  type: \"error\",\r\n                  message: result,\r\n                });\r\n                //alert(\"Already Exists\");\r\n                return;\r\n              } else {\r\n                selectedCards.push({\r\n                  pay_typeid: payTypeId,\r\n                  pay_amt: parseFloat(txtUserPayAmount),\r\n                  credit_debit: false,\r\n                  pay_premise: true,\r\n                  prepaid: false,\r\n                  pay_rem4: this.state.pay_rem4,\r\n                });\r\n                balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n                txtUserPayAmount = balance;\r\n                this.setState({ txtUserPayAmount, balance });\r\n                return;\r\n              }\r\n            } else if (paytableData.length >= 1) {\r\n              isOpenSubPayment = true;\r\n              isSelectedPaymentType = \"Multiple\";\r\n            }\r\n            this.setState({\r\n              isOpenSubPayment,\r\n              isSelectedPaymentType,\r\n              displayModelPaymentType,\r\n            });\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  handleDialog = async () => {\r\n    let { isOpenSubPayment } = this.state;\r\n    isOpenSubPayment = false;\r\n    await this.setState({\r\n      isOpenSubPayment,\r\n    });\r\n  };\r\n\r\n  handleChangeCard = async ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n\r\n    await this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  handleDatePick = async ({ target: { value, name } }) => {\r\n    let { DateofPay } = this.state;\r\n    DateofPay = value;\r\n    await this.setState({\r\n      DateofPay,\r\n    });\r\n\r\n    let DatePayment = {};\r\n    DatePayment[\"DateofPayment\"] = value;\r\n    await this.props.updateForm(\"CartPaymentDate\", DatePayment);\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      responseData,\r\n      balance,\r\n      isTreatmentDoneButton,\r\n      payGroupData,\r\n      paytableData,\r\n      isOpenSubPayment,\r\n      isSelectedPaymentType,\r\n      displayModelPaymentType,\r\n      cardField,\r\n      pay_rem4,\r\n      DateofPay,\r\n      MinimumDate,\r\n      is_paymentdate,\r\n      isMakePaymentLoading,\r\n    } = this.state;\r\n    let { t } = this.props;\r\n    let { payTableDropDownValue } = this.state.formFields;\r\n    console.log(payTableDropDownValue);\r\n    let insideRadioButtonData;\r\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\r\n    if (isSelectedPaymentType == \"VOUCHER\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tr>\r\n              <td>{t(\"Vocucher No\")}</td>\r\n              <td>{t(\"Value\")}</td>\r\n              <td>{t(\"Exp. Date\")}</td>\r\n            </tr>\r\n            {this.state.voucherCustomerData.map((selectedVoucher, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addVoucher.bind(this, selectedVoucher)}\r\n              >\r\n                <td>{selectedVoucher.voucher_no}</td>\r\n                <td>{selectedVoucher.value}</td>\r\n                <td>{selectedVoucher.issued_expiry_date}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"PREPAID\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>{t(\"Category\")}</td>\r\n              <td>{t(\"Amount\")}</td>\r\n              <td>{t(\"Remaining\")}</td>\r\n              <td>{t(\"Invoice No.\")}</td>\r\n              <td>{t(\"Exp. Date\")}</td>\r\n              <td>{t(\"Condition Type\")}</td>\r\n              <td>{t(\"Use Amount\")}</td>\r\n            </tr>\r\n            {this.state.prepaidCustomerData.map((selectedPrepaid, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addPrepaid.bind(this, selectedPrepaid)}\r\n              >\r\n                <td>{selectedPrepaid.pp_desc}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.pp_total}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.remain}</td>\r\n                <td>{selectedPrepaid.prepaid}</td>\r\n                <td>{selectedPrepaid.exp_date}</td>\r\n                <td>{selectedPrepaid.conditiontype1}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.Finaluse_amt}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Credit\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>{t(\"Credit\")} #</td>\r\n              <td>{t(\"Date\")}</td>\r\n              <td>{t(\"Amount\")}</td>\r\n              <td>{t(\"Balance\")}</td>\r\n              <td>{t(\"Status\")}</td>\r\n            </tr>\r\n            {this.state.creditNoteCustomerData.map((creditNote, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addCreditNote.bind(this, creditNote)}\r\n              >\r\n                <td>{creditNote.credit_code}</td>\r\n                <td>{creditNote.sa_date}</td>\r\n                <td>{creditNote.amount}</td>\r\n                <td>{creditNote.balance}</td>\r\n                <td>{creditNote.status}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"CARD\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"d-flex flex-wrap justify-content-start\">\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Select Card\")}\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={cardField.pay_typeid}\r\n                  name=\"pay_typeid\"\r\n                  onChange={this.handleCreditChange}\r\n                />\r\n              </div>\r\n              {this.validator.message(\r\n                \"cardFieldType\",\r\n                cardField.pay_typeid,\r\n                \"required\"\r\n              )}\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Card No.\")}\r\n                <NormalInput\r\n                  value={cardField.pay_rem1}\r\n                  name=\"pay_rem1\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Name\")}\r\n                <NormalInput\r\n                  value={cardField.pay_rem2}\r\n                  name=\"pay_rem2\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Exp Month\")} / {t(\"Year\")}\r\n                <NormalInput\r\n                  placeholder=\"mm/YYYY\"\r\n                  value={cardField.pay_rem3}\r\n                  name=\"pay_rem3\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Approval Code\")}\r\n                <NormalInput\r\n                  value={cardField.App_code}\r\n                  name=\"App_code\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={false}\r\n                  className=\"col-12 mt-4 ml-2 btn-outline-success\"\r\n                  label=\"CONFIRM\"\r\n                  onClick={() => this.addCreditCard()}\r\n                />\r\n              </div>\r\n              <div className=\"col-1\"></div>\r\n            </div>\r\n            {/* <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={true}\r\n                  className=\"col-12 mt-4 ml-2\"\r\n                  label=\"CANCEL\"\r\n                  onClick={() => this.setState({ isOpenSubPayment: false })}\r\n                />\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Multiple\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                <Label className=\"col-12 fs-15\">{t(\"Choose Option\")}</Label>\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={payTableDropDownValue}\r\n                  name=\"payTableDropDownValue\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      insideRadioButtonData = <div></div>;\r\n    }\r\n    let payGroupDataContent = [];\r\n    console.log(payGroupData);\r\n    payGroupData.forEach((item, i) => {\r\n      payGroupDataContent.push(\r\n        <div\r\n          className=\"col-md-3 col-4 payment-item cursor-pointer\"\r\n          style={{ width: \"50px\", padding: \"15px\" }}\r\n          key={i}\r\n          onClick={() => this.addNewPaymentData(item.value, item.label)}\r\n        >\r\n          <center>\r\n            <img\r\n              src={helpers.getMediaUrl() + \"media/\" + item.picturelocation}\r\n              label={item.label}\r\n              style={{ textAlign: \"center\" }}\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </center>\r\n          <center>\r\n            <p style={{ width: \"100px\", textAlign: \"center\" }}>{item.label}</p>\r\n          </center>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let { cartId, cartData, tokenDetails } = this.props;\r\n    console.log(cartId, tokenDetails, this.props.cartData);\r\n    this.checkTypeOfCartItemContainsDeposit(cartData);\r\n\r\n    let userAddedPayTableData = (\r\n      <table className=\"table table-bordered\">\r\n        {this.state.selectedCards.map((selectedCards, index) => (\r\n          <tr key={index}>\r\n            <td className=\"fs-18\">\r\n              {this.getPayTableNameBasedOnId(selectedCards.pay_typeid)}\r\n            </td>\r\n            <td className=\"fs-18\" style={{ textAlign: \"right\" }}>\r\n              {selectedCards.pay_amt.toFixed(2)}\r\n            </td>\r\n            <td>\r\n              <div\r\n                className=\"col-4 p-0 fs-20 cursor-pointer\"\r\n                onClick={this.removeCards(selectedCards)}\r\n              >\r\n                <span className=\"icon-delete\"></span>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    );\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"d-flex flex-wrap\">\r\n          <div className=\"col-md-2 col-12 mb-2\">\r\n            <label className=\"text-left text-black common-label-text \">\r\n              {t(\"Enter Amount\")}\r\n            </label>\r\n\r\n            <div className=\"input-group mb-2\">\r\n              <NormalInput\r\n                value={this.state.txtUserPayAmount}\r\n                onChange={this.handleChangeTextBox.bind(this)}\r\n              />\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|min:0,num\"\r\n              )}\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|max:\" + this.state.balance + \",num\"\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 col-12 mb-2\">\r\n            <Label>{t(\"Remark\")}</Label>\r\n            <div className=\"input-group mb-2\">\r\n              <NormalInput\r\n                value={pay_rem4}\r\n                name=\"pay_rem4\"\r\n                onChange={this.handleChangeRemarkBox.bind(this)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-2 col-12 mb-2\">\r\n            {is_paymentdate ? (\r\n              <>\r\n                <Label>{t(\"Date\")}</Label>\r\n                <div className=\"input-group mb-2\">\r\n                  <NormalDate\r\n                    value={new Date(DateofPay)}\r\n                    name=\"DateofPay\"\r\n                    type=\"date\"\r\n                    onChange={this.handleDatePick}\r\n                    minDate={new Date(MinimumDate)}\r\n                    maxDate={new Date()}\r\n                    showDisabledMonthNavigation\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"col-md-4 col-12\">\r\n            <div className=\"d-flex justify-content-end\">\r\n              {isTreatmentDoneButton ? (\r\n                <div className=\"make-payment mt-3 mr-2 text-center\">\r\n                  <NormalButton\r\n                    mainbg={true}\r\n                    className=\"col-12 fs-15\"\r\n                    label=\"TREATMENT DONE\"\r\n                    onClick={() => this.handleTreatmentDone()}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n              <div className=\"make-payment mt-3 text-center\">\r\n                {isMakePaymentLoading ? (\r\n                  <div class=\"d-flex align-items-center justify-content-center\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                      <span class=\"sr-only\">{t(\"Loading...\")}</span>\r\n                    </div>\r\n                  </div>\r\n                ) : this.state.isMakePaymentButtonClicked == \"true\" ? (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    disabled={true}\r\n                  />\r\n                ) : (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    onClick={() => this.handleSubmit()}\r\n                    disabled={\r\n                      this.state.selectedCards.length <= 0 || balance > 0\r\n                    }\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>{t(\"Select Payment Method\")}</h4>\r\n\r\n        <div className=\"row paymentGroup\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"d-flex flex-wrap\">{payGroupDataContent}</div>\r\n          </div>\r\n          <div className=\"col-md-6 make-payment-section\">\r\n            <p className=\"h6\">{t(\"List of Selections\")}</p>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12 mt-1 mb-1\">\r\n                <div className=\"d-flex payment\">\r\n                  <div className=\"col-md-7 p-0\">\r\n                    <div className=\"d-flex flex-wrap fs-14\">\r\n                      <div className=\"col-6\">{t(\"Subtotal\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.subtotal}</div>\r\n                      <div className=\"col-6\">{t(\"Discount ($)\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.discount}</div>\r\n                      <div className=\"col-6\">{t(\"Transac amount\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.trans_amt}</div>\r\n                      <div className=\"col-6\">{t(\"Deposit\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.deposit_amt}</div>\r\n                      <div className=\"col-6\">{responseData.tax_lable}</div>\r\n                      <div className=\"col-6\">$ {responseData.tax_amt}</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-5\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                      <div className=\"col-12 fs-22 text-center\">\r\n                        {t(\"Billing Amount\")}\r\n                      </div>\r\n                      <div className=\"col-12 fs-22 fw-700 text-center text-orenge\">\r\n                        $ {responseData.billable_amount}\r\n                      </div>\r\n                      <div className=\"col-12 f-600 text-center mt-2\">\r\n                        {t(\"Balance Amount\")}: {Number(balance).toFixed(2)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-12 mt-2 payment-list\">\r\n              <div className=\"fs-12\">{userAddedPayTableData}</div>\r\n            </div>\r\n            {/* <div className=\"d-flex justify-content-around\">\r\n              {isTreatmentDoneButton ? (\r\n                <div className=\"make-payment mt-3 text-center\">\r\n                  <NormalButton\r\n                    mainbg={true}\r\n                    className=\"col-12 fs-15 \"\r\n                    label=\"TREATMENT DONE\"\r\n                    onClick={() => this.handleTreatmentDone()}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n              <div className=\"make-payment mt-3 text-center\">\r\n                {isMakePaymentLoading ? (\r\n                  <div class=\"d-flex align-items-center justify-content-center\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                      <span class=\"sr-only\">{t(\"Loading...\")}</span>\r\n                    </div>\r\n                  </div>\r\n                ) : this.state.isMakePaymentButtonClicked == \"true\" ? (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    disabled={true}\r\n                  />\r\n                ) : (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    onClick={() => this.handleSubmit()}\r\n                    disabled={\r\n                      this.state.selectedCards.length <= 0 || balance > 0\r\n                    }\r\n                  />\r\n                )}\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n\r\n        <NormalModal\r\n          className={\"payment-modal\"}\r\n          style={{ minWidth: \"70%\" }}\r\n          modal={isOpenSubPayment}\r\n          handleModal={this.handleDialog}\r\n        >\r\n          <img\r\n            onClick={this.handleDialog}\r\n            className=\"close cursor-pointer\"\r\n            src={closeIcon}\r\n            alt=\"\"\r\n          />\r\n          <center>\r\n            <p className=\"fs-18 f-600\">{displayModelPaymentType}</p>\r\n          </center>\r\n          <br />\r\n          {insideRadioButtonData}\r\n        </NormalModal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selected_cstomer: state.common.selected_cstomer,\r\n  tokenDetails: state.authStore.tokenDetails,\r\n  CartPaymentDate: state.appointment.CartPaymentDate,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getPayment,\r\n      getCommonApi,\r\n      createPayment,\r\n      updateForm,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const Payment = withTranslation()(\r\n  connect(mapStateToProps, mapDispatchToProps)(MakePaymentClass)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}