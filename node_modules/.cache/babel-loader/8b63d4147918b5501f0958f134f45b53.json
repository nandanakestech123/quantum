{"ast":null,"code":"import { PaymentActionType } from \"redux/actions/actionType\";\nimport { payment } from \"../../service/apiVariables\"; // create payment action\n\nexport const createPayment = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    payment.addPayment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...payment.addPayment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update payment action\n\nexport const updatePayment = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    payment.updatePayment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...payment.updatePayment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // delete payment action\n\nexport const deletePayment = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    payment.deletePayment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...payment.deletePayment,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n      console.log(\"sadfadfgadfgdf\", response);\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(error => {\n      console.log(\"sadfadfgadfgdf errorr\", error);\n      reject(error);\n      let {\n        message\n      } = error;\n      Toast({\n        type: \"error\",\n        message\n      });\n    });\n  });\n}; // get payment action\n\nexport const getPayment = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    payment.getPayment.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...payment.getPayment\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: PaymentActionType.getPaymentDetail,\n          payload: data\n        }); //Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/payment.js"],"names":["PaymentActionType","payment","createPayment","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","addPayment","addQuery","key","payload","then","response","message","status","type","catch","updatePayment","deletePayment","console","log","error","getPayment","data","getPaymentDetail"],"mappings":"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","sourcesContent":["import { PaymentActionType } from \"redux/actions/actionType\";\r\nimport { payment } from \"../../service/apiVariables\";\r\n\r\n// create payment action\r\nexport const createPayment =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      payment.addPayment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...payment.addPayment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// update payment action\r\nexport const updatePayment =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      payment.updatePayment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...payment.updatePayment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// delete payment action\r\nexport const deletePayment =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      payment.deletePayment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...payment.deletePayment, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          console.log(\"sadfadfgadfgdf\", response);\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(\"sadfadfgadfgdf errorr\", error);\r\n          reject(error);\r\n          let { message } = error;\r\n          Toast({ type: \"error\", message });\r\n        });\r\n    });\r\n  };\r\n\r\n// get payment action\r\nexport const getPayment =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      payment.getPayment.addQuery = { key: \"id\", payload: id };\r\n      api({ ...payment.getPayment })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: PaymentActionType.getPaymentDetail,\r\n              payload: data,\r\n            });\r\n            //Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}