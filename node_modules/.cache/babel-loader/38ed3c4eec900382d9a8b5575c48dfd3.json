{"ast":null,"code":"import { CustomerPlusActionType } from \"redux/actions/actionType\";\nimport { customerPlus, lpManagement } from \"../../service/apiVariables\"; // create customer action\n\nexport const CreateCustomerPlus = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customerPlus.addCustomerPlus,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update customer action\n\nexport const updateCustomerPlus = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customerPlus.updateCustomerPlus.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...customerPlus.updateCustomerPlus,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getCustomerPlus = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    customerPlus.getCustomerPlus.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...customerPlus.getCustomerPlus\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: CustomerPlusActionType.getCustomerPlusDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer settings action\n\nexport const getCustomerPlusSettings = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    if (id) customerPlus.getCustomerPlusSettings.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...customerPlus.getCustomerPlusSettings\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: CustomerPlusActionType.getCustomerPlusSettings,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update customer settings action\n\nexport const updateCustomerPlusSettings = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...customerPlus.updateCustomerPlusSettings,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; //get lpmanagement reward settings\n\nexport const getRewardPlolicySettings = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    lpManagement.getRewardPolicy.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...lpManagement.getRewardPolicy\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: CustomerPlusActionType.getRewardPolicySettings,\n          payload: data\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; //get lpmanagement redeem settings\n\nexport const getRedeemPlolicySettings = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    lpManagement.getRedeemPolicy.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...lpManagement.getRedeemPolicy\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: CustomerPlusActionType.getRedeemPolicySettings,\n          payload: data\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/customerPlus.js"],"names":["CustomerPlusActionType","customerPlus","lpManagement","CreateCustomerPlus","body","dispatch","getState","api","Toast","Promise","resolve","reject","addCustomerPlus","header","type","value","then","response","message","status","catch","updateCustomerPlus","id","addQuery","key","payload","getCustomerPlus","data","getCustomerPlusDetail","getCustomerPlusSettings","updateCustomerPlusSettings","getRewardPlolicySettings","getRewardPolicy","getRewardPolicySettings","getRedeemPlolicySettings","getRedeemPolicy","getRedeemPolicySettings"],"mappings":"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","sourcesContent":["import { CustomerPlusActionType } from \"redux/actions/actionType\";\nimport { customerPlus, lpManagement } from \"../../service/apiVariables\";\n\n// create customer action\nexport const CreateCustomerPlus =\n  (body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({\n        ...customerPlus.addCustomerPlus,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update customer action\nexport const updateCustomerPlus =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      customerPlus.updateCustomerPlus.addQuery = { key: \"id\", payload: id };\n      api({\n        ...customerPlus.updateCustomerPlus,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get customer action\nexport const getCustomerPlus =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      customerPlus.getCustomerPlus.addQuery = { key: \"id\", payload: id };\n\n      api({ ...customerPlus.getCustomerPlus })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: CustomerPlusActionType.getCustomerPlusDetail,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get customer settings action\nexport const getCustomerPlusSettings =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      if (id)\n        customerPlus.getCustomerPlusSettings.addQuery = {\n          key: \"id\",\n          payload: id,\n        };\n\n      api({ ...customerPlus.getCustomerPlusSettings })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: CustomerPlusActionType.getCustomerPlusSettings,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update customer settings action\nexport const updateCustomerPlusSettings =\n  (body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({\n        ...customerPlus.updateCustomerPlusSettings,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n//get lpmanagement reward settings\nexport const getRewardPlolicySettings =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      lpManagement.getRewardPolicy.addQuery = { key: \"id\", payload: id };\n      api({\n        ...lpManagement.getRewardPolicy,\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: CustomerPlusActionType.getRewardPolicySettings,\n              payload: data,\n            });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n//get lpmanagement redeem settings\nexport const getRedeemPlolicySettings =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      lpManagement.getRedeemPolicy.addQuery = { key: \"id\", payload: id };\n      api({\n        ...lpManagement.getRedeemPolicy,\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: CustomerPlusActionType.getRedeemPolicySettings,\n              payload: data,\n            });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n"]},"metadata":{},"sourceType":"module"}