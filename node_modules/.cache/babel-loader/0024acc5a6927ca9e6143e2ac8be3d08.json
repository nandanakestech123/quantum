{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\Admin\\\\NewAppointment\\\\NewCreateAppointment\\\\NewSelectTreatment.js\";\nimport React, { Component } from \"react\";\nimport { NormalSelect, NormalButton, NormalModal, NormalInput, NormalDateTime, NormalCheckbox, NormalTimePicker } from \"component/common\";\nimport \"./style.scss\";\nimport { updateForm, getSelectedTreatmentList } from \"redux/actions/appointment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport closeIcon from \"assets/images/close.png\";\nimport req_therapist from \"assets/images/app-icons/1.png\";\nimport { getCommonApi, commonCreateApi, commonPatchApi } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport _ from \"lodash\";\nimport { TableWrapper } from \"component/common\";\nimport { TreatmentPackage } from \"./modal/index\";\nimport { Toast } from \"service/toast\";\nimport { AppointmentForm } from \"./AppointmentForm\";\nimport { history } from \"helpers\";\nimport { TreatmentHistory } from \"component/Admin/NewAppointment/NewListAppointment/modal/TreatmentHistory\";\nimport { UpcomingAppointment } from \"component/Admin/NewAppointment/NewListAppointment/modal/UpcomingAppointment\";\nimport { withTranslation } from \"react-i18next\";\nexport class NewSelectTreatmentClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treatmentDetail: [],\n      formFields: {\n        appt_id: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        Item_Codeid: null,\n        add_duration: \"\",\n        emp_no: 0,\n        requesttherapist: false,\n        Item_CodeName: \"\",\n        edit_remark: \"\",\n        recur_days: null,\n        recur_qty: null,\n        item_text: null,\n        checktype: \"\",\n        treat_parentcode: null\n      },\n      selectedList: [{\n        appt_id: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        Item_Codeid: null,\n        add_duration: \"\",\n        emp_no: 0,\n        requesttherapist: false,\n        Item_CodeName: \"\",\n        edit_remark: \"\",\n        recur_days: null,\n        recur_qty: null,\n        item_text: null,\n        checktype: \"\",\n        treat_parentcode: null\n      }],\n      outletOption: [],\n      staffOption: [],\n      roomOption: [],\n      list: [],\n      isOpenModal: false,\n      categoryList: [],\n      treatmentList: [],\n      siteList: [],\n      treatmentField: {\n        category: \"\",\n        treatment: \"\"\n      },\n      timeDropdown: [],\n      duration: [],\n      index: null,\n      search: \"\",\n      selectTreatmentId: \"\",\n      treatmentListHeader: [{\n        label: \"Category\",\n        className: \"w-50\"\n      }, {\n        label: \"Service\",\n        className: \"w-75\"\n      }, {\n        label: \"Duration\",\n        className: \"w-25\",\n        divClass: \"justify-content-end text-right\"\n      }, {\n        label: \"price\",\n        className: \"w-50\",\n        divClass: \"justify-content-end text-right\"\n      }],\n      meta: {},\n      isTreatementModal: false,\n      appointmentId: null,\n      PackageIndex: 0,\n      selectedRec_days: null,\n      selectedRec_qty: null,\n      recurringList: [],\n      recurringSelectedItems: [],\n      recurringSelectAll: false,\n      settingData: {},\n      PasteAppointmentId: 0,\n      InitAppointmentStatus: \"\",\n      isTreatmentHistoryModal: false,\n      isUpcomingAppointmentModal: false,\n      freeTextStockId: \"\",\n      isLoginConfirmation: false,\n      passwordVisible: false,\n      dragusername: \"\",\n      dragpassword: \"\"\n    };\n\n    this.showErrorMessage = () => {\n      this.child.onFocus();\n    };\n\n    this.getFreetextStockid = async => {\n      let {\n        treatmentField,\n        search,\n        selectTreatmentId\n      } = this.state;\n      let page = 1,\n          limit = 10;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"stocklistfreetextresponse\");\n        let {\n          data,\n          status\n        } = res;\n\n        if (status === 200) {\n          if (data && data.stock_id && data.stock_id !== \" \") {\n            this.setState({\n              freeTextStockId: data.stock_id\n            });\n          } else {\n            Toast({\n              type: \"error\",\n              message: \"Stock Id not found for free text item\"\n            });\n          }\n        }\n      });\n    };\n\n    this.timeToDateFormat = TimeValue => {\n      let time = String(TimeValue).split(\":\");\n      let newTime = new Date(new Date().setHours(time[0], time[1], 0, 0));\n      return newTime;\n    };\n\n    this.handleRenderApptDetail = async (appt_id, copy) => {\n      let {\n        selectedList,\n        InitAppointmentStatus\n      } = this.state;\n      this.props.getCommonApi(`appointmentedit/${appt_id}/`).then(async key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(data, \"renderappointmentdetail\");\n\n        if (status === 200) {\n          if (data.treatment) {\n            InitAppointmentStatus = data.appointment.appt_status;\n            selectedList = [];\n            await this.setState({\n              selectedList: selectedList,\n              InitAppointmentStatus\n            });\n            this.props.updateForm(\"treatmentList\", selectedList);\n\n            for (let treat of data.treatment) {\n              let startTime = \"\";\n              let endTime = \"\";\n              let apptid = null;\n\n              if (copy) {\n                startTime = this.timeToDateFormat(treat.start_time);\n                endTime = treat.end_time;\n                apptid = null;\n              } else {\n                startTime = this.timeToDateFormat(treat.start_time);\n                endTime = treat.end_time;\n                apptid = treat.appt_id;\n              }\n\n              selectedList.push({\n                start_time: startTime,\n                end_time: endTime,\n                emp_no: treat.emp_id,\n                appt_id: apptid,\n                Item_Codeid: treat.item_id,\n                Item_CodeName: treat.item_name,\n                add_duration: treat.add_duration,\n                requesttherapist: treat.requesttherapist,\n                recur_days: treat.recur_days,\n                recur_qty: treat.recur_qty,\n                item_text: treat.item_name,\n                checktype: treat.checktype,\n                treat_parentcode: treat.treat_parentcode\n              });\n              this.setState({\n                selectedList\n              });\n            }\n\n            this.props.updateForm(\"treatmentList\", selectedList);\n          }\n        }\n      });\n    };\n\n    this.handleItemSettings = () => {\n      let {\n        settingData\n      } = this.state;\n      this.props.getCommonApi(`userlist/`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(key, \"settingsData appointmentCreate\");\n\n        if (status === 200) {\n          settingData = data;\n          this.setState({\n            settingData\n          });\n        }\n      });\n    };\n\n    this.getStaffAvailability = () => {\n      this.props.getCommonApi(`staffsavailable/?Appt_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n\n        if (status === 200) {\n          // for (let value of data) {\n          //     staffList.push({ value: value.id, label: value.emp_name })\n          // }\n          this.setState({\n            list: data\n          });\n        }\n      });\n    };\n\n    this.handleSearch = event => {\n      event.persist();\n      console.log(event.target.value, event.target, event, \"dfhdfjghkjfghj\");\n      let {\n        treatmentField\n      } = this.state;\n      treatmentField[\"treatment\"] = event.target.value;\n      this.setState({\n        search: event.target.value,\n        treatmentField\n      });\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce(() => {\n          let searchString = event.target.value;\n          let data = {\n            search: searchString\n          }; // this.queryHandler(data)\n\n          this.search(data);\n        }, 500);\n      }\n\n      this.debouncedFn();\n    };\n\n    this.search = data => {\n      let {\n        page = 1,\n        limit = 10,\n        search = \"\"\n      } = data;\n      let {\n        selectTreatmentId\n      } = this.state;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"treatmentList treatment_parentcode\");\n\n        if (res.status === 200) {\n          this.setState({\n            treatmentList: res.data.dataList,\n            meta: res.data.meta.pagination\n          });\n        }\n      });\n    };\n\n    this.handlePagination = page => {\n      this.search(page);\n    };\n\n    this.handleChangeTreatment = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        treatmentField,\n        search,\n        selectTreatmentId\n      } = this.state;\n      console.log(\"uihwkjrwkej\", name, value);\n      treatmentField[name] = value;\n\n      if (name === \"category\") {\n        selectTreatmentId = value;\n      } else if (name === \"treatment\") {\n        search = value;\n      }\n\n      await this.setState({\n        treatmentField,\n        selectTreatmentId,\n        search\n      });\n      let page = 1,\n          limit = 10;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"stocklis\");\n\n        if (res.status === 200) {\n          this.setState({\n            treatmentList: res.data.dataList,\n            meta: res.data.meta.pagination\n          });\n        }\n      });\n    };\n\n    this.handleChange = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        selectedList,\n        appointmentId,\n        freeTextStockId\n      } = this.state;\n\n      if (name === \"add_duration\") {\n        //if (appointmentId) {\n        selectedList[index][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[index][\"start_time\"]), value ? value : \"00:00\"); // } else {\n        //   selectedList[index][\"end_time\"] = this.addTimes(\n        //     selectedList[index][\"start_time\"],\n        //     value ? value : \"00:00\"\n        //   );\n        // }\n\n        selectedList[index][\"add_duration\"] = value;\n\n        if (selectedList.length - 1 > index) {\n          let endTime = \"\"; //if (appointmentId) {\n\n          endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]); // } else {\n          //   endTime = selectedList[index][\"end_time\"];\n          // }\n\n          selectedList[index + 1][\"start_time\"] = endTime;\n\n          if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n            selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n          }\n        }\n      } else if (name === \"Item_CodeName\") {\n        selectedList[index][\"Item_Codeid\"] = freeTextStockId;\n        selectedList[index][\"Item_CodeName\"] = value;\n        selectedList[index][\"item_text\"] = value;\n        selectedList[index][\"checktype\"] = \"freetext\";\n        selectedList[index][\"treat_parentcode\"] = null;\n      } else if (name === \"recur_days\" || name === \"recur_qty\") {\n        if (value <= 0 || value === \"\") {\n          selectedList[index][name] = null;\n        } else {\n          selectedList[index][name] = Number(value);\n        }\n      } else {\n        selectedList[index][name] = value;\n      }\n\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleMultiSelect = data => {\n      let {\n        formFields\n      } = this.state;\n      let list = [];\n\n      for (let key of data) {\n        list.push(key.value);\n      }\n\n      formFields[\"emp_no\"] = list;\n      this.setState({\n        formFields\n      });\n      console.log(formFields, \"oyokkjk\");\n    };\n\n    this.handleDatePick = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        selectedList,\n        appointmentId\n      } = this.state;\n      let time = this.getHoursFromDate(value);\n      let duration = \"\";\n\n      if (selectedList[index][\"add_duration\"] !== \"\") {\n        duration = selectedList[index][\"add_duration\"];\n      } else {\n        duration = \"00:00\";\n      }\n\n      selectedList[index][\"start_time\"] = value ? value : this.timeToDateFormat(selectedList[index][\"start_time\"]);\n\n      if (time) {\n        selectedList[index][\"end_time\"] = this.addTimes(time, duration);\n      }\n\n      if (selectedList.length - 1 > index) {\n        let endTime = \"\";\n\n        if (appointmentId) {\n          endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\n        } else {\n          endTime = selectedList[index][\"end_time\"];\n        }\n\n        selectedList[index + 1][\"start_time\"] = endTime;\n\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n          selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n        }\n      }\n\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.getHoursFromDate = date => {\n      let hour = date.getHours();\n      let minute = date.getMinutes();\n      let hours = hour > 9 ? hour : \"0\" + hour;\n      let minutes = minute > 9 ? minute : \"0\" + minute;\n      return hours + \":\" + minutes;\n    };\n\n    this.stafflistvalidation = appointmentTreatmentList => {\n      if (appointmentTreatmentList.length > 0) {\n        for (let item of appointmentTreatmentList) {\n          if (!item.emp_no || item.emp_no === \"\" || item.emp_no === null) {\n            Toast({\n              type: \"error\",\n              message: \"Please select Staff\"\n            });\n            return false;\n          } else {\n            return true;\n          }\n        }\n      }\n    };\n\n    this.handleUpdate = () => {\n      let {\n        appointmentCustomerDetail,\n        appointmentTreatmentList\n      } = this.props;\n      let {\n        appointmentId,\n        InitAppointmentStatus,\n        dragusername,\n        dragpassword\n      } = this.state;\n      let finalTreatment = [];\n\n      for (let TreatmentList of appointmentTreatmentList) {\n        finalTreatment.push({\n          appt_id: TreatmentList.appt_id,\n          start_time: this.getHoursFromDate(TreatmentList.start_time),\n          end_time: TreatmentList.end_time,\n          add_duration: TreatmentList.add_duration,\n          item_id: TreatmentList.Item_Codeid,\n          item_text: TreatmentList.item_text,\n          emp_id: TreatmentList.emp_no,\n          requesttherapist: TreatmentList.requesttherapist,\n          recur_qty: Number(\"\"),\n          recur_days: \"\",\n          checktype: TreatmentList.checktype,\n          treat_parentcode: TreatmentList.treat_parentcode\n        });\n      }\n\n      console.log(finalTreatment, \"filteredupdateFunctionAppointmentData\");\n      let orig_remark = \"\";\n      let AppStatus = \"\";\n\n      if (appointmentCustomerDetail.remark_setting) {\n        orig_remark = null;\n      } else {\n        orig_remark = appointmentCustomerDetail.new_remark;\n      } // if (\n      //   String(InitAppointmentStatus).toUpperCase() === \"ARRIVED\" &&\n      //   String(appointmentCustomerDetail.bookingStatus).toUpperCase() ===\n      //     \"ARRIVED\"\n      // ) {\n      //   AppStatus = null;\n      // } else {\n      //   AppStatus = appointmentCustomerDetail.bookingStatus;\n      // }\n\n\n      AppStatus = appointmentCustomerDetail.bookingStatus;\n\n      if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\n          try {\n            let data = {\n              appointment: {\n                appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n                appt_status: AppStatus,\n                channel_id: Number(appointmentCustomerDetail.Appt_typeid),\n                ori_remark: orig_remark,\n                edit_remark: appointmentCustomerDetail.edit_remark,\n                source_id: Number(appointmentCustomerDetail.Source_Codeid),\n                Room_Codeid: Number(appointmentCustomerDetail.Room_Codeid),\n                sec_status: appointmentCustomerDetail.sec_status,\n                remark_setting: appointmentCustomerDetail.remark_setting,\n                cart_create: appointmentCustomerDetail.cart_create,\n                username: dragusername,\n                password: dragpassword\n              },\n              treatment: finalTreatment\n            };\n            let formFields = {\n              custId: 0,\n              custName: \"\",\n              cust_refer: \"\"\n            };\n            formFields[\"custId\"] = appointmentCustomerDetail.customerName;\n            formFields[\"custName\"] = appointmentCustomerDetail.custName;\n            formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\n            this.props.updateForm(\"basicApptDetail\", formFields);\n            this.props.commonPatchApi(`appointmentedit/${appointmentId}/`, data).then(async res => {\n              console.log(res, \"cart check while update booking\");\n\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n\n                if (appointmentCustomerDetail.cart_create) {\n                  history.push(\"/admin/cart\");\n                }\n              } else if (res.status === 201) {\n                // let formFields = { custId: 0, custName: \"\", cust_refer: \"\" };\n                // formFields[\"custId\"] = appointmentCustomerDetail.customerName;\n                // formFields[\"custName\"] = appointmentCustomerDetail.custName;\n                // formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\n                // await this.props.updateForm(\"basicApptDetail\", formFields);\n                this.props.getCommonApi(`itemcart/Check/?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${appointmentCustomerDetail.customerName}`).then(res => {\n                  history.push(\"/admin/cart\");\n                });\n              }\n            });\n          } catch (e) {\n            console.log(\"updateappointmentcatch\", e);\n          }\n        }\n      } else {\n        this.showErrorMessage();\n      }\n    };\n\n    this.handleRecurringUpdate = () => {\n      let {\n        appointmentCustomerDetail,\n        appointmentTreatmentList\n      } = this.props;\n      let {\n        appointmentId,\n        selectedRec_days,\n        selectedRec_qty,\n        recurringList,\n        recurringSelectAll\n      } = this.state;\n      let finalRecurring = [];\n\n      for (var recurringItem of recurringList) {\n        if (recurringItem.selected) {\n          let value = recurringItem.id;\n          finalRecurring.push(value);\n        }\n      }\n\n      console.log(finalRecurring, \"finalrecurringList\");\n\n      if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\n          let data = {\n            appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n            Room_Codeid: appointmentCustomerDetail.Room_Codeid,\n            appt_status: appointmentCustomerDetail.bookingStatus,\n            sec_status: appointmentCustomerDetail.sec_status,\n            edit_remark: appointmentCustomerDetail.edit_remark,\n            start_time: this.getHoursFromDate(appointmentTreatmentList[0].start_time),\n            end_time: appointmentTreatmentList[0].end_time,\n            item_id: appointmentTreatmentList[0].Item_Codeid,\n            add_duration: appointmentTreatmentList[0].add_duration,\n            emp_id: appointmentTreatmentList[0].emp_no,\n            requesttherapist: appointmentTreatmentList[0].requesttherapist,\n            item_text: appointmentTreatmentList[0].item_text,\n            recur_days: selectedRec_days === appointmentTreatmentList[0].recur_days || appointmentTreatmentList[0].recur_days === \"\" || appointmentTreatmentList[0].recur_days <= 0 ? null : appointmentTreatmentList[0].recur_days,\n            recur_qty: Number(selectedRec_qty) === Number(appointmentTreatmentList[0].recur_qty) || Number(appointmentTreatmentList[0].recur_qty) === \"\" || Number(appointmentTreatmentList[0].recur_qty) <= 0 ? null : Number(appointmentTreatmentList[0].recur_qty),\n            recur_ids: finalRecurring\n          };\n          console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\n\n          if (recurringSelectAll) {\n            this.props.commonPatchApi(`appointmentrecur/${appointmentId}/?type=${`all`} `, data).then(async res => {\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              }\n            });\n          } else {\n            this.props.commonPatchApi(`appointmentrecur/${appointmentId}/`, data).then(async res => {\n              console.log(res, \"type all clicked result\");\n\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              }\n            });\n          }\n        }\n      } else {\n        this.showErrorMessage();\n      }\n    };\n\n    this.handleSubmit = () => {\n      try {\n        // this.props.handleConfirmBooking()\n        let {\n          appointmentCustomerDetail,\n          appointmentTreatmentList\n        } = this.props;\n        let {\n          dragpassword,\n          dragusername\n        } = this.state;\n        console.log(appointmentCustomerDetail, \"appointmentcustomerdetailwhenSave\");\n        console.log(appointmentTreatmentList, \"savedappointmentTreatmentListWhenSave\");\n        let finalTreatment = [];\n\n        for (let TreatmentList of appointmentTreatmentList) {\n          finalTreatment.push({\n            appt_id: TreatmentList.appt_id,\n            start_time: this.getHoursFromDate(TreatmentList.start_time),\n            end_time: TreatmentList.end_time,\n            add_duration: TreatmentList.add_duration,\n            Item_Codeid: TreatmentList.Item_Codeid,\n            item_text: TreatmentList.item_text,\n            emp_no: TreatmentList.emp_no,\n            requesttherapist: TreatmentList.requesttherapist,\n            recur_qty: TreatmentList.recur_qty,\n            recur_days: TreatmentList.recur_days,\n            checktype: TreatmentList.checktype,\n            treat_parentcode: TreatmentList.treat_parentcode\n          });\n        }\n\n        if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n          if (this.stafflistvalidation(appointmentTreatmentList)) {\n            let data = {\n              Appointment: {\n                appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n                Appt_typeid: appointmentCustomerDetail.Appt_typeid,\n                cust_noid: appointmentCustomerDetail.customerName,\n                new_remark: appointmentCustomerDetail.new_remark,\n                // emp_noid: appointmentCustomerDetail.emp_id,\n                Source_Codeid: appointmentCustomerDetail.Source_Codeid,\n                Room_Codeid: appointmentCustomerDetail.Room_Codeid,\n                appt_status: appointmentCustomerDetail.bookingStatus,\n                sec_status: appointmentCustomerDetail.sec_status,\n                ItemSite_Codeid: appointmentCustomerDetail.ItemSite_Codeid,\n                walkin: appointmentCustomerDetail.walkin,\n                username: dragusername,\n                password: dragpassword\n              },\n              Treatment: finalTreatment\n            };\n            this.props.commonCreateApi(`appointment/`, data).then(async res => {\n              if (res.status === 201) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              }\n            });\n          }\n        } else {\n          this.showErrorMessage();\n        }\n      } catch (e) {\n        console.log(\"appointment catch log\", e);\n      }\n    };\n\n    this.getDateTime = data => {\n      let date = new Date(data);\n      date = String(date).split(\" \");\n      let date1 = date[2] + \"th \" + date[1] + \", \" + date[3];\n      let time = date[4].split(\":\");\n      let time1 = String(Number(time[0]) > 12 ? Number(time[0]) - 12 : time[0]) + \":\" + time[1] + (Number(time[0]) > 12 ? \"PM\" : \"AM\");\n      return time1 + \", \" + date1;\n    };\n\n    this.handleDialog = () => {\n      this.setState({\n        isOpenModal: false,\n        index: null\n      });\n    };\n\n    this.handleMultipleCustomer = () => {\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleSelectPackage = async data => {\n      let {\n        selectedList,\n        PackageIndex,\n        appointmentId\n      } = this.state;\n\n      if (PackageIndex === 0 && selectedList[0][\"Item_CodeName\"] === \"\") {\n        selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[0][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[0][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[0][\"end_time\"] = this.addTimes(\n        //     selectedList[0][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[0][\"Item_Codeid\"] = data.id;\n        selectedList[0][\"Item_CodeName\"] = data.item_desc;\n        selectedList[0][\"item_text\"] = null;\n        selectedList[0][\"add_duration\"] = data.add_duration;\n        selectedList[0][\"checktype\"] = \"package\";\n        selectedList[0][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] === \"\") {\n        selectedList[selectedList.length - 1][\"start_time\"] = selectedList[selectedList.length - 1][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[selectedList.length - 1][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\n        //     selectedList[selectedList.length - 1][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\n        selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\n        selectedList[selectedList.length - 1][\"item_text\"] = null;\n        selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\n        selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\n        selectedList[selectedList.length - 1][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] !== \"\" && appointmentId) {\n        selectedList[selectedList.length - 1][\"start_time\"] = selectedList[selectedList.length - 1][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[selectedList.length - 1][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\n        //     selectedList[selectedList.length - 1][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\n        selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\n        selectedList[selectedList.length - 1][\"item_text\"] = null;\n        selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\n        selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\n        selectedList[selectedList.length - 1][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        var listCount = selectedList.length - 1;\n        let treatment = {}; // if (appointmentId) {\n\n        treatment[\"start_time\"] = this.timeToDateFormat(selectedList[listCount][\"end_time\"]); // } else {\n        //   treatment[\"start_time\"] = selectedList[listCount][\"end_time\"];\n        // }\n\n        treatment[\"Item_Codeid\"] = data.id;\n        treatment[\"Item_CodeName\"] = data.item_desc;\n        treatment[\"item_text\"] = null;\n        treatment[\"add_duration\"] = data.add_duration;\n        treatment[\"checktype\"] = \"package\";\n        treatment[\"treat_parentcode\"] = data.treatment_parentcode;\n        selectedList.push(treatment);\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      }\n\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleSelectTreatment = async data => {\n      let {\n        selectedList,\n        index,\n        appointmentId\n      } = this.state;\n\n      if (index == 0 && selectedList.length == 1) {\n        selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[0][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[0][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[0][\"end_time\"] = this.addTimes(\n        //     selectedList[0][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[0][\"Item_Codeid\"] = data.id;\n        selectedList[0][\"Item_CodeName\"] = data.item_desc;\n        selectedList[0][\"add_duration\"] = data.add_duration;\n        selectedList[0][\"checktype\"] = \"service\";\n        selectedList[0][\"treat_parentcode\"] = null;\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        selectedList[index][\"start_time\"] = selectedList[index][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[index][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[index][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[index][\"end_time\"] = this.addTimes(\n        //     selectedList[index][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[index][\"Item_Codeid\"] = data.id;\n        selectedList[index][\"Item_CodeName\"] = data.item_desc;\n        selectedList[index][\"add_duration\"] = data.add_duration;\n        selectedList[index][\"checktype\"] = \"service\";\n        selectedList[index][\"treat_parentcode\"] = null;\n        let endTime = \"\"; //if (appointmentId) {\n\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]); // } else {\n        //   endTime = selectedList[index][\"end_time\"];\n        // }\n\n        if (selectedList.length - 1 > index) {\n          selectedList[index + 1][\"start_time\"] = endTime;\n\n          if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n            selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n          }\n        }\n\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      }\n\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.timeToMins = time => {\n      var b = time.split(\":\");\n      return b[0] * 60 + +b[1];\n    };\n\n    this.timeFromMins = mins => {\n      function z(n) {\n        return (n < 10 ? \"0\" : \"\") + n;\n      }\n\n      var h = (mins / 60 | 0) % 24;\n      var m = mins % 60;\n      return z(h) + \":\" + z(m);\n    };\n\n    this.addTimes = (t0, t1) => {\n      return this.timeFromMins(this.timeToMins(t0) + this.timeToMins(t1));\n    };\n\n    this.handleAddtreatment = async index => {\n      let {\n        selectedList,\n        formFields,\n        appointmentId\n      } = this.state;\n\n      if (selectedList[index][\"end_time\"]) {\n        let start = \"\"; //if (appointmentId) {\n\n        start = this.timeToDateFormat(selectedList[selectedList.length - 1].end_time); // } else {\n        //   start = selectedList[selectedList.length - 1].end_time;\n        // }\n\n        formFields = {\n          appt_id: null,\n          start_time: start,\n          end_time: \"\",\n          Item_Codeid: this.state.freeTextStockId,\n          add_duration: \"\",\n          emp_no: 0,\n          requesttherapist: false,\n          recur_days: null,\n          recur_qty: null,\n          item_text: null,\n          checktype: \"\",\n          treat_parentcode: null\n        };\n        selectedList.push({\n          appt_id: null,\n          start_time: start,\n          end_time: \"\",\n          Item_Codeid: this.state.freeTextStockId,\n          Item_CodeName: \"\",\n          add_duration: \"\",\n          emp_no: 0,\n          requesttherapist: false,\n          recur_days: null,\n          recur_qty: null,\n          item_text: null,\n          checktype: \"\",\n          treat_parentcode: null\n        });\n        await this.setState({\n          selectedList,\n          formFields\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"End time shouldn't be empty\"\n        });\n      }\n    };\n\n    this.deleteTreatment = async index => {\n      let {\n        selectedList\n      } = this.state;\n      selectedList.splice(index, 1);\n      this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleTreatementmodal = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isTreatementModal: !prevState.isTreatementModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        treatmentList\n      } = this.state;\n      let {\n        selectedList\n      } = this.state;\n      selectedList[index][\"requesttherapist\"] = value;\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleCloseDialog = async () => {\n      this.props.handleCloseDialog();\n    };\n\n    this.handleSaveorUpdate = async () => {\n      this.props.handleSaveorUpdate();\n    };\n\n    this.handleRecurringlistCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }, item) => {\n      let {\n        recurringList\n      } = this.state;\n      let listCheckbox = recurringList.find(acc => acc.id === item.id);\n\n      if (listCheckbox) {\n        listCheckbox[\"selected\"] = value;\n        await this.setState({ ...this.state.recurringList,\n          listCheckbox\n        });\n      }\n\n      let Checkbox = recurringList.filter(acc => acc.selected === true).length;\n\n      if (Checkbox == this.state.recurringList.length) {\n        await this.setState({\n          recurringSelectAll: true\n        });\n      } else {\n        await this.setState({\n          recurringSelectAll: false\n        });\n      }\n    };\n\n    this.handleRecurringSelectAllCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        recurringList\n      } = this.state;\n      await this.setState({\n        recurringSelectAll: value\n      });\n\n      for (let item of recurringList) {\n        item[\"selected\"] = value;\n        await this.setState({ ...this.state.recurringList,\n          item\n        });\n      }\n    };\n\n    this.handleCopyAppointment = async () => {\n      let {\n        appointmentId\n      } = this.state;\n      let formFields = {};\n      formFields[\"appointmentId\"] = appointmentId;\n      await this.props.updateForm(\"AppointmentCopy\", formFields);\n      console.log(this.props.AppointmentCopy, \"after copy click appointment copy id\");\n      Toast({\n        type: \"success\",\n        message: \"Appointment copied\"\n      });\n    };\n\n    this.handlePasteAppointment = async () => {\n      let {\n        AppointmentCopy\n      } = this.props;\n\n      if (AppointmentCopy) {\n        this.setState({\n          PasteAppointmentId: AppointmentCopy.appointmentId,\n          selectedList: []\n        });\n        this.handleRenderApptDetail(AppointmentCopy.appointmentId, true);\n      }\n    };\n\n    this.handleGotoCart = async () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let formFields = {\n        custId: 0,\n        custName: \"\"\n      };\n      formFields[\"custId\"] = appointmentCustomerDetail.customerName;\n      formFields[\"custName\"] = appointmentCustomerDetail.custName;\n      formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\n      await this.props.updateForm(\"basicApptDetail\", formFields);\n      history.push(\"/admin/cart\");\n    };\n\n    this.handleUpcomingAppointment = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isUpcomingAppointmentModal: !prevState.isUpcomingAppointmentModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleTreatmentHistory = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isTreatmentHistoryModal: !prevState.isTreatmentHistoryModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleLoginPopupCheck = async () => {\n      let {\n        settingData\n      } = this.state;\n\n      if (settingData.appt_pw) {\n        let {\n          isLoginConfirmation\n        } = this.state;\n        isLoginConfirmation = true;\n        await this.setState({\n          isLoginConfirmation\n        });\n      } else {\n        this.handleLoginSubmit();\n      }\n    };\n\n    this.handleLoginConfirmationDialog = async () => {\n      let {\n        isLoginConfirmation\n      } = this.state;\n      isLoginConfirmation = false;\n      await this.setState({\n        isLoginConfirmation,\n        dragusername: \"\",\n        dragpassword: \"\"\n      });\n    };\n\n    this.handleInputChange = async event => {\n      await this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleLoginSubmit = () => {\n      let {\n        appointmentId\n      } = this.state;\n\n      if (appointmentId) {\n        this.handleUpdate();\n      } else {\n        this.handleSubmit();\n      }\n    };\n\n    this.toggle = key => {\n      this.setState(prevState => ({\n        [key]: !prevState[key]\n      }));\n    };\n\n    this.child = React.createRef();\n  }\n\n  componentDidMount() {\n    this.search({});\n    this.handleItemSettings();\n    let {\n      categoryList,\n      staffOption,\n      selectedList,\n      formFields,\n      duration\n    } = this.state;\n    let {\n      basicApptDetail,\n      AppointmentCopy\n    } = this.props;\n    console.log(AppointmentCopy, \"Basic app detail data\");\n\n    if (basicApptDetail.appt_id) {\n      this.setState({\n        appointmentId: basicApptDetail.appt_id\n      });\n      this.handleRenderApptDetail(basicApptDetail.appt_id, false);\n    } else {\n      let {\n        selectedList\n      } = this.state;\n      selectedList[0][\"start_time\"] = basicApptDetail ? this.timeToDateFormat(basicApptDetail.time) : \"\";\n      selectedList[0][\"emp_no\"] = basicApptDetail ? basicApptDetail.staff_id : 0;\n      this.setState({\n        selectedList\n      });\n      this.props.updateForm(\"treatmentList\", selectedList);\n    }\n\n    this.props.getCommonApi(`itemdept/`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          categoryList.push({\n            value: value.id,\n            label: value.itm_desc\n          });\n        }\n\n        this.setState({\n          categoryList\n        });\n      }\n    });\n    this.props.getCommonApi(`appointment/Staffs/?Outlet=${basicApptDetail.branchId}&date=${dateFormat(new Date())}`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          staffOption.push({\n            value: value.id,\n            label: value.emp_name\n          });\n        }\n\n        this.setState({\n          staffOption\n        });\n      }\n    });\n    this.props.getCommonApi(`treatment/Duration/`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          duration.push({\n            value: value,\n            label: value\n          });\n        }\n\n        this.setState({\n          duration\n        });\n      }\n    });\n    this.getStaffAvailability();\n    this.getFreetextStockid();\n  }\n\n  componentWillMount() {\n    this.validator = new SimpleReactValidator({\n      element: message => /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-message text-danger validNo fs14\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 9\n        }\n      }, message),\n      autoForceUpdate: this\n    });\n  }\n\n  render() {\n    let {\n      outletOption,\n      staffOption,\n      roomOption,\n      selectedList,\n      siteList,\n      list,\n      formFields,\n      timeDropdown,\n      duration,\n      isOpenModal,\n      treatmentField,\n      treatmentList = [],\n      categoryList,\n      treatmentListHeader,\n      meta,\n      isTreatementModal,\n      appointmentId,\n      selectedRec_days,\n      selectedRec_qty,\n      recurringList,\n      recurringSelectAll,\n      settingData,\n      PasteAppointmentId,\n      isTreatmentHistoryModal,\n      isUpcomingAppointmentModal,\n      AppointmentListHeader,\n      isLoginConfirmation,\n      passwordVisible,\n      dragusername,\n      dragpassword\n    } = this.state;\n    let {\n      customerDetail,\n      selectedTreatmentList,\n      customerId,\n      t,\n      tokenDetail\n    } = this.props;\n    let {\n      outlet,\n      staff,\n      rooms\n    } = customerDetail;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 7\n      }\n    }, PasteAppointmentId <= 0 ? /*#__PURE__*/React.createElement(AppointmentForm, {\n      onRef: ref => this.child = ref,\n      selectedCustomer: this.props.selectedCustomer,\n      PasteAppointmentId: PasteAppointmentId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1365,\n        columnNumber: 11\n      }\n    }) : null, PasteAppointmentId > 0 ? /*#__PURE__*/React.createElement(AppointmentForm, {\n      onRef: ref => this.child = ref,\n      selectedCustomer: this.props.selectedCustomer,\n      PasteAppointmentId: PasteAppointmentId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"create-appointment select-treatment-appointment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1378,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appointment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1380,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appointment-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treatment-section p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"select-treatment select-list w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex selected selected-header mb-4 w-100 overflow-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 25\n      }\n    }, t(\"Start\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1387,\n        columnNumber: 25\n      }\n    }, t(\"End\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1388,\n        columnNumber: 25\n      }\n    }, t(\"Service\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1392,\n        columnNumber: 25\n      }\n    }, t(\"Duration\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1395,\n        columnNumber: 25\n      }\n    }, t(\"Treatment Staff\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: req_therapist,\n      alt: \"\",\n      height: \"25\",\n      width: \"25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 header-detail d-flex justify-content-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 25\n      }\n    }, t(\"Recur Days\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 header-detail d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407,\n        columnNumber: 25\n      }\n    }, t(\"Recur Qty\"))), selectedList.length > 0 ? selectedList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex selected  mb-4\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1414,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 mr-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1415,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalTimePicker, {\n        className: `cursor-pointer`,\n        onChange: e => this.handleDatePick(e, index),\n        label: \"start_time\",\n        name: \"start_time\",\n        timeOnly: true,\n        dateFormat: `HH:mm`,\n        showTime: true,\n        selected: false,\n        placeholder: \"\",\n        timeIntervals: 5,\n        value: item.start_time,\n        showIcon: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 mr-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"end\" // options={timeDropdown}\n        ,\n        value: item.end_time,\n        name: \"end_time\",\n        onChange: () => {},\n        className: \"customer-name p-0\",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1432,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-3 mr-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1442,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 33\n        }\n      }), settingData && settingData.service_sel && settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onDoubleClick: () => this.setState({\n          isOpenModal: true,\n          index: index\n        }),\n        onChange: e => this.handleChange(e, index),\n        className: \"customer-name p-0 px-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1447,\n          columnNumber: 35\n        }\n      }) : null, settingData && settingData.service_sel && !settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onDoubleClick: () => this.setState({\n          isOpenModal: true,\n          index: index\n        }),\n        onChange: () => {},\n        className: \"customer-name p-0 px-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1465,\n          columnNumber: 35\n        }\n      }) : null, settingData && !settingData.service_sel && settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onClick: () => {},\n        onChange: e => this.handleChange(e, index),\n        className: \"customer-name p-0 px-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1483,\n          columnNumber: 35\n        }\n      }) : null, settingData && !settingData.service_sel && !settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onClick: () => {},\n        onChange: () => {},\n        className: \"customer-name p-0 px-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1496,\n          columnNumber: 35\n        }\n      }) : null), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 mr-1 p-0 header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1507,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n      , {\n        options: duration,\n        value: item.add_duration,\n        name: \"add_duration\",\n        onChange: e => this.handleChange(e, index),\n        className: \"customer-name p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1508,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1517,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n      , {\n        options: staffOption,\n        value: item.emp_no,\n        name: \"emp_no\",\n        onChange: e => this.handleChange(e, index),\n        className: \"customer-name p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 31\n        }\n      }, item.requesttherapist ? /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleCheckbox(e, index),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1529,\n          columnNumber: 35\n        }\n      }) : /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleCheckbox(e, index),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 35\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 d-flex justify-content-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1548,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        type: \"number\",\n        name: \"recur_days\",\n        value: item.recur_days ? item.recur_days : \"\",\n        onChange: e => this.handleChange(e, index),\n        disabled: appointmentId ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1549,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 d-flex justify-content-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1557,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        type: \"number\",\n        name: \"recur_qty\",\n        value: item.recur_qty ? item.recur_qty : \"\",\n        onChange: e => this.handleChange(e, index),\n        disabled: appointmentId ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 33\n        }\n      })), selectedList.length === index + 1 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ml-3\",\n        onClick: () => this.handleAddtreatment(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1567,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        width: \"31\",\n        height: \"30\",\n        viewBox: \"0 0 31 30\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1571,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"rect\", {\n        width: \"31\",\n        height: \"30\",\n        fill: \"#F9F9F9\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1578,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M15 8V22\",\n        stroke: \"#848484\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1583,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M8 15H22\",\n        stroke: \"#848484\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1589,\n          columnNumber: 37\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null, appointmentId && item.appt_id ? null : /*#__PURE__*/React.createElement(\"img\", {\n        width: \"25\",\n        height: \"25\",\n        onClick: () => this.deleteTreatment(index),\n        className: \"ml-3\",\n        src: closeIcon,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1600,\n          columnNumber: 37\n        }\n      })));\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row selected text-center mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 25\n      }\n    }, t(\"No Data\")))), recurringList && recurringList.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5 mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1624,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1625,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 25\n      }\n    }, \"Recurring Related Appointments\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row selected selected-header mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1630,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n      label: `All`,\n      onChange: e => this.handleRecurringSelectAllCheckbox(e),\n      value: recurringSelectAll,\n      name: \"recurringSelectAll\",\n      checked: recurringSelectAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1631,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1641,\n        columnNumber: 25\n      }\n    }, t(\"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642,\n        columnNumber: 25\n      }\n    }, t(\"Start\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1643,\n        columnNumber: 25\n      }\n    }, t(\"End\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1644,\n        columnNumber: 25\n      }\n    }, t(\"Service\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648,\n        columnNumber: 25\n      }\n    }, t(\"Duration\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1651,\n        columnNumber: 25\n      }\n    }, t(\"Treatment staff\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1652,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: req_therapist,\n      alt: \"\",\n      height: \"25\",\n      width: \"25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1653,\n        columnNumber: 27\n      }\n    }))), recurringList && recurringList.length > 0 ? recurringList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row selected  mb-4\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1664,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1665,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleRecurringlistCheckbox(e, item),\n        value: item.selected,\n        name: \"recurringItem\",\n        checked: item.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1666,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1675,\n          columnNumber: 31\n        }\n      }, item.date), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1676,\n          columnNumber: 31\n        }\n      }, item.start_time), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1677,\n          columnNumber: 31\n        }\n      }, item.end_time), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-3 p-0 header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1678,\n          columnNumber: 31\n        }\n      }, item.item_name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1682,\n          columnNumber: 31\n        }\n      }, item.add_duration), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1685,\n          columnNumber: 31\n        }\n      }, item.emp_name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1686,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleRecurringlistCheckbox(e, item),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: item.requesttherapist,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1687,\n          columnNumber: 33\n        }\n      })));\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 text-center w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1701,\n        columnNumber: 25\n      }\n    }, t(\"No Data\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1705,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1706,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1707,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1708,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"treatment\",\n      resetbg: true,\n      className: \"col-12\",\n      label: \"Cancel\",\n      onClick: this.handleCloseDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1709,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1717,\n        columnNumber: 29\n      }\n    }, appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"submit-btn\",\n      resetbg: false,\n      className: \"col-12 submit-btn ml-4\",\n      label: \"Update Recurring\",\n      onClick: this.handleRecurringUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1719,\n        columnNumber: 33\n      }\n    }) : null))))) : null)))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"multiple-appointment select-category\",\n      style: {\n        minWidth: \"60%\"\n      },\n      modal: isOpenModal,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1744,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"customer-list container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1750,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 pl-0 mb-3 fw-500 py-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1751,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1752,\n        columnNumber: 17\n      }\n    }, t(\"Select Treatment\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1756,\n        columnNumber: 19\n      }\n    }, t(\"Category\"), /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n    , {\n      options: categoryList,\n      value: treatmentField.category,\n      name: \"category\",\n      onChange: this.handleChangeTreatment,\n      className: \"customer-name p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1758,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1767,\n        columnNumber: 19\n      }\n    }, t(\"Service\"), /*#__PURE__*/React.createElement(\"input\", {\n      // placeholder=\"Enter here\"\n      // options={siteList}\n      value: treatmentField.treatment,\n      name: \"treatment\",\n      onChange: this.handleSearch,\n      className: \"search px-3 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1769,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container table-responsive mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1781,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableWrapper, {\n      headerDetails: treatmentListHeader,\n      queryHandler: this.handlePagination,\n      pageMeta: meta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1782,\n        columnNumber: 17\n      }\n    }, treatmentList.length > 0 ? treatmentList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"w-100\",\n        onClick: () => this.handleSelectTreatment(item),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1790,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1795,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1797,\n          columnNumber: 29\n        }\n      }, item.Item_Class)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1799,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1801,\n          columnNumber: 29\n        }\n      }, item.item_desc)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1803,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1805,\n          columnNumber: 29\n        }\n      }, item.add_duration)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1809,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1811,\n          columnNumber: 29\n        }\n      }, item.item_price)));\n    }) : /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1817,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1818,\n        columnNumber: 23\n      }\n    }, t(\"No data Available\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row text-center justify-center w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1826,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"col-3\",\n      resetbg: true,\n      className: \"col-12 ml-4\",\n      label: \"Cancel\",\n      onClick: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1827,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"d-flex justify-content-center\",\n      style: {\n        minWidth: \"20%\"\n      },\n      modal: isLoginConfirmation,\n      handleModal: () => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1837,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleLoginConfirmationDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1843,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1849,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1850,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1851,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1852,\n        columnNumber: 19\n      }\n    }, t(\"Please enter your login credential\"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 form-group mb-3 pb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1854,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1855,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      placeholder: \"Username\",\n      value: dragusername,\n      name: \"dragusername\",\n      autocomplete: \"off\",\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1856,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 form-group mb-3 pb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1865,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1866,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      type: passwordVisible ? \"text\" : \"password\",\n      placeholder: \"Password\",\n      value: dragpassword,\n      name: \"dragpassword\",\n      autocomplete: \"off\",\n      onChange: e => this.handleInputChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-addon right fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1875,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.toggle(\"passwordVisible\"),\n      className: `icon-${passwordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876,\n        columnNumber: 23\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-0 p-0 d-flex justify-content-center col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1885,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      onClick: this.handleLoginSubmit,\n      label: \"PROCEED\",\n      className: \"col-12 submit-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1886,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1896,\n        columnNumber: 11\n      }\n    }, isTreatementModal ? /*#__PURE__*/React.createElement(TreatmentPackage, {\n      isTreatementModal: isTreatementModal,\n      handleTreatementmodal: this.handleTreatementmodal,\n      handleSelectPackage: this.handleSelectPackage,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1898,\n        columnNumber: 15\n      }\n    }) : \"\"), console.log(this.props.appointmentCustomerDetail, \"appointmentcustomerdetail\"), isTreatmentHistoryModal ? /*#__PURE__*/React.createElement(TreatmentHistory, {\n      isTreatmentHistoryModal: isTreatmentHistoryModal,\n      handleTreatmentHistory: this.handleTreatmentHistory,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1922,\n        columnNumber: 13\n      }\n    }) : \"\", isUpcomingAppointmentModal ? /*#__PURE__*/React.createElement(UpcomingAppointment, {\n      isUpcomingAppointmentModal: isUpcomingAppointmentModal,\n      handleUpcomingAppointment: this.handleUpcomingAppointment,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1936,\n        columnNumber: 13\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1951,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1952,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1953,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Package\",\n      onClick: this.handleTreatementmodal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1954,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Upcoming\",\n      onClick: this.handleUpcomingAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1961,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"History\",\n      onClick: this.handleTreatmentHistory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1968,\n        columnNumber: 17\n      }\n    }), String(tokenDetail.role_code).toUpperCase() !== \"4\" && appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Profile\",\n      onClick: () => history.push(`/admin/customerplus/${customerId}/account`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1977,\n        columnNumber: 19\n      }\n    }) : null, String(tokenDetail.role_code).toUpperCase() !== \"4\" && appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Cart\",\n      onClick: this.handleGotoCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1989,\n        columnNumber: 19\n      }\n    }) : null, !appointmentId && this.props.AppointmentCopy && this.props.AppointmentCopy.appointmentId > 0 ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Paste Appt.\",\n      onClick: this.handlePasteAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2001,\n        columnNumber: 19\n      }\n    }) : null, appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Copy Appt.\",\n      onClick: this.handleCopyAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2010,\n        columnNumber: 19\n      }\n    }) : null, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      resetbg: true,\n      className: \"col-12\",\n      label: \"Cancel\",\n      onClick: this.handleCloseDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2018,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      submitBtn: true,\n      label: appointmentId ? \"Update\" : \"Confirm\" // onClick={e => {\n      //   e.target.setAttribute(\"disabled\", true);\n      //   this.handleUpdate();\n      // }}\n      ,\n      onClick: _.debounce(async () => {\n        await this.handleLoginPopupCheck();\n      }, 500),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2026,\n        columnNumber: 17\n      }\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customerDetail: state.appointment.customerDetail,\n  appointmentDetail: state.appointment.appointmentDetail,\n  selectedTreatmentList: state.appointment.selectedTreatmentList,\n  basicApptDetail: state.appointment.basicApptDetail,\n  appointmentCustomerDetail: state.appointment.appointmentCustomerDetail,\n  appointmentTreatmentList: state.appointment.appointmentTreatmentList,\n  AppointmentCopy: state.appointment.AppointmentCopy,\n  tokenDetail: state.authStore.tokenDetails\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    updateForm,\n    getSelectedTreatmentList,\n    getCommonApi,\n    commonCreateApi,\n    commonPatchApi\n  }, dispatch);\n};\n\nexport const NewSelectTreatment = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(NewSelectTreatmentClass));","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/Admin/NewAppointment/NewCreateAppointment/NewSelectTreatment.js"],"names":["React","Component","NormalSelect","NormalButton","NormalModal","NormalInput","NormalDateTime","NormalCheckbox","NormalTimePicker","updateForm","getSelectedTreatmentList","connect","bindActionCreators","SimpleReactValidator","closeIcon","req_therapist","getCommonApi","commonCreateApi","commonPatchApi","dateFormat","_","TableWrapper","TreatmentPackage","Toast","AppointmentForm","history","TreatmentHistory","UpcomingAppointment","withTranslation","NewSelectTreatmentClass","constructor","props","state","treatmentDetail","formFields","appt_id","start_time","end_time","Item_Codeid","add_duration","emp_no","requesttherapist","Item_CodeName","edit_remark","recur_days","recur_qty","item_text","checktype","treat_parentcode","selectedList","outletOption","staffOption","roomOption","list","isOpenModal","categoryList","treatmentList","siteList","treatmentField","category","treatment","timeDropdown","duration","index","search","selectTreatmentId","treatmentListHeader","label","className","divClass","meta","isTreatementModal","appointmentId","PackageIndex","selectedRec_days","selectedRec_qty","recurringList","recurringSelectedItems","recurringSelectAll","settingData","PasteAppointmentId","InitAppointmentStatus","isTreatmentHistoryModal","isUpcomingAppointmentModal","freeTextStockId","isLoginConfirmation","passwordVisible","dragusername","dragpassword","showErrorMessage","child","onFocus","getFreetextStockid","async","page","limit","then","res","console","log","data","status","stock_id","setState","type","message","timeToDateFormat","TimeValue","time","String","split","newTime","Date","setHours","handleRenderApptDetail","copy","key","appointment","appt_status","treat","startTime","endTime","apptid","push","emp_id","item_id","item_name","handleItemSettings","getStaffAvailability","handleSearch","event","persist","target","value","debouncedFn","debounce","searchString","dataList","pagination","handlePagination","handleChangeTreatment","name","handleChange","addTimes","getHoursFromDate","length","Number","handleMultiSelect","handleDatePick","date","hour","getHours","minute","getMinutes","hours","minutes","stafflistvalidation","appointmentTreatmentList","item","handleUpdate","appointmentCustomerDetail","finalTreatment","TreatmentList","orig_remark","AppStatus","remark_setting","new_remark","bookingStatus","customerName","appt_date","appointmentDate","channel_id","Appt_typeid","ori_remark","source_id","Source_Codeid","Room_Codeid","sec_status","cart_create","username","password","custId","custName","cust_refer","handleCloseDialog","handleSaveorUpdate","e","handleRecurringUpdate","finalRecurring","recurringItem","selected","id","recur_ids","handleSubmit","Appointment","cust_noid","ItemSite_Codeid","walkin","Treatment","getDateTime","date1","time1","handleDialog","handleMultipleCustomer","handleSelectPackage","item_desc","treatment_parentcode","listCount","handleSelectTreatment","timeToMins","b","timeFromMins","mins","z","n","h","m","t0","t1","handleAddtreatment","start","deleteTreatment","splice","handleTreatementmodal","customerId","prevState","handleCheckbox","handleRecurringlistCheckbox","listCheckbox","find","acc","Checkbox","filter","handleRecurringSelectAllCheckbox","handleCopyAppointment","AppointmentCopy","handlePasteAppointment","handleGotoCart","handleUpcomingAppointment","handleTreatmentHistory","handleLoginPopupCheck","appt_pw","handleLoginSubmit","handleLoginConfirmationDialog","handleInputChange","toggle","createRef","componentDidMount","basicApptDetail","staff_id","itm_desc","branchId","emp_name","componentWillMount","validator","element","autoForceUpdate","render","AppointmentListHeader","customerDetail","selectedTreatmentList","t","tokenDetail","outlet","staff","rooms","ref","selectedCustomer","map","service_sel","service_text","minWidth","Item_Class","item_price","custPhone","cust_remark","role_code","toUpperCase","mapStateToProps","appointmentDetail","authStore","tokenDetails","mapDispatchToProps","dispatch","NewSelectTreatment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalSelect,\r\n  NormalButton,\r\n  NormalModal,\r\n  NormalInput,\r\n  NormalDateTime,\r\n  NormalCheckbox,\r\n  NormalTimePicker,\r\n} from \"component/common\";\r\nimport \"./style.scss\";\r\nimport {\r\n  updateForm,\r\n  getSelectedTreatmentList,\r\n} from \"redux/actions/appointment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport req_therapist from \"assets/images/app-icons/1.png\";\r\nimport {\r\n  getCommonApi,\r\n  commonCreateApi,\r\n  commonPatchApi,\r\n} from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport _ from \"lodash\";\r\nimport { TableWrapper } from \"component/common\";\r\nimport { TreatmentPackage } from \"./modal/index\";\r\nimport { Toast } from \"service/toast\";\r\nimport { AppointmentForm } from \"./AppointmentForm\";\r\nimport { history } from \"helpers\";\r\nimport { TreatmentHistory } from \"component/Admin/NewAppointment/NewListAppointment/modal/TreatmentHistory\";\r\nimport { UpcomingAppointment } from \"component/Admin/NewAppointment/NewListAppointment/modal/UpcomingAppointment\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nexport class NewSelectTreatmentClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.child = React.createRef();\r\n  }\r\n  state = {\r\n    treatmentDetail: [],\r\n    formFields: {\r\n      appt_id: \"\",\r\n      start_time: \"\",\r\n      end_time: \"\",\r\n      Item_Codeid: null,\r\n      add_duration: \"\",\r\n      emp_no: 0,\r\n      requesttherapist: false,\r\n      Item_CodeName: \"\",\r\n      edit_remark: \"\",\r\n      recur_days: null,\r\n      recur_qty: null,\r\n      item_text: null,\r\n      checktype: \"\",\r\n      treat_parentcode: null,\r\n    },\r\n    selectedList: [\r\n      {\r\n        appt_id: \"\",\r\n        start_time: \"\",\r\n        end_time: \"\",\r\n        Item_Codeid: null,\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        Item_CodeName: \"\",\r\n        edit_remark: \"\",\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      },\r\n    ],\r\n    outletOption: [],\r\n    staffOption: [],\r\n    roomOption: [],\r\n    list: [],\r\n    isOpenModal: false,\r\n    categoryList: [],\r\n    treatmentList: [],\r\n    siteList: [],\r\n    treatmentField: {\r\n      category: \"\",\r\n      treatment: \"\",\r\n    },\r\n    timeDropdown: [],\r\n    duration: [],\r\n    index: null,\r\n    search: \"\",\r\n    selectTreatmentId: \"\",\r\n    treatmentListHeader: [\r\n      { label: \"Category\", className: \"w-50\" },\r\n      { label: \"Service\", className: \"w-75\" },\r\n      {\r\n        label: \"Duration\",\r\n        className: \"w-25\",\r\n        divClass: \"justify-content-end text-right\",\r\n      },\r\n      {\r\n        label: \"price\",\r\n        className: \"w-50\",\r\n        divClass: \"justify-content-end text-right\",\r\n      },\r\n    ],\r\n    meta: {},\r\n    isTreatementModal: false,\r\n    appointmentId: null,\r\n    PackageIndex: 0,\r\n    selectedRec_days: null,\r\n    selectedRec_qty: null,\r\n    recurringList: [],\r\n    recurringSelectedItems: [],\r\n    recurringSelectAll: false,\r\n    settingData: {},\r\n    PasteAppointmentId: 0,\r\n    InitAppointmentStatus: \"\",\r\n    isTreatmentHistoryModal: false,\r\n    isUpcomingAppointmentModal: false,\r\n    freeTextStockId: \"\",\r\n    isLoginConfirmation: false,\r\n    passwordVisible: false,\r\n    dragusername: \"\",\r\n    dragpassword: \"\",\r\n  };\r\n  showErrorMessage = () => {\r\n    this.child.onFocus();\r\n  };\r\n  componentDidMount() {\r\n    this.search({});\r\n    this.handleItemSettings();\r\n    let { categoryList, staffOption, selectedList, formFields, duration } =\r\n      this.state;\r\n\r\n    let { basicApptDetail, AppointmentCopy } = this.props;\r\n    console.log(AppointmentCopy, \"Basic app detail data\");\r\n\r\n    if (basicApptDetail.appt_id) {\r\n      this.setState({ appointmentId: basicApptDetail.appt_id });\r\n      this.handleRenderApptDetail(basicApptDetail.appt_id, false);\r\n    } else {\r\n      let { selectedList } = this.state;\r\n      selectedList[0][\"start_time\"] = basicApptDetail\r\n        ? this.timeToDateFormat(basicApptDetail.time)\r\n        : \"\";\r\n      selectedList[0][\"emp_no\"] = basicApptDetail\r\n        ? basicApptDetail.staff_id\r\n        : 0;\r\n      this.setState({\r\n        selectedList,\r\n      });\r\n      this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n    this.props.getCommonApi(`itemdept/`).then(key => {\r\n      let { status, data } = key;\r\n      if (status === 200) {\r\n        for (let value of data) {\r\n          categoryList.push({ value: value.id, label: value.itm_desc });\r\n        }\r\n        this.setState({ categoryList });\r\n      }\r\n    });\r\n    this.props\r\n      .getCommonApi(\r\n        `appointment/Staffs/?Outlet=${\r\n          basicApptDetail.branchId\r\n        }&date=${dateFormat(new Date())}`\r\n      )\r\n      .then(key => {\r\n        let { status, data } = key;\r\n        if (status === 200) {\r\n          for (let value of data) {\r\n            staffOption.push({ value: value.id, label: value.emp_name });\r\n          }\r\n          this.setState({ staffOption });\r\n        }\r\n      });\r\n    this.props.getCommonApi(`treatment/Duration/`).then(key => {\r\n      let { status, data } = key;\r\n      if (status === 200) {\r\n        for (let value of data) {\r\n          duration.push({ value: value, label: value });\r\n        }\r\n        this.setState({ duration });\r\n      }\r\n    });\r\n    this.getStaffAvailability();\r\n    this.getFreetextStockid();\r\n  }\r\n  getFreetextStockid = async => {\r\n    let { treatmentField, search, selectTreatmentId } = this.state;\r\n    let page = 1,\r\n      limit = 10;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"stocklistfreetextresponse\");\r\n        let { data, status } = res;\r\n        if (status === 200) {\r\n          if (data && data.stock_id && data.stock_id !== \" \") {\r\n            this.setState({ freeTextStockId: data.stock_id });\r\n          } else {\r\n            Toast({\r\n              type: \"error\",\r\n              message: \"Stock Id not found for free text item\",\r\n            });\r\n          }\r\n        }\r\n      });\r\n  };\r\n  timeToDateFormat = TimeValue => {\r\n    let time = String(TimeValue).split(\":\");\r\n    let newTime = new Date(new Date().setHours(time[0], time[1], 0, 0));\r\n    return newTime;\r\n  };\r\n  handleRenderApptDetail = async (appt_id, copy) => {\r\n    let { selectedList, InitAppointmentStatus } = this.state;\r\n\r\n    this.props.getCommonApi(`appointmentedit/${appt_id}/`).then(async key => {\r\n      let { status, data } = key;\r\n      console.log(data, \"renderappointmentdetail\");\r\n      if (status === 200) {\r\n        if (data.treatment) {\r\n          InitAppointmentStatus = data.appointment.appt_status;\r\n          selectedList = [];\r\n          await this.setState({\r\n            selectedList: selectedList,\r\n            InitAppointmentStatus,\r\n          });\r\n          this.props.updateForm(\"treatmentList\", selectedList);\r\n          for (let treat of data.treatment) {\r\n            let startTime = \"\";\r\n            let endTime = \"\";\r\n            let apptid = null;\r\n            if (copy) {\r\n              startTime = this.timeToDateFormat(treat.start_time);\r\n              endTime = treat.end_time;\r\n              apptid = null;\r\n            } else {\r\n              startTime = this.timeToDateFormat(treat.start_time);\r\n              endTime = treat.end_time;\r\n              apptid = treat.appt_id;\r\n            }\r\n            selectedList.push({\r\n              start_time: startTime,\r\n              end_time: endTime,\r\n              emp_no: treat.emp_id,\r\n              appt_id: apptid,\r\n              Item_Codeid: treat.item_id,\r\n              Item_CodeName: treat.item_name,\r\n              add_duration: treat.add_duration,\r\n              requesttherapist: treat.requesttherapist,\r\n              recur_days: treat.recur_days,\r\n              recur_qty: treat.recur_qty,\r\n              item_text: treat.item_name,\r\n              checktype: treat.checktype,\r\n              treat_parentcode: treat.treat_parentcode,\r\n            });\r\n            this.setState({\r\n              selectedList,\r\n            });\r\n          }\r\n          this.props.updateForm(\"treatmentList\", selectedList);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  handleItemSettings = () => {\r\n    let { settingData } = this.state;\r\n    this.props.getCommonApi(`userlist/`).then(key => {\r\n      let { status, data } = key;\r\n      console.log(key, \"settingsData appointmentCreate\");\r\n      if (status === 200) {\r\n        settingData = data;\r\n        this.setState({ settingData });\r\n      }\r\n    });\r\n  };\r\n  componentWillMount() {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  }\r\n\r\n  getStaffAvailability = () => {\r\n    this.props\r\n      .getCommonApi(\r\n        `staffsavailable/?Appt_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}`\r\n      )\r\n      .then(key => {\r\n        let { status, data } = key;\r\n        if (status === 200) {\r\n          // for (let value of data) {\r\n          //     staffList.push({ value: value.id, label: value.emp_name })\r\n          // }\r\n          this.setState({ list: data });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleSearch = event => {\r\n    event.persist();\r\n    console.log(event.target.value, event.target, event, \"dfhdfjghkjfghj\");\r\n    let { treatmentField } = this.state;\r\n    treatmentField[\"treatment\"] = event.target.value;\r\n    this.setState({ search: event.target.value, treatmentField });\r\n    if (!this.debouncedFn) {\r\n      this.debouncedFn = _.debounce(() => {\r\n        let searchString = event.target.value;\r\n        let data = { search: searchString };\r\n        // this.queryHandler(data)\r\n        this.search(data);\r\n      }, 500);\r\n    }\r\n    this.debouncedFn();\r\n  };\r\n\r\n  search = data => {\r\n    let { page = 1, limit = 10, search = \"\" } = data;\r\n    let { selectTreatmentId } = this.state;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"treatmentList treatment_parentcode\");\r\n        if (res.status === 200) {\r\n          this.setState({\r\n            treatmentList: res.data.dataList,\r\n            meta: res.data.meta.pagination,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handlePagination = page => {\r\n    this.search(page);\r\n  };\r\n\r\n  handleChangeTreatment = async ({ target: { value, name } }) => {\r\n    let { treatmentField, search, selectTreatmentId } = this.state;\r\n    console.log(\"uihwkjrwkej\", name, value);\r\n    treatmentField[name] = value;\r\n    if (name === \"category\") {\r\n      selectTreatmentId = value;\r\n    } else if (name === \"treatment\") {\r\n      search = value;\r\n    }\r\n    await this.setState({\r\n      treatmentField,\r\n      selectTreatmentId,\r\n      search,\r\n    });\r\n\r\n    let page = 1,\r\n      limit = 10;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"stocklis\");\r\n        if (res.status === 200) {\r\n          this.setState({\r\n            treatmentList: res.data.dataList,\r\n            meta: res.data.meta.pagination,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleChange = async ({ target: { value, name } }, index) => {\r\n    let { selectedList, appointmentId, freeTextStockId } = this.state;\r\n\r\n    if (name === \"add_duration\") {\r\n      //if (appointmentId) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[index][\"start_time\"]),\r\n        value ? value : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[index][\"end_time\"] = this.addTimes(\r\n      //     selectedList[index][\"start_time\"],\r\n      //     value ? value : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[index][\"add_duration\"] = value;\r\n      if (selectedList.length - 1 > index) {\r\n        let endTime = \"\";\r\n        //if (appointmentId) {\r\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n        // } else {\r\n        //   endTime = selectedList[index][\"end_time\"];\r\n        // }\r\n        selectedList[index + 1][\"start_time\"] = endTime;\r\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n          selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n            selectedList[index][\"end_time\"],\r\n            selectedList[index + 1][\"add_duration\"]\r\n          );\r\n        }\r\n      }\r\n    } else if (name === \"Item_CodeName\") {\r\n      selectedList[index][\"Item_Codeid\"] = freeTextStockId;\r\n      selectedList[index][\"Item_CodeName\"] = value;\r\n      selectedList[index][\"item_text\"] = value;\r\n      selectedList[index][\"checktype\"] = \"freetext\";\r\n      selectedList[index][\"treat_parentcode\"] = null;\r\n    } else if (name === \"recur_days\" || name === \"recur_qty\") {\r\n      if (value <= 0 || value === \"\") {\r\n        selectedList[index][name] = null;\r\n      } else {\r\n        selectedList[index][name] = Number(value);\r\n      }\r\n    } else {\r\n      selectedList[index][name] = value;\r\n    }\r\n\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleMultiSelect = data => {\r\n    let { formFields } = this.state;\r\n    let list = [];\r\n    for (let key of data) {\r\n      list.push(key.value);\r\n    }\r\n    formFields[\"emp_no\"] = list;\r\n    this.setState({ formFields });\r\n    console.log(formFields, \"oyokkjk\");\r\n  };\r\n\r\n  // handleDatePick = async (name, value) => {\r\n  //   debugger;\r\n  //   let { formFields, selectedList } = this.state;\r\n  //   let time = this.getHoursFromDate(value);\r\n  //   formFields[\"start_time\"] = time;\r\n  //   selectedList[0][\"start_time\"] = time ? time : formFields[\"start_time\"];\r\n  //   if (time) {\r\n  //     formFields[\"end_time\"] = this.addTimes(\r\n  //       formFields[\"start_time\"],\r\n  //       formFields[\"add_duration\"]\r\n  //     );\r\n  //     selectedList[0][\"end_time\"] = this.addTimes(\r\n  //       selectedList[0][\"start_time\"],\r\n  //       formFields[\"add_duration\"]\r\n  //     );\r\n  //   }\r\n  //   await this.setState({\r\n  //     formFields,\r\n  //     selectedList,\r\n  //   });\r\n  //   await this.props.updateForm(\"treatmentList\", selectedList);\r\n  // };\r\n\r\n  handleDatePick = async ({ target: { value, name } }, index) => {\r\n    let { selectedList, appointmentId } = this.state;\r\n    let time = this.getHoursFromDate(value);\r\n    let duration = \"\";\r\n    if (selectedList[index][\"add_duration\"] !== \"\") {\r\n      duration = selectedList[index][\"add_duration\"];\r\n    } else {\r\n      duration = \"00:00\";\r\n    }\r\n    selectedList[index][\"start_time\"] = value\r\n      ? value\r\n      : this.timeToDateFormat(selectedList[index][\"start_time\"]);\r\n    if (time) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(time, duration);\r\n    }\r\n    if (selectedList.length - 1 > index) {\r\n      let endTime = \"\";\r\n      if (appointmentId) {\r\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n      } else {\r\n        endTime = selectedList[index][\"end_time\"];\r\n      }\r\n      selectedList[index + 1][\"start_time\"] = endTime;\r\n      if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n        selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n          selectedList[index][\"end_time\"],\r\n          selectedList[index + 1][\"add_duration\"]\r\n        );\r\n      }\r\n    }\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  getHoursFromDate = date => {\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let hours = hour > 9 ? hour : \"0\" + hour;\r\n    let minutes = minute > 9 ? minute : \"0\" + minute;\r\n    return hours + \":\" + minutes;\r\n  };\r\n\r\n  stafflistvalidation = appointmentTreatmentList => {\r\n    if (appointmentTreatmentList.length > 0) {\r\n      for (let item of appointmentTreatmentList) {\r\n        if (!item.emp_no || item.emp_no === \"\" || item.emp_no === null) {\r\n          Toast({ type: \"error\", message: \"Please select Staff\" });\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  handleUpdate = () => {\r\n    let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n    let { appointmentId, InitAppointmentStatus, dragusername, dragpassword } =\r\n      this.state;\r\n    let finalTreatment = [];\r\n    for (let TreatmentList of appointmentTreatmentList) {\r\n      finalTreatment.push({\r\n        appt_id: TreatmentList.appt_id,\r\n        start_time: this.getHoursFromDate(TreatmentList.start_time),\r\n        end_time: TreatmentList.end_time,\r\n        add_duration: TreatmentList.add_duration,\r\n        item_id: TreatmentList.Item_Codeid,\r\n        item_text: TreatmentList.item_text,\r\n        emp_id: TreatmentList.emp_no,\r\n        requesttherapist: TreatmentList.requesttherapist,\r\n        recur_qty: Number(\"\"),\r\n        recur_days: \"\",\r\n        checktype: TreatmentList.checktype,\r\n        treat_parentcode: TreatmentList.treat_parentcode,\r\n      });\r\n    }\r\n    console.log(finalTreatment, \"filteredupdateFunctionAppointmentData\");\r\n    let orig_remark = \"\";\r\n    let AppStatus = \"\";\r\n    if (appointmentCustomerDetail.remark_setting) {\r\n      orig_remark = null;\r\n    } else {\r\n      orig_remark = appointmentCustomerDetail.new_remark;\r\n    }\r\n    // if (\r\n    //   String(InitAppointmentStatus).toUpperCase() === \"ARRIVED\" &&\r\n    //   String(appointmentCustomerDetail.bookingStatus).toUpperCase() ===\r\n    //     \"ARRIVED\"\r\n    // ) {\r\n    //   AppStatus = null;\r\n    // } else {\r\n    //   AppStatus = appointmentCustomerDetail.bookingStatus;\r\n    // }\r\n    AppStatus = appointmentCustomerDetail.bookingStatus;\r\n    if (\r\n      appointmentCustomerDetail.customerName &&\r\n      appointmentCustomerDetail.bookingStatus\r\n    ) {\r\n      if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n        try {\r\n          let data = {\r\n            appointment: {\r\n              appt_date: dateFormat(\r\n                new Date(appointmentCustomerDetail.appointmentDate),\r\n                \"yyyy-mm-dd\"\r\n              ),\r\n              appt_status: AppStatus,\r\n              channel_id: Number(appointmentCustomerDetail.Appt_typeid),\r\n              ori_remark: orig_remark,\r\n              edit_remark: appointmentCustomerDetail.edit_remark,\r\n              source_id: Number(appointmentCustomerDetail.Source_Codeid),\r\n              Room_Codeid: Number(appointmentCustomerDetail.Room_Codeid),\r\n              sec_status: appointmentCustomerDetail.sec_status,\r\n              remark_setting: appointmentCustomerDetail.remark_setting,\r\n              cart_create: appointmentCustomerDetail.cart_create,\r\n              username: dragusername,\r\n              password: dragpassword,\r\n            },\r\n            treatment: finalTreatment,\r\n          };\r\n          let formFields = { custId: 0, custName: \"\", cust_refer: \"\" };\r\n          formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n          formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n          formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\r\n          this.props.updateForm(\"basicApptDetail\", formFields);\r\n          this.props\r\n            .commonPatchApi(`appointmentedit/${appointmentId}/`, data)\r\n            .then(async res => {\r\n              console.log(res, \"cart check while update booking\");\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n\r\n                if (appointmentCustomerDetail.cart_create) {\r\n                  history.push(\"/admin/cart\");\r\n                }\r\n              } else if (res.status === 201) {\r\n                // let formFields = { custId: 0, custName: \"\", cust_refer: \"\" };\r\n                // formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n                // formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n                // formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\r\n                // await this.props.updateForm(\"basicApptDetail\", formFields);\r\n                this.props\r\n                  .getCommonApi(\r\n                    `itemcart/Check/?cart_date=${dateFormat(\r\n                      new Date(),\r\n                      \"yyyy-mm-dd\"\r\n                    )}&cust_noid=${appointmentCustomerDetail.customerName}`\r\n                  )\r\n                  .then(res => {\r\n                    history.push(\"/admin/cart\");\r\n                  });\r\n              }\r\n            });\r\n        } catch (e) {\r\n          console.log(\"updateappointmentcatch\", e);\r\n        }\r\n      }\r\n    } else {\r\n      this.showErrorMessage();\r\n    }\r\n  };\r\n\r\n  // handleUpdate = () => {\r\n  //   let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n  //   let { appointmentId, selectedRec_days, selectedRec_qty } = this.state;\r\n  //   let orig_remark = \"\";\r\n  //   if (appointmentCustomerDetail.remark_setting) {\r\n  //     orig_remark = null;\r\n  //   } else {\r\n  //     orig_remark = appointmentCustomerDetail.new_remark;\r\n  //   }\r\n  //   if (\r\n  //     appointmentCustomerDetail.customerName &&\r\n  //     appointmentCustomerDetail.bookingStatus\r\n  //   ) {\r\n  //     if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n  //       let data = {\r\n  //         appt_date: dateFormat(\r\n  //           new Date(appointmentCustomerDetail.appointmentDate),\r\n  //           \"yyyy-mm-dd\"\r\n  //         ),\r\n  //         Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n  //         appt_status: appointmentCustomerDetail.bookingStatus,\r\n  //         sec_status: appointmentCustomerDetail.sec_status,\r\n  //         ori_remark: orig_remark,\r\n  //         edit_remark: appointmentCustomerDetail.edit_remark,\r\n  //         start_time: this.getHoursFromDate(\r\n  //           appointmentTreatmentList[0].start_time\r\n  //         ),\r\n  //         end_time: appointmentTreatmentList[0].end_time,\r\n  //         item_id: appointmentTreatmentList[0].Item_Codeid,\r\n  //         add_duration: appointmentTreatmentList[0].add_duration,\r\n  //         emp_id: appointmentTreatmentList[0].emp_no,\r\n  //         requesttherapist: appointmentTreatmentList[0].requesttherapist,\r\n  //         item_text: appointmentTreatmentList[0].item_text,\r\n  //         recur_days:\r\n  //           selectedRec_days === appointmentTreatmentList[0].recur_days ||\r\n  //           appointmentTreatmentList[0].recur_days === \"\" ||\r\n  //           appointmentTreatmentList[0].recur_days <= 0\r\n  //             ? null\r\n  //             : appointmentTreatmentList[0].recur_days,\r\n  //         recur_qty:\r\n  //           Number(selectedRec_qty) ===\r\n  //             Number(appointmentTreatmentList[0].recur_qty) ||\r\n  //           Number(appointmentTreatmentList[0].recur_qty) === \"\" ||\r\n  //           Number(appointmentTreatmentList[0].recur_qty) <= 0\r\n  //             ? null\r\n  //             : Number(appointmentTreatmentList[0].recur_qty),\r\n  //         checktype: appointmentTreatmentList[0].checktype,\r\n  //         treat_parentcode: appointmentTreatmentList[0].treat_parentcode,\r\n  //         remark_setting: appointmentCustomerDetail.remark_setting,\r\n  //       };\r\n  //       console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\r\n\r\n  //       this.props\r\n  //         .commonPatchApi(`appointmentresources/${appointmentId}/`, data)\r\n  //         .then(async res => {\r\n  //           console.log(res, \"cart check while update booking\");\r\n  //           if (res.status === 200) {\r\n  //             this.handleCloseDialog();\r\n  //             this.handleSaveorUpdate();\r\n  //           } else if (res.status === 201) {\r\n  //             // this.handleCloseDialog();\r\n  //             // this.handleSaveorUpdate();\r\n  //             let formFields = { custId: 0, custName: \"\" };\r\n  //             formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n  //             formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n\r\n  //             await this.props.updateForm(\"basicApptDetail\", formFields);\r\n  //             this.props\r\n  //               .getCommonApi(\r\n  //                 `itemcart/Check/?cart_date=${dateFormat(\r\n  //                   new Date(),\r\n  //                   \"yyyy-mm-dd\"\r\n  //                 )}&cust_noid=${appointmentCustomerDetail.customerName}`\r\n  //               )\r\n  //               .then(res => {\r\n  //                 history.push(\"/admin/cart\");\r\n  //               });\r\n  //           }\r\n  //         });\r\n  //     }\r\n  //   } else {\r\n  //     this.showErrorMessage();\r\n  //   }\r\n  // };\r\n  handleRecurringUpdate = () => {\r\n    let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n    let {\r\n      appointmentId,\r\n      selectedRec_days,\r\n      selectedRec_qty,\r\n      recurringList,\r\n      recurringSelectAll,\r\n    } = this.state;\r\n    let finalRecurring = [];\r\n    for (var recurringItem of recurringList) {\r\n      if (recurringItem.selected) {\r\n        let value = recurringItem.id;\r\n        finalRecurring.push(value);\r\n      }\r\n    }\r\n    console.log(finalRecurring, \"finalrecurringList\");\r\n    if (\r\n      appointmentCustomerDetail.customerName &&\r\n      appointmentCustomerDetail.bookingStatus\r\n    ) {\r\n      if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n        let data = {\r\n          appt_date: dateFormat(\r\n            new Date(appointmentCustomerDetail.appointmentDate),\r\n            \"yyyy-mm-dd\"\r\n          ),\r\n          Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n          appt_status: appointmentCustomerDetail.bookingStatus,\r\n          sec_status: appointmentCustomerDetail.sec_status,\r\n          edit_remark: appointmentCustomerDetail.edit_remark,\r\n          start_time: this.getHoursFromDate(\r\n            appointmentTreatmentList[0].start_time\r\n          ),\r\n          end_time: appointmentTreatmentList[0].end_time,\r\n          item_id: appointmentTreatmentList[0].Item_Codeid,\r\n          add_duration: appointmentTreatmentList[0].add_duration,\r\n          emp_id: appointmentTreatmentList[0].emp_no,\r\n          requesttherapist: appointmentTreatmentList[0].requesttherapist,\r\n          item_text: appointmentTreatmentList[0].item_text,\r\n          recur_days:\r\n            selectedRec_days === appointmentTreatmentList[0].recur_days ||\r\n            appointmentTreatmentList[0].recur_days === \"\" ||\r\n            appointmentTreatmentList[0].recur_days <= 0\r\n              ? null\r\n              : appointmentTreatmentList[0].recur_days,\r\n          recur_qty:\r\n            Number(selectedRec_qty) ===\r\n              Number(appointmentTreatmentList[0].recur_qty) ||\r\n            Number(appointmentTreatmentList[0].recur_qty) === \"\" ||\r\n            Number(appointmentTreatmentList[0].recur_qty) <= 0\r\n              ? null\r\n              : Number(appointmentTreatmentList[0].recur_qty),\r\n          recur_ids: finalRecurring,\r\n        };\r\n        console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\r\n        if (recurringSelectAll) {\r\n          this.props\r\n            .commonPatchApi(\r\n              `appointmentrecur/${appointmentId}/?type=${`all`} `,\r\n              data\r\n            )\r\n            .then(async res => {\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n              }\r\n            });\r\n        } else {\r\n          this.props\r\n            .commonPatchApi(`appointmentrecur/${appointmentId}/`, data)\r\n            .then(async res => {\r\n              console.log(res, \"type all clicked result\");\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n              }\r\n            });\r\n        }\r\n      }\r\n    } else {\r\n      this.showErrorMessage();\r\n    }\r\n  };\r\n  handleSubmit = () => {\r\n    try {\r\n      // this.props.handleConfirmBooking()\r\n      let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n      let { dragpassword, dragusername } = this.state;\r\n      console.log(\r\n        appointmentCustomerDetail,\r\n        \"appointmentcustomerdetailwhenSave\"\r\n      );\r\n      console.log(\r\n        appointmentTreatmentList,\r\n        \"savedappointmentTreatmentListWhenSave\"\r\n      );\r\n\r\n      let finalTreatment = [];\r\n      for (let TreatmentList of appointmentTreatmentList) {\r\n        finalTreatment.push({\r\n          appt_id: TreatmentList.appt_id,\r\n          start_time: this.getHoursFromDate(TreatmentList.start_time),\r\n          end_time: TreatmentList.end_time,\r\n          add_duration: TreatmentList.add_duration,\r\n          Item_Codeid: TreatmentList.Item_Codeid,\r\n          item_text: TreatmentList.item_text,\r\n          emp_no: TreatmentList.emp_no,\r\n          requesttherapist: TreatmentList.requesttherapist,\r\n          recur_qty: TreatmentList.recur_qty,\r\n          recur_days: TreatmentList.recur_days,\r\n          checktype: TreatmentList.checktype,\r\n          treat_parentcode: TreatmentList.treat_parentcode,\r\n        });\r\n      }\r\n      if (\r\n        appointmentCustomerDetail.customerName &&\r\n        appointmentCustomerDetail.bookingStatus\r\n      ) {\r\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n          let data = {\r\n            Appointment: {\r\n              appt_date: dateFormat(\r\n                new Date(appointmentCustomerDetail.appointmentDate),\r\n                \"yyyy-mm-dd\"\r\n              ),\r\n              Appt_typeid: appointmentCustomerDetail.Appt_typeid,\r\n              cust_noid: appointmentCustomerDetail.customerName,\r\n              new_remark: appointmentCustomerDetail.new_remark,\r\n              // emp_noid: appointmentCustomerDetail.emp_id,\r\n              Source_Codeid: appointmentCustomerDetail.Source_Codeid,\r\n              Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n              appt_status: appointmentCustomerDetail.bookingStatus,\r\n              sec_status: appointmentCustomerDetail.sec_status,\r\n              ItemSite_Codeid: appointmentCustomerDetail.ItemSite_Codeid,\r\n              walkin: appointmentCustomerDetail.walkin,\r\n              username: dragusername,\r\n              password: dragpassword,\r\n            },\r\n            Treatment: finalTreatment,\r\n          };\r\n\r\n          this.props.commonCreateApi(`appointment/`, data).then(async res => {\r\n            if (res.status === 201) {\r\n              this.handleCloseDialog();\r\n              this.handleSaveorUpdate();\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        this.showErrorMessage();\r\n      }\r\n    } catch (e) {\r\n      console.log(\"appointment catch log\", e);\r\n    }\r\n  };\r\n\r\n  getDateTime = data => {\r\n    let date = new Date(data);\r\n    date = String(date).split(\" \");\r\n    let date1 = date[2] + \"th \" + date[1] + \", \" + date[3];\r\n    let time = date[4].split(\":\");\r\n    let time1 =\r\n      String(Number(time[0]) > 12 ? Number(time[0]) - 12 : time[0]) +\r\n      \":\" +\r\n      time[1] +\r\n      (Number(time[0]) > 12 ? \"PM\" : \"AM\");\r\n    return time1 + \", \" + date1;\r\n  };\r\n\r\n  handleDialog = () => {\r\n    this.setState({ isOpenModal: false, index: null });\r\n  };\r\n\r\n  handleMultipleCustomer = () => {\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  handleSelectPackage = async data => {\r\n    let { selectedList, PackageIndex, appointmentId } = this.state;\r\n\r\n    if (PackageIndex === 0 && selectedList[0][\"Item_CodeName\"] === \"\") {\r\n      selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[0][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[0][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[0][\"end_time\"] = this.addTimes(\r\n      //     selectedList[0][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[0][\"Item_Codeid\"] = data.id;\r\n      selectedList[0][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[0][\"item_text\"] = null;\r\n      selectedList[0][\"add_duration\"] = data.add_duration;\r\n      selectedList[0][\"checktype\"] = \"package\";\r\n      selectedList[0][\"treat_parentcode\"] = data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] === \"\") {\r\n      selectedList[selectedList.length - 1][\"start_time\"] =\r\n        selectedList[selectedList.length - 1][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(\r\n          selectedList[selectedList.length - 1][\"start_time\"]\r\n        ),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n      //     selectedList[selectedList.length - 1][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n\r\n      selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[selectedList.length - 1][\"item_text\"] = null;\r\n      selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\r\n      selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\r\n      selectedList[selectedList.length - 1][\"treat_parentcode\"] =\r\n        data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else if (\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] !== \"\" &&\r\n      appointmentId\r\n    ) {\r\n      selectedList[selectedList.length - 1][\"start_time\"] =\r\n        selectedList[selectedList.length - 1][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(\r\n          selectedList[selectedList.length - 1][\"start_time\"]\r\n        ),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n      //     selectedList[selectedList.length - 1][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n\r\n      selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[selectedList.length - 1][\"item_text\"] = null;\r\n      selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\r\n      selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\r\n      selectedList[selectedList.length - 1][\"treat_parentcode\"] =\r\n        data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      var listCount = selectedList.length - 1;\r\n      let treatment = {};\r\n      // if (appointmentId) {\r\n      treatment[\"start_time\"] = this.timeToDateFormat(\r\n        selectedList[listCount][\"end_time\"]\r\n      );\r\n      // } else {\r\n      //   treatment[\"start_time\"] = selectedList[listCount][\"end_time\"];\r\n      // }\r\n      treatment[\"Item_Codeid\"] = data.id;\r\n      treatment[\"Item_CodeName\"] = data.item_desc;\r\n      treatment[\"item_text\"] = null;\r\n      treatment[\"add_duration\"] = data.add_duration;\r\n      treatment[\"checktype\"] = \"package\";\r\n      treatment[\"treat_parentcode\"] = data.treatment_parentcode;\r\n      selectedList.push(treatment);\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  handleSelectTreatment = async data => {\r\n    let { selectedList, index, appointmentId } = this.state;\r\n\r\n    if (index == 0 && selectedList.length == 1) {\r\n      selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[0][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[0][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[0][\"end_time\"] = this.addTimes(\r\n      //     selectedList[0][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[0][\"Item_Codeid\"] = data.id;\r\n      selectedList[0][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[0][\"add_duration\"] = data.add_duration;\r\n      selectedList[0][\"checktype\"] = \"service\";\r\n      selectedList[0][\"treat_parentcode\"] = null;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      selectedList[index][\"start_time\"] = selectedList[index][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[index][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[index][\"end_time\"] = this.addTimes(\r\n      //     selectedList[index][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[index][\"Item_Codeid\"] = data.id;\r\n      selectedList[index][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[index][\"add_duration\"] = data.add_duration;\r\n      selectedList[index][\"checktype\"] = \"service\";\r\n      selectedList[index][\"treat_parentcode\"] = null;\r\n\r\n      let endTime = \"\";\r\n      //if (appointmentId) {\r\n      endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n      // } else {\r\n      //   endTime = selectedList[index][\"end_time\"];\r\n      // }\r\n      if (selectedList.length - 1 > index) {\r\n        selectedList[index + 1][\"start_time\"] = endTime;\r\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n          selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n            selectedList[index][\"end_time\"],\r\n            selectedList[index + 1][\"add_duration\"]\r\n          );\r\n        }\r\n      }\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  timeToMins = time => {\r\n    var b = time.split(\":\");\r\n    return b[0] * 60 + +b[1];\r\n  };\r\n\r\n  // Convert minutes to a time in format hh:mm\r\n  // Returned value is in range 00  to 24 hrs\r\n  timeFromMins = mins => {\r\n    function z(n) {\r\n      return (n < 10 ? \"0\" : \"\") + n;\r\n    }\r\n    var h = ((mins / 60) | 0) % 24;\r\n    var m = mins % 60;\r\n    return z(h) + \":\" + z(m);\r\n  };\r\n\r\n  // Add two times in hh:mm format\r\n  addTimes = (t0, t1) => {\r\n    return this.timeFromMins(this.timeToMins(t0) + this.timeToMins(t1));\r\n  };\r\n\r\n  // handleNewTimeChange = selectedTime => {\r\n  //   let time = new Date(dateFormat(selectedTime));\r\n  //   let selectedTimeNew = time.getTime();\r\n  //   console.log(selectedTimeNew);\r\n  //   let { selectedList, formFields } = this.state;\r\n  //   formFields = {\r\n  //     start_time: selectedTimeNew,\r\n  //     end_time: \"\",\r\n  //     add_duration: \"\",\r\n  //   };\r\n  // };\r\n\r\n  handleAddtreatment = async index => {\r\n    let { selectedList, formFields, appointmentId } = this.state;\r\n\r\n    if (selectedList[index][\"end_time\"]) {\r\n      let start = \"\";\r\n      //if (appointmentId) {\r\n      start = this.timeToDateFormat(\r\n        selectedList[selectedList.length - 1].end_time\r\n      );\r\n      // } else {\r\n      //   start = selectedList[selectedList.length - 1].end_time;\r\n      // }\r\n      formFields = {\r\n        appt_id: null,\r\n        start_time: start,\r\n        end_time: \"\",\r\n        Item_Codeid: this.state.freeTextStockId,\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      };\r\n      selectedList.push({\r\n        appt_id: null,\r\n        start_time: start,\r\n        end_time: \"\",\r\n        Item_Codeid: this.state.freeTextStockId,\r\n        Item_CodeName: \"\",\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      });\r\n\r\n      await this.setState({ selectedList, formFields });\r\n\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      Toast({ type: \"error\", message: \"End time shouldn't be empty\" });\r\n    }\r\n  };\r\n\r\n  deleteTreatment = async index => {\r\n    let { selectedList } = this.state;\r\n    selectedList.splice(index, 1);\r\n    this.setState({ selectedList });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleTreatementmodal = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isTreatementModal: !prevState.isTreatementModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n  // handleChangeremark = async ({ target: { value, name } }) => {\r\n  //   let { formFields, selectedList } = this.state;\r\n  //   formFields[name] = value;\r\n  //   selectedList[0][name] = value;\r\n  //   await this.setState({\r\n  //     formFields,\r\n  //     selectedList,\r\n  //   });\r\n  //   await this.props.updateForm(\"treatmentList\", selectedList);\r\n  // };\r\n\r\n  handleCheckbox = async ({ target: { value, name } }, index) => {\r\n    let { treatmentList } = this.state;\r\n    let { selectedList } = this.state;\r\n    selectedList[index][\"requesttherapist\"] = value;\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleCloseDialog = async () => {\r\n    this.props.handleCloseDialog();\r\n  };\r\n  handleSaveorUpdate = async () => {\r\n    this.props.handleSaveorUpdate();\r\n  };\r\n  handleRecurringlistCheckbox = async ({ target: { value, name } }, item) => {\r\n    let { recurringList } = this.state;\r\n    let listCheckbox = recurringList.find(acc => acc.id === item.id);\r\n    if (listCheckbox) {\r\n      listCheckbox[\"selected\"] = value;\r\n      await this.setState({ ...this.state.recurringList, listCheckbox });\r\n    }\r\n    let Checkbox = recurringList.filter(acc => acc.selected === true).length;\r\n    if (Checkbox == this.state.recurringList.length) {\r\n      await this.setState({ recurringSelectAll: true });\r\n    } else {\r\n      await this.setState({ recurringSelectAll: false });\r\n    }\r\n  };\r\n\r\n  handleRecurringSelectAllCheckbox = async ({ target: { value, name } }) => {\r\n    let { recurringList } = this.state;\r\n    await this.setState({ recurringSelectAll: value });\r\n    for (let item of recurringList) {\r\n      item[\"selected\"] = value;\r\n      await this.setState({ ...this.state.recurringList, item });\r\n    }\r\n  };\r\n  handleCopyAppointment = async () => {\r\n    let { appointmentId } = this.state;\r\n    let formFields = {};\r\n    formFields[\"appointmentId\"] = appointmentId;\r\n    await this.props.updateForm(\"AppointmentCopy\", formFields);\r\n    console.log(\r\n      this.props.AppointmentCopy,\r\n      \"after copy click appointment copy id\"\r\n    );\r\n    Toast({ type: \"success\", message: \"Appointment copied\" });\r\n  };\r\n  handlePasteAppointment = async () => {\r\n    let { AppointmentCopy } = this.props;\r\n    if (AppointmentCopy) {\r\n      this.setState({\r\n        PasteAppointmentId: AppointmentCopy.appointmentId,\r\n        selectedList: [],\r\n      });\r\n      this.handleRenderApptDetail(AppointmentCopy.appointmentId, true);\r\n    }\r\n  };\r\n\r\n  handleGotoCart = async () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let formFields = { custId: 0, custName: \"\" };\r\n    formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n    formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n    formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\r\n    await this.props.updateForm(\"basicApptDetail\", formFields);\r\n\r\n    history.push(\"/admin/cart\");\r\n  };\r\n  handleUpcomingAppointment = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isUpcomingAppointmentModal: !prevState.isUpcomingAppointmentModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n  handleTreatmentHistory = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isTreatmentHistoryModal: !prevState.isTreatmentHistoryModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n  handleLoginPopupCheck = async () => {\r\n    let { settingData } = this.state;\r\n    if (settingData.appt_pw) {\r\n      let { isLoginConfirmation } = this.state;\r\n      isLoginConfirmation = true;\r\n      await this.setState({\r\n        isLoginConfirmation,\r\n      });\r\n    } else {\r\n      this.handleLoginSubmit();\r\n    }\r\n  };\r\n\r\n  handleLoginConfirmationDialog = async () => {\r\n    let { isLoginConfirmation } = this.state;\r\n    isLoginConfirmation = false;\r\n    await this.setState({\r\n      isLoginConfirmation,\r\n      dragusername: \"\",\r\n      dragpassword: \"\",\r\n    });\r\n  };\r\n  handleInputChange = async event => {\r\n    await this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  handleLoginSubmit = () => {\r\n    let { appointmentId } = this.state;\r\n    if (appointmentId) {\r\n      this.handleUpdate();\r\n    } else {\r\n      this.handleSubmit();\r\n    }\r\n  };\r\n  toggle = key => {\r\n    this.setState(prevState => ({\r\n      [key]: !prevState[key],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      outletOption,\r\n      staffOption,\r\n      roomOption,\r\n      selectedList,\r\n      siteList,\r\n      list,\r\n      formFields,\r\n      timeDropdown,\r\n      duration,\r\n      isOpenModal,\r\n      treatmentField,\r\n      treatmentList = [],\r\n      categoryList,\r\n      treatmentListHeader,\r\n      meta,\r\n      isTreatementModal,\r\n      appointmentId,\r\n      selectedRec_days,\r\n      selectedRec_qty,\r\n      recurringList,\r\n      recurringSelectAll,\r\n      settingData,\r\n      PasteAppointmentId,\r\n      isTreatmentHistoryModal,\r\n      isUpcomingAppointmentModal,\r\n      AppointmentListHeader,\r\n      isLoginConfirmation,\r\n      passwordVisible,\r\n      dragusername,\r\n      dragpassword,\r\n    } = this.state;\r\n    let { customerDetail, selectedTreatmentList, customerId, t, tokenDetail } =\r\n      this.props;\r\n    let { outlet, staff, rooms } = customerDetail;\r\n    return (\r\n      <React.Fragment>\r\n        {PasteAppointmentId <= 0 ? (\r\n          <AppointmentForm\r\n            onRef={ref => (this.child = ref)}\r\n            selectedCustomer={this.props.selectedCustomer}\r\n            PasteAppointmentId={PasteAppointmentId}\r\n          ></AppointmentForm>\r\n        ) : null}\r\n        {PasteAppointmentId > 0 ? (\r\n          <AppointmentForm\r\n            onRef={ref => (this.child = ref)}\r\n            selectedCustomer={this.props.selectedCustomer}\r\n            PasteAppointmentId={PasteAppointmentId}\r\n          ></AppointmentForm>\r\n        ) : null}\r\n        <div className=\"create-appointment select-treatment-appointment\">\r\n          <div className=\"row\">\r\n            <div className=\"appointment\">\r\n              <div className=\"appointment-holder\">\r\n                <div className=\"treatment-section p-0\">\r\n                  <div className=\"select-treatment select-list w-100\">\r\n                    <div className=\"table-container mt-3\">\r\n                      <div className=\"d-flex selected selected-header mb-4 w-100 overflow-auto\">\r\n                        <div className=\"col-1 p-0\">{t(\"Start\")}</div>\r\n                        <div className=\"col-1 p-0\">{t(\"End\")}</div>\r\n                        <div className=\"col-3 p-0 header-detail\">\r\n                          {t(\"Service\")}\r\n                        </div>\r\n\r\n                        <div className=\"col-1 p-0 header-detail\">\r\n                          {t(\"Duration\")}\r\n                        </div>\r\n                        <div className=\"col-2 p-0\">{t(\"Treatment Staff\")}</div>\r\n                        <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                          <img\r\n                            src={req_therapist}\r\n                            alt=\"\"\r\n                            height=\"25\"\r\n                            width=\"25\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-1 p-0 header-detail d-flex justify-content-start\">\r\n                          {t(\"Recur Days\")}\r\n                        </div>\r\n                        <div className=\"col-1 p-0 header-detail d-flex justify-content-center\">\r\n                          {t(\"Recur Qty\")}\r\n                        </div>\r\n                      </div>\r\n                      {selectedList.length > 0 ? (\r\n                        selectedList.map((item, index) => {\r\n                          return (\r\n                            <div className=\"d-flex selected  mb-4\" key={index}>\r\n                              <div className=\"col-1 mr-1 p-0\">\r\n                                <NormalTimePicker\r\n                                  className={`cursor-pointer`}\r\n                                  onChange={e => this.handleDatePick(e, index)}\r\n                                  label=\"start_time\"\r\n                                  name=\"start_time\"\r\n                                  timeOnly={true}\r\n                                  dateFormat={`HH:mm`}\r\n                                  showTime={true}\r\n                                  selected={false}\r\n                                  placeholder=\"\"\r\n                                  timeIntervals={5}\r\n                                  value={item.start_time}\r\n                                  showIcon={false}\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-1 mr-1 p-0\">\r\n                                <NormalInput\r\n                                  placeholder=\"end\"\r\n                                  // options={timeDropdown}\r\n                                  value={item.end_time}\r\n                                  name=\"end_time\"\r\n                                  onChange={() => {}}\r\n                                  className=\"customer-name p-0\"\r\n                                  disabled={true}\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-3 mr-1 p-0\">\r\n                                <div className=\"header-detail\"></div>\r\n                                {settingData &&\r\n                                settingData.service_sel &&\r\n                                settingData.service_text ? (\r\n                                  <NormalInput\r\n                                    placeholder=\"service\"\r\n                                    // options={siteList}\r\n                                    value={item.Item_CodeName}\r\n                                    name=\"Item_CodeName\"\r\n                                    onDoubleClick={() =>\r\n                                      this.setState({\r\n                                        isOpenModal: true,\r\n                                        index: index,\r\n                                      })\r\n                                    }\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    className=\"customer-name p-0 px-2\"\r\n                                  />\r\n                                ) : null}\r\n                                {settingData &&\r\n                                settingData.service_sel &&\r\n                                !settingData.service_text ? (\r\n                                  <NormalInput\r\n                                    placeholder=\"service\"\r\n                                    // options={siteList}\r\n                                    value={item.Item_CodeName}\r\n                                    name=\"Item_CodeName\"\r\n                                    onDoubleClick={() =>\r\n                                      this.setState({\r\n                                        isOpenModal: true,\r\n                                        index: index,\r\n                                      })\r\n                                    }\r\n                                    onChange={() => {}}\r\n                                    className=\"customer-name p-0 px-2\"\r\n                                  />\r\n                                ) : null}\r\n                                {settingData &&\r\n                                !settingData.service_sel &&\r\n                                settingData.service_text ? (\r\n                                  <NormalInput\r\n                                    placeholder=\"service\"\r\n                                    // options={siteList}\r\n                                    value={item.Item_CodeName}\r\n                                    name=\"Item_CodeName\"\r\n                                    onClick={() => {}}\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    className=\"customer-name p-0 px-2\"\r\n                                  />\r\n                                ) : null}\r\n                                {settingData &&\r\n                                !settingData.service_sel &&\r\n                                !settingData.service_text ? (\r\n                                  <NormalInput\r\n                                    placeholder=\"service\"\r\n                                    // options={siteList}\r\n                                    value={item.Item_CodeName}\r\n                                    name=\"Item_CodeName\"\r\n                                    onClick={() => {}}\r\n                                    onChange={() => {}}\r\n                                    className=\"customer-name p-0 px-2\"\r\n                                  />\r\n                                ) : null}\r\n                              </div>\r\n                              <div className=\"col-1 mr-1 p-0 header-detail\">\r\n                                <NormalSelect\r\n                                  // placeholder=\"Enter here\"\r\n                                  options={duration}\r\n                                  value={item.add_duration}\r\n                                  name=\"add_duration\"\r\n                                  onChange={e => this.handleChange(e, index)}\r\n                                  className=\"customer-name p-0\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-2 p-0\">\r\n                                <NormalSelect\r\n                                  // placeholder=\"Enter here\"\r\n                                  options={staffOption}\r\n                                  value={item.emp_no}\r\n                                  name=\"emp_no\"\r\n                                  onChange={e => this.handleChange(e, index)}\r\n                                  className=\"customer-name p-0\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                                {item.requesttherapist ? (\r\n                                  <NormalCheckbox\r\n                                    onChange={e =>\r\n                                      this.handleCheckbox(e, index)\r\n                                    }\r\n                                    value={item.requesttherapist}\r\n                                    name=\"requesttherapist\"\r\n                                    checked={true}\r\n                                  />\r\n                                ) : (\r\n                                  <NormalCheckbox\r\n                                    onChange={e =>\r\n                                      this.handleCheckbox(e, index)\r\n                                    }\r\n                                    value={item.requesttherapist}\r\n                                    name=\"requesttherapist\"\r\n                                    checked={false}\r\n                                  />\r\n                                )}\r\n                              </div>\r\n                              <div className=\"col-1 p-0 d-flex justify-content-start\">\r\n                                <NormalInput\r\n                                  type=\"number\"\r\n                                  name=\"recur_days\"\r\n                                  value={item.recur_days ? item.recur_days : \"\"}\r\n                                  onChange={e => this.handleChange(e, index)}\r\n                                  disabled={appointmentId ? true : false}\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-1 p-0 d-flex justify-content-start\">\r\n                                <NormalInput\r\n                                  type=\"number\"\r\n                                  name=\"recur_qty\"\r\n                                  value={item.recur_qty ? item.recur_qty : \"\"}\r\n                                  onChange={e => this.handleChange(e, index)}\r\n                                  disabled={appointmentId ? true : false}\r\n                                />\r\n                              </div>\r\n                              {selectedList.length === index + 1 ? (\r\n                                <div\r\n                                  className=\"ml-3\"\r\n                                  onClick={() => this.handleAddtreatment(index)}\r\n                                >\r\n                                  <svg\r\n                                    width=\"31\"\r\n                                    height=\"30\"\r\n                                    viewBox=\"0 0 31 30\"\r\n                                    fill=\"none\"\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                  >\r\n                                    <rect\r\n                                      width=\"31\"\r\n                                      height=\"30\"\r\n                                      fill=\"#F9F9F9\"\r\n                                    />\r\n                                    <path\r\n                                      d=\"M15 8V22\"\r\n                                      stroke=\"#848484\"\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                    />\r\n                                    <path\r\n                                      d=\"M8 15H22\"\r\n                                      stroke=\"#848484\"\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                    />\r\n                                  </svg>\r\n                                </div>\r\n                              ) : (\r\n                                <>\r\n                                  {appointmentId && item.appt_id ? null : (\r\n                                    <img\r\n                                      width=\"25\"\r\n                                      height=\"25\"\r\n                                      onClick={() =>\r\n                                        this.deleteTreatment(index)\r\n                                      }\r\n                                      className=\"ml-3\"\r\n                                      src={closeIcon}\r\n                                      alt=\"\"\r\n                                    />\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          );\r\n                        })\r\n                      ) : (\r\n                        <div className=\"row selected text-center mb-4\">\r\n                          {t(\"No Data\")}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {recurringList && recurringList.length > 0 ? (\r\n                    <div className=\"mt-5 mb-3\">\r\n                      <div>\r\n                        <p>Recurring Related Appointments</p>\r\n                      </div>\r\n\r\n                      <div className=\"row selected selected-header mb-2\">\r\n                        <div className=\"col-1\">\r\n                          <NormalCheckbox\r\n                            label={`All`}\r\n                            onChange={e =>\r\n                              this.handleRecurringSelectAllCheckbox(e)\r\n                            }\r\n                            value={recurringSelectAll}\r\n                            name=\"recurringSelectAll\"\r\n                            checked={recurringSelectAll}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-2 p-0\">{t(\"Date\")}</div>\r\n                        <div className=\"col-1 p-0\">{t(\"Start\")}</div>\r\n                        <div className=\"col-1 p-0\">{t(\"End\")}</div>\r\n                        <div className=\"col-3 p-0 header-detail\">\r\n                          {t(\"Service\")}\r\n                        </div>\r\n\r\n                        <div className=\"col-1 p-0 header-detail\">\r\n                          {t(\"Duration\")}\r\n                        </div>\r\n                        <div className=\"col-2 p-0\">{t(\"Treatment staff\")}</div>\r\n                        <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                          <img\r\n                            src={req_therapist}\r\n                            alt=\"\"\r\n                            height=\"25\"\r\n                            width=\"25\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      {recurringList && recurringList.length > 0 ? (\r\n                        recurringList.map((item, index) => {\r\n                          return (\r\n                            <div className=\"row selected  mb-4\" key={index}>\r\n                              <div className=\"col-1 text-center\">\r\n                                <NormalCheckbox\r\n                                  onChange={e =>\r\n                                    this.handleRecurringlistCheckbox(e, item)\r\n                                  }\r\n                                  value={item.selected}\r\n                                  name=\"recurringItem\"\r\n                                  checked={item.selected}\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-2 p-0\">{item.date}</div>\r\n                              <div className=\"col-1 p-0\">{item.start_time}</div>\r\n                              <div className=\"col-1 p-0\">{item.end_time}</div>\r\n                              <div className=\"col-3 p-0 header-detail\">\r\n                                {item.item_name}\r\n                              </div>\r\n\r\n                              <div className=\"col-1 p-0 header-detail\">\r\n                                {item.add_duration}\r\n                              </div>\r\n                              <div className=\"col-2 p-0\">{item.emp_name}</div>\r\n                              <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                                <NormalCheckbox\r\n                                  onChange={e =>\r\n                                    this.handleRecurringlistCheckbox(e, item)\r\n                                  }\r\n                                  value={item.requesttherapist}\r\n                                  name=\"requesttherapist\"\r\n                                  checked={item.requesttherapist}\r\n                                  disabled\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })\r\n                      ) : (\r\n                        <div className=\"col-12 text-center w-100\">\r\n                          {t(\"No Data\")}\r\n                        </div>\r\n                      )}\r\n                      <div className=\"d-flex justify-content-end\">\r\n                        <div className=\"mt-5\">\r\n                          <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                              <NormalButton\r\n                                buttonClass={\"treatment\"}\r\n                                resetbg={true}\r\n                                className=\"col-12\"\r\n                                label=\"Cancel\"\r\n                                onClick={this.handleCloseDialog}\r\n                              />\r\n                            </div>\r\n                            <div>\r\n                              {appointmentId ? (\r\n                                <NormalButton\r\n                                  buttonClass={\"submit-btn\"}\r\n                                  resetbg={false}\r\n                                  className=\"col-12 submit-btn ml-4\"\r\n                                  label=\"Update Recurring\"\r\n                                  onClick={this.handleRecurringUpdate}\r\n                                />\r\n                              ) : null}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <NormalModal\r\n            className={\"multiple-appointment select-category\"}\r\n            style={{ minWidth: \"60%\" }}\r\n            modal={isOpenModal}\r\n            handleModal={this.handleDialog}\r\n          >\r\n            <img\r\n              onClick={this.handleDialog}\r\n              className=\"close\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"customer-list container\">\r\n              <div className=\"col-12 pl-0 mb-3 fw-500 py-2\">\r\n                <h5>{t(\"Select Treatment\")}</h5>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    {t(\"Category\")}\r\n                    <NormalSelect\r\n                      // placeholder=\"Enter here\"\r\n                      options={categoryList}\r\n                      value={treatmentField.category}\r\n                      name=\"category\"\r\n                      onChange={this.handleChangeTreatment}\r\n                      className=\"customer-name p-0\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    {t(\"Service\")}\r\n                    <input\r\n                      // placeholder=\"Enter here\"\r\n                      // options={siteList}\r\n                      value={treatmentField.treatment}\r\n                      name=\"treatment\"\r\n                      onChange={this.handleSearch}\r\n                      className=\"search px-3 p-0\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"table-container table-responsive mt-3\">\r\n                <TableWrapper\r\n                  headerDetails={treatmentListHeader}\r\n                  queryHandler={this.handlePagination}\r\n                  pageMeta={meta}\r\n                >\r\n                  {treatmentList.length > 0 ? (\r\n                    treatmentList.map((item, index) => {\r\n                      return (\r\n                        <tr\r\n                          className=\"w-100\"\r\n                          onClick={() => this.handleSelectTreatment(item)}\r\n                          key={index}\r\n                        >\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-left\">{item.Item_Class}</div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-left\">{item.item_desc}</div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-right\">\r\n                              {item.add_duration}\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-right\">{item.item_price}</div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <td colSpan=\"12\">\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        {t(\"No data Available\")}\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                </TableWrapper>\r\n              </div>\r\n\r\n              <div className=\"row text-center justify-center w-100\">\r\n                <NormalButton\r\n                  buttonClass={\"col-3\"}\r\n                  resetbg={true}\r\n                  className=\"col-12 ml-4\"\r\n                  label=\"Cancel\"\r\n                  onClick={this.handleDialog}\r\n                />\r\n              </div>\r\n            </div>\r\n          </NormalModal>\r\n          <NormalModal\r\n            className={\"d-flex justify-content-center\"}\r\n            style={{ minWidth: \"20%\" }}\r\n            modal={isLoginConfirmation}\r\n            handleModal={() => {}}\r\n          >\r\n            <img\r\n              onClick={this.handleLoginConfirmationDialog}\r\n              className=\"close cursor-pointer\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"row\">\r\n              <div className=\"d-flex flex-wrap\">\r\n                <div className=\"col-12 mb-4\">\r\n                  <p>{t(\"Please enter your login credential\")} </p>\r\n                </div>\r\n                <div className=\"col-12 form-group mb-3 pb-2\">\r\n                  <div className=\"input-group\">\r\n                    <NormalInput\r\n                      placeholder=\"Username\"\r\n                      value={dragusername}\r\n                      name=\"dragusername\"\r\n                      autocomplete=\"off\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12 form-group mb-3 pb-2\">\r\n                  <div className=\"input-group\">\r\n                    <NormalInput\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder=\"Password\"\r\n                      value={dragpassword}\r\n                      name=\"dragpassword\"\r\n                      autocomplete=\"off\"\r\n                      onChange={e => this.handleInputChange(e)}\r\n                    />\r\n                    <div className=\"input-group-addon right fs-14\">\r\n                      <span\r\n                        onClick={() => this.toggle(\"passwordVisible\")}\r\n                        className={`icon-${\r\n                          passwordVisible ? \"eye\" : \"eye-blocked\"\r\n                        } cursor-pointer fs-24`}\r\n                      ></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group mb-0 p-0 d-flex justify-content-center col-12\">\r\n                  <NormalButton\r\n                    onClick={this.handleLoginSubmit}\r\n                    label=\"PROCEED\"\r\n                    className=\"col-12 submit-btn\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </NormalModal>\r\n\r\n          <div className=\"col-12\">\r\n            {isTreatementModal ? (\r\n              <TreatmentPackage\r\n                isTreatementModal={isTreatementModal}\r\n                handleTreatementmodal={this.handleTreatementmodal}\r\n                handleSelectPackage={this.handleSelectPackage}\r\n                customerNumber={\r\n                  this.props.appointmentCustomerDetail.customerName\r\n                }\r\n                custName={this.props.appointmentCustomerDetail.custName}\r\n                custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n                cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n                CustomerRemark={\r\n                  this.props.appointmentCustomerDetail.cust_remark\r\n                }\r\n                CustomerRemarkFlag={false}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          {console.log(\r\n            this.props.appointmentCustomerDetail,\r\n            \"appointmentcustomerdetail\"\r\n          )}\r\n          {isTreatmentHistoryModal ? (\r\n            <TreatmentHistory\r\n              isTreatmentHistoryModal={isTreatmentHistoryModal}\r\n              handleTreatmentHistory={this.handleTreatmentHistory}\r\n              customerNumber={this.props.appointmentCustomerDetail.customerName}\r\n              custName={this.props.appointmentCustomerDetail.custName}\r\n              custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n              cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n              CustomerRemark={this.props.appointmentCustomerDetail.cust_remark}\r\n              CustomerRemarkFlag={true}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {isUpcomingAppointmentModal ? (\r\n            <UpcomingAppointment\r\n              isUpcomingAppointmentModal={isUpcomingAppointmentModal}\r\n              handleUpcomingAppointment={this.handleUpcomingAppointment}\r\n              customerNumber={this.props.appointmentCustomerDetail.customerName}\r\n              custName={this.props.appointmentCustomerDetail.custName}\r\n              custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n              cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n              CustomerRemark={this.props.appointmentCustomerDetail.cust_remark}\r\n              CustomerRemarkFlag={false}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"col-md-12 mt-5\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"d-flex flex-wrap justify-content-center\">\r\n                <NormalButton\r\n                  buttonClass={`p-2`}\r\n                  mainbg={true}\r\n                  className=\"col-12\"\r\n                  label=\"Package\"\r\n                  onClick={this.handleTreatementmodal}\r\n                />\r\n                <NormalButton\r\n                  buttonClass={`p-2`}\r\n                  mainbg={true}\r\n                  className=\"col-12\"\r\n                  label=\"Upcoming\"\r\n                  onClick={this.handleUpcomingAppointment}\r\n                />\r\n                <NormalButton\r\n                  buttonClass={`p-2`}\r\n                  mainbg={true}\r\n                  className=\"col-12\"\r\n                  label=\"History\"\r\n                  onClick={this.handleTreatmentHistory}\r\n                />\r\n                {String(tokenDetail.role_code).toUpperCase() !== \"4\" &&\r\n                appointmentId ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Profile\"\r\n                    onClick={() =>\r\n                      history.push(`/admin/customerplus/${customerId}/account`)\r\n                    }\r\n                  />\r\n                ) : null}\r\n                {String(tokenDetail.role_code).toUpperCase() !== \"4\" &&\r\n                appointmentId ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Cart\"\r\n                    onClick={this.handleGotoCart}\r\n                  />\r\n                ) : null}\r\n\r\n                {!appointmentId &&\r\n                this.props.AppointmentCopy &&\r\n                this.props.AppointmentCopy.appointmentId > 0 ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Paste Appt.\"\r\n                    onClick={this.handlePasteAppointment}\r\n                  />\r\n                ) : null}\r\n                {appointmentId ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Copy Appt.\"\r\n                    onClick={this.handleCopyAppointment}\r\n                  />\r\n                ) : null}\r\n                <NormalButton\r\n                  buttonClass={`p-2`}\r\n                  resetbg={true}\r\n                  className=\"col-12\"\r\n                  label=\"Cancel\"\r\n                  onClick={this.handleCloseDialog}\r\n                />\r\n\r\n                <NormalButton\r\n                  buttonClass={`p-2`}\r\n                  submitBtn={true}\r\n                  label={appointmentId ? \"Update\" : \"Confirm\"}\r\n                  // onClick={e => {\r\n                  //   e.target.setAttribute(\"disabled\", true);\r\n                  //   this.handleUpdate();\r\n                  // }}\r\n                  onClick={_.debounce(async () => {\r\n                    await this.handleLoginPopupCheck();\r\n                  }, 500)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  customerDetail: state.appointment.customerDetail,\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selectedTreatmentList: state.appointment.selectedTreatmentList,\r\n  basicApptDetail: state.appointment.basicApptDetail,\r\n  appointmentCustomerDetail: state.appointment.appointmentCustomerDetail,\r\n  appointmentTreatmentList: state.appointment.appointmentTreatmentList,\r\n  AppointmentCopy: state.appointment.AppointmentCopy,\r\n  tokenDetail: state.authStore.tokenDetails,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      updateForm,\r\n      getSelectedTreatmentList,\r\n      getCommonApi,\r\n      commonCreateApi,\r\n      commonPatchApi,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const NewSelectTreatment = withTranslation()(\r\n  connect(mapStateToProps, mapDispatchToProps)(NewSelectTreatmentClass)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}