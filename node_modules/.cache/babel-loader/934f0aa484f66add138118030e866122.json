{"ast":null,"code":"import { ServicesActionType } from \"redux/actions/actionType\";\nimport { services } from \"../../service/apiVariables\"; // create service action\n\nexport const createServices = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...services.addServices,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update service action\n\nexport const updateServices = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    services.updateServices.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...services.updateServices,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // delete service action\n\nexport const deleteServices = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    services.deleteServices.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...services.deleteServices,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n      console.log(\"sadfadfgadfgdf\", response);\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(error => {\n      console.log(\"sadfadfgadfgdf errorr\", error);\n      reject(error);\n      let {\n        message\n      } = error;\n      Toast({\n        type: \"error\",\n        message\n      });\n    });\n  });\n}; // get service action\n\nexport const getServices = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    services.getServices.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...services.getServices\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: ServicesActionType.getServicesDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get combo services action\n\nexport const getComboServices = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    services.getComboServices.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...services.getComboServices\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ServicesActionType.getServicesDetail, payload: data });\n        // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/services.js"],"names":["ServicesActionType","services","createServices","body","dispatch","getState","api","Toast","Promise","resolve","reject","addServices","then","response","message","status","type","catch","updateServices","id","addQuery","key","payload","deleteServices","console","log","error","getServices","data","getServicesDetail","getComboServices"],"mappings":"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","sourcesContent":["import { ServicesActionType } from \"redux/actions/actionType\";\r\nimport { services } from \"../../service/apiVariables\";\r\n\r\n// create service action\r\nexport const createServices =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...services.addServices, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// update service action\r\nexport const updateServices =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      services.updateServices.addQuery = { key: \"id\", payload: id };\r\n      api({ ...services.updateServices, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// delete service action\r\nexport const deleteServices =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      services.deleteServices.addQuery = { key: \"id\", payload: id };\r\n      api({ ...services.deleteServices, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          console.log(\"sadfadfgadfgdf\", response);\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(\"sadfadfgadfgdf errorr\", error);\r\n          reject(error);\r\n          let { message } = error;\r\n          Toast({ type: \"error\", message });\r\n        });\r\n    });\r\n  };\r\n\r\n// get service action\r\nexport const getServices =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      services.getServices.addQuery = { key: \"id\", payload: id };\r\n      api({ ...services.getServices })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: ServicesActionType.getServicesDetail,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get combo services action\r\nexport const getComboServices =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      services.getComboServices.addQuery = { key: \"id\", payload: id };\r\n      api({ ...services.getComboServices })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ServicesActionType.getServicesDetail, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}