{"ast":null,"code":"/**\r\n * DevExtreme (ui/map/provider.dynamic.bing.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _promise = _interopRequireDefault(require(\"../../core/polyfills/promise\"));\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _provider = _interopRequireDefault(require(\"./provider.dynamic\"));\n\nvar _color = _interopRequireDefault(require(\"../../color\"));\n\nvar _ajax = _interopRequireDefault(require(\"../../core/utils/ajax\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar window = (0, _window.getWindow)();\nvar BING_MAP_READY = \"_bingScriptReady\";\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\nvar INFOBOX_V_OFFSET_V8 = 13;\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\n\nvar msMapsLoaded = function () {\n  return window.Microsoft && window.Microsoft.Maps;\n};\n\nvar msMapsLoader;\n\nvar BingProvider = _provider.default.inherit({\n  _mapType: function (type) {\n    var mapTypes = {\n      roadmap: Microsoft.Maps.MapTypeId.road,\n      hybrid: Microsoft.Maps.MapTypeId.aerial,\n      satellite: Microsoft.Maps.MapTypeId.aerial\n    };\n    return mapTypes[type] || mapTypes.road;\n  },\n  _movementMode: function (type) {\n    var movementTypes = {\n      driving: Microsoft.Maps.Directions.RouteMode.driving,\n      walking: Microsoft.Maps.Directions.RouteMode.walking\n    };\n    return movementTypes[type] || movementTypes.driving;\n  },\n  _resolveLocation: function (location) {\n    return new _promise.default(function (resolve) {\n      var latLng = this._getLatLng(location);\n\n      if (latLng) {\n        resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng));\n      } else {\n        this._geocodeLocation(location).then(function (geocodedLocation) {\n          resolve(geocodedLocation);\n        });\n      }\n    }.bind(this));\n  },\n  _geocodedLocations: {},\n  _geocodeLocationImpl: function (location) {\n    return new _promise.default(function (resolve) {\n      if (!(0, _type.isDefined)(location)) {\n        resolve(new Microsoft.Maps.Location(0, 0));\n        return;\n      }\n\n      var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\n      var searchRequest = {\n        where: location,\n        count: 1,\n        callback: function (searchResponse) {\n          var result = searchResponse.results[0];\n\n          if (result) {\n            var boundsBox = searchResponse.results[0].location;\n            resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude));\n          } else {\n            resolve(new Microsoft.Maps.Location(0, 0));\n          }\n        }\n      };\n      searchManager.geocode(searchRequest);\n    }.bind(this));\n  },\n  _normalizeLocation: function (location) {\n    return {\n      lat: location.latitude,\n      lng: location.longitude\n    };\n  },\n  _normalizeLocationRect: function (locationRect) {\n    var northWest = this._normalizeLocation(locationRect.getNorthwest());\n\n    var southEast = this._normalizeLocation(locationRect.getSoutheast());\n\n    return {\n      northEast: {\n        lat: northWest.lat,\n        lng: southEast.lng\n      },\n      southWest: {\n        lat: southEast.lat,\n        lng: northWest.lng\n      }\n    };\n  },\n  _loadImpl: function () {\n    return new _promise.default(function (resolve) {\n      if (msMapsLoaded()) {\n        resolve();\n      } else {\n        if (!msMapsLoader) {\n          msMapsLoader = this._loadMapScript();\n        }\n\n        msMapsLoader.then(function () {\n          if (msMapsLoaded()) {\n            resolve();\n            return;\n          }\n\n          this._loadMapScript().then(resolve);\n        }.bind(this));\n      }\n    }.bind(this)).then(function () {\n      return _promise.default.all([new _promise.default(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\n          callback: resolve\n        });\n      }), new _promise.default(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\n          callback: resolve\n        });\n      })]);\n    });\n  },\n  _loadMapScript: function () {\n    return new _promise.default(function (resolve) {\n      window[BING_MAP_READY] = resolve;\n\n      _ajax.default.sendRequest({\n        url: BING_URL_V8,\n        dataType: \"script\"\n      });\n    }).then(function () {\n      try {\n        delete window[BING_MAP_READY];\n      } catch (e) {\n        window[BING_MAP_READY] = void 0;\n      }\n    });\n  },\n  _init: function () {\n    this._createMap();\n\n    return _promise.default.resolve();\n  },\n  _createMap: function () {\n    var controls = this._option(\"controls\");\n\n    this._map = new Microsoft.Maps.Map(this._$container[0], {\n      credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\n      zoom: this._option(\"zoom\"),\n      showDashboard: controls,\n      showMapTypeSelector: controls,\n      showScalebar: controls\n    });\n  },\n  _attachHandlers: function () {\n    this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\n    this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this));\n  },\n  _viewChangeHandler: function () {\n    var bounds = this._map.getBounds();\n\n    this._option(\"bounds\", this._normalizeLocationRect(bounds));\n\n    var center = this._map.getCenter();\n\n    this._option(\"center\", this._normalizeLocation(center));\n\n    if (!this._preventZoomChangeEvent) {\n      this._option(\"zoom\", this._map.getZoom());\n    }\n  },\n  _clickActionHandler: function (e) {\n    if (\"map\" === e.targetType) {\n      this._fireClickAction({\n        location: this._normalizeLocation(e.location)\n      });\n    }\n  },\n  updateDimensions: function () {\n    var $container = this._$container;\n\n    this._map.setOptions({\n      width: $container.width(),\n      height: $container.height()\n    });\n\n    return _promise.default.resolve();\n  },\n  updateMapType: function () {\n    var type = this._option(\"type\");\n\n    var labelOverlay = Microsoft.Maps.LabelOverlay;\n\n    this._map.setView({\n      animate: false,\n      mapTypeId: this._mapType(type),\n      labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\n    });\n\n    return _promise.default.resolve();\n  },\n  updateBounds: function () {\n    return _promise.default.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function (result) {\n      var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds\n      });\n    }.bind(this));\n  },\n  updateCenter: function () {\n    return this._resolveLocation(this._option(\"center\")).then(function (center) {\n      this._map.setView({\n        animate: false,\n        center: center\n      });\n    }.bind(this));\n  },\n  updateZoom: function () {\n    this._map.setView({\n      animate: false,\n      zoom: this._option(\"zoom\")\n    });\n\n    return _promise.default.resolve();\n  },\n  updateControls: function () {\n    this.clean();\n    return this.render.apply(this, arguments);\n  },\n  _renderMarker: function (options) {\n    return this._resolveLocation(options.location).then(function (location) {\n      var pushpinOptions = {\n        icon: options.iconSrc || this._option(\"markerIconSrc\")\n      };\n\n      if (options.html) {\n        (0, _extend.extend)(pushpinOptions, {\n          htmlContent: options.html,\n          width: null,\n          height: null\n        });\n        var htmlOffset = options.htmlOffset;\n\n        if (htmlOffset) {\n          pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top);\n        }\n      }\n\n      var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\n\n      this._map.entities.push(pushpin);\n\n      var infobox = this._renderTooltip(location, options.tooltip);\n\n      var handler;\n\n      if (options.onClick || options.tooltip) {\n        var markerClickAction = this._mapWidget._createAction(options.onClick || _common.noop);\n\n        var markerNormalizedLocation = this._normalizeLocation(location);\n\n        handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", function () {\n          markerClickAction({\n            location: markerNormalizedLocation\n          });\n\n          if (infobox) {\n            infobox.setOptions({\n              visible: true\n            });\n          }\n        });\n      }\n\n      return {\n        location: location,\n        marker: pushpin,\n        infobox: infobox,\n        handler: handler\n      };\n    }.bind(this));\n  },\n  _renderTooltip: function (location, options) {\n    if (!options) {\n      return;\n    }\n\n    options = this._parseTooltipOptions(options);\n    var infobox = new Microsoft.Maps.Infobox(location, {\n      description: options.text,\n      offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\n      visible: options.visible\n    });\n    infobox.setMap(this._map);\n    return infobox;\n  },\n  _destroyMarker: function (marker) {\n    this._map.entities.remove(marker.marker);\n\n    if (marker.infobox) {\n      marker.infobox.setMap(null);\n    }\n\n    if (marker.handler) {\n      Microsoft.Maps.Events.removeHandler(marker.handler);\n    }\n  },\n  _renderRoute: function (options) {\n    return _promise.default.all((0, _iterator.map)(options.locations, function (point) {\n      return this._resolveLocation(point);\n    }.bind(this))).then(function (locations) {\n      return new _promise.default(function (resolve) {\n        var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\n        var color = new _color.default(options.color || this._defaultRouteColor()).toHex();\n        var routeColor = new Microsoft.Maps.Color.fromHex(color);\n        routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\n        direction.setRenderOptions({\n          autoUpdateMapView: false,\n          displayRouteSelector: false,\n          waypointPushpinOptions: {\n            visible: false\n          },\n          drivingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          },\n          walkingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          }\n        });\n        direction.setRequestOptions({\n          routeMode: this._movementMode(options.mode),\n          routeDraggable: false\n        });\n        (0, _iterator.each)(locations, function (_, location) {\n          var waypoint = new Microsoft.Maps.Directions.Waypoint({\n            location: location\n          });\n          direction.addWaypoint(waypoint);\n        });\n        var directionHandlers = [];\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var routeSummary = args.routeSummary[0];\n          resolve({\n            instance: direction,\n            northEast: routeSummary.northEast,\n            southWest: routeSummary.southWest\n          });\n        }));\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\n\n          _ui.default.log(\"W1006\", status);\n\n          resolve({\n            instance: direction\n          });\n        }));\n        direction.calculateDirections();\n      }.bind(this));\n    }.bind(this));\n  },\n  _destroyRoute: function (routeObject) {\n    routeObject.instance.dispose();\n  },\n  _fitBounds: function () {\n    this._updateBounds();\n\n    if (this._bounds && this._option(\"autoAdjust\")) {\n      var zoomBeforeFitting = this._map.getZoom();\n\n      this._preventZoomChangeEvent = true;\n\n      var bounds = this._bounds.clone();\n\n      bounds.height = 1.1 * bounds.height;\n      bounds.width = 1.1 * bounds.width;\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds,\n        zoom: zoomBeforeFitting\n      });\n\n      var zoomAfterFitting = this._map.getZoom();\n\n      if (zoomBeforeFitting < zoomAfterFitting) {\n        this._map.setView({\n          animate: false,\n          zoom: zoomBeforeFitting\n        });\n      } else {\n        this._option(\"zoom\", zoomAfterFitting);\n      }\n\n      delete this._preventZoomChangeEvent;\n    }\n\n    return _promise.default.resolve();\n  },\n  _extendBounds: function (location) {\n    if (this._bounds) {\n      this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location);\n    } else {\n      this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH);\n    }\n  },\n  clean: function () {\n    if (this._map) {\n      Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\n      Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\n\n      this._clearMarkers();\n\n      this._clearRoutes();\n\n      this._map.dispose();\n    }\n\n    return _promise.default.resolve();\n  }\n});\n\nvar _default = BingProvider;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/map/provider.dynamic.bing.js"],"names":["exports","default","_common","require","_window","_promise","_interopRequireDefault","_extend","_ui","_iterator","_provider","_color","_ajax","_type","obj","__esModule","window","getWindow","BING_MAP_READY","BING_URL_V8","INFOBOX_V_OFFSET_V8","BING_CREDENTIALS","MIN_LOCATION_RECT_LENGTH","msMapsLoaded","Microsoft","Maps","msMapsLoader","BingProvider","inherit","_mapType","type","mapTypes","roadmap","MapTypeId","road","hybrid","aerial","satellite","_movementMode","movementTypes","driving","Directions","RouteMode","walking","_resolveLocation","location","resolve","latLng","_getLatLng","Location","lat","lng","_geocodeLocation","then","geocodedLocation","bind","_geocodedLocations","_geocodeLocationImpl","isDefined","searchManager","Search","SearchManager","_map","searchRequest","where","count","callback","searchResponse","result","results","boundsBox","latitude","longitude","geocode","_normalizeLocation","_normalizeLocationRect","locationRect","northWest","getNorthwest","southEast","getSoutheast","northEast","southWest","_loadImpl","_loadMapScript","all","loadModule","sendRequest","url","dataType","e","_init","_createMap","controls","_option","Map","_$container","credentials","_keyOption","zoom","showDashboard","showMapTypeSelector","showScalebar","_attachHandlers","_providerViewChangeHandler","Events","addHandler","_viewChangeHandler","_providerClickHandler","_clickActionHandler","bounds","getBounds","center","getCenter","_preventZoomChangeEvent","getZoom","targetType","_fireClickAction","updateDimensions","$container","setOptions","width","height","updateMapType","labelOverlay","LabelOverlay","setView","animate","mapTypeId","hidden","visible","updateBounds","LocationRect","fromLocations","updateCenter","updateZoom","updateControls","clean","render","apply","arguments","_renderMarker","options","pushpinOptions","icon","iconSrc","html","extend","htmlContent","htmlOffset","anchor","Point","left","top","pushpin","Pushpin","entities","push","infobox","_renderTooltip","tooltip","handler","onClick","markerClickAction","_mapWidget","_createAction","noop","markerNormalizedLocation","marker","_parseTooltipOptions","Infobox","description","text","offset","setMap","_destroyMarker","remove","removeHandler","_renderRoute","map","locations","point","direction","DirectionsManager","color","_defaultRouteColor","toHex","routeColor","Color","fromHex","a","opacity","_defaultRouteOpacity","setRenderOptions","autoUpdateMapView","displayRouteSelector","waypointPushpinOptions","drivingPolylineOptions","strokeColor","strokeThickness","weight","_defaultRouteWeight","walkingPolylineOptions","setRequestOptions","routeMode","mode","routeDraggable","each","_","waypoint","Waypoint","addWaypoint","directionHandlers","args","length","pop","routeSummary","instance","status","responseCode","message","log","calculateDirections","_destroyRoute","routeObject","dispose","_fitBounds","_updateBounds","_bounds","zoomBeforeFitting","clone","zoomAfterFitting","_extendBounds","_clearMarkers","_clearRoutes","_default","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGC,sBAAsB,CAACH,OAAO,CAAC,8BAAD,CAAR,CAArC;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIK,GAAG,GAAGF,sBAAsB,CAACH,OAAO,CAAC,qBAAD,CAAR,CAAhC;;AACA,IAAIM,SAAS,GAAGN,OAAO,CAAC,2BAAD,CAAvB;;AACA,IAAIO,SAAS,GAAGJ,sBAAsB,CAACH,OAAO,CAAC,oBAAD,CAAR,CAAtC;;AACA,IAAIQ,MAAM,GAAGL,sBAAsB,CAACH,OAAO,CAAC,aAAD,CAAR,CAAnC;;AACA,IAAIS,KAAK,GAAGN,sBAAsB,CAACH,OAAO,CAAC,uBAAD,CAAR,CAAlC;;AACA,IAAIU,KAAK,GAAGV,OAAO,CAAC,uBAAD,CAAnB;;AAEA,SAASG,sBAAT,CAAgCQ,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,MAAM,GAAG,CAAC,GAAGZ,OAAO,CAACa,SAAZ,GAAb;AACA,IAAIC,cAAc,GAAG,kBAArB;AACA,IAAIC,WAAW,GAAG,uDAAuDD,cAAzE;AACA,IAAIE,mBAAmB,GAAG,EAA1B;AACA,IAAIC,gBAAgB,GAAG,kEAAvB;AACA,IAAIC,wBAAwB,GAAG,KAA/B;;AACA,IAAIC,YAAY,GAAG,YAAW;AAC1B,SAAOP,MAAM,CAACQ,SAAP,IAAoBR,MAAM,CAACQ,SAAP,CAAiBC,IAA5C;AACH,CAFD;;AAGA,IAAIC,YAAJ;;AACA,IAAIC,YAAY,GAAGjB,SAAS,CAACT,OAAV,CAAkB2B,OAAlB,CAA0B;AACzCC,EAAAA,QAAQ,EAAE,UAASC,IAAT,EAAe;AACrB,QAAIC,QAAQ,GAAG;AACXC,MAAAA,OAAO,EAAER,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBC,IADvB;AAEXC,MAAAA,MAAM,EAAEX,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBG,MAFtB;AAGXC,MAAAA,SAAS,EAAEb,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBG;AAHzB,KAAf;AAKA,WAAOL,QAAQ,CAACD,IAAD,CAAR,IAAkBC,QAAQ,CAACG,IAAlC;AACH,GARwC;AASzCI,EAAAA,aAAa,EAAE,UAASR,IAAT,EAAe;AAC1B,QAAIS,aAAa,GAAG;AAChBC,MAAAA,OAAO,EAAEhB,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0BC,SAA1B,CAAoCF,OAD7B;AAEhBG,MAAAA,OAAO,EAAEnB,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0BC,SAA1B,CAAoCC;AAF7B,KAApB;AAIA,WAAOJ,aAAa,CAACT,IAAD,CAAb,IAAuBS,aAAa,CAACC,OAA5C;AACH,GAfwC;AAgBzCI,EAAAA,gBAAgB,EAAE,UAASC,QAAT,EAAmB;AACjC,WAAO,IAAIxC,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAC1C,UAAIC,MAAM,GAAG,KAAKC,UAAL,CAAgBH,QAAhB,CAAb;;AACA,UAAIE,MAAJ,EAAY;AACRD,QAAAA,OAAO,CAAC,IAAItB,SAAS,CAACC,IAAV,CAAewB,QAAnB,CAA4BF,MAAM,CAACG,GAAnC,EAAwCH,MAAM,CAACI,GAA/C,CAAD,CAAP;AACH,OAFD,MAEO;AACH,aAAKC,gBAAL,CAAsBP,QAAtB,EAAgCQ,IAAhC,CAAqC,UAASC,gBAAT,EAA2B;AAC5DR,UAAAA,OAAO,CAACQ,gBAAD,CAAP;AACH,SAFD;AAGH;AACJ,KAT2B,CAS1BC,IAT0B,CASrB,IATqB,CAArB,CAAP;AAUH,GA3BwC;AA4BzCC,EAAAA,kBAAkB,EAAE,EA5BqB;AA6BzCC,EAAAA,oBAAoB,EAAE,UAASZ,QAAT,EAAmB;AACrC,WAAO,IAAIxC,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAC1C,UAAI,CAAC,CAAC,GAAGjC,KAAK,CAAC6C,SAAV,EAAqBb,QAArB,CAAL,EAAqC;AACjCC,QAAAA,OAAO,CAAC,IAAItB,SAAS,CAACC,IAAV,CAAewB,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,CAAD,CAAP;AACA;AACH;;AACD,UAAIU,aAAa,GAAG,IAAInC,SAAS,CAACC,IAAV,CAAemC,MAAf,CAAsBC,aAA1B,CAAwC,KAAKC,IAA7C,CAApB;AACA,UAAIC,aAAa,GAAG;AAChBC,QAAAA,KAAK,EAAEnB,QADS;AAEhBoB,QAAAA,KAAK,EAAE,CAFS;AAGhBC,QAAAA,QAAQ,EAAE,UAASC,cAAT,EAAyB;AAC/B,cAAIC,MAAM,GAAGD,cAAc,CAACE,OAAf,CAAuB,CAAvB,CAAb;;AACA,cAAID,MAAJ,EAAY;AACR,gBAAIE,SAAS,GAAGH,cAAc,CAACE,OAAf,CAAuB,CAAvB,EAA0BxB,QAA1C;AACAC,YAAAA,OAAO,CAAC,IAAItB,SAAS,CAACC,IAAV,CAAewB,QAAnB,CAA4BqB,SAAS,CAACC,QAAtC,EAAgDD,SAAS,CAACE,SAA1D,CAAD,CAAP;AACH,WAHD,MAGO;AACH1B,YAAAA,OAAO,CAAC,IAAItB,SAAS,CAACC,IAAV,CAAewB,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,CAAD,CAAP;AACH;AACJ;AAXe,OAApB;AAaAU,MAAAA,aAAa,CAACc,OAAd,CAAsBV,aAAtB;AACH,KApB2B,CAoB1BR,IApB0B,CAoBrB,IApBqB,CAArB,CAAP;AAqBH,GAnDwC;AAoDzCmB,EAAAA,kBAAkB,EAAE,UAAS7B,QAAT,EAAmB;AACnC,WAAO;AACHK,MAAAA,GAAG,EAAEL,QAAQ,CAAC0B,QADX;AAEHpB,MAAAA,GAAG,EAAEN,QAAQ,CAAC2B;AAFX,KAAP;AAIH,GAzDwC;AA0DzCG,EAAAA,sBAAsB,EAAE,UAASC,YAAT,EAAuB;AAC3C,QAAIC,SAAS,GAAG,KAAKH,kBAAL,CAAwBE,YAAY,CAACE,YAAb,EAAxB,CAAhB;;AACA,QAAIC,SAAS,GAAG,KAAKL,kBAAL,CAAwBE,YAAY,CAACI,YAAb,EAAxB,CAAhB;;AACA,WAAO;AACHC,MAAAA,SAAS,EAAE;AACP/B,QAAAA,GAAG,EAAE2B,SAAS,CAAC3B,GADR;AAEPC,QAAAA,GAAG,EAAE4B,SAAS,CAAC5B;AAFR,OADR;AAKH+B,MAAAA,SAAS,EAAE;AACPhC,QAAAA,GAAG,EAAE6B,SAAS,CAAC7B,GADR;AAEPC,QAAAA,GAAG,EAAE0B,SAAS,CAAC1B;AAFR;AALR,KAAP;AAUH,GAvEwC;AAwEzCgC,EAAAA,SAAS,EAAE,YAAW;AAClB,WAAO,IAAI9E,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAC1C,UAAIvB,YAAY,EAAhB,EAAoB;AAChBuB,QAAAA,OAAO;AACV,OAFD,MAEO;AACH,YAAI,CAACpB,YAAL,EAAmB;AACfA,UAAAA,YAAY,GAAG,KAAK0D,cAAL,EAAf;AACH;;AACD1D,QAAAA,YAAY,CAAC2B,IAAb,CAAkB,YAAW;AACzB,cAAI9B,YAAY,EAAhB,EAAoB;AAChBuB,YAAAA,OAAO;AACP;AACH;;AACD,eAAKsC,cAAL,GAAsB/B,IAAtB,CAA2BP,OAA3B;AACH,SANiB,CAMhBS,IANgB,CAMX,IANW,CAAlB;AAOH;AACJ,KAf2B,CAe1BA,IAf0B,CAerB,IAfqB,CAArB,EAeOF,IAfP,CAeY,YAAW;AAC1B,aAAOhD,QAAQ,CAACJ,OAAT,CAAiBoF,GAAjB,CAAqB,CAAC,IAAIhF,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAChEtB,QAAAA,SAAS,CAACC,IAAV,CAAe6D,UAAf,CAA0B,uBAA1B,EAAmD;AAC/CpB,UAAAA,QAAQ,EAAEpB;AADqC,SAAnD;AAGH,OAJ4B,CAAD,EAIxB,IAAIzC,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AACvCtB,QAAAA,SAAS,CAACC,IAAV,CAAe6D,UAAf,CAA0B,2BAA1B,EAAuD;AACnDpB,UAAAA,QAAQ,EAAEpB;AADyC,SAAvD;AAGH,OAJG,CAJwB,CAArB,CAAP;AASH,KAzBM,CAAP;AA0BH,GAnGwC;AAoGzCsC,EAAAA,cAAc,EAAE,YAAW;AACvB,WAAO,IAAI/E,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAC1C9B,MAAAA,MAAM,CAACE,cAAD,CAAN,GAAyB4B,OAAzB;;AACAlC,MAAAA,KAAK,CAACX,OAAN,CAAcsF,WAAd,CAA0B;AACtBC,QAAAA,GAAG,EAAErE,WADiB;AAEtBsE,QAAAA,QAAQ,EAAE;AAFY,OAA1B;AAIH,KANM,EAMJpC,IANI,CAMC,YAAW;AACf,UAAI;AACA,eAAOrC,MAAM,CAACE,cAAD,CAAb;AACH,OAFD,CAEE,OAAOwE,CAAP,EAAU;AACR1E,QAAAA,MAAM,CAACE,cAAD,CAAN,GAAyB,KAAK,CAA9B;AACH;AACJ,KAZM,CAAP;AAaH,GAlHwC;AAmHzCyE,EAAAA,KAAK,EAAE,YAAW;AACd,SAAKC,UAAL;;AACA,WAAOvF,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH,GAtHwC;AAuHzC8C,EAAAA,UAAU,EAAE,YAAW;AACnB,QAAIC,QAAQ,GAAG,KAAKC,OAAL,CAAa,UAAb,CAAf;;AACA,SAAKhC,IAAL,GAAY,IAAItC,SAAS,CAACC,IAAV,CAAesE,GAAnB,CAAuB,KAAKC,WAAL,CAAiB,CAAjB,CAAvB,EAA4C;AACpDC,MAAAA,WAAW,EAAE,KAAKC,UAAL,CAAgB,MAAhB,KAA2B7E,gBADY;AAEpD8E,MAAAA,IAAI,EAAE,KAAKL,OAAL,CAAa,MAAb,CAF8C;AAGpDM,MAAAA,aAAa,EAAEP,QAHqC;AAIpDQ,MAAAA,mBAAmB,EAAER,QAJ+B;AAKpDS,MAAAA,YAAY,EAAET;AALsC,KAA5C,CAAZ;AAOH,GAhIwC;AAiIzCU,EAAAA,eAAe,EAAE,YAAW;AACxB,SAAKC,0BAAL,GAAkChF,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC,KAAK5C,IAAtC,EAA4C,YAA5C,EAA0D,KAAK6C,kBAAL,CAAwBpD,IAAxB,CAA6B,IAA7B,CAA1D,CAAlC;AACA,SAAKqD,qBAAL,GAA6BpF,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC,KAAK5C,IAAtC,EAA4C,OAA5C,EAAqD,KAAK+C,mBAAL,CAAyBtD,IAAzB,CAA8B,IAA9B,CAArD,CAA7B;AACH,GApIwC;AAqIzCoD,EAAAA,kBAAkB,EAAE,YAAW;AAC3B,QAAIG,MAAM,GAAG,KAAKhD,IAAL,CAAUiD,SAAV,EAAb;;AACA,SAAKjB,OAAL,CAAa,QAAb,EAAuB,KAAKnB,sBAAL,CAA4BmC,MAA5B,CAAvB;;AACA,QAAIE,MAAM,GAAG,KAAKlD,IAAL,CAAUmD,SAAV,EAAb;;AACA,SAAKnB,OAAL,CAAa,QAAb,EAAuB,KAAKpB,kBAAL,CAAwBsC,MAAxB,CAAvB;;AACA,QAAI,CAAC,KAAKE,uBAAV,EAAmC;AAC/B,WAAKpB,OAAL,CAAa,MAAb,EAAqB,KAAKhC,IAAL,CAAUqD,OAAV,EAArB;AACH;AACJ,GA7IwC;AA8IzCN,EAAAA,mBAAmB,EAAE,UAASnB,CAAT,EAAY;AAC7B,QAAI,UAAUA,CAAC,CAAC0B,UAAhB,EAA4B;AACxB,WAAKC,gBAAL,CAAsB;AAClBxE,QAAAA,QAAQ,EAAE,KAAK6B,kBAAL,CAAwBgB,CAAC,CAAC7C,QAA1B;AADQ,OAAtB;AAGH;AACJ,GApJwC;AAqJzCyE,EAAAA,gBAAgB,EAAE,YAAW;AACzB,QAAIC,UAAU,GAAG,KAAKvB,WAAtB;;AACA,SAAKlC,IAAL,CAAU0D,UAAV,CAAqB;AACjBC,MAAAA,KAAK,EAAEF,UAAU,CAACE,KAAX,EADU;AAEjBC,MAAAA,MAAM,EAAEH,UAAU,CAACG,MAAX;AAFS,KAArB;;AAIA,WAAOrH,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH,GA5JwC;AA6JzC6E,EAAAA,aAAa,EAAE,YAAW;AACtB,QAAI7F,IAAI,GAAG,KAAKgE,OAAL,CAAa,MAAb,CAAX;;AACA,QAAI8B,YAAY,GAAGpG,SAAS,CAACC,IAAV,CAAeoG,YAAlC;;AACA,SAAK/D,IAAL,CAAUgE,OAAV,CAAkB;AACdC,MAAAA,OAAO,EAAE,KADK;AAEdC,MAAAA,SAAS,EAAE,KAAKnG,QAAL,CAAcC,IAAd,CAFG;AAGd8F,MAAAA,YAAY,EAAE,gBAAgB9F,IAAhB,GAAuB8F,YAAY,CAACK,MAApC,GAA6CL,YAAY,CAACM;AAH1D,KAAlB;;AAKA,WAAO7H,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH,GAtKwC;AAuKzCqF,EAAAA,YAAY,EAAE,YAAW;AACrB,WAAO9H,QAAQ,CAACJ,OAAT,CAAiBoF,GAAjB,CAAqB,CAAC,KAAKzC,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,kBAAb,CAAtB,CAAD,EAA0D,KAAKlD,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,kBAAb,CAAtB,CAA1D,CAArB,EAAyIzC,IAAzI,CAA8I,UAASe,MAAT,EAAiB;AAClK,UAAI0C,MAAM,GAAG,IAAItF,SAAS,CAACC,IAAV,CAAe2G,YAAf,CAA4BC,aAAhC,CAA8CjE,MAAM,CAAC,CAAD,CAApD,EAAyDA,MAAM,CAAC,CAAD,CAA/D,CAAb;;AACA,WAAKN,IAAL,CAAUgE,OAAV,CAAkB;AACdC,QAAAA,OAAO,EAAE,KADK;AAEdjB,QAAAA,MAAM,EAAEA;AAFM,OAAlB;AAIH,KANoJ,CAMnJvD,IANmJ,CAM9I,IAN8I,CAA9I,CAAP;AAOH,GA/KwC;AAgLzC+E,EAAAA,YAAY,EAAE,YAAW;AACrB,WAAO,KAAK1F,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,QAAb,CAAtB,EAA8CzC,IAA9C,CAAmD,UAAS2D,MAAT,EAAiB;AACvE,WAAKlD,IAAL,CAAUgE,OAAV,CAAkB;AACdC,QAAAA,OAAO,EAAE,KADK;AAEdf,QAAAA,MAAM,EAAEA;AAFM,OAAlB;AAIH,KALyD,CAKxDzD,IALwD,CAKnD,IALmD,CAAnD,CAAP;AAMH,GAvLwC;AAwLzCgF,EAAAA,UAAU,EAAE,YAAW;AACnB,SAAKzE,IAAL,CAAUgE,OAAV,CAAkB;AACdC,MAAAA,OAAO,EAAE,KADK;AAEd5B,MAAAA,IAAI,EAAE,KAAKL,OAAL,CAAa,MAAb;AAFQ,KAAlB;;AAIA,WAAOzF,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH,GA9LwC;AA+LzC0F,EAAAA,cAAc,EAAE,YAAW;AACvB,SAAKC,KAAL;AACA,WAAO,KAAKC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;AACH,GAlMwC;AAmMzCC,EAAAA,aAAa,EAAE,UAASC,OAAT,EAAkB;AAC7B,WAAO,KAAKlG,gBAAL,CAAsBkG,OAAO,CAACjG,QAA9B,EAAwCQ,IAAxC,CAA6C,UAASR,QAAT,EAAmB;AACnE,UAAIkG,cAAc,GAAG;AACjBC,QAAAA,IAAI,EAAEF,OAAO,CAACG,OAAR,IAAmB,KAAKnD,OAAL,CAAa,eAAb;AADR,OAArB;;AAGA,UAAIgD,OAAO,CAACI,IAAZ,EAAkB;AACd,SAAC,GAAG3I,OAAO,CAAC4I,MAAZ,EAAoBJ,cAApB,EAAoC;AAChCK,UAAAA,WAAW,EAAEN,OAAO,CAACI,IADW;AAEhCzB,UAAAA,KAAK,EAAE,IAFyB;AAGhCC,UAAAA,MAAM,EAAE;AAHwB,SAApC;AAKA,YAAI2B,UAAU,GAAGP,OAAO,CAACO,UAAzB;;AACA,YAAIA,UAAJ,EAAgB;AACZN,UAAAA,cAAc,CAACO,MAAf,GAAwB,IAAI9H,SAAS,CAACC,IAAV,CAAe8H,KAAnB,CAA0B,CAACF,UAAU,CAACG,IAAtC,EAA8C,CAACH,UAAU,CAACI,GAA1D,CAAxB;AACH;AACJ;;AACD,UAAIC,OAAO,GAAG,IAAIlI,SAAS,CAACC,IAAV,CAAekI,OAAnB,CAA2B9G,QAA3B,EAAqCkG,cAArC,CAAd;;AACA,WAAKjF,IAAL,CAAU8F,QAAV,CAAmBC,IAAnB,CAAwBH,OAAxB;;AACA,UAAII,OAAO,GAAG,KAAKC,cAAL,CAAoBlH,QAApB,EAA8BiG,OAAO,CAACkB,OAAtC,CAAd;;AACA,UAAIC,OAAJ;;AACA,UAAInB,OAAO,CAACoB,OAAR,IAAmBpB,OAAO,CAACkB,OAA/B,EAAwC;AACpC,YAAIG,iBAAiB,GAAG,KAAKC,UAAL,CAAgBC,aAAhB,CAA8BvB,OAAO,CAACoB,OAAR,IAAmBhK,OAAO,CAACoK,IAAzD,CAAxB;;AACA,YAAIC,wBAAwB,GAAG,KAAK7F,kBAAL,CAAwB7B,QAAxB,CAA/B;;AACAoH,QAAAA,OAAO,GAAGzI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiCgD,OAAjC,EAA0C,OAA1C,EAAmD,YAAW;AACpES,UAAAA,iBAAiB,CAAC;AACdtH,YAAAA,QAAQ,EAAE0H;AADI,WAAD,CAAjB;;AAGA,cAAIT,OAAJ,EAAa;AACTA,YAAAA,OAAO,CAACtC,UAAR,CAAmB;AACfU,cAAAA,OAAO,EAAE;AADM,aAAnB;AAGH;AACJ,SATS,CAAV;AAUH;;AACD,aAAO;AACHrF,QAAAA,QAAQ,EAAEA,QADP;AAEH2H,QAAAA,MAAM,EAAEd,OAFL;AAGHI,QAAAA,OAAO,EAAEA,OAHN;AAIHG,QAAAA,OAAO,EAAEA;AAJN,OAAP;AAMH,KAvCmD,CAuClD1G,IAvCkD,CAuC7C,IAvC6C,CAA7C,CAAP;AAwCH,GA5OwC;AA6OzCwG,EAAAA,cAAc,EAAE,UAASlH,QAAT,EAAmBiG,OAAnB,EAA4B;AACxC,QAAI,CAACA,OAAL,EAAc;AACV;AACH;;AACDA,IAAAA,OAAO,GAAG,KAAK2B,oBAAL,CAA0B3B,OAA1B,CAAV;AACA,QAAIgB,OAAO,GAAG,IAAItI,SAAS,CAACC,IAAV,CAAeiJ,OAAnB,CAA2B7H,QAA3B,EAAqC;AAC/C8H,MAAAA,WAAW,EAAE7B,OAAO,CAAC8B,IAD0B;AAE/CC,MAAAA,MAAM,EAAE,IAAIrJ,SAAS,CAACC,IAAV,CAAe8H,KAAnB,CAAyB,CAAzB,EAA4BnI,mBAA5B,CAFuC;AAG/C8G,MAAAA,OAAO,EAAEY,OAAO,CAACZ;AAH8B,KAArC,CAAd;AAKA4B,IAAAA,OAAO,CAACgB,MAAR,CAAe,KAAKhH,IAApB;AACA,WAAOgG,OAAP;AACH,GAzPwC;AA0PzCiB,EAAAA,cAAc,EAAE,UAASP,MAAT,EAAiB;AAC7B,SAAK1G,IAAL,CAAU8F,QAAV,CAAmBoB,MAAnB,CAA0BR,MAAM,CAACA,MAAjC;;AACA,QAAIA,MAAM,CAACV,OAAX,EAAoB;AAChBU,MAAAA,MAAM,CAACV,OAAP,CAAegB,MAAf,CAAsB,IAAtB;AACH;;AACD,QAAIN,MAAM,CAACP,OAAX,EAAoB;AAChBzI,MAAAA,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBwE,aAAtB,CAAoCT,MAAM,CAACP,OAA3C;AACH;AACJ,GAlQwC;AAmQzCiB,EAAAA,YAAY,EAAE,UAASpC,OAAT,EAAkB;AAC5B,WAAOzI,QAAQ,CAACJ,OAAT,CAAiBoF,GAAjB,CAAqB,CAAC,GAAG5E,SAAS,CAAC0K,GAAd,EAAmBrC,OAAO,CAACsC,SAA3B,EAAsC,UAASC,KAAT,EAAgB;AAC9E,aAAO,KAAKzI,gBAAL,CAAsByI,KAAtB,CAAP;AACH,KAFiE,CAEhE9H,IAFgE,CAE3D,IAF2D,CAAtC,CAArB,EAEQF,IAFR,CAEa,UAAS+H,SAAT,EAAoB;AACpC,aAAO,IAAI/K,QAAQ,CAACJ,OAAb,CAAqB,UAAS6C,OAAT,EAAkB;AAC1C,YAAIwI,SAAS,GAAG,IAAI9J,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0B8I,iBAA9B,CAAgD,KAAKzH,IAArD,CAAhB;AACA,YAAI0H,KAAK,GAAG,IAAI7K,MAAM,CAACV,OAAX,CAAmB6I,OAAO,CAAC0C,KAAR,IAAiB,KAAKC,kBAAL,EAApC,EAA+DC,KAA/D,EAAZ;AACA,YAAIC,UAAU,GAAG,IAAInK,SAAS,CAACC,IAAV,CAAemK,KAAf,CAAqBC,OAAzB,CAAiCL,KAAjC,CAAjB;AACAG,QAAAA,UAAU,CAACG,CAAX,GAAe,OAAOhD,OAAO,CAACiD,OAAR,IAAmB,KAAKC,oBAAL,EAA1B,CAAf;AACAV,QAAAA,SAAS,CAACW,gBAAV,CAA2B;AACvBC,UAAAA,iBAAiB,EAAE,KADI;AAEvBC,UAAAA,oBAAoB,EAAE,KAFC;AAGvBC,UAAAA,sBAAsB,EAAE;AACpBlE,YAAAA,OAAO,EAAE;AADW,WAHD;AAMvBmE,UAAAA,sBAAsB,EAAE;AACpBC,YAAAA,WAAW,EAAEX,UADO;AAEpBY,YAAAA,eAAe,EAAEzD,OAAO,CAAC0D,MAAR,IAAkB,KAAKC,mBAAL;AAFf,WAND;AAUvBC,UAAAA,sBAAsB,EAAE;AACpBJ,YAAAA,WAAW,EAAEX,UADO;AAEpBY,YAAAA,eAAe,EAAEzD,OAAO,CAAC0D,MAAR,IAAkB,KAAKC,mBAAL;AAFf;AAVD,SAA3B;AAeAnB,QAAAA,SAAS,CAACqB,iBAAV,CAA4B;AACxBC,UAAAA,SAAS,EAAE,KAAKtK,aAAL,CAAmBwG,OAAO,CAAC+D,IAA3B,CADa;AAExBC,UAAAA,cAAc,EAAE;AAFQ,SAA5B;AAIA,SAAC,GAAGrM,SAAS,CAACsM,IAAd,EAAoB3B,SAApB,EAA+B,UAAS4B,CAAT,EAAYnK,QAAZ,EAAsB;AACjD,cAAIoK,QAAQ,GAAG,IAAIzL,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0ByK,QAA9B,CAAuC;AAClDrK,YAAAA,QAAQ,EAAEA;AADwC,WAAvC,CAAf;AAGAyI,UAAAA,SAAS,CAAC6B,WAAV,CAAsBF,QAAtB;AACH,SALD;AAMA,YAAIG,iBAAiB,GAAG,EAAxB;AACAA,QAAAA,iBAAiB,CAACvD,IAAlB,CAAuBrI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC4E,SAAjC,EAA4C,mBAA5C,EAAiE,UAAS+B,IAAT,EAAe;AACnG,iBAAOD,iBAAiB,CAACE,MAAzB,EAAiC;AAC7B9L,YAAAA,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBwE,aAAtB,CAAoCmC,iBAAiB,CAACG,GAAlB,EAApC;AACH;;AACD,cAAIC,YAAY,GAAGH,IAAI,CAACG,YAAL,CAAkB,CAAlB,CAAnB;AACA1K,UAAAA,OAAO,CAAC;AACJ2K,YAAAA,QAAQ,EAAEnC,SADN;AAEJrG,YAAAA,SAAS,EAAEuI,YAAY,CAACvI,SAFpB;AAGJC,YAAAA,SAAS,EAAEsI,YAAY,CAACtI;AAHpB,WAAD,CAAP;AAKH,SAVsB,CAAvB;AAWAkI,QAAAA,iBAAiB,CAACvD,IAAlB,CAAuBrI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC4E,SAAjC,EAA4C,iBAA5C,EAA+D,UAAS+B,IAAT,EAAe;AACjG,iBAAOD,iBAAiB,CAACE,MAAzB,EAAiC;AAC7B9L,YAAAA,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBwE,aAAtB,CAAoCmC,iBAAiB,CAACG,GAAlB,EAApC;AACH;;AACD,cAAIG,MAAM,GAAG,wBAAwBL,IAAI,CAACM,YAA7B,GAA4C,KAA5C,GAAoDN,IAAI,CAACO,OAAtE;;AACApN,UAAAA,GAAG,CAACP,OAAJ,CAAY4N,GAAZ,CAAgB,OAAhB,EAAyBH,MAAzB;;AACA5K,UAAAA,OAAO,CAAC;AACJ2K,YAAAA,QAAQ,EAAEnC;AADN,WAAD,CAAP;AAGH,SATsB,CAAvB;AAUAA,QAAAA,SAAS,CAACwC,mBAAV;AACH,OArD2B,CAqD1BvK,IArD0B,CAqDrB,IArDqB,CAArB,CAAP;AAsDH,KAvDmB,CAuDlBA,IAvDkB,CAuDb,IAvDa,CAFb,CAAP;AA0DH,GA9TwC;AA+TzCwK,EAAAA,aAAa,EAAE,UAASC,WAAT,EAAsB;AACjCA,IAAAA,WAAW,CAACP,QAAZ,CAAqBQ,OAArB;AACH,GAjUwC;AAkUzCC,EAAAA,UAAU,EAAE,YAAW;AACnB,SAAKC,aAAL;;AACA,QAAI,KAAKC,OAAL,IAAgB,KAAKtI,OAAL,CAAa,YAAb,CAApB,EAAgD;AAC5C,UAAIuI,iBAAiB,GAAG,KAAKvK,IAAL,CAAUqD,OAAV,EAAxB;;AACA,WAAKD,uBAAL,GAA+B,IAA/B;;AACA,UAAIJ,MAAM,GAAG,KAAKsH,OAAL,CAAaE,KAAb,EAAb;;AACAxH,MAAAA,MAAM,CAACY,MAAP,GAAgB,MAAMZ,MAAM,CAACY,MAA7B;AACAZ,MAAAA,MAAM,CAACW,KAAP,GAAe,MAAMX,MAAM,CAACW,KAA5B;;AACA,WAAK3D,IAAL,CAAUgE,OAAV,CAAkB;AACdC,QAAAA,OAAO,EAAE,KADK;AAEdjB,QAAAA,MAAM,EAAEA,MAFM;AAGdX,QAAAA,IAAI,EAAEkI;AAHQ,OAAlB;;AAKA,UAAIE,gBAAgB,GAAG,KAAKzK,IAAL,CAAUqD,OAAV,EAAvB;;AACA,UAAIkH,iBAAiB,GAAGE,gBAAxB,EAA0C;AACtC,aAAKzK,IAAL,CAAUgE,OAAV,CAAkB;AACdC,UAAAA,OAAO,EAAE,KADK;AAEd5B,UAAAA,IAAI,EAAEkI;AAFQ,SAAlB;AAIH,OALD,MAKO;AACH,aAAKvI,OAAL,CAAa,MAAb,EAAqByI,gBAArB;AACH;;AACD,aAAO,KAAKrH,uBAAZ;AACH;;AACD,WAAO7G,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH,GA3VwC;AA4VzC0L,EAAAA,aAAa,EAAE,UAAS3L,QAAT,EAAmB;AAC9B,QAAI,KAAKuL,OAAT,EAAkB;AACd,WAAKA,OAAL,GAAe,IAAI5M,SAAS,CAACC,IAAV,CAAe2G,YAAf,CAA4BC,aAAhC,CAA8C,KAAK+F,OAAL,CAAatJ,YAAb,EAA9C,EAA2E,KAAKsJ,OAAL,CAAapJ,YAAb,EAA3E,EAAwGnC,QAAxG,CAAf;AACH,KAFD,MAEO;AACH,WAAKuL,OAAL,GAAe,IAAI5M,SAAS,CAACC,IAAV,CAAe2G,YAAnB,CAAgCvF,QAAhC,EAA0CvB,wBAA1C,EAAoEA,wBAApE,CAAf;AACH;AACJ,GAlWwC;AAmWzCmH,EAAAA,KAAK,EAAE,YAAW;AACd,QAAI,KAAK3E,IAAT,EAAe;AACXtC,MAAAA,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBwE,aAAtB,CAAoC,KAAKzE,0BAAzC;AACAhF,MAAAA,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBwE,aAAtB,CAAoC,KAAKrE,qBAAzC;;AACA,WAAK6H,aAAL;;AACA,WAAKC,YAAL;;AACA,WAAK5K,IAAL,CAAUmK,OAAV;AACH;;AACD,WAAO5N,QAAQ,CAACJ,OAAT,CAAiB6C,OAAjB,EAAP;AACH;AA5WwC,CAA1B,CAAnB;;AA8WA,IAAI6L,QAAQ,GAAGhN,YAAf;AACA3B,OAAO,CAACC,OAAR,GAAkB0O,QAAlB;AACAC,MAAM,CAAC5O,OAAP,GAAiBA,OAAO,CAACC,OAAzB","sourcesContent":["/**\r\n * DevExtreme (ui/map/provider.dynamic.bing.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _promise = _interopRequireDefault(require(\"../../core/polyfills/promise\"));\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _provider = _interopRequireDefault(require(\"./provider.dynamic\"));\r\nvar _color = _interopRequireDefault(require(\"../../color\"));\r\nvar _ajax = _interopRequireDefault(require(\"../../core/utils/ajax\"));\r\nvar _type = require(\"../../core/utils/type\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar window = (0, _window.getWindow)();\r\nvar BING_MAP_READY = \"_bingScriptReady\";\r\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\r\nvar INFOBOX_V_OFFSET_V8 = 13;\r\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\r\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\r\nvar msMapsLoaded = function() {\r\n    return window.Microsoft && window.Microsoft.Maps\r\n};\r\nvar msMapsLoader;\r\nvar BingProvider = _provider.default.inherit({\r\n    _mapType: function(type) {\r\n        var mapTypes = {\r\n            roadmap: Microsoft.Maps.MapTypeId.road,\r\n            hybrid: Microsoft.Maps.MapTypeId.aerial,\r\n            satellite: Microsoft.Maps.MapTypeId.aerial\r\n        };\r\n        return mapTypes[type] || mapTypes.road\r\n    },\r\n    _movementMode: function(type) {\r\n        var movementTypes = {\r\n            driving: Microsoft.Maps.Directions.RouteMode.driving,\r\n            walking: Microsoft.Maps.Directions.RouteMode.walking\r\n        };\r\n        return movementTypes[type] || movementTypes.driving\r\n    },\r\n    _resolveLocation: function(location) {\r\n        return new _promise.default(function(resolve) {\r\n            var latLng = this._getLatLng(location);\r\n            if (latLng) {\r\n                resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng))\r\n            } else {\r\n                this._geocodeLocation(location).then(function(geocodedLocation) {\r\n                    resolve(geocodedLocation)\r\n                })\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _geocodedLocations: {},\r\n    _geocodeLocationImpl: function(location) {\r\n        return new _promise.default(function(resolve) {\r\n            if (!(0, _type.isDefined)(location)) {\r\n                resolve(new Microsoft.Maps.Location(0, 0));\r\n                return\r\n            }\r\n            var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\r\n            var searchRequest = {\r\n                where: location,\r\n                count: 1,\r\n                callback: function(searchResponse) {\r\n                    var result = searchResponse.results[0];\r\n                    if (result) {\r\n                        var boundsBox = searchResponse.results[0].location;\r\n                        resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude))\r\n                    } else {\r\n                        resolve(new Microsoft.Maps.Location(0, 0))\r\n                    }\r\n                }\r\n            };\r\n            searchManager.geocode(searchRequest)\r\n        }.bind(this))\r\n    },\r\n    _normalizeLocation: function(location) {\r\n        return {\r\n            lat: location.latitude,\r\n            lng: location.longitude\r\n        }\r\n    },\r\n    _normalizeLocationRect: function(locationRect) {\r\n        var northWest = this._normalizeLocation(locationRect.getNorthwest());\r\n        var southEast = this._normalizeLocation(locationRect.getSoutheast());\r\n        return {\r\n            northEast: {\r\n                lat: northWest.lat,\r\n                lng: southEast.lng\r\n            },\r\n            southWest: {\r\n                lat: southEast.lat,\r\n                lng: northWest.lng\r\n            }\r\n        }\r\n    },\r\n    _loadImpl: function() {\r\n        return new _promise.default(function(resolve) {\r\n            if (msMapsLoaded()) {\r\n                resolve()\r\n            } else {\r\n                if (!msMapsLoader) {\r\n                    msMapsLoader = this._loadMapScript()\r\n                }\r\n                msMapsLoader.then(function() {\r\n                    if (msMapsLoaded()) {\r\n                        resolve();\r\n                        return\r\n                    }\r\n                    this._loadMapScript().then(resolve)\r\n                }.bind(this))\r\n            }\r\n        }.bind(this)).then(function() {\r\n            return _promise.default.all([new _promise.default(function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\r\n                    callback: resolve\r\n                })\r\n            }), new _promise.default(function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\r\n                    callback: resolve\r\n                })\r\n            })])\r\n        })\r\n    },\r\n    _loadMapScript: function() {\r\n        return new _promise.default(function(resolve) {\r\n            window[BING_MAP_READY] = resolve;\r\n            _ajax.default.sendRequest({\r\n                url: BING_URL_V8,\r\n                dataType: \"script\"\r\n            })\r\n        }).then(function() {\r\n            try {\r\n                delete window[BING_MAP_READY]\r\n            } catch (e) {\r\n                window[BING_MAP_READY] = void 0\r\n            }\r\n        })\r\n    },\r\n    _init: function() {\r\n        this._createMap();\r\n        return _promise.default.resolve()\r\n    },\r\n    _createMap: function() {\r\n        var controls = this._option(\"controls\");\r\n        this._map = new Microsoft.Maps.Map(this._$container[0], {\r\n            credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\r\n            zoom: this._option(\"zoom\"),\r\n            showDashboard: controls,\r\n            showMapTypeSelector: controls,\r\n            showScalebar: controls\r\n        })\r\n    },\r\n    _attachHandlers: function() {\r\n        this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\r\n        this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this))\r\n    },\r\n    _viewChangeHandler: function() {\r\n        var bounds = this._map.getBounds();\r\n        this._option(\"bounds\", this._normalizeLocationRect(bounds));\r\n        var center = this._map.getCenter();\r\n        this._option(\"center\", this._normalizeLocation(center));\r\n        if (!this._preventZoomChangeEvent) {\r\n            this._option(\"zoom\", this._map.getZoom())\r\n        }\r\n    },\r\n    _clickActionHandler: function(e) {\r\n        if (\"map\" === e.targetType) {\r\n            this._fireClickAction({\r\n                location: this._normalizeLocation(e.location)\r\n            })\r\n        }\r\n    },\r\n    updateDimensions: function() {\r\n        var $container = this._$container;\r\n        this._map.setOptions({\r\n            width: $container.width(),\r\n            height: $container.height()\r\n        });\r\n        return _promise.default.resolve()\r\n    },\r\n    updateMapType: function() {\r\n        var type = this._option(\"type\");\r\n        var labelOverlay = Microsoft.Maps.LabelOverlay;\r\n        this._map.setView({\r\n            animate: false,\r\n            mapTypeId: this._mapType(type),\r\n            labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\r\n        });\r\n        return _promise.default.resolve()\r\n    },\r\n    updateBounds: function() {\r\n        return _promise.default.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function(result) {\r\n            var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateCenter: function() {\r\n        return this._resolveLocation(this._option(\"center\")).then(function(center) {\r\n            this._map.setView({\r\n                animate: false,\r\n                center: center\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateZoom: function() {\r\n        this._map.setView({\r\n            animate: false,\r\n            zoom: this._option(\"zoom\")\r\n        });\r\n        return _promise.default.resolve()\r\n    },\r\n    updateControls: function() {\r\n        this.clean();\r\n        return this.render.apply(this, arguments)\r\n    },\r\n    _renderMarker: function(options) {\r\n        return this._resolveLocation(options.location).then(function(location) {\r\n            var pushpinOptions = {\r\n                icon: options.iconSrc || this._option(\"markerIconSrc\")\r\n            };\r\n            if (options.html) {\r\n                (0, _extend.extend)(pushpinOptions, {\r\n                    htmlContent: options.html,\r\n                    width: null,\r\n                    height: null\r\n                });\r\n                var htmlOffset = options.htmlOffset;\r\n                if (htmlOffset) {\r\n                    pushpinOptions.anchor = new Microsoft.Maps.Point((-htmlOffset.left), (-htmlOffset.top))\r\n                }\r\n            }\r\n            var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\r\n            this._map.entities.push(pushpin);\r\n            var infobox = this._renderTooltip(location, options.tooltip);\r\n            var handler;\r\n            if (options.onClick || options.tooltip) {\r\n                var markerClickAction = this._mapWidget._createAction(options.onClick || _common.noop);\r\n                var markerNormalizedLocation = this._normalizeLocation(location);\r\n                handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", function() {\r\n                    markerClickAction({\r\n                        location: markerNormalizedLocation\r\n                    });\r\n                    if (infobox) {\r\n                        infobox.setOptions({\r\n                            visible: true\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            return {\r\n                location: location,\r\n                marker: pushpin,\r\n                infobox: infobox,\r\n                handler: handler\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _renderTooltip: function(location, options) {\r\n        if (!options) {\r\n            return\r\n        }\r\n        options = this._parseTooltipOptions(options);\r\n        var infobox = new Microsoft.Maps.Infobox(location, {\r\n            description: options.text,\r\n            offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\r\n            visible: options.visible\r\n        });\r\n        infobox.setMap(this._map);\r\n        return infobox\r\n    },\r\n    _destroyMarker: function(marker) {\r\n        this._map.entities.remove(marker.marker);\r\n        if (marker.infobox) {\r\n            marker.infobox.setMap(null)\r\n        }\r\n        if (marker.handler) {\r\n            Microsoft.Maps.Events.removeHandler(marker.handler)\r\n        }\r\n    },\r\n    _renderRoute: function(options) {\r\n        return _promise.default.all((0, _iterator.map)(options.locations, function(point) {\r\n            return this._resolveLocation(point)\r\n        }.bind(this))).then(function(locations) {\r\n            return new _promise.default(function(resolve) {\r\n                var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\r\n                var color = new _color.default(options.color || this._defaultRouteColor()).toHex();\r\n                var routeColor = new Microsoft.Maps.Color.fromHex(color);\r\n                routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\r\n                direction.setRenderOptions({\r\n                    autoUpdateMapView: false,\r\n                    displayRouteSelector: false,\r\n                    waypointPushpinOptions: {\r\n                        visible: false\r\n                    },\r\n                    drivingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    },\r\n                    walkingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    }\r\n                });\r\n                direction.setRequestOptions({\r\n                    routeMode: this._movementMode(options.mode),\r\n                    routeDraggable: false\r\n                });\r\n                (0, _iterator.each)(locations, function(_, location) {\r\n                    var waypoint = new Microsoft.Maps.Directions.Waypoint({\r\n                        location: location\r\n                    });\r\n                    direction.addWaypoint(waypoint)\r\n                });\r\n                var directionHandlers = [];\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var routeSummary = args.routeSummary[0];\r\n                    resolve({\r\n                        instance: direction,\r\n                        northEast: routeSummary.northEast,\r\n                        southWest: routeSummary.southWest\r\n                    })\r\n                }));\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\r\n                    _ui.default.log(\"W1006\", status);\r\n                    resolve({\r\n                        instance: direction\r\n                    })\r\n                }));\r\n                direction.calculateDirections()\r\n            }.bind(this))\r\n        }.bind(this))\r\n    },\r\n    _destroyRoute: function(routeObject) {\r\n        routeObject.instance.dispose()\r\n    },\r\n    _fitBounds: function() {\r\n        this._updateBounds();\r\n        if (this._bounds && this._option(\"autoAdjust\")) {\r\n            var zoomBeforeFitting = this._map.getZoom();\r\n            this._preventZoomChangeEvent = true;\r\n            var bounds = this._bounds.clone();\r\n            bounds.height = 1.1 * bounds.height;\r\n            bounds.width = 1.1 * bounds.width;\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds,\r\n                zoom: zoomBeforeFitting\r\n            });\r\n            var zoomAfterFitting = this._map.getZoom();\r\n            if (zoomBeforeFitting < zoomAfterFitting) {\r\n                this._map.setView({\r\n                    animate: false,\r\n                    zoom: zoomBeforeFitting\r\n                })\r\n            } else {\r\n                this._option(\"zoom\", zoomAfterFitting)\r\n            }\r\n            delete this._preventZoomChangeEvent\r\n        }\r\n        return _promise.default.resolve()\r\n    },\r\n    _extendBounds: function(location) {\r\n        if (this._bounds) {\r\n            this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location)\r\n        } else {\r\n            this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH)\r\n        }\r\n    },\r\n    clean: function() {\r\n        if (this._map) {\r\n            Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\r\n            Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\r\n            this._clearMarkers();\r\n            this._clearRoutes();\r\n            this._map.dispose()\r\n        }\r\n        return _promise.default.resolve()\r\n    }\r\n});\r\nvar _default = BingProvider;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}