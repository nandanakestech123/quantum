{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\quantumCode20082022\\\\src\\\\component\\\\Admin\\\\mobileAppointment\\\\MobileCreateAppointment\\\\MobileSelectTreatment.js\";\nimport React, { Component } from \"react\";\nimport { NormalSelect, NormalButton, NormalModal, NormalInput, NormalDateTime, NormalCheckbox, NormalTimePicker } from \"component/common\";\nimport \"./style.scss\";\nimport { updateForm, getSelectedTreatmentList } from \"redux/actions/appointment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport closeIcon from \"assets/images/close.png\";\nimport req_therapist from \"assets/images/app-icons/1.png\";\nimport { getCommonApi, commonCreateApi, commonPatchApi, commonDeleteApi } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport _ from \"lodash\";\nimport { TableWrapper } from \"component/common\";\nimport { TreatmentPackage } from \"./modal/index\";\nimport { Toast } from \"service/toast\";\nimport { MobileAppointmentForm } from \"./MobileAppointmentForm\";\nimport { history } from \"helpers\";\nimport { TreatmentHistory } from \"component/Admin/NewAppointment/NewListAppointment/modal/TreatmentHistory\";\nimport { UpcomingAppointment } from \"component/Admin/NewAppointment/NewListAppointment/modal/UpcomingAppointment\";\nimport { withTranslation } from \"react-i18next\";\nimport { AiOutlinePlus, AiOutlineMinus } from \"react-icons/ai\";\n\nconst getTime = date => {\n  debugger;\n  var now = new Date(date);\n  var hour = now.getHours();\n  var minute = now.getMinutes();\n  var second = now.getSeconds();\n  var ap = \"AM\";\n\n  if (hour > 11) {\n    ap = \"PM\";\n  }\n\n  if (hour > 12) {\n    hour = hour - 12;\n  }\n\n  if (hour == 0) {\n    hour = 12;\n  }\n\n  if (hour < 10) {\n    hour = \"0\" + hour;\n  }\n\n  if (minute < 10) {\n    minute = \"0\" + minute;\n  }\n\n  if (second < 10) {\n    second = \"0\" + second;\n  }\n\n  var timeString = hour + \":\" + minute + \" \" + ap;\n  return timeString;\n};\n\nexport class MobileSelectTreatmentClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treatmentDetail: [],\n      formFields: {\n        appt_id: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        Item_Codeid: null,\n        add_duration: \"\",\n        emp_no: 0,\n        requesttherapist: false,\n        Item_CodeName: \"\",\n        edit_remark: \"\",\n        recur_days: null,\n        recur_qty: null,\n        item_text: null,\n        checktype: \"\",\n        treat_parentcode: null\n      },\n      selectedList: [{\n        appt_id: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        Item_Codeid: null,\n        add_duration: \"\",\n        emp_no: 0,\n        requesttherapist: false,\n        Item_CodeName: \"\",\n        edit_remark: \"\",\n        recur_days: null,\n        recur_qty: null,\n        item_text: null,\n        checktype: \"\",\n        treat_parentcode: null\n      }],\n      outletOption: [],\n      staffOption: [],\n      roomOption: [],\n      list: [],\n      isOpenModal: false,\n      categoryList: [],\n      treatmentList: [],\n      siteList: [],\n      treatmentField: {\n        category: \"\",\n        treatment: \"\"\n      },\n      timeDropdown: [],\n      duration: [],\n      index: null,\n      search: \"\",\n      selectTreatmentId: \"\",\n      treatmentListHeader: [{\n        label: \"Category\",\n        className: \"w-50\"\n      }, {\n        label: \"Service\",\n        className: \"w-75\"\n      }, {\n        label: \"Duration\",\n        className: \"w-25\"\n      }, {\n        label: \"price\",\n        className: \"w-50\",\n        divClass: \"justify-content-end text-right\"\n      }],\n      meta: {},\n      isTreatementModal: false,\n      appointmentId: null,\n      PackageIndex: 0,\n      selectedRec_days: null,\n      selectedRec_qty: null,\n      recurringList: [],\n      recurringSelectedItems: [],\n      recurringSelectAll: false,\n      settingData: {},\n      PasteAppointmentId: 0,\n      InitAppointmentStatus: \"\",\n      isTreatmentHistoryModal: false,\n      isUpcomingAppointmentModal: false,\n      freeTextStockId: \"\",\n      headerDetails: [{\n        label: \"Start\",\n        width: \"100px\"\n      }, {\n        label: \"End\"\n      }, {\n        label: \"Service\",\n        width: \"260px\"\n      }, {\n        label: \"Duration\"\n      }, {\n        label: \"Treatment Staff\"\n      }, {\n        label: \"therapist\",\n        width: \"35px\"\n      }, {\n        label: \"Recur Days\",\n        width: \"100px\"\n      }, {\n        label: \"Recur Qty\",\n        width: \"100px\"\n      }, {\n        label: \"Action\"\n      }],\n      activeRow: 0,\n      isLoginConfirmation: false,\n      passwordVisible: false,\n      dragusername: \"\",\n      dragpassword: \"\",\n      DeletedList: []\n    };\n\n    this.showErrorMessage = () => {\n      this.child.onFocus();\n    };\n\n    this.getFreetextStockid = async => {\n      let {\n        treatmentField,\n        search,\n        selectTreatmentId\n      } = this.state;\n      let page = 1,\n          limit = 10;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"stocklistfreetextresponse\");\n        let {\n          data,\n          status\n        } = res;\n\n        if (status === 200) {\n          if (data && data.stock_id && data.stock_id !== \" \") {\n            this.setState({\n              freeTextStockId: data.stock_id\n            });\n          } else {\n            Toast({\n              type: \"error\",\n              message: \"Stock Id not found for free text item\"\n            });\n          }\n        }\n      });\n    };\n\n    this.timeToDateFormat = TimeValue => {\n      let time = String(TimeValue).split(\":\");\n      let newTime = new Date(new Date().setHours(time[0], time[1], 0, 0));\n      return newTime;\n    };\n\n    this.handleRenderApptDetail = async (appt_id, copy) => {\n      let {\n        selectedList,\n        InitAppointmentStatus\n      } = this.state;\n      this.props.getCommonApi(`appointmentedit/${appt_id}/`).then(async key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(data, \"renderappointmentdetail\");\n\n        if (status === 200) {\n          if (data.treatment) {\n            InitAppointmentStatus = data.appointment.appt_status;\n            selectedList = [];\n            await this.setState({\n              selectedList: selectedList,\n              InitAppointmentStatus\n            });\n            this.props.updateForm(\"treatmentList\", selectedList);\n\n            for (let treat of data.treatment) {\n              let startTime = \"\";\n              let endTime = \"\";\n              let apptid = null;\n\n              if (copy) {\n                startTime = this.timeToDateFormat(treat.start_time);\n                endTime = treat.end_time;\n                apptid = null;\n              } else {\n                startTime = this.timeToDateFormat(treat.start_time);\n                endTime = treat.end_time;\n                apptid = treat.appt_id;\n              }\n\n              selectedList.push({\n                start_time: startTime,\n                end_time: endTime,\n                emp_no: treat.emp_id,\n                appt_id: apptid,\n                Item_Codeid: treat.item_id,\n                Item_CodeName: treat.item_name,\n                add_duration: treat.add_duration,\n                requesttherapist: treat.requesttherapist,\n                recur_days: treat.recur_days,\n                recur_qty: treat.recur_qty,\n                item_text: treat.item_name,\n                checktype: treat.checktype,\n                treat_parentcode: treat.treat_parentcode\n              });\n              this.setState({\n                selectedList\n              });\n            }\n\n            this.props.updateForm(\"treatmentList\", selectedList);\n          }\n        }\n      });\n    };\n\n    this.handleItemSettings = () => {\n      let {\n        settingData\n      } = this.state;\n      this.props.getCommonApi(`userlist/`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(key, \"settingsData appointmentCreate\");\n\n        if (status === 200) {\n          settingData = data;\n          this.setState({\n            settingData\n          });\n        }\n      });\n    };\n\n    this.getStaffAvailability = () => {\n      this.props.getCommonApi(`staffsavailable/?Appt_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n\n        if (status === 200) {\n          // for (let value of data) {\n          //     staffList.push({ value: value.id, label: value.emp_name })\n          // }\n          this.setState({\n            list: data\n          });\n        }\n      });\n    };\n\n    this.handleSearch = event => {\n      event.persist();\n      console.log(event.target.value, event.target, event, \"dfhdfjghkjfghj\");\n      let {\n        treatmentField\n      } = this.state;\n      treatmentField[\"treatment\"] = event.target.value;\n      this.setState({\n        search: event.target.value,\n        treatmentField\n      });\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce(() => {\n          let searchString = event.target.value;\n          let data = {\n            search: searchString\n          }; // this.queryHandler(data)\n\n          this.search(data);\n        }, 500);\n      }\n\n      this.debouncedFn();\n    };\n\n    this.search = data => {\n      let {\n        page = 1,\n        limit = 10,\n        search = \"\"\n      } = data;\n      let {\n        selectTreatmentId\n      } = this.state;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"treatmentList treatment_parentcode\");\n\n        if (res.status === 200) {\n          this.setState({\n            treatmentList: res.data.dataList,\n            meta: res.data.meta.pagination\n          });\n        }\n      });\n    };\n\n    this.handlePagination = page => {\n      this.search(page);\n    };\n\n    this.handleChangeTreatment = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        treatmentField,\n        search,\n        selectTreatmentId\n      } = this.state;\n      console.log(\"uihwkjrwkej\", name, value);\n      treatmentField[name] = value;\n\n      if (name === \"category\") {\n        selectTreatmentId = value;\n      } else if (name === \"treatment\") {\n        search = value;\n      }\n\n      await this.setState({\n        treatmentField,\n        selectTreatmentId,\n        search\n      });\n      let page = 1,\n          limit = 10;\n      this.props.getCommonApi(`stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`).then(res => {\n        console.log(res, \"stocklis\");\n\n        if (res.status === 200) {\n          this.setState({\n            treatmentList: res.data.dataList,\n            meta: res.data.meta.pagination\n          });\n        }\n      });\n    };\n\n    this.handleChange = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        selectedList,\n        appointmentId,\n        freeTextStockId\n      } = this.state;\n\n      if (name === \"add_duration\") {\n        //if (appointmentId) {\n        selectedList[index][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[index][\"start_time\"]), value ? value : \"00:00\"); // } else {\n        //   selectedList[index][\"end_time\"] = this.addTimes(\n        //     selectedList[index][\"start_time\"],\n        //     value ? value : \"00:00\"\n        //   );\n        // }\n\n        selectedList[index][\"add_duration\"] = value;\n\n        if (selectedList.length - 1 > index) {\n          let endTime = \"\"; //if (appointmentId) {\n\n          endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]); // } else {\n          //   endTime = selectedList[index][\"end_time\"];\n          // }\n\n          selectedList[index + 1][\"start_time\"] = endTime;\n\n          if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n            selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n          }\n        }\n      } else if (name === \"Item_CodeName\") {\n        selectedList[index][\"Item_Codeid\"] = freeTextStockId;\n        selectedList[index][\"Item_CodeName\"] = value;\n        selectedList[index][\"item_text\"] = value;\n        selectedList[index][\"checktype\"] = \"freetext\";\n        selectedList[index][\"treat_parentcode\"] = null;\n      } else if (name === \"recur_days\" || name === \"recur_qty\") {\n        if (value <= 0 || value === \"\") {\n          selectedList[index][name] = null;\n        } else {\n          selectedList[index][name] = Number(value);\n        }\n      } else {\n        selectedList[index][name] = value;\n      }\n\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleMultiSelect = data => {\n      let {\n        formFields\n      } = this.state;\n      let list = [];\n\n      for (let key of data) {\n        list.push(key.value);\n      }\n\n      formFields[\"emp_no\"] = list;\n      this.setState({\n        formFields\n      });\n      console.log(formFields, \"oyokkjk\");\n    };\n\n    this.handleDatePick = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        selectedList,\n        appointmentId\n      } = this.state;\n      let time = this.getHoursFromDate(value);\n      let duration = \"\";\n\n      if (selectedList[index][\"add_duration\"] !== \"\") {\n        duration = selectedList[index][\"add_duration\"];\n      } else {\n        duration = \"00:00\";\n      }\n\n      selectedList[index][\"start_time\"] = value ? value : this.timeToDateFormat(selectedList[index][\"start_time\"]);\n\n      if (time) {\n        selectedList[index][\"end_time\"] = this.addTimes(time, duration);\n      }\n\n      if (selectedList.length - 1 > index) {\n        let endTime = \"\";\n\n        if (appointmentId) {\n          endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\n        } else {\n          endTime = selectedList[index][\"end_time\"];\n        }\n\n        selectedList[index + 1][\"start_time\"] = endTime;\n\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n          selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n        }\n      }\n\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.getHoursFromDate = date => {\n      let hour = date.getHours();\n      let minute = date.getMinutes();\n      let hours = hour > 9 ? hour : \"0\" + hour;\n      let minutes = minute > 9 ? minute : \"0\" + minute;\n      return hours + \":\" + minutes;\n    };\n\n    this.stafflistvalidation = appointmentTreatmentList => {\n      if (appointmentTreatmentList.length > 0) {\n        for (let item of appointmentTreatmentList) {\n          if (!item.emp_no || item.emp_no === \"\" || item.emp_no === null) {\n            Toast({\n              type: \"error\",\n              message: \"Please select Staff\"\n            });\n            return false;\n          } else {\n            return true;\n          }\n        }\n      }\n    };\n\n    this.handleUpdate = () => {\n      let {\n        appointmentCustomerDetail,\n        appointmentTreatmentList\n      } = this.props;\n      let {\n        appointmentId,\n        InitAppointmentStatus,\n        dragusername,\n        dragpassword,\n        DeletedList\n      } = this.state;\n      let finalTreatment = [];\n\n      for (let TreatmentList of appointmentTreatmentList) {\n        finalTreatment.push({\n          appt_id: TreatmentList.appt_id,\n          start_time: this.getHoursFromDate(TreatmentList.start_time),\n          end_time: TreatmentList.end_time,\n          add_duration: TreatmentList.add_duration,\n          item_id: TreatmentList.Item_Codeid,\n          item_text: TreatmentList.item_text,\n          emp_id: TreatmentList.emp_no,\n          requesttherapist: TreatmentList.requesttherapist,\n          recur_qty: Number(\"\"),\n          recur_days: \"\",\n          checktype: TreatmentList.checktype,\n          treat_parentcode: TreatmentList.treat_parentcode\n        });\n      }\n\n      console.log(finalTreatment, \"filteredupdateFunctionAppointmentData\");\n      let orig_remark = \"\";\n      let AppStatus = \"\";\n\n      if (appointmentCustomerDetail.remark_setting) {\n        orig_remark = null;\n      } else {\n        orig_remark = appointmentCustomerDetail.new_remark;\n      }\n\n      if (String(InitAppointmentStatus).toUpperCase() === \"ARRIVED\" && String(appointmentCustomerDetail.bookingStatus).toUpperCase() === \"ARRIVED\") {\n        AppStatus = null;\n      } else {\n        AppStatus = appointmentCustomerDetail.bookingStatus;\n      }\n\n      if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\n          try {\n            let data = {\n              appointment: {\n                appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n                appt_status: AppStatus,\n                channel_id: Number(appointmentCustomerDetail.Appt_typeid),\n                ori_remark: orig_remark,\n                edit_remark: appointmentCustomerDetail.edit_remark,\n                source_id: Number(appointmentCustomerDetail.Source_Codeid),\n                Room_Codeid: Number(appointmentCustomerDetail.Room_Codeid),\n                sec_status: appointmentCustomerDetail.sec_status,\n                remark_setting: appointmentCustomerDetail.remark_setting,\n                cart_create: appointmentCustomerDetail.cart_create,\n                username: dragusername,\n                password: dragpassword,\n                cust_StoreCard: appointmentCustomerDetail.cust_StoreCard\n              },\n              treatment: finalTreatment,\n              apptdel_id: DeletedList\n            };\n            this.props.commonPatchApi(`appointmentedit/${appointmentId}/`, data).then(async res => {\n              console.log(res, \"cart check while update booking\");\n\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              } else if (res.status === 201) {\n                let formFields = {\n                  custId: 0,\n                  custName: \"\",\n                  cust_refer: \"\"\n                };\n                formFields[\"custId\"] = appointmentCustomerDetail.customerName;\n                formFields[\"custName\"] = appointmentCustomerDetail.custName;\n                formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\n                await this.props.updateForm(\"basicApptDetail\", formFields);\n                this.props.getCommonApi(`itemcart/Check/?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${appointmentCustomerDetail.customerName}`).then(res => {\n                  history.push(\"/admin/cart\");\n                });\n              }\n            });\n          } catch (e) {\n            console.log(\"updateappointmentcatch\", e);\n          }\n        }\n      } else {\n        this.showErrorMessage();\n      }\n    };\n\n    this.handleRecurringUpdate = () => {\n      let {\n        appointmentCustomerDetail,\n        appointmentTreatmentList\n      } = this.props;\n      let {\n        appointmentId,\n        selectedRec_days,\n        selectedRec_qty,\n        recurringList,\n        recurringSelectAll\n      } = this.state;\n      let finalRecurring = [];\n\n      for (var recurringItem of recurringList) {\n        if (recurringItem.selected) {\n          let value = recurringItem.id;\n          finalRecurring.push(value);\n        }\n      }\n\n      console.log(finalRecurring, \"finalrecurringList\");\n\n      if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\n          let data = {\n            appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n            Room_Codeid: appointmentCustomerDetail.Room_Codeid,\n            appt_status: appointmentCustomerDetail.bookingStatus,\n            sec_status: appointmentCustomerDetail.sec_status,\n            edit_remark: appointmentCustomerDetail.edit_remark,\n            start_time: this.getHoursFromDate(appointmentTreatmentList[0].start_time),\n            end_time: appointmentTreatmentList[0].end_time,\n            item_id: appointmentTreatmentList[0].Item_Codeid,\n            add_duration: appointmentTreatmentList[0].add_duration,\n            emp_id: appointmentTreatmentList[0].emp_no,\n            requesttherapist: appointmentTreatmentList[0].requesttherapist,\n            item_text: appointmentTreatmentList[0].item_text,\n            recur_days: selectedRec_days === appointmentTreatmentList[0].recur_days || appointmentTreatmentList[0].recur_days === \"\" || appointmentTreatmentList[0].recur_days <= 0 ? null : appointmentTreatmentList[0].recur_days,\n            recur_qty: Number(selectedRec_qty) === Number(appointmentTreatmentList[0].recur_qty) || Number(appointmentTreatmentList[0].recur_qty) === \"\" || Number(appointmentTreatmentList[0].recur_qty) <= 0 ? null : Number(appointmentTreatmentList[0].recur_qty),\n            recur_ids: finalRecurring\n          };\n          console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\n\n          if (recurringSelectAll) {\n            this.props.commonPatchApi(`appointmentrecur/${appointmentId}/?type=${`all`} `, data).then(async res => {\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              }\n            });\n          } else {\n            this.props.commonPatchApi(`appointmentrecur/${appointmentId}/`, data).then(async res => {\n              console.log(res, \"type all clicked result\");\n\n              if (res.status === 200) {\n                this.handleCloseDialog();\n                this.handleSaveorUpdate();\n              }\n            });\n          }\n        }\n      } else {\n        this.showErrorMessage();\n      }\n    };\n\n    this.handleSubmit = () => {\n      // this.props.handleConfirmBooking()\n      let {\n        appointmentCustomerDetail,\n        appointmentTreatmentList\n      } = this.props;\n      let {\n        dragpassword,\n        dragusername\n      } = this.state;\n      console.log(appointmentCustomerDetail, \"appointmentcustomerdetailwhenSave\");\n      console.log(appointmentTreatmentList, \"savedappointmentTreatmentListWhenSave\");\n      let finalTreatment = [];\n\n      for (let TreatmentList of appointmentTreatmentList) {\n        finalTreatment.push({\n          appt_id: TreatmentList.appt_id,\n          start_time: this.getHoursFromDate(TreatmentList.start_time),\n          end_time: TreatmentList.end_time,\n          add_duration: TreatmentList.add_duration,\n          Item_Codeid: TreatmentList.Item_Codeid,\n          item_text: TreatmentList.item_text,\n          emp_no: TreatmentList.emp_no,\n          requesttherapist: TreatmentList.requesttherapist,\n          recur_qty: TreatmentList.recur_qty,\n          recur_days: TreatmentList.recur_days,\n          checktype: TreatmentList.checktype,\n          treat_parentcode: TreatmentList.treat_parentcode\n        });\n      }\n\n      if (appointmentCustomerDetail.customerName && appointmentCustomerDetail.bookingStatus) {\n        if (this.stafflistvalidation(appointmentTreatmentList)) {\n          let data = {\n            Appointment: {\n              appt_date: dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\"),\n              Appt_typeid: appointmentCustomerDetail.Appt_typeid,\n              cust_noid: appointmentCustomerDetail.customerName,\n              new_remark: appointmentCustomerDetail.new_remark,\n              // emp_noid: appointmentCustomerDetail.emp_id,\n              Source_Codeid: appointmentCustomerDetail.Source_Codeid,\n              Room_Codeid: appointmentCustomerDetail.Room_Codeid,\n              appt_status: appointmentCustomerDetail.bookingStatus,\n              sec_status: appointmentCustomerDetail.sec_status,\n              ItemSite_Codeid: appointmentCustomerDetail.ItemSite_Codeid,\n              walkin: appointmentCustomerDetail.walkin,\n              username: dragusername,\n              password: dragpassword,\n              cust_StoreCard: appointmentCustomerDetail.cust_StoreCard\n            },\n            Treatment: finalTreatment\n          };\n          this.props.commonCreateApi(`appointment/`, data).then(async res => {\n            if (res.status === 201) {\n              this.sendMessage(appointmentCustomerDetail, appointmentTreatmentList);\n              this.handleCloseDialog();\n              this.handleSaveorUpdate();\n            }\n          });\n        }\n      } else {\n        this.showErrorMessage();\n      }\n    };\n\n    this.sendMessage = async (appointmentCustomerDetail, appointmentTreatmentList) => {\n      let {\n        tokenDetail\n      } = this.props;\n      const API_ENDPOINT = \"https://api.chat-api.com/instance368869/sendMessage?token=2817uztanv2i8kqn\";\n      let payload = {\n        phone: `${appointmentCustomerDetail.custPhone ? appointmentCustomerDetail.custPhone : \"\"}`,\n        body: `Dear Customer,\n       Warmest regards - your Appointment for ${appointmentTreatmentList[0].Item_CodeName ? appointmentTreatmentList[0].Item_CodeName : \"\"} is booked on ${appointmentCustomerDetail.appointmentDate ? dateFormat(new Date(appointmentCustomerDetail.appointmentDate), \"yyyy-mm-dd\") : \"\"} at ${appointmentTreatmentList[0].start_time ? this.getHoursFromDate(appointmentTreatmentList[0].start_time) : \"\"}. \n      Kindly call ${tokenDetail.sitePhone ? tokenDetail.sitePhone : \"\"} if you have any inquiries - ${tokenDetail.branch ? tokenDetail.branch : \"\"}`\n      };\n      const res = await fetch(`${API_ENDPOINT}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return await res.json();\n    };\n\n    this.getDateTime = data => {\n      let date = new Date(data);\n      date = String(date).split(\" \");\n      let date1 = date[2] + \"th \" + date[1] + \", \" + date[3];\n      let time = date[4].split(\":\");\n      let time1 = String(Number(time[0]) > 12 ? Number(time[0]) - 12 : time[0]) + \":\" + time[1] + (Number(time[0]) > 12 ? \"PM\" : \"AM\");\n      return time1 + \", \" + date1;\n    };\n\n    this.handleDialog = () => {\n      this.setState({\n        isOpenModal: false,\n        index: null\n      });\n    };\n\n    this.handleMultipleCustomer = () => {\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleSelectPackage = async data => {\n      debugger;\n      let {\n        selectedList,\n        PackageIndex,\n        appointmentId\n      } = this.state;\n\n      if (PackageIndex === 0 && selectedList[0][\"Item_CodeName\"] === \"\") {\n        selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[0][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[0][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[0][\"end_time\"] = this.addTimes(\n        //     selectedList[0][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[0][\"Item_Codeid\"] = data.id;\n        selectedList[0][\"Item_CodeName\"] = data.item_desc;\n        selectedList[0][\"item_text\"] = null;\n        selectedList[0][\"add_duration\"] = data.add_duration;\n        selectedList[0][\"checktype\"] = \"package\";\n        selectedList[0][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] === \"\") {\n        selectedList[selectedList.length - 1][\"start_time\"] = selectedList[selectedList.length - 1][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[selectedList.length - 1][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\n        //     selectedList[selectedList.length - 1][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\n        selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\n        selectedList[selectedList.length - 1][\"item_text\"] = null;\n        selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\n        selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\n        selectedList[selectedList.length - 1][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] !== \"\" && appointmentId) {\n        selectedList[selectedList.length - 1][\"start_time\"] = selectedList[selectedList.length - 1][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[selectedList.length - 1][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\n        //     selectedList[selectedList.length - 1][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\n        selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\n        selectedList[selectedList.length - 1][\"item_text\"] = null;\n        selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\n        selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\n        selectedList[selectedList.length - 1][\"treat_parentcode\"] = data.treatment_parentcode;\n        await this.setState({\n          selectedList,\n          PackageIndex: PackageIndex + 1\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        var listCount = selectedList.length - 1;\n        let treatment = {}; // if (appointmentId) {\n\n        treatment[\"start_time\"] = this.timeToDateFormat(selectedList[listCount][\"end_time\"]); // } else {\n        //   treatment[\"start_time\"] = selectedList[listCount][\"end_time\"];\n        // }\n\n        treatment[\"Item_Codeid\"] = data.id;\n        treatment[\"Item_CodeName\"] = data.item_desc;\n        treatment[\"item_text\"] = null;\n        treatment[\"add_duration\"] = data.add_duration;\n        treatment[\"checktype\"] = \"package\";\n        treatment[\"treat_parentcode\"] = data.treatment_parentcode;\n        selectedList.push(treatment);\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      }\n\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleSelectTreatment = async data => {\n      let {\n        selectedList,\n        index,\n        appointmentId\n      } = this.state;\n\n      if (index == 0 && selectedList.length == 1) {\n        selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[0][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[0][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[0][\"end_time\"] = this.addTimes(\n        //     selectedList[0][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[0][\"Item_Codeid\"] = data.id;\n        selectedList[0][\"Item_CodeName\"] = data.item_desc;\n        selectedList[0][\"add_duration\"] = data.add_duration;\n        selectedList[0][\"checktype\"] = \"service\";\n        selectedList[0][\"treat_parentcode\"] = null;\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        selectedList[index][\"start_time\"] = selectedList[index][\"start_time\"]; // if (appointmentId) {\n\n        selectedList[index][\"end_time\"] = this.addTimes(this.getHoursFromDate(selectedList[index][\"start_time\"]), data.add_duration ? data.add_duration : \"00:00\"); // } else {\n        //   selectedList[index][\"end_time\"] = this.addTimes(\n        //     selectedList[index][\"start_time\"],\n        //     data.add_duration ? data.add_duration : \"00:00\"\n        //   );\n        // }\n\n        selectedList[index][\"Item_Codeid\"] = data.id;\n        selectedList[index][\"Item_CodeName\"] = data.item_desc;\n        selectedList[index][\"add_duration\"] = data.add_duration;\n        selectedList[index][\"checktype\"] = \"service\";\n        selectedList[index][\"treat_parentcode\"] = null;\n        let endTime = \"\"; //if (appointmentId) {\n\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]); // } else {\n        //   endTime = selectedList[index][\"end_time\"];\n        // }\n\n        if (selectedList.length - 1 > index) {\n          selectedList[index + 1][\"start_time\"] = endTime;\n\n          if (selectedList[index + 1][\"add_duration\"] !== \"\") {\n            selectedList[index + 1][\"end_time\"] = this.addTimes(selectedList[index][\"end_time\"], selectedList[index + 1][\"add_duration\"]);\n          }\n        }\n\n        await this.setState({\n          selectedList\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      }\n\n      this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.timeToMins = time => {\n      var b = time.split(\":\");\n      return b[0] * 60 + +b[1];\n    };\n\n    this.timeFromMins = mins => {\n      function z(n) {\n        return (n < 10 ? \"0\" : \"\") + n;\n      }\n\n      var h = (mins / 60 | 0) % 24;\n      var m = mins % 60;\n      return z(h) + \":\" + z(m);\n    };\n\n    this.addTimes = (t0, t1) => {\n      return this.timeFromMins(this.timeToMins(t0) + this.timeToMins(t1));\n    };\n\n    this.handleAddtreatment = async index => {\n      let {\n        selectedList,\n        formFields,\n        appointmentId\n      } = this.state;\n\n      if (selectedList[index][\"end_time\"]) {\n        let start = \"\"; //if (appointmentId) {\n\n        start = this.timeToDateFormat(selectedList[selectedList.length - 1].end_time); // } else {\n        //   start = selectedList[selectedList.length - 1].end_time;\n        // }\n\n        formFields = {\n          appt_id: null,\n          start_time: start,\n          end_time: \"\",\n          Item_Codeid: this.state.freeTextStockId,\n          add_duration: \"\",\n          emp_no: 0,\n          requesttherapist: false,\n          recur_days: null,\n          recur_qty: null,\n          item_text: null,\n          checktype: \"\",\n          treat_parentcode: null\n        };\n        selectedList.push({\n          appt_id: null,\n          start_time: start,\n          end_time: \"\",\n          Item_Codeid: this.state.freeTextStockId,\n          Item_CodeName: \"\",\n          add_duration: \"\",\n          emp_no: 0,\n          requesttherapist: false,\n          recur_days: null,\n          recur_qty: null,\n          item_text: null,\n          checktype: \"\",\n          treat_parentcode: null\n        });\n        await this.setState({\n          selectedList,\n          formFields\n        });\n        await this.props.updateForm(\"treatmentList\", selectedList);\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"End time shouldn't be empty\"\n        });\n      }\n    };\n\n    this.deleteTreatment = async (index, item) => {\n      let {\n        selectedList,\n        DeletedList\n      } = this.state;\n      selectedList.splice(index, 1);\n      DeletedList.push(item.appt_id);\n      this.setState({\n        selectedList,\n        DeletedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleTreatementmodal = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isTreatementModal: !prevState.isTreatementModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }, index) => {\n      let {\n        treatmentList\n      } = this.state;\n      let {\n        selectedList\n      } = this.state;\n      selectedList[index][\"requesttherapist\"] = value;\n      await this.setState({\n        selectedList\n      });\n      await this.props.updateForm(\"treatmentList\", selectedList);\n    };\n\n    this.handleCloseDialog = async () => {\n      this.props.handleCloseDialog();\n    };\n\n    this.handleSaveorUpdate = async () => {\n      this.props.handleSaveorUpdate();\n    };\n\n    this.handleRecurringlistCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }, item) => {\n      let {\n        recurringList\n      } = this.state;\n      let listCheckbox = recurringList.find(acc => acc.id === item.id);\n\n      if (listCheckbox) {\n        listCheckbox[\"selected\"] = value;\n        await this.setState({ ...this.state.recurringList,\n          listCheckbox\n        });\n      }\n\n      let Checkbox = recurringList.filter(acc => acc.selected === true).length;\n\n      if (Checkbox == this.state.recurringList.length) {\n        await this.setState({\n          recurringSelectAll: true\n        });\n      } else {\n        await this.setState({\n          recurringSelectAll: false\n        });\n      }\n    };\n\n    this.handleRecurringSelectAllCheckbox = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        recurringList\n      } = this.state;\n      await this.setState({\n        recurringSelectAll: value\n      });\n\n      for (let item of recurringList) {\n        item[\"selected\"] = value;\n        await this.setState({ ...this.state.recurringList,\n          item\n        });\n      }\n    };\n\n    this.handleCopyAppointment = async () => {\n      let {\n        appointmentId\n      } = this.state;\n      let formFields = {};\n      formFields[\"appointmentId\"] = appointmentId;\n      await this.props.updateForm(\"AppointmentCopy\", formFields);\n      console.log(this.props.AppointmentCopy, \"after copy click appointment copy id\");\n      Toast({\n        type: \"success\",\n        message: \"Appointment copied\"\n      });\n    };\n\n    this.handlePasteAppointment = async () => {\n      let {\n        AppointmentCopy\n      } = this.props;\n\n      if (AppointmentCopy) {\n        this.setState({\n          PasteAppointmentId: AppointmentCopy.appointmentId,\n          selectedList: []\n        });\n        this.handleRenderApptDetail(AppointmentCopy.appointmentId, true);\n      }\n    };\n\n    this.handleGotoCart = async () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let formFields = {\n        custId: 0,\n        custName: \"\"\n      };\n      formFields[\"custId\"] = appointmentCustomerDetail.customerName;\n      formFields[\"custName\"] = appointmentCustomerDetail.custName;\n      formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\n      await this.props.updateForm(\"basicApptDetail\", formFields);\n      history.push(\"/admin/cart\");\n    };\n\n    this.handleUpcomingAppointment = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isUpcomingAppointmentModal: !prevState.isUpcomingAppointmentModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleTreatmentHistory = () => {\n      let {\n        appointmentCustomerDetail\n      } = this.props;\n      let customerId = appointmentCustomerDetail.customerName;\n\n      if (customerId > 0) {\n        this.setState(prevState => ({\n          isTreatmentHistoryModal: !prevState.isTreatmentHistoryModal\n        }));\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Please select customer\"\n        });\n      }\n    };\n\n    this.handleAccordion = async index => {\n      let {\n        activeRow\n      } = this.state;\n\n      if (index === activeRow) {\n        await this.setState({\n          activeRow: \"\"\n        });\n      } else {\n        await this.setState({\n          activeRow: index\n        });\n      }\n    };\n\n    this.handleLoginPopupCheck = async () => {\n      let {\n        settingData\n      } = this.state;\n\n      if (settingData.appt_pw) {\n        let {\n          isLoginConfirmation\n        } = this.state;\n        isLoginConfirmation = true;\n        await this.setState({\n          isLoginConfirmation\n        });\n      } else {\n        this.handleLoginSubmit();\n      }\n    };\n\n    this.handleLoginConfirmationDialog = async () => {\n      let {\n        isLoginConfirmation\n      } = this.state;\n      isLoginConfirmation = false;\n      await this.setState({\n        isLoginConfirmation,\n        dragusername: \"\",\n        dragpassword: \"\"\n      });\n    };\n\n    this.handleInputChange = async event => {\n      await this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleLoginSubmit = () => {\n      let {\n        appointmentId\n      } = this.state;\n\n      if (appointmentId) {\n        this.handleUpdate();\n      } else {\n        this.handleSubmit();\n      }\n    };\n\n    this.toggle = key => {\n      this.setState(prevState => ({\n        [key]: !prevState[key]\n      }));\n    };\n\n    this.child = React.createRef();\n  }\n\n  componentDidMount() {\n    this.search({});\n    this.handleItemSettings();\n    let {\n      categoryList,\n      staffOption,\n      selectedList,\n      formFields,\n      duration\n    } = this.state;\n    let {\n      basicApptDetail,\n      AppointmentCopy\n    } = this.props;\n    console.log(AppointmentCopy, \"Basic app detail data\");\n\n    if (basicApptDetail.appt_id) {\n      this.setState({\n        appointmentId: basicApptDetail.appt_id\n      });\n      this.handleRenderApptDetail(basicApptDetail.appt_id, false);\n    } else {\n      let {\n        selectedList\n      } = this.state;\n      selectedList[0][\"start_time\"] = basicApptDetail ? this.timeToDateFormat(basicApptDetail.time) : \"\";\n      selectedList[0][\"emp_no\"] = basicApptDetail ? basicApptDetail.staff_id : 0;\n      this.setState({\n        selectedList\n      });\n      this.props.updateForm(\"treatmentList\", selectedList);\n    }\n\n    this.props.getCommonApi(`itemdept/`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          categoryList.push({\n            value: value.id,\n            label: value.itm_desc\n          });\n        }\n\n        this.setState({\n          categoryList\n        });\n      }\n    });\n    this.props.getCommonApi(`appointment/Staffs/?Outlet=${basicApptDetail.branchId}&date=${dateFormat(new Date(basicApptDetail.date))}`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          staffOption.push({\n            value: value.id,\n            label: value.emp_name\n          });\n        }\n\n        this.setState({\n          staffOption\n        });\n      }\n    });\n    this.props.getCommonApi(`treatment/Duration/`).then(key => {\n      let {\n        status,\n        data\n      } = key;\n\n      if (status === 200) {\n        for (let value of data) {\n          duration.push({\n            value: value,\n            label: value\n          });\n        }\n\n        this.setState({\n          duration\n        });\n      }\n    });\n    this.getStaffAvailability();\n    this.getFreetextStockid();\n  }\n\n  componentWillMount() {\n    this.validator = new SimpleReactValidator({\n      element: message => /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-message text-danger validNo fs14\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 9\n        }\n      }, message),\n      autoForceUpdate: this\n    });\n  }\n\n  render() {\n    let {\n      outletOption,\n      staffOption,\n      roomOption,\n      selectedList,\n      siteList,\n      list,\n      formFields,\n      timeDropdown,\n      duration,\n      isOpenModal,\n      treatmentField,\n      treatmentList = [],\n      categoryList,\n      treatmentListHeader,\n      meta,\n      isTreatementModal,\n      appointmentId,\n      selectedRec_days,\n      selectedRec_qty,\n      recurringList,\n      recurringSelectAll,\n      settingData,\n      PasteAppointmentId,\n      isTreatmentHistoryModal,\n      isUpcomingAppointmentModal,\n      AppointmentListHeader,\n      headerDetails,\n      activeRow,\n      isLoginConfirmation,\n      passwordVisible,\n      dragusername,\n      dragpassword\n    } = this.state;\n    let {\n      customerDetail,\n      selectedTreatmentList,\n      customerId,\n      t,\n      tokenDetail\n    } = this.props;\n    let {\n      outlet,\n      staff,\n      rooms\n    } = customerDetail;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 7\n      }\n    }, PasteAppointmentId <= 0 ? /*#__PURE__*/React.createElement(MobileAppointmentForm, {\n      onRef: ref => this.child = ref,\n      selectedCustomer: this.props.selectedCustomer,\n      PasteAppointmentId: PasteAppointmentId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 11\n      }\n    }) : null, PasteAppointmentId > 0 ? /*#__PURE__*/React.createElement(MobileAppointmentForm, {\n      onRef: ref => this.child = ref,\n      selectedCustomer: this.props.selectedCustomer,\n      PasteAppointmentId: PasteAppointmentId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 11\n      }\n    }) : null, selectedList.length == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"d-flex mt-5 align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 11\n      }\n    }, t(\"No Data\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"response-table w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478,\n        columnNumber: 11\n      }\n    }, selectedList.length === selectedList.length - 1 + 1 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      label: \"Add New\",\n      onClick: () => this.handleAddtreatment(selectedList.length - 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 17\n      }\n    })) : null, selectedList.length > 0 ? selectedList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: `mt-3 rounded border ${activeRow === index ? \"border-primary\" : \"\"}`,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1493,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex bg-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"h6 fw-500 col-7 col-md-9 text-left text-dark \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 23\n        }\n      }, index + 1, \". \", item.Item_CodeName ? item.Item_CodeName : \"Please Choose item\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"h6 col-2 col-md-1 text-center fw-700 align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1508,\n          columnNumber: 23\n        }\n      }, selectedList.length > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cursor-pointer fs-15 p-1 border border-light\",\n        onClick: () => this.deleteTreatment(index, item),\n        tooltip: \"delete\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1510,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon-delete\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1515,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"h6 col-2 col-md-1 text-center fw-700 align-items-center\",\n        onClick: () => this.handleAccordion(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 23\n        }\n      }, activeRow === index ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cursor-pointer fs-15 p-1 border border-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1524,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1525,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AiOutlineMinus, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1526,\n          columnNumber: 31\n        }\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cursor-pointer fs-15 p-1 border border-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1530,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(AiOutlinePlus, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1532,\n          columnNumber: 31\n        }\n      }))))), activeRow === index ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex flex-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1540,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1541,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1542,\n          columnNumber: 27\n        }\n      }, t(\"Start Time\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1546,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalTimePicker, {\n        onChange: e => this.handleDatePick(e, index),\n        name: \"start_time\",\n        timeOnly: true,\n        dateFormat: `HH:mm`,\n        showTime: true,\n        selected: false,\n        placeholder: \"\",\n        timeIntervals: 5,\n        value: item.start_time,\n        showIcon: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1562,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1563,\n          columnNumber: 27\n        }\n      }, t(\"End Time\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1566,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        type: \"text\",\n        name: \"end_time\",\n        value: item.end_time,\n        onChange: () => {},\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1567,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1576,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1577,\n          columnNumber: 27\n        }\n      }, t(\"Item\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1581,\n          columnNumber: 27\n        }\n      }, settingData && settingData.service_sel && settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onDoubleClick: () => this.setState({\n          isOpenModal: true,\n          index: index\n        }),\n        onChange: e => this.handleChange(e, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1585,\n          columnNumber: 31\n        }\n      }) : null, settingData && settingData.service_sel && !settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onDoubleClick: () => this.setState({\n          isOpenModal: true,\n          index: index\n        }),\n        onChange: () => {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1602,\n          columnNumber: 31\n        }\n      }) : null, settingData && !settingData.service_sel && settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onClick: () => {},\n        onChange: e => this.handleChange(e, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1619,\n          columnNumber: 31\n        }\n      }) : null, settingData && !settingData.service_sel && !settingData.service_text ? /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"service\" // options={siteList}\n        ,\n        value: item.Item_CodeName,\n        name: \"Item_CodeName\",\n        onClick: () => {},\n        onChange: () => {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1631,\n          columnNumber: 31\n        }\n      }) : null)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1642,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1643,\n          columnNumber: 27\n        }\n      }, t(\"Duration\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1647,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n      , {\n        options: duration,\n        value: item.add_duration,\n        name: \"add_duration\",\n        onChange: e => this.handleChange(e, index),\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1648,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1658,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1659,\n          columnNumber: 27\n        }\n      }, t(\"Staff\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1663,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n      , {\n        options: staffOption,\n        value: item.emp_no,\n        name: \"emp_no\",\n        onChange: e => this.handleChange(e, index),\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1664,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1675,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1676,\n          columnNumber: 27\n        }\n      }, t(\"Req. Therapist\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1679,\n          columnNumber: 27\n        }\n      }, item.requesttherapist ? /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleCheckbox(e, index),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1681,\n          columnNumber: 31\n        }\n      }) : /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleCheckbox(e, index),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1688,\n          columnNumber: 31\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1698,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1699,\n          columnNumber: 27\n        }\n      }, t(\"Recur Days\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1702,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        type: \"number\",\n        name: \"recur_days\",\n        value: item.recur_days ? item.recur_days : \"\",\n        onChange: e => this.handleChange(e, index),\n        disabled: appointmentId ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1703,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-12 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1712,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"text-left text-black common-label-text \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1713,\n          columnNumber: 27\n        }\n      }, t(\"Recur Qty\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1716,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(NormalInput, {\n        type: \"number\",\n        name: \"recur_qty\",\n        value: item.recur_qty ? item.recur_qty : \"\",\n        onChange: e => this.handleChange(e, index),\n        disabled: appointmentId ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1717,\n          columnNumber: 29\n        }\n      })))) : \"\");\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex text-center w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1734,\n        columnNumber: 15\n      }\n    }, t(\"No Data\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appointment-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1980,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1981,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appointment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1982,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appointment-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1983,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treatment-section p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1984,\n        columnNumber: 17\n      }\n    }, recurringList && recurringList.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5 mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1986,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1987,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1988,\n        columnNumber: 25\n      }\n    }, \"Recurring Related Appointments\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row selected selected-header mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1991,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1992,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n      label: `All`,\n      onChange: e => this.handleRecurringSelectAllCheckbox(e),\n      value: recurringSelectAll,\n      name: \"recurringSelectAll\",\n      checked: recurringSelectAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1993,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2003,\n        columnNumber: 25\n      }\n    }, t(\"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2004,\n        columnNumber: 25\n      }\n    }, t(\"Start\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2005,\n        columnNumber: 25\n      }\n    }, t(\"End\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2006,\n        columnNumber: 25\n      }\n    }, t(\"Service\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 header-detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2010,\n        columnNumber: 25\n      }\n    }, t(\"Duration\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2013,\n        columnNumber: 25\n      }\n    }, t(\"Treatment staff\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-1 p-0 d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2014,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: req_therapist,\n      alt: \"\",\n      height: \"25\",\n      width: \"25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2015,\n        columnNumber: 27\n      }\n    }))), recurringList && recurringList.length > 0 ? recurringList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row selected  mb-4\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2026,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2027,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleRecurringlistCheckbox(e, item),\n        value: item.selected,\n        name: \"recurringItem\",\n        checked: item.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2028,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2037,\n          columnNumber: 31\n        }\n      }, item.date), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2038,\n          columnNumber: 31\n        }\n      }, item.start_time), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2039,\n          columnNumber: 31\n        }\n      }, item.end_time), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-3 p-0 header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2040,\n          columnNumber: 31\n        }\n      }, item.item_name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 header-detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2044,\n          columnNumber: 31\n        }\n      }, item.add_duration), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2 p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2047,\n          columnNumber: 31\n        }\n      }, item.emp_name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1 p-0 d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2048,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n        onChange: e => this.handleRecurringlistCheckbox(e, item),\n        value: item.requesttherapist,\n        name: \"requesttherapist\",\n        checked: item.requesttherapist,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2049,\n          columnNumber: 33\n        }\n      })));\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 text-center w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2063,\n        columnNumber: 25\n      }\n    }, t(\"No Data\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2067,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2068,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2069,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2070,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"treatment\",\n      resetbg: true,\n      className: \"col-12\",\n      label: \"Cancel\",\n      onClick: this.handleCloseDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2071,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2079,\n        columnNumber: 29\n      }\n    }, appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"submit-btn\",\n      mainbg: false,\n      className: \"col-12 submit-btn ml-4\",\n      label: \"Update Recurring\",\n      onClick: this.handleRecurringUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2081,\n        columnNumber: 33\n      }\n    }) : null))))) : null)))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"multiple-appointment select-category\",\n      style: {\n        minWidth: \"60%\"\n      },\n      modal: isOpenModal,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2106,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"customer-list container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 pl-0 mb-3 fw-500 py-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2113,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2114,\n        columnNumber: 17\n      }\n    }, t(\"Select Treatment\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2118,\n        columnNumber: 19\n      }\n    }, t(\"Category\"), /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n    , {\n      options: categoryList,\n      value: treatmentField.category,\n      name: \"category\",\n      onChange: this.handleChangeTreatment,\n      className: \"customer-name p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2120,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2129,\n        columnNumber: 19\n      }\n    }, t(\"Service\"), /*#__PURE__*/React.createElement(\"input\", {\n      // placeholder=\"Enter here\"\n      // options={siteList}\n      value: treatmentField.treatment,\n      name: \"treatment\",\n      onChange: this.handleSearch,\n      className: \"search px-3 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2131,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container table-responsive mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableWrapper, {\n      headerDetails: treatmentListHeader,\n      queryHandler: this.handlePagination,\n      pageMeta: meta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2144,\n        columnNumber: 17\n      }\n    }, treatmentList.length > 0 ? treatmentList.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"w-100\",\n        onClick: () => this.handleSelectTreatment(item),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2152,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2157,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2159,\n          columnNumber: 29\n        }\n      }, item.Item_Class)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2161,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2163,\n          columnNumber: 29\n        }\n      }, item.item_desc)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2165,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2167,\n          columnNumber: 29\n        }\n      }, item.add_duration)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2169,\n          columnNumber: 27\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2171,\n          columnNumber: 29\n        }\n      }, item.item_price)));\n    }) : /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2178,\n        columnNumber: 23\n      }\n    }, t(\"No data Available\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row text-center justify-center w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2186,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"col-3\",\n      resetbg: true,\n      className: \"col-12 ml-4\",\n      label: \"Cancel\",\n      onClick: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2187,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"d-flex justify-content-center\",\n      style: {\n        minWidth: \"20%\"\n      },\n      modal: isLoginConfirmation,\n      handleModal: () => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2197,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleLoginConfirmationDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2203,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2210,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2212,\n        columnNumber: 19\n      }\n    }, t(\"Please enter your login credential\"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 form-group mb-3 pb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2215,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      placeholder: \"Username\",\n      value: dragusername,\n      name: \"dragusername\",\n      autocomplete: \"off\",\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2216,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 form-group mb-3 pb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2225,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2226,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      type: passwordVisible ? \"text\" : \"password\",\n      placeholder: \"Password\",\n      value: dragpassword,\n      name: \"dragpassword\",\n      autocomplete: \"off\",\n      onChange: e => this.handleInputChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2227,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-addon right fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2235,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.toggle(\"passwordVisible\"),\n      className: `icon-${passwordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2236,\n        columnNumber: 23\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-0 p-0 d-flex justify-content-center col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2245,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      onClick: this.handleLoginSubmit,\n      label: \"PROCEED\",\n      className: \"col-12 submit-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2246,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2255,\n        columnNumber: 11\n      }\n    }, isTreatementModal ? /*#__PURE__*/React.createElement(TreatmentPackage, {\n      isTreatementModal: isTreatementModal,\n      handleTreatementmodal: this.handleTreatementmodal,\n      handleSelectPackage: this.handleSelectPackage,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2257,\n        columnNumber: 15\n      }\n    }) : \"\"), console.log(this.props.appointmentCustomerDetail, \"appointmentcustomerdetail\"), isTreatmentHistoryModal ? /*#__PURE__*/React.createElement(TreatmentHistory, {\n      isTreatmentHistoryModal: isTreatmentHistoryModal,\n      handleTreatmentHistory: this.handleTreatmentHistory,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2281,\n        columnNumber: 13\n      }\n    }) : \"\", isUpcomingAppointmentModal ? /*#__PURE__*/React.createElement(UpcomingAppointment, {\n      isUpcomingAppointmentModal: isUpcomingAppointmentModal,\n      handleUpcomingAppointment: this.handleUpcomingAppointment,\n      customerNumber: this.props.appointmentCustomerDetail.customerName,\n      custName: this.props.appointmentCustomerDetail.custName,\n      custPhone: this.props.appointmentCustomerDetail.custPhone,\n      cust_refer: this.props.appointmentCustomerDetail.cust_refer,\n      CustomerRemark: this.props.appointmentCustomerDetail.cust_remark,\n      CustomerRemarkFlag: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2295,\n        columnNumber: 13\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2310,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2311,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Package\",\n      onClick: this.handleTreatementmodal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2312,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Upcoming\",\n      onClick: this.handleUpcomingAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2319,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"History\",\n      onClick: this.handleTreatmentHistory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2326,\n        columnNumber: 13\n      }\n    }), !appointmentId && this.props.AppointmentCopy && this.props.AppointmentCopy.appointmentId > 0 ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Paste Appt.\",\n      onClick: this.handlePasteAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2359,\n        columnNumber: 15\n      }\n    }) : null, appointmentId ? /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      mainbg: true,\n      className: \"col-12\",\n      label: \"Copy Appt.\",\n      onClick: this.handleCopyAppointment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2368,\n        columnNumber: 15\n      }\n    }) : null, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      resetbg: true,\n      className: \"col-12\",\n      label: \"Cancel\",\n      onClick: this.handleCloseDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2376,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: `p-2`,\n      submitBtn: true,\n      label: appointmentId ? \"Update\" : \"Confirm\" // onClick={e => {\n      //   e.target.setAttribute(\"disabled\", true);\n      //   this.handleUpdate();\n      // }}\n      ,\n      onClick: _.debounce(async () => {\n        await this.handleLoginPopupCheck();\n      }, 500),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2384,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customerDetail: state.appointment.customerDetail,\n  appointmentDetail: state.appointment.appointmentDetail,\n  selectedTreatmentList: state.appointment.selectedTreatmentList,\n  basicApptDetail: state.appointment.basicApptDetail,\n  appointmentCustomerDetail: state.appointment.appointmentCustomerDetail,\n  appointmentTreatmentList: state.appointment.appointmentTreatmentList,\n  AppointmentCopy: state.appointment.AppointmentCopy,\n  tokenDetail: state.authStore.tokenDetails\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    updateForm,\n    getSelectedTreatmentList,\n    getCommonApi,\n    commonCreateApi,\n    commonPatchApi,\n    commonDeleteApi\n  }, dispatch);\n};\n\nexport const MobileSelectTreatment = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(MobileSelectTreatmentClass));","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/component/Admin/mobileAppointment/MobileCreateAppointment/MobileSelectTreatment.js"],"names":["React","Component","NormalSelect","NormalButton","NormalModal","NormalInput","NormalDateTime","NormalCheckbox","NormalTimePicker","updateForm","getSelectedTreatmentList","connect","bindActionCreators","SimpleReactValidator","closeIcon","req_therapist","getCommonApi","commonCreateApi","commonPatchApi","commonDeleteApi","dateFormat","_","TableWrapper","TreatmentPackage","Toast","MobileAppointmentForm","history","TreatmentHistory","UpcomingAppointment","withTranslation","AiOutlinePlus","AiOutlineMinus","getTime","date","now","Date","hour","getHours","minute","getMinutes","second","getSeconds","ap","timeString","MobileSelectTreatmentClass","constructor","props","state","treatmentDetail","formFields","appt_id","start_time","end_time","Item_Codeid","add_duration","emp_no","requesttherapist","Item_CodeName","edit_remark","recur_days","recur_qty","item_text","checktype","treat_parentcode","selectedList","outletOption","staffOption","roomOption","list","isOpenModal","categoryList","treatmentList","siteList","treatmentField","category","treatment","timeDropdown","duration","index","search","selectTreatmentId","treatmentListHeader","label","className","divClass","meta","isTreatementModal","appointmentId","PackageIndex","selectedRec_days","selectedRec_qty","recurringList","recurringSelectedItems","recurringSelectAll","settingData","PasteAppointmentId","InitAppointmentStatus","isTreatmentHistoryModal","isUpcomingAppointmentModal","freeTextStockId","headerDetails","width","activeRow","isLoginConfirmation","passwordVisible","dragusername","dragpassword","DeletedList","showErrorMessage","child","onFocus","getFreetextStockid","async","page","limit","then","res","console","log","data","status","stock_id","setState","type","message","timeToDateFormat","TimeValue","time","String","split","newTime","setHours","handleRenderApptDetail","copy","key","appointment","appt_status","treat","startTime","endTime","apptid","push","emp_id","item_id","item_name","handleItemSettings","getStaffAvailability","handleSearch","event","persist","target","value","debouncedFn","debounce","searchString","dataList","pagination","handlePagination","handleChangeTreatment","name","handleChange","addTimes","getHoursFromDate","length","Number","handleMultiSelect","handleDatePick","hours","minutes","stafflistvalidation","appointmentTreatmentList","item","handleUpdate","appointmentCustomerDetail","finalTreatment","TreatmentList","orig_remark","AppStatus","remark_setting","new_remark","toUpperCase","bookingStatus","customerName","appt_date","appointmentDate","channel_id","Appt_typeid","ori_remark","source_id","Source_Codeid","Room_Codeid","sec_status","cart_create","username","password","cust_StoreCard","apptdel_id","handleCloseDialog","handleSaveorUpdate","custId","custName","cust_refer","e","handleRecurringUpdate","finalRecurring","recurringItem","selected","id","recur_ids","handleSubmit","Appointment","cust_noid","ItemSite_Codeid","walkin","Treatment","sendMessage","tokenDetail","API_ENDPOINT","payload","phone","custPhone","body","sitePhone","branch","fetch","method","headers","JSON","stringify","json","getDateTime","date1","time1","handleDialog","handleMultipleCustomer","handleSelectPackage","item_desc","treatment_parentcode","listCount","handleSelectTreatment","timeToMins","b","timeFromMins","mins","z","n","h","m","t0","t1","handleAddtreatment","start","deleteTreatment","splice","handleTreatementmodal","customerId","prevState","handleCheckbox","handleRecurringlistCheckbox","listCheckbox","find","acc","Checkbox","filter","handleRecurringSelectAllCheckbox","handleCopyAppointment","AppointmentCopy","handlePasteAppointment","handleGotoCart","handleUpcomingAppointment","handleTreatmentHistory","handleAccordion","handleLoginPopupCheck","appt_pw","handleLoginSubmit","handleLoginConfirmationDialog","handleInputChange","toggle","createRef","componentDidMount","basicApptDetail","staff_id","itm_desc","branchId","emp_name","componentWillMount","validator","element","autoForceUpdate","render","AppointmentListHeader","customerDetail","selectedTreatmentList","t","outlet","staff","rooms","ref","selectedCustomer","map","service_sel","service_text","minWidth","Item_Class","item_price","cust_remark","mapStateToProps","appointmentDetail","authStore","tokenDetails","mapDispatchToProps","dispatch","MobileSelectTreatment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalSelect,\r\n  NormalButton,\r\n  NormalModal,\r\n  NormalInput,\r\n  NormalDateTime,\r\n  NormalCheckbox,\r\n  NormalTimePicker,\r\n} from \"component/common\";\r\nimport \"./style.scss\";\r\nimport {\r\n  updateForm,\r\n  getSelectedTreatmentList,\r\n} from \"redux/actions/appointment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport req_therapist from \"assets/images/app-icons/1.png\";\r\nimport {\r\n  getCommonApi,\r\n  commonCreateApi,\r\n  commonPatchApi,\r\n  commonDeleteApi,\r\n} from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport _ from \"lodash\";\r\nimport { TableWrapper } from \"component/common\";\r\nimport { TreatmentPackage } from \"./modal/index\";\r\nimport { Toast } from \"service/toast\";\r\nimport { MobileAppointmentForm } from \"./MobileAppointmentForm\";\r\nimport { history } from \"helpers\";\r\nimport { TreatmentHistory } from \"component/Admin/NewAppointment/NewListAppointment/modal/TreatmentHistory\";\r\nimport { UpcomingAppointment } from \"component/Admin/NewAppointment/NewListAppointment/modal/UpcomingAppointment\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { AiOutlinePlus, AiOutlineMinus } from \"react-icons/ai\";\r\n\r\nconst getTime = date => {\r\n  debugger;\r\n  var now = new Date(date);\r\n  var hour = now.getHours();\r\n  var minute = now.getMinutes();\r\n  var second = now.getSeconds();\r\n  var ap = \"AM\";\r\n  if (hour > 11) {\r\n    ap = \"PM\";\r\n  }\r\n  if (hour > 12) {\r\n    hour = hour - 12;\r\n  }\r\n  if (hour == 0) {\r\n    hour = 12;\r\n  }\r\n  if (hour < 10) {\r\n    hour = \"0\" + hour;\r\n  }\r\n  if (minute < 10) {\r\n    minute = \"0\" + minute;\r\n  }\r\n  if (second < 10) {\r\n    second = \"0\" + second;\r\n  }\r\n  var timeString = hour + \":\" + minute + \" \" + ap;\r\n  return timeString;\r\n};\r\n\r\nexport class MobileSelectTreatmentClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.child = React.createRef();\r\n  }\r\n  state = {\r\n    treatmentDetail: [],\r\n    formFields: {\r\n      appt_id: \"\",\r\n      start_time: \"\",\r\n      end_time: \"\",\r\n      Item_Codeid: null,\r\n      add_duration: \"\",\r\n      emp_no: 0,\r\n      requesttherapist: false,\r\n      Item_CodeName: \"\",\r\n      edit_remark: \"\",\r\n      recur_days: null,\r\n      recur_qty: null,\r\n      item_text: null,\r\n      checktype: \"\",\r\n      treat_parentcode: null,\r\n    },\r\n    selectedList: [\r\n      {\r\n        appt_id: \"\",\r\n        start_time: \"\",\r\n        end_time: \"\",\r\n        Item_Codeid: null,\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        Item_CodeName: \"\",\r\n        edit_remark: \"\",\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      },\r\n    ],\r\n    outletOption: [],\r\n    staffOption: [],\r\n    roomOption: [],\r\n    list: [],\r\n    isOpenModal: false,\r\n    categoryList: [],\r\n    treatmentList: [],\r\n    siteList: [],\r\n    treatmentField: {\r\n      category: \"\",\r\n      treatment: \"\",\r\n    },\r\n    timeDropdown: [],\r\n    duration: [],\r\n    index: null,\r\n    search: \"\",\r\n    selectTreatmentId: \"\",\r\n    treatmentListHeader: [\r\n      { label: \"Category\", className: \"w-50\" },\r\n      { label: \"Service\", className: \"w-75\" },\r\n      { label: \"Duration\", className: \"w-25\" },\r\n      {\r\n        label: \"price\",\r\n        className: \"w-50\",\r\n        divClass: \"justify-content-end text-right\",\r\n      },\r\n    ],\r\n    meta: {},\r\n    isTreatementModal: false,\r\n    appointmentId: null,\r\n    PackageIndex: 0,\r\n    selectedRec_days: null,\r\n    selectedRec_qty: null,\r\n    recurringList: [],\r\n    recurringSelectedItems: [],\r\n    recurringSelectAll: false,\r\n    settingData: {},\r\n    PasteAppointmentId: 0,\r\n    InitAppointmentStatus: \"\",\r\n    isTreatmentHistoryModal: false,\r\n    isUpcomingAppointmentModal: false,\r\n    freeTextStockId: \"\",\r\n    headerDetails: [\r\n      { label: \"Start\", width: \"100px\" },\r\n      { label: \"End\" },\r\n      { label: \"Service\", width: \"260px\" },\r\n      { label: \"Duration\" },\r\n      { label: \"Treatment Staff\" },\r\n      { label: \"therapist\", width: \"35px\" },\r\n      { label: \"Recur Days\", width: \"100px\" },\r\n      { label: \"Recur Qty\", width: \"100px\" },\r\n      { label: \"Action\" },\r\n    ],\r\n    activeRow: 0,\r\n    isLoginConfirmation: false,\r\n    passwordVisible: false,\r\n    dragusername: \"\",\r\n    dragpassword: \"\",\r\n    DeletedList: [],\r\n  };\r\n  showErrorMessage = () => {\r\n    this.child.onFocus();\r\n  };\r\n  componentDidMount() {\r\n    this.search({});\r\n    this.handleItemSettings();\r\n    let { categoryList, staffOption, selectedList, formFields, duration } =\r\n      this.state;\r\n\r\n    let { basicApptDetail, AppointmentCopy } = this.props;\r\n    console.log(AppointmentCopy, \"Basic app detail data\");\r\n\r\n    if (basicApptDetail.appt_id) {\r\n      this.setState({ appointmentId: basicApptDetail.appt_id });\r\n      this.handleRenderApptDetail(basicApptDetail.appt_id, false);\r\n    } else {\r\n      let { selectedList } = this.state;\r\n      selectedList[0][\"start_time\"] = basicApptDetail\r\n        ? this.timeToDateFormat(basicApptDetail.time)\r\n        : \"\";\r\n      selectedList[0][\"emp_no\"] = basicApptDetail\r\n        ? basicApptDetail.staff_id\r\n        : 0;\r\n      this.setState({\r\n        selectedList,\r\n      });\r\n      this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n    this.props.getCommonApi(`itemdept/`).then(key => {\r\n      let { status, data } = key;\r\n      if (status === 200) {\r\n        for (let value of data) {\r\n          categoryList.push({ value: value.id, label: value.itm_desc });\r\n        }\r\n        this.setState({ categoryList });\r\n      }\r\n    });\r\n    this.props\r\n      .getCommonApi(\r\n        `appointment/Staffs/?Outlet=${\r\n          basicApptDetail.branchId\r\n        }&date=${dateFormat(new Date(basicApptDetail.date))}`\r\n      )\r\n      .then(key => {\r\n        let { status, data } = key;\r\n        if (status === 200) {\r\n          for (let value of data) {\r\n            staffOption.push({ value: value.id, label: value.emp_name });\r\n          }\r\n          this.setState({ staffOption });\r\n        }\r\n      });\r\n    this.props.getCommonApi(`treatment/Duration/`).then(key => {\r\n      let { status, data } = key;\r\n      if (status === 200) {\r\n        for (let value of data) {\r\n          duration.push({ value: value, label: value });\r\n        }\r\n        this.setState({ duration });\r\n      }\r\n    });\r\n    this.getStaffAvailability();\r\n    this.getFreetextStockid();\r\n  }\r\n  getFreetextStockid = async => {\r\n    let { treatmentField, search, selectTreatmentId } = this.state;\r\n    let page = 1,\r\n      limit = 10;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"stocklistfreetextresponse\");\r\n        let { data, status } = res;\r\n        if (status === 200) {\r\n          if (data && data.stock_id && data.stock_id !== \" \") {\r\n            this.setState({ freeTextStockId: data.stock_id });\r\n          } else {\r\n            Toast({\r\n              type: \"error\",\r\n              message: \"Stock Id not found for free text item\",\r\n            });\r\n          }\r\n        }\r\n      });\r\n  };\r\n  timeToDateFormat = TimeValue => {\r\n    let time = String(TimeValue).split(\":\");\r\n    let newTime = new Date(new Date().setHours(time[0], time[1], 0, 0));\r\n    return newTime;\r\n  };\r\n  handleRenderApptDetail = async (appt_id, copy) => {\r\n    let { selectedList, InitAppointmentStatus } = this.state;\r\n\r\n    this.props.getCommonApi(`appointmentedit/${appt_id}/`).then(async key => {\r\n      let { status, data } = key;\r\n      console.log(data, \"renderappointmentdetail\");\r\n      if (status === 200) {\r\n        if (data.treatment) {\r\n          InitAppointmentStatus = data.appointment.appt_status;\r\n          selectedList = [];\r\n          await this.setState({\r\n            selectedList: selectedList,\r\n            InitAppointmentStatus,\r\n          });\r\n          this.props.updateForm(\"treatmentList\", selectedList);\r\n          for (let treat of data.treatment) {\r\n            let startTime = \"\";\r\n            let endTime = \"\";\r\n            let apptid = null;\r\n            if (copy) {\r\n              startTime = this.timeToDateFormat(treat.start_time);\r\n              endTime = treat.end_time;\r\n              apptid = null;\r\n            } else {\r\n              startTime = this.timeToDateFormat(treat.start_time);\r\n              endTime = treat.end_time;\r\n              apptid = treat.appt_id;\r\n            }\r\n            selectedList.push({\r\n              start_time: startTime,\r\n              end_time: endTime,\r\n              emp_no: treat.emp_id,\r\n              appt_id: apptid,\r\n              Item_Codeid: treat.item_id,\r\n              Item_CodeName: treat.item_name,\r\n              add_duration: treat.add_duration,\r\n              requesttherapist: treat.requesttherapist,\r\n              recur_days: treat.recur_days,\r\n              recur_qty: treat.recur_qty,\r\n              item_text: treat.item_name,\r\n              checktype: treat.checktype,\r\n              treat_parentcode: treat.treat_parentcode,\r\n            });\r\n            this.setState({\r\n              selectedList,\r\n            });\r\n          }\r\n          this.props.updateForm(\"treatmentList\", selectedList);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  handleItemSettings = () => {\r\n    let { settingData } = this.state;\r\n    this.props.getCommonApi(`userlist/`).then(key => {\r\n      let { status, data } = key;\r\n      console.log(key, \"settingsData appointmentCreate\");\r\n      if (status === 200) {\r\n        settingData = data;\r\n        this.setState({ settingData });\r\n      }\r\n    });\r\n  };\r\n  componentWillMount() {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  }\r\n\r\n  getStaffAvailability = () => {\r\n    this.props\r\n      .getCommonApi(\r\n        `staffsavailable/?Appt_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}`\r\n      )\r\n      .then(key => {\r\n        let { status, data } = key;\r\n        if (status === 200) {\r\n          // for (let value of data) {\r\n          //     staffList.push({ value: value.id, label: value.emp_name })\r\n          // }\r\n          this.setState({ list: data });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleSearch = event => {\r\n    event.persist();\r\n    console.log(event.target.value, event.target, event, \"dfhdfjghkjfghj\");\r\n    let { treatmentField } = this.state;\r\n    treatmentField[\"treatment\"] = event.target.value;\r\n    this.setState({ search: event.target.value, treatmentField });\r\n    if (!this.debouncedFn) {\r\n      this.debouncedFn = _.debounce(() => {\r\n        let searchString = event.target.value;\r\n        let data = { search: searchString };\r\n        // this.queryHandler(data)\r\n        this.search(data);\r\n      }, 500);\r\n    }\r\n    this.debouncedFn();\r\n  };\r\n\r\n  search = data => {\r\n    let { page = 1, limit = 10, search = \"\" } = data;\r\n    let { selectTreatmentId } = this.state;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"treatmentList treatment_parentcode\");\r\n        if (res.status === 200) {\r\n          this.setState({\r\n            treatmentList: res.data.dataList,\r\n            meta: res.data.meta.pagination,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handlePagination = page => {\r\n    this.search(page);\r\n  };\r\n\r\n  handleChangeTreatment = async ({ target: { value, name } }) => {\r\n    let { treatmentField, search, selectTreatmentId } = this.state;\r\n    console.log(\"uihwkjrwkej\", name, value);\r\n    treatmentField[name] = value;\r\n    if (name === \"category\") {\r\n      selectTreatmentId = value;\r\n    } else if (name === \"treatment\") {\r\n      search = value;\r\n    }\r\n    await this.setState({\r\n      treatmentField,\r\n      selectTreatmentId,\r\n      search,\r\n    });\r\n\r\n    let page = 1,\r\n      limit = 10;\r\n    this.props\r\n      .getCommonApi(\r\n        `stocklist/?Item_Deptid=${selectTreatmentId}&search=${search}&page=${page}&limit=${limit}`\r\n      )\r\n      .then(res => {\r\n        console.log(res, \"stocklis\");\r\n        if (res.status === 200) {\r\n          this.setState({\r\n            treatmentList: res.data.dataList,\r\n            meta: res.data.meta.pagination,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleChange = async ({ target: { value, name } }, index) => {\r\n    let { selectedList, appointmentId, freeTextStockId } = this.state;\r\n\r\n    if (name === \"add_duration\") {\r\n      //if (appointmentId) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[index][\"start_time\"]),\r\n        value ? value : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[index][\"end_time\"] = this.addTimes(\r\n      //     selectedList[index][\"start_time\"],\r\n      //     value ? value : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[index][\"add_duration\"] = value;\r\n      if (selectedList.length - 1 > index) {\r\n        let endTime = \"\";\r\n        //if (appointmentId) {\r\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n        // } else {\r\n        //   endTime = selectedList[index][\"end_time\"];\r\n        // }\r\n        selectedList[index + 1][\"start_time\"] = endTime;\r\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n          selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n            selectedList[index][\"end_time\"],\r\n            selectedList[index + 1][\"add_duration\"]\r\n          );\r\n        }\r\n      }\r\n    } else if (name === \"Item_CodeName\") {\r\n      selectedList[index][\"Item_Codeid\"] = freeTextStockId;\r\n      selectedList[index][\"Item_CodeName\"] = value;\r\n      selectedList[index][\"item_text\"] = value;\r\n      selectedList[index][\"checktype\"] = \"freetext\";\r\n      selectedList[index][\"treat_parentcode\"] = null;\r\n    } else if (name === \"recur_days\" || name === \"recur_qty\") {\r\n      if (value <= 0 || value === \"\") {\r\n        selectedList[index][name] = null;\r\n      } else {\r\n        selectedList[index][name] = Number(value);\r\n      }\r\n    } else {\r\n      selectedList[index][name] = value;\r\n    }\r\n\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleMultiSelect = data => {\r\n    let { formFields } = this.state;\r\n    let list = [];\r\n    for (let key of data) {\r\n      list.push(key.value);\r\n    }\r\n    formFields[\"emp_no\"] = list;\r\n    this.setState({ formFields });\r\n    console.log(formFields, \"oyokkjk\");\r\n  };\r\n\r\n  // handleDatePick = async (name, value) => {\r\n  //   debugger;\r\n  //   let { formFields, selectedList } = this.state;\r\n  //   let time = this.getHoursFromDate(value);\r\n  //   formFields[\"start_time\"] = time;\r\n  //   selectedList[0][\"start_time\"] = time ? time : formFields[\"start_time\"];\r\n  //   if (time) {\r\n  //     formFields[\"end_time\"] = this.addTimes(\r\n  //       formFields[\"start_time\"],\r\n  //       formFields[\"add_duration\"]\r\n  //     );\r\n  //     selectedList[0][\"end_time\"] = this.addTimes(\r\n  //       selectedList[0][\"start_time\"],\r\n  //       formFields[\"add_duration\"]\r\n  //     );\r\n  //   }\r\n  //   await this.setState({\r\n  //     formFields,\r\n  //     selectedList,\r\n  //   });\r\n  //   await this.props.updateForm(\"treatmentList\", selectedList);\r\n  // };\r\n\r\n  handleDatePick = async ({ target: { value, name } }, index) => {\r\n    let { selectedList, appointmentId } = this.state;\r\n    let time = this.getHoursFromDate(value);\r\n    let duration = \"\";\r\n    if (selectedList[index][\"add_duration\"] !== \"\") {\r\n      duration = selectedList[index][\"add_duration\"];\r\n    } else {\r\n      duration = \"00:00\";\r\n    }\r\n    selectedList[index][\"start_time\"] = value\r\n      ? value\r\n      : this.timeToDateFormat(selectedList[index][\"start_time\"]);\r\n    if (time) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(time, duration);\r\n    }\r\n    if (selectedList.length - 1 > index) {\r\n      let endTime = \"\";\r\n      if (appointmentId) {\r\n        endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n      } else {\r\n        endTime = selectedList[index][\"end_time\"];\r\n      }\r\n      selectedList[index + 1][\"start_time\"] = endTime;\r\n      if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n        selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n          selectedList[index][\"end_time\"],\r\n          selectedList[index + 1][\"add_duration\"]\r\n        );\r\n      }\r\n    }\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  getHoursFromDate = date => {\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let hours = hour > 9 ? hour : \"0\" + hour;\r\n    let minutes = minute > 9 ? minute : \"0\" + minute;\r\n    return hours + \":\" + minutes;\r\n  };\r\n\r\n  stafflistvalidation = appointmentTreatmentList => {\r\n    if (appointmentTreatmentList.length > 0) {\r\n      for (let item of appointmentTreatmentList) {\r\n        if (!item.emp_no || item.emp_no === \"\" || item.emp_no === null) {\r\n          Toast({ type: \"error\", message: \"Please select Staff\" });\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  handleUpdate = () => {\r\n    let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n    let {\r\n      appointmentId,\r\n      InitAppointmentStatus,\r\n      dragusername,\r\n      dragpassword,\r\n      DeletedList,\r\n    } = this.state;\r\n    let finalTreatment = [];\r\n    for (let TreatmentList of appointmentTreatmentList) {\r\n      finalTreatment.push({\r\n        appt_id: TreatmentList.appt_id,\r\n        start_time: this.getHoursFromDate(TreatmentList.start_time),\r\n        end_time: TreatmentList.end_time,\r\n        add_duration: TreatmentList.add_duration,\r\n        item_id: TreatmentList.Item_Codeid,\r\n        item_text: TreatmentList.item_text,\r\n        emp_id: TreatmentList.emp_no,\r\n        requesttherapist: TreatmentList.requesttherapist,\r\n        recur_qty: Number(\"\"),\r\n        recur_days: \"\",\r\n        checktype: TreatmentList.checktype,\r\n        treat_parentcode: TreatmentList.treat_parentcode,\r\n      });\r\n    }\r\n    console.log(finalTreatment, \"filteredupdateFunctionAppointmentData\");\r\n    let orig_remark = \"\";\r\n    let AppStatus = \"\";\r\n    if (appointmentCustomerDetail.remark_setting) {\r\n      orig_remark = null;\r\n    } else {\r\n      orig_remark = appointmentCustomerDetail.new_remark;\r\n    }\r\n    if (\r\n      String(InitAppointmentStatus).toUpperCase() === \"ARRIVED\" &&\r\n      String(appointmentCustomerDetail.bookingStatus).toUpperCase() ===\r\n        \"ARRIVED\"\r\n    ) {\r\n      AppStatus = null;\r\n    } else {\r\n      AppStatus = appointmentCustomerDetail.bookingStatus;\r\n    }\r\n    if (\r\n      appointmentCustomerDetail.customerName &&\r\n      appointmentCustomerDetail.bookingStatus\r\n    ) {\r\n      if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n        try {\r\n          let data = {\r\n            appointment: {\r\n              appt_date: dateFormat(\r\n                new Date(appointmentCustomerDetail.appointmentDate),\r\n                \"yyyy-mm-dd\"\r\n              ),\r\n              appt_status: AppStatus,\r\n              channel_id: Number(appointmentCustomerDetail.Appt_typeid),\r\n              ori_remark: orig_remark,\r\n              edit_remark: appointmentCustomerDetail.edit_remark,\r\n              source_id: Number(appointmentCustomerDetail.Source_Codeid),\r\n              Room_Codeid: Number(appointmentCustomerDetail.Room_Codeid),\r\n              sec_status: appointmentCustomerDetail.sec_status,\r\n              remark_setting: appointmentCustomerDetail.remark_setting,\r\n              cart_create: appointmentCustomerDetail.cart_create,\r\n              username: dragusername,\r\n              password: dragpassword,\r\n              cust_StoreCard: appointmentCustomerDetail.cust_StoreCard,\r\n            },\r\n            treatment: finalTreatment,\r\n            apptdel_id: DeletedList,\r\n          };\r\n\r\n          this.props\r\n            .commonPatchApi(`appointmentedit/${appointmentId}/`, data)\r\n            .then(async res => {\r\n              console.log(res, \"cart check while update booking\");\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n              } else if (res.status === 201) {\r\n                let formFields = { custId: 0, custName: \"\", cust_refer: \"\" };\r\n                formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n                formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n                formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\r\n                await this.props.updateForm(\"basicApptDetail\", formFields);\r\n                this.props\r\n                  .getCommonApi(\r\n                    `itemcart/Check/?cart_date=${dateFormat(\r\n                      new Date(),\r\n                      \"yyyy-mm-dd\"\r\n                    )}&cust_noid=${appointmentCustomerDetail.customerName}`\r\n                  )\r\n                  .then(res => {\r\n                    history.push(\"/admin/cart\");\r\n                  });\r\n              }\r\n            });\r\n        } catch (e) {\r\n          console.log(\"updateappointmentcatch\", e);\r\n        }\r\n      }\r\n    } else {\r\n      this.showErrorMessage();\r\n    }\r\n  };\r\n  // handleUpdate = () => {\r\n  //   let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n  //   let { appointmentId, selectedRec_days, selectedRec_qty } = this.state;\r\n  //   let orig_remark = \"\";\r\n  //   if (appointmentCustomerDetail.remark_setting) {\r\n  //     orig_remark = null;\r\n  //   } else {\r\n  //     orig_remark = appointmentCustomerDetail.new_remark;\r\n  //   }\r\n  //   if (\r\n  //     appointmentCustomerDetail.customerName &&\r\n  //     appointmentCustomerDetail.bookingStatus\r\n  //   ) {\r\n  //     if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n  //       let data = {\r\n  //         appt_date: dateFormat(\r\n  //           new Date(appointmentCustomerDetail.appointmentDate),\r\n  //           \"yyyy-mm-dd\"\r\n  //         ),\r\n  //         Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n  //         appt_status: appointmentCustomerDetail.bookingStatus,\r\n  //         sec_status: appointmentCustomerDetail.sec_status,\r\n  //         ori_remark: orig_remark,\r\n  //         edit_remark: appointmentCustomerDetail.edit_remark,\r\n  //         start_time: this.getHoursFromDate(\r\n  //           appointmentTreatmentList[0].start_time\r\n  //         ),\r\n  //         end_time: appointmentTreatmentList[0].end_time,\r\n  //         item_id: appointmentTreatmentList[0].Item_Codeid,\r\n  //         add_duration: appointmentTreatmentList[0].add_duration,\r\n  //         emp_id: appointmentTreatmentList[0].emp_no,\r\n  //         requesttherapist: appointmentTreatmentList[0].requesttherapist,\r\n  //         item_text: appointmentTreatmentList[0].item_text,\r\n  //         recur_days:\r\n  //           selectedRec_days === appointmentTreatmentList[0].recur_days ||\r\n  //           appointmentTreatmentList[0].recur_days === \"\" ||\r\n  //           appointmentTreatmentList[0].recur_days <= 0\r\n  //             ? null\r\n  //             : appointmentTreatmentList[0].recur_days,\r\n  //         recur_qty:\r\n  //           Number(selectedRec_qty) ===\r\n  //             Number(appointmentTreatmentList[0].recur_qty) ||\r\n  //           Number(appointmentTreatmentList[0].recur_qty) === \"\" ||\r\n  //           Number(appointmentTreatmentList[0].recur_qty) <= 0\r\n  //             ? null\r\n  //             : Number(appointmentTreatmentList[0].recur_qty),\r\n  //         checktype: appointmentTreatmentList[0].checktype,\r\n  //         treat_parentcode: appointmentTreatmentList[0].treat_parentcode,\r\n  //         remark_setting: appointmentCustomerDetail.remark_setting,\r\n  //       };\r\n  //       console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\r\n\r\n  //       this.props\r\n  //         .commonPatchApi(`appointmentresources/${appointmentId}/`, data)\r\n  //         .then(async res => {\r\n  //           console.log(res, \"cart check while update booking\");\r\n  //           if (res.status === 200) {\r\n  //             this.handleCloseDialog();\r\n  //             this.handleSaveorUpdate();\r\n  //           } else if (res.status === 201) {\r\n  //             // this.handleCloseDialog();\r\n  //             // this.handleSaveorUpdate();\r\n  //             let formFields = { custId: 0, custName: \"\" };\r\n  //             formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n  //             formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n\r\n  //             await this.props.updateForm(\"basicApptDetail\", formFields);\r\n  //             this.props\r\n  //               .getCommonApi(\r\n  //                 `itemcart/Check/?cart_date=${dateFormat(\r\n  //                   new Date(),\r\n  //                   \"yyyy-mm-dd\"\r\n  //                 )}&cust_noid=${appointmentCustomerDetail.customerName}`\r\n  //               )\r\n  //               .then(res => {\r\n  //                 history.push(\"/admin/cart\");\r\n  //               });\r\n  //           }\r\n  //         });\r\n  //     }\r\n  //   } else {\r\n  //     this.showErrorMessage();\r\n  //   }\r\n  // };\r\n  handleRecurringUpdate = () => {\r\n    let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n    let {\r\n      appointmentId,\r\n      selectedRec_days,\r\n      selectedRec_qty,\r\n      recurringList,\r\n      recurringSelectAll,\r\n    } = this.state;\r\n    let finalRecurring = [];\r\n    for (var recurringItem of recurringList) {\r\n      if (recurringItem.selected) {\r\n        let value = recurringItem.id;\r\n        finalRecurring.push(value);\r\n      }\r\n    }\r\n    console.log(finalRecurring, \"finalrecurringList\");\r\n    if (\r\n      appointmentCustomerDetail.customerName &&\r\n      appointmentCustomerDetail.bookingStatus\r\n    ) {\r\n      if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n        let data = {\r\n          appt_date: dateFormat(\r\n            new Date(appointmentCustomerDetail.appointmentDate),\r\n            \"yyyy-mm-dd\"\r\n          ),\r\n          Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n          appt_status: appointmentCustomerDetail.bookingStatus,\r\n          sec_status: appointmentCustomerDetail.sec_status,\r\n          edit_remark: appointmentCustomerDetail.edit_remark,\r\n          start_time: this.getHoursFromDate(\r\n            appointmentTreatmentList[0].start_time\r\n          ),\r\n          end_time: appointmentTreatmentList[0].end_time,\r\n          item_id: appointmentTreatmentList[0].Item_Codeid,\r\n          add_duration: appointmentTreatmentList[0].add_duration,\r\n          emp_id: appointmentTreatmentList[0].emp_no,\r\n          requesttherapist: appointmentTreatmentList[0].requesttherapist,\r\n          item_text: appointmentTreatmentList[0].item_text,\r\n          recur_days:\r\n            selectedRec_days === appointmentTreatmentList[0].recur_days ||\r\n            appointmentTreatmentList[0].recur_days === \"\" ||\r\n            appointmentTreatmentList[0].recur_days <= 0\r\n              ? null\r\n              : appointmentTreatmentList[0].recur_days,\r\n          recur_qty:\r\n            Number(selectedRec_qty) ===\r\n              Number(appointmentTreatmentList[0].recur_qty) ||\r\n            Number(appointmentTreatmentList[0].recur_qty) === \"\" ||\r\n            Number(appointmentTreatmentList[0].recur_qty) <= 0\r\n              ? null\r\n              : Number(appointmentTreatmentList[0].recur_qty),\r\n          recur_ids: finalRecurring,\r\n        };\r\n        console.log(data, \"UpdatedappointmentTreatmentListWhenupdate\");\r\n        if (recurringSelectAll) {\r\n          this.props\r\n            .commonPatchApi(\r\n              `appointmentrecur/${appointmentId}/?type=${`all`} `,\r\n              data\r\n            )\r\n            .then(async res => {\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n              }\r\n            });\r\n        } else {\r\n          this.props\r\n            .commonPatchApi(`appointmentrecur/${appointmentId}/`, data)\r\n            .then(async res => {\r\n              console.log(res, \"type all clicked result\");\r\n              if (res.status === 200) {\r\n                this.handleCloseDialog();\r\n                this.handleSaveorUpdate();\r\n              }\r\n            });\r\n        }\r\n      }\r\n    } else {\r\n      this.showErrorMessage();\r\n    }\r\n  };\r\n  handleSubmit = () => {\r\n    // this.props.handleConfirmBooking()\r\n    let { appointmentCustomerDetail, appointmentTreatmentList } = this.props;\r\n    let { dragpassword, dragusername } = this.state;\r\n    console.log(appointmentCustomerDetail, \"appointmentcustomerdetailwhenSave\");\r\n    console.log(\r\n      appointmentTreatmentList,\r\n      \"savedappointmentTreatmentListWhenSave\"\r\n    );\r\n\r\n    let finalTreatment = [];\r\n    for (let TreatmentList of appointmentTreatmentList) {\r\n      finalTreatment.push({\r\n        appt_id: TreatmentList.appt_id,\r\n        start_time: this.getHoursFromDate(TreatmentList.start_time),\r\n        end_time: TreatmentList.end_time,\r\n        add_duration: TreatmentList.add_duration,\r\n        Item_Codeid: TreatmentList.Item_Codeid,\r\n        item_text: TreatmentList.item_text,\r\n        emp_no: TreatmentList.emp_no,\r\n        requesttherapist: TreatmentList.requesttherapist,\r\n        recur_qty: TreatmentList.recur_qty,\r\n        recur_days: TreatmentList.recur_days,\r\n        checktype: TreatmentList.checktype,\r\n        treat_parentcode: TreatmentList.treat_parentcode,\r\n      });\r\n    }\r\n    if (\r\n      appointmentCustomerDetail.customerName &&\r\n      appointmentCustomerDetail.bookingStatus\r\n    ) {\r\n      if (this.stafflistvalidation(appointmentTreatmentList)) {\r\n        let data = {\r\n          Appointment: {\r\n            appt_date: dateFormat(\r\n              new Date(appointmentCustomerDetail.appointmentDate),\r\n              \"yyyy-mm-dd\"\r\n            ),\r\n            Appt_typeid: appointmentCustomerDetail.Appt_typeid,\r\n            cust_noid: appointmentCustomerDetail.customerName,\r\n            new_remark: appointmentCustomerDetail.new_remark,\r\n            // emp_noid: appointmentCustomerDetail.emp_id,\r\n            Source_Codeid: appointmentCustomerDetail.Source_Codeid,\r\n            Room_Codeid: appointmentCustomerDetail.Room_Codeid,\r\n            appt_status: appointmentCustomerDetail.bookingStatus,\r\n            sec_status: appointmentCustomerDetail.sec_status,\r\n            ItemSite_Codeid: appointmentCustomerDetail.ItemSite_Codeid,\r\n            walkin: appointmentCustomerDetail.walkin,\r\n            username: dragusername,\r\n            password: dragpassword,\r\n            cust_StoreCard: appointmentCustomerDetail.cust_StoreCard,\r\n          },\r\n          Treatment: finalTreatment,\r\n        };\r\n\r\n        this.props.commonCreateApi(`appointment/`, data).then(async res => {\r\n          if (res.status === 201) {\r\n            this.sendMessage(\r\n              appointmentCustomerDetail,\r\n              appointmentTreatmentList\r\n            );\r\n            this.handleCloseDialog();\r\n            this.handleSaveorUpdate();\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.showErrorMessage();\r\n    }\r\n  };\r\n\r\n  sendMessage = async (appointmentCustomerDetail, appointmentTreatmentList) => {\r\n    let { tokenDetail } = this.props;\r\n    const API_ENDPOINT =\r\n      \"https://api.chat-api.com/instance368869/sendMessage?token=2817uztanv2i8kqn\";\r\n    let payload = {\r\n      phone: `${\r\n        appointmentCustomerDetail.custPhone\r\n          ? appointmentCustomerDetail.custPhone\r\n          : \"\"\r\n      }`,\r\n      body: `Dear Customer,\r\n       Warmest regards - your Appointment for ${\r\n         appointmentTreatmentList[0].Item_CodeName\r\n           ? appointmentTreatmentList[0].Item_CodeName\r\n           : \"\"\r\n       } is booked on ${\r\n        appointmentCustomerDetail.appointmentDate\r\n          ? dateFormat(\r\n              new Date(appointmentCustomerDetail.appointmentDate),\r\n              \"yyyy-mm-dd\"\r\n            )\r\n          : \"\"\r\n      } at ${\r\n        appointmentTreatmentList[0].start_time\r\n          ? this.getHoursFromDate(appointmentTreatmentList[0].start_time)\r\n          : \"\"\r\n      }. \r\n      Kindly call ${\r\n        tokenDetail.sitePhone ? tokenDetail.sitePhone : \"\"\r\n      } if you have any inquiries - ${\r\n        tokenDetail.branch ? tokenDetail.branch : \"\"\r\n      }`,\r\n    };\r\n\r\n    const res = await fetch(`${API_ENDPOINT}`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(payload),\r\n    });\r\n    return await res.json();\r\n  };\r\n\r\n  getDateTime = data => {\r\n    let date = new Date(data);\r\n    date = String(date).split(\" \");\r\n    let date1 = date[2] + \"th \" + date[1] + \", \" + date[3];\r\n    let time = date[4].split(\":\");\r\n    let time1 =\r\n      String(Number(time[0]) > 12 ? Number(time[0]) - 12 : time[0]) +\r\n      \":\" +\r\n      time[1] +\r\n      (Number(time[0]) > 12 ? \"PM\" : \"AM\");\r\n    return time1 + \", \" + date1;\r\n  };\r\n\r\n  handleDialog = () => {\r\n    this.setState({ isOpenModal: false, index: null });\r\n  };\r\n\r\n  handleMultipleCustomer = () => {\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  handleSelectPackage = async data => {\r\n    debugger;\r\n    let { selectedList, PackageIndex, appointmentId } = this.state;\r\n\r\n    if (PackageIndex === 0 && selectedList[0][\"Item_CodeName\"] === \"\") {\r\n      selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[0][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[0][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[0][\"end_time\"] = this.addTimes(\r\n      //     selectedList[0][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[0][\"Item_Codeid\"] = data.id;\r\n      selectedList[0][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[0][\"item_text\"] = null;\r\n      selectedList[0][\"add_duration\"] = data.add_duration;\r\n      selectedList[0][\"checktype\"] = \"package\";\r\n      selectedList[0][\"treat_parentcode\"] = data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else if (selectedList[selectedList.length - 1][\"Item_CodeName\"] === \"\") {\r\n      selectedList[selectedList.length - 1][\"start_time\"] =\r\n        selectedList[selectedList.length - 1][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(\r\n          selectedList[selectedList.length - 1][\"start_time\"]\r\n        ),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n      //     selectedList[selectedList.length - 1][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n\r\n      selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[selectedList.length - 1][\"item_text\"] = null;\r\n      selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\r\n      selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\r\n      selectedList[selectedList.length - 1][\"treat_parentcode\"] =\r\n        data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else if (\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] !== \"\" &&\r\n      appointmentId\r\n    ) {\r\n      selectedList[selectedList.length - 1][\"start_time\"] =\r\n        selectedList[selectedList.length - 1][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(\r\n          selectedList[selectedList.length - 1][\"start_time\"]\r\n        ),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[selectedList.length - 1][\"end_time\"] = this.addTimes(\r\n      //     selectedList[selectedList.length - 1][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n\r\n      selectedList[selectedList.length - 1][\"Item_Codeid\"] = data.id;\r\n      selectedList[selectedList.length - 1][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[selectedList.length - 1][\"item_text\"] = null;\r\n      selectedList[selectedList.length - 1][\"add_duration\"] = data.add_duration;\r\n      selectedList[selectedList.length - 1][\"checktype\"] = \"package\";\r\n      selectedList[selectedList.length - 1][\"treat_parentcode\"] =\r\n        data.treatment_parentcode;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n        PackageIndex: PackageIndex + 1,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      var listCount = selectedList.length - 1;\r\n      let treatment = {};\r\n      // if (appointmentId) {\r\n      treatment[\"start_time\"] = this.timeToDateFormat(\r\n        selectedList[listCount][\"end_time\"]\r\n      );\r\n      // } else {\r\n      //   treatment[\"start_time\"] = selectedList[listCount][\"end_time\"];\r\n      // }\r\n      treatment[\"Item_Codeid\"] = data.id;\r\n      treatment[\"Item_CodeName\"] = data.item_desc;\r\n      treatment[\"item_text\"] = null;\r\n      treatment[\"add_duration\"] = data.add_duration;\r\n      treatment[\"checktype\"] = \"package\";\r\n      treatment[\"treat_parentcode\"] = data.treatment_parentcode;\r\n      selectedList.push(treatment);\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  handleSelectTreatment = async data => {\r\n    let { selectedList, index, appointmentId } = this.state;\r\n\r\n    if (index == 0 && selectedList.length == 1) {\r\n      selectedList[0][\"start_time\"] = selectedList[0][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[0][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[0][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[0][\"end_time\"] = this.addTimes(\r\n      //     selectedList[0][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[0][\"Item_Codeid\"] = data.id;\r\n      selectedList[0][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[0][\"add_duration\"] = data.add_duration;\r\n      selectedList[0][\"checktype\"] = \"service\";\r\n      selectedList[0][\"treat_parentcode\"] = null;\r\n\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      selectedList[index][\"start_time\"] = selectedList[index][\"start_time\"];\r\n      // if (appointmentId) {\r\n      selectedList[index][\"end_time\"] = this.addTimes(\r\n        this.getHoursFromDate(selectedList[index][\"start_time\"]),\r\n        data.add_duration ? data.add_duration : \"00:00\"\r\n      );\r\n      // } else {\r\n      //   selectedList[index][\"end_time\"] = this.addTimes(\r\n      //     selectedList[index][\"start_time\"],\r\n      //     data.add_duration ? data.add_duration : \"00:00\"\r\n      //   );\r\n      // }\r\n      selectedList[index][\"Item_Codeid\"] = data.id;\r\n      selectedList[index][\"Item_CodeName\"] = data.item_desc;\r\n      selectedList[index][\"add_duration\"] = data.add_duration;\r\n      selectedList[index][\"checktype\"] = \"service\";\r\n      selectedList[index][\"treat_parentcode\"] = null;\r\n\r\n      let endTime = \"\";\r\n      //if (appointmentId) {\r\n      endTime = this.timeToDateFormat(selectedList[index][\"end_time\"]);\r\n      // } else {\r\n      //   endTime = selectedList[index][\"end_time\"];\r\n      // }\r\n      if (selectedList.length - 1 > index) {\r\n        selectedList[index + 1][\"start_time\"] = endTime;\r\n        if (selectedList[index + 1][\"add_duration\"] !== \"\") {\r\n          selectedList[index + 1][\"end_time\"] = this.addTimes(\r\n            selectedList[index][\"end_time\"],\r\n            selectedList[index + 1][\"add_duration\"]\r\n          );\r\n        }\r\n      }\r\n      await this.setState({\r\n        selectedList,\r\n      });\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    }\r\n    this.setState({ isOpenModal: false });\r\n  };\r\n\r\n  timeToMins = time => {\r\n    var b = time.split(\":\");\r\n    return b[0] * 60 + +b[1];\r\n  };\r\n\r\n  // Convert minutes to a time in format hh:mm\r\n  // Returned value is in range 00  to 24 hrs\r\n  timeFromMins = mins => {\r\n    function z(n) {\r\n      return (n < 10 ? \"0\" : \"\") + n;\r\n    }\r\n    var h = ((mins / 60) | 0) % 24;\r\n    var m = mins % 60;\r\n    return z(h) + \":\" + z(m);\r\n  };\r\n\r\n  // Add two times in hh:mm format\r\n  addTimes = (t0, t1) => {\r\n    return this.timeFromMins(this.timeToMins(t0) + this.timeToMins(t1));\r\n  };\r\n\r\n  // handleNewTimeChange = selectedTime => {\r\n  //   let time = new Date(dateFormat(selectedTime));\r\n  //   let selectedTimeNew = time.getTime();\r\n  //   console.log(selectedTimeNew);\r\n  //   let { selectedList, formFields } = this.state;\r\n  //   formFields = {\r\n  //     start_time: selectedTimeNew,\r\n  //     end_time: \"\",\r\n  //     add_duration: \"\",\r\n  //   };\r\n  // };\r\n\r\n  handleAddtreatment = async index => {\r\n    let { selectedList, formFields, appointmentId } = this.state;\r\n\r\n    if (selectedList[index][\"end_time\"]) {\r\n      let start = \"\";\r\n      //if (appointmentId) {\r\n      start = this.timeToDateFormat(\r\n        selectedList[selectedList.length - 1].end_time\r\n      );\r\n      // } else {\r\n      //   start = selectedList[selectedList.length - 1].end_time;\r\n      // }\r\n      formFields = {\r\n        appt_id: null,\r\n        start_time: start,\r\n        end_time: \"\",\r\n        Item_Codeid: this.state.freeTextStockId,\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      };\r\n      selectedList.push({\r\n        appt_id: null,\r\n        start_time: start,\r\n        end_time: \"\",\r\n        Item_Codeid: this.state.freeTextStockId,\r\n        Item_CodeName: \"\",\r\n        add_duration: \"\",\r\n        emp_no: 0,\r\n        requesttherapist: false,\r\n        recur_days: null,\r\n        recur_qty: null,\r\n        item_text: null,\r\n        checktype: \"\",\r\n        treat_parentcode: null,\r\n      });\r\n\r\n      await this.setState({ selectedList, formFields });\r\n\r\n      await this.props.updateForm(\"treatmentList\", selectedList);\r\n    } else {\r\n      Toast({ type: \"error\", message: \"End time shouldn't be empty\" });\r\n    }\r\n  };\r\n\r\n  deleteTreatment = async (index, item) => {\r\n    let { selectedList, DeletedList } = this.state;\r\n    selectedList.splice(index, 1);\r\n    DeletedList.push(item.appt_id);\r\n    this.setState({ selectedList, DeletedList });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleTreatementmodal = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isTreatementModal: !prevState.isTreatementModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n  // handleChangeremark = async ({ target: { value, name } }) => {\r\n  //   let { formFields, selectedList } = this.state;\r\n  //   formFields[name] = value;\r\n  //   selectedList[0][name] = value;\r\n  //   await this.setState({\r\n  //     formFields,\r\n  //     selectedList,\r\n  //   });\r\n  //   await this.props.updateForm(\"treatmentList\", selectedList);\r\n  // };\r\n\r\n  handleCheckbox = async ({ target: { value, name } }, index) => {\r\n    let { treatmentList } = this.state;\r\n    let { selectedList } = this.state;\r\n    selectedList[index][\"requesttherapist\"] = value;\r\n    await this.setState({\r\n      selectedList,\r\n    });\r\n    await this.props.updateForm(\"treatmentList\", selectedList);\r\n  };\r\n\r\n  handleCloseDialog = async () => {\r\n    this.props.handleCloseDialog();\r\n  };\r\n  handleSaveorUpdate = async () => {\r\n    this.props.handleSaveorUpdate();\r\n  };\r\n  handleRecurringlistCheckbox = async ({ target: { value, name } }, item) => {\r\n    let { recurringList } = this.state;\r\n    let listCheckbox = recurringList.find(acc => acc.id === item.id);\r\n    if (listCheckbox) {\r\n      listCheckbox[\"selected\"] = value;\r\n      await this.setState({ ...this.state.recurringList, listCheckbox });\r\n    }\r\n    let Checkbox = recurringList.filter(acc => acc.selected === true).length;\r\n    if (Checkbox == this.state.recurringList.length) {\r\n      await this.setState({ recurringSelectAll: true });\r\n    } else {\r\n      await this.setState({ recurringSelectAll: false });\r\n    }\r\n  };\r\n\r\n  handleRecurringSelectAllCheckbox = async ({ target: { value, name } }) => {\r\n    let { recurringList } = this.state;\r\n    await this.setState({ recurringSelectAll: value });\r\n    for (let item of recurringList) {\r\n      item[\"selected\"] = value;\r\n      await this.setState({ ...this.state.recurringList, item });\r\n    }\r\n  };\r\n  handleCopyAppointment = async () => {\r\n    let { appointmentId } = this.state;\r\n    let formFields = {};\r\n    formFields[\"appointmentId\"] = appointmentId;\r\n    await this.props.updateForm(\"AppointmentCopy\", formFields);\r\n    console.log(\r\n      this.props.AppointmentCopy,\r\n      \"after copy click appointment copy id\"\r\n    );\r\n    Toast({ type: \"success\", message: \"Appointment copied\" });\r\n  };\r\n  handlePasteAppointment = async () => {\r\n    let { AppointmentCopy } = this.props;\r\n    if (AppointmentCopy) {\r\n      this.setState({\r\n        PasteAppointmentId: AppointmentCopy.appointmentId,\r\n        selectedList: [],\r\n      });\r\n      this.handleRenderApptDetail(AppointmentCopy.appointmentId, true);\r\n    }\r\n  };\r\n\r\n  handleGotoCart = async () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let formFields = { custId: 0, custName: \"\" };\r\n    formFields[\"custId\"] = appointmentCustomerDetail.customerName;\r\n    formFields[\"custName\"] = appointmentCustomerDetail.custName;\r\n    formFields[\"cust_refer\"] = appointmentCustomerDetail.cust_refer;\r\n    await this.props.updateForm(\"basicApptDetail\", formFields);\r\n\r\n    history.push(\"/admin/cart\");\r\n  };\r\n  handleUpcomingAppointment = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isUpcomingAppointmentModal: !prevState.isUpcomingAppointmentModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n  handleTreatmentHistory = () => {\r\n    let { appointmentCustomerDetail } = this.props;\r\n    let customerId = appointmentCustomerDetail.customerName;\r\n    if (customerId > 0) {\r\n      this.setState(prevState => ({\r\n        isTreatmentHistoryModal: !prevState.isTreatmentHistoryModal,\r\n      }));\r\n    } else {\r\n      Toast({ type: \"error\", message: \"Please select customer\" });\r\n    }\r\n  };\r\n\r\n  handleAccordion = async index => {\r\n    let { activeRow } = this.state;\r\n    if (index === activeRow) {\r\n      await this.setState({\r\n        activeRow: \"\",\r\n      });\r\n    } else {\r\n      await this.setState({\r\n        activeRow: index,\r\n      });\r\n    }\r\n  };\r\n  handleLoginPopupCheck = async () => {\r\n    let { settingData } = this.state;\r\n    if (settingData.appt_pw) {\r\n      let { isLoginConfirmation } = this.state;\r\n      isLoginConfirmation = true;\r\n      await this.setState({\r\n        isLoginConfirmation,\r\n      });\r\n    } else {\r\n      this.handleLoginSubmit();\r\n    }\r\n  };\r\n\r\n  handleLoginConfirmationDialog = async () => {\r\n    let { isLoginConfirmation } = this.state;\r\n    isLoginConfirmation = false;\r\n    await this.setState({\r\n      isLoginConfirmation,\r\n      dragusername: \"\",\r\n      dragpassword: \"\",\r\n    });\r\n  };\r\n  handleInputChange = async event => {\r\n    await this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  handleLoginSubmit = () => {\r\n    let { appointmentId } = this.state;\r\n    if (appointmentId) {\r\n      this.handleUpdate();\r\n    } else {\r\n      this.handleSubmit();\r\n    }\r\n  };\r\n  toggle = key => {\r\n    this.setState(prevState => ({\r\n      [key]: !prevState[key],\r\n    }));\r\n  };\r\n  render() {\r\n    let {\r\n      outletOption,\r\n      staffOption,\r\n      roomOption,\r\n      selectedList,\r\n      siteList,\r\n      list,\r\n      formFields,\r\n      timeDropdown,\r\n      duration,\r\n      isOpenModal,\r\n      treatmentField,\r\n      treatmentList = [],\r\n      categoryList,\r\n      treatmentListHeader,\r\n      meta,\r\n      isTreatementModal,\r\n      appointmentId,\r\n      selectedRec_days,\r\n      selectedRec_qty,\r\n      recurringList,\r\n      recurringSelectAll,\r\n      settingData,\r\n      PasteAppointmentId,\r\n      isTreatmentHistoryModal,\r\n      isUpcomingAppointmentModal,\r\n      AppointmentListHeader,\r\n      headerDetails,\r\n      activeRow,\r\n      isLoginConfirmation,\r\n      passwordVisible,\r\n      dragusername,\r\n      dragpassword,\r\n    } = this.state;\r\n    let { customerDetail, selectedTreatmentList, customerId, t, tokenDetail } =\r\n      this.props;\r\n    let { outlet, staff, rooms } = customerDetail;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {PasteAppointmentId <= 0 ? (\r\n          <MobileAppointmentForm\r\n            onRef={ref => (this.child = ref)}\r\n            selectedCustomer={this.props.selectedCustomer}\r\n            PasteAppointmentId={PasteAppointmentId}\r\n          ></MobileAppointmentForm>\r\n        ) : null}\r\n        {PasteAppointmentId > 0 ? (\r\n          <MobileAppointmentForm\r\n            onRef={ref => (this.child = ref)}\r\n            selectedCustomer={this.props.selectedCustomer}\r\n            PasteAppointmentId={PasteAppointmentId}\r\n          ></MobileAppointmentForm>\r\n        ) : null}\r\n\r\n        {selectedList.length == 0 ? (\r\n          <div class=\"d-flex mt-5 align-items-center justify-content-center\">\r\n            {t(\"No Data\")}\r\n          </div>\r\n        ) : (\r\n          <div className=\"response-table w-100\">\r\n            {selectedList.length === selectedList.length - 1 + 1 ? (\r\n              <div className=\"d-flex justify-content-end\">\r\n                <NormalButton\r\n                  mainbg={true}\r\n                  label={\"Add New\"}\r\n                  onClick={() =>\r\n                    this.handleAddtreatment(selectedList.length - 1)\r\n                  }\r\n                />\r\n              </div>\r\n            ) : null}\r\n            {selectedList.length > 0 ? (\r\n              selectedList.map((item, index) => {\r\n                return (\r\n                  <div\r\n                    className={`mt-3 rounded border ${\r\n                      activeRow === index ? \"border-primary\" : \"\"\r\n                    }`}\r\n                    key={index}\r\n                  >\r\n                    <div className=\"d-flex bg-light\">\r\n                      <div className=\"h6 fw-500 col-7 col-md-9 text-left text-dark \">\r\n                        {index + 1}\r\n                        {\". \"}\r\n                        {item.Item_CodeName\r\n                          ? item.Item_CodeName\r\n                          : \"Please Choose item\"}\r\n                      </div>\r\n\r\n                      <div className=\"h6 col-2 col-md-1 text-center fw-700 align-items-center\">\r\n                        {selectedList.length > 1 && (\r\n                          <div\r\n                            className=\"cursor-pointer fs-15 p-1 border border-light\"\r\n                            onClick={() => this.deleteTreatment(index, item)}\r\n                            tooltip=\"delete\"\r\n                          >\r\n                            <span className=\"icon-delete\"></span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div\r\n                        className=\"h6 col-2 col-md-1 text-center fw-700 align-items-center\"\r\n                        onClick={() => this.handleAccordion(index)}\r\n                      >\r\n                        {activeRow === index ? (\r\n                          <div className=\"cursor-pointer fs-15 p-1 border border-light\">\r\n                            <span>\r\n                              <AiOutlineMinus />\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"cursor-pointer fs-15 p-1 border border-light\">\r\n                            <span>\r\n                              <AiOutlinePlus />\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {activeRow === index ? (\r\n                      <div className=\"d-flex flex-wrap\">\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Start Time\")}\r\n                          </label>\r\n\r\n                          <div className=\"input-group\">\r\n                            <NormalTimePicker\r\n                              onChange={e => this.handleDatePick(e, index)}\r\n                              name=\"start_time\"\r\n                              timeOnly={true}\r\n                              dateFormat={`HH:mm`}\r\n                              showTime={true}\r\n                              selected={false}\r\n                              placeholder=\"\"\r\n                              timeIntervals={5}\r\n                              value={item.start_time}\r\n                              showIcon={false}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"End Time\")}\r\n                          </label>\r\n                          <div className=\"input-group\">\r\n                            <NormalInput\r\n                              type=\"text\"\r\n                              name=\"end_time\"\r\n                              value={item.end_time}\r\n                              onChange={() => {}}\r\n                              disabled={true}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Item\")}\r\n                          </label>\r\n\r\n                          <div className=\"input-group\">\r\n                            {settingData &&\r\n                            settingData.service_sel &&\r\n                            settingData.service_text ? (\r\n                              <NormalInput\r\n                                placeholder=\"service\"\r\n                                // options={siteList}\r\n                                value={item.Item_CodeName}\r\n                                name=\"Item_CodeName\"\r\n                                onDoubleClick={() =>\r\n                                  this.setState({\r\n                                    isOpenModal: true,\r\n                                    index: index,\r\n                                  })\r\n                                }\r\n                                onChange={e => this.handleChange(e, index)}\r\n                              />\r\n                            ) : null}\r\n                            {settingData &&\r\n                            settingData.service_sel &&\r\n                            !settingData.service_text ? (\r\n                              <NormalInput\r\n                                placeholder=\"service\"\r\n                                // options={siteList}\r\n                                value={item.Item_CodeName}\r\n                                name=\"Item_CodeName\"\r\n                                onDoubleClick={() =>\r\n                                  this.setState({\r\n                                    isOpenModal: true,\r\n                                    index: index,\r\n                                  })\r\n                                }\r\n                                onChange={() => {}}\r\n                              />\r\n                            ) : null}\r\n                            {settingData &&\r\n                            !settingData.service_sel &&\r\n                            settingData.service_text ? (\r\n                              <NormalInput\r\n                                placeholder=\"service\"\r\n                                // options={siteList}\r\n                                value={item.Item_CodeName}\r\n                                name=\"Item_CodeName\"\r\n                                onClick={() => {}}\r\n                                onChange={e => this.handleChange(e, index)}\r\n                              />\r\n                            ) : null}\r\n                            {settingData &&\r\n                            !settingData.service_sel &&\r\n                            !settingData.service_text ? (\r\n                              <NormalInput\r\n                                placeholder=\"service\"\r\n                                // options={siteList}\r\n                                value={item.Item_CodeName}\r\n                                name=\"Item_CodeName\"\r\n                                onClick={() => {}}\r\n                                onChange={() => {}}\r\n                              />\r\n                            ) : null}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Duration\")}\r\n                          </label>\r\n\r\n                          <div className=\"input-group\">\r\n                            <NormalSelect\r\n                              // placeholder=\"Enter here\"\r\n                              options={duration}\r\n                              value={item.add_duration}\r\n                              name=\"add_duration\"\r\n                              onChange={e => this.handleChange(e, index)}\r\n                              className=\"p-0\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Staff\")}\r\n                          </label>\r\n\r\n                          <div className=\"input-group\">\r\n                            <NormalSelect\r\n                              // placeholder=\"Enter here\"\r\n                              options={staffOption}\r\n                              value={item.emp_no}\r\n                              name=\"emp_no\"\r\n                              onChange={e => this.handleChange(e, index)}\r\n                              className=\"p-0\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Req. Therapist\")}\r\n                          </label>\r\n                          <div className=\"input-group\">\r\n                            {item.requesttherapist ? (\r\n                              <NormalCheckbox\r\n                                onChange={e => this.handleCheckbox(e, index)}\r\n                                value={item.requesttherapist}\r\n                                name=\"requesttherapist\"\r\n                                checked={true}\r\n                              />\r\n                            ) : (\r\n                              <NormalCheckbox\r\n                                onChange={e => this.handleCheckbox(e, index)}\r\n                                value={item.requesttherapist}\r\n                                name=\"requesttherapist\"\r\n                                checked={false}\r\n                              />\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Recur Days\")}\r\n                          </label>\r\n                          <div className=\"input-group\">\r\n                            <NormalInput\r\n                              type=\"number\"\r\n                              name=\"recur_days\"\r\n                              value={item.recur_days ? item.recur_days : \"\"}\r\n                              onChange={e => this.handleChange(e, index)}\r\n                              disabled={appointmentId ? true : false}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-3 col-12 mb-3\">\r\n                          <label className=\"text-left text-black common-label-text \">\r\n                            {t(\"Recur Qty\")}\r\n                          </label>\r\n                          <div className=\"input-group\">\r\n                            <NormalInput\r\n                              type=\"number\"\r\n                              name=\"recur_qty\"\r\n                              value={item.recur_qty ? item.recur_qty : \"\"}\r\n                              onChange={e => this.handleChange(e, index)}\r\n                              disabled={appointmentId ? true : false}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                );\r\n              })\r\n            ) : (\r\n              <div className=\"d-flex text-center w-100\">{t(\"No Data\")}</div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* <TableWrapper\r\n                    headerDetails={headerDetails}\r\n                    // queryHandler={this.handlePagination}\r\n                    // pageMeta={pageMeta}\r\n                  >\r\n                    {selectedList.length > 0\r\n                      ? selectedList.map((item, index) => {\r\n                          return (\r\n                            <tr key={index}>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalTimePicker\r\n                                    className={`cursor-pointer`}\r\n                                    onChange={e =>\r\n                                      this.handleDatePick(e, index)\r\n                                    }\r\n                                    label=\"start_time\"\r\n                                    name=\"start_time\"\r\n                                    timeOnly={true}\r\n                                    dateFormat={`HH:mm`}\r\n                                    showTime={true}\r\n                                    selected={false}\r\n                                    placeholder=\"\"\r\n                                    timeIntervals={5}\r\n                                    value={item.start_time}\r\n                                    showIcon={false}\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalInput\r\n                                    placeholder=\"end\"\r\n                                    // options={timeDropdown}\r\n                                    value={item.end_time}\r\n                                    name=\"end_time\"\r\n                                    onChange={() => {}}\r\n                                    className=\"customer-name p-0\"\r\n                                    disabled={true}\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  {settingData &&\r\n                                  settingData.service_sel &&\r\n                                  settingData.service_text ? (\r\n                                    <NormalInput\r\n                                      placeholder=\"service\"\r\n                                      // options={siteList}\r\n                                      value={item.Item_CodeName}\r\n                                      name=\"Item_CodeName\"\r\n                                      onDoubleClick={() =>\r\n                                        this.setState({\r\n                                          isOpenModal: true,\r\n                                          index: index,\r\n                                        })\r\n                                      }\r\n                                      onChange={e =>\r\n                                        this.handleChange(e, index)\r\n                                      }\r\n                                      className=\"customer-name p-0 px-2\"\r\n                                    />\r\n                                  ) : null}\r\n                                  {settingData &&\r\n                                  settingData.service_sel &&\r\n                                  !settingData.service_text ? (\r\n                                    <NormalInput\r\n                                      placeholder=\"service\"\r\n                                      // options={siteList}\r\n                                      value={item.Item_CodeName}\r\n                                      name=\"Item_CodeName\"\r\n                                      onDoubleClick={() =>\r\n                                        this.setState({\r\n                                          isOpenModal: true,\r\n                                          index: index,\r\n                                        })\r\n                                      }\r\n                                      onChange={() => {}}\r\n                                      className=\"customer-name p-0 px-2\"\r\n                                    />\r\n                                  ) : null}\r\n                                  {settingData &&\r\n                                  !settingData.service_sel &&\r\n                                  settingData.service_text ? (\r\n                                    <NormalInput\r\n                                      placeholder=\"service\"\r\n                                      // options={siteList}\r\n                                      value={item.Item_CodeName}\r\n                                      name=\"Item_CodeName\"\r\n                                      onClick={() => {}}\r\n                                      onChange={e =>\r\n                                        this.handleChange(e, index)\r\n                                      }\r\n                                      className=\"customer-name p-0 px-2\"\r\n                                    />\r\n                                  ) : null}\r\n                                  {settingData &&\r\n                                  !settingData.service_sel &&\r\n                                  !settingData.service_text ? (\r\n                                    <NormalInput\r\n                                      placeholder=\"service\"\r\n                                      // options={siteList}\r\n                                      value={item.Item_CodeName}\r\n                                      name=\"Item_CodeName\"\r\n                                      onClick={() => {}}\r\n                                      onChange={() => {}}\r\n                                      className=\"customer-name p-0 px-2\"\r\n                                    />\r\n                                  ) : null}\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalSelect\r\n                                    // placeholder=\"Enter here\"\r\n                                    options={duration}\r\n                                    value={item.add_duration}\r\n                                    name=\"add_duration\"\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    className=\"customer-name p-0\"\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalSelect\r\n                                    // placeholder=\"Enter here\"\r\n                                    options={staffOption}\r\n                                    value={item.emp_no}\r\n                                    name=\"emp_no\"\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    className=\"customer-name p-0\"\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  {item.requesttherapist ? (\r\n                                    <NormalCheckbox\r\n                                      onChange={e =>\r\n                                        this.handleCheckbox(e, index)\r\n                                      }\r\n                                      value={item.requesttherapist}\r\n                                      name=\"requesttherapist\"\r\n                                      checked={true}\r\n                                    />\r\n                                  ) : (\r\n                                    <NormalCheckbox\r\n                                      onChange={e =>\r\n                                        this.handleCheckbox(e, index)\r\n                                      }\r\n                                      value={item.requesttherapist}\r\n                                      name=\"requesttherapist\"\r\n                                      checked={false}\r\n                                    />\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalInput\r\n                                    type=\"number\"\r\n                                    name=\"recur_days\"\r\n                                    value={\r\n                                      item.recur_days ? item.recur_days : \"\"\r\n                                    }\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    disabled={appointmentId ? true : false}\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  <NormalInput\r\n                                    type=\"number\"\r\n                                    name=\"recur_qty\"\r\n                                    value={item.recur_qty ? item.recur_qty : \"\"}\r\n                                    onChange={e => this.handleChange(e, index)}\r\n                                    disabled={appointmentId ? true : false}\r\n                                  />\r\n                                </div>\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                  {selectedList.length === index + 1 ? (\r\n                                    <div\r\n                                      className=\"ml-3\"\r\n                                      onClick={() =>\r\n                                        this.handleAddtreatment(index)\r\n                                      }\r\n                                    >\r\n                                      <svg\r\n                                        width=\"31\"\r\n                                        height=\"30\"\r\n                                        viewBox=\"0 0 31 30\"\r\n                                        fill=\"none\"\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                      >\r\n                                        <rect\r\n                                          width=\"31\"\r\n                                          height=\"30\"\r\n                                          fill=\"#F9F9F9\"\r\n                                        />\r\n                                        <path\r\n                                          d=\"M15 8V22\"\r\n                                          stroke=\"#848484\"\r\n                                          strokeLinecap=\"round\"\r\n                                          strokeLinejoin=\"round\"\r\n                                        />\r\n                                        <path\r\n                                          d=\"M8 15H22\"\r\n                                          stroke=\"#848484\"\r\n                                          strokeLinecap=\"round\"\r\n                                          strokeLinejoin=\"round\"\r\n                                        />\r\n                                      </svg>\r\n                                    </div>\r\n                                  ) : (\r\n                                    <>\r\n                                      {appointmentId && item.appt_id ? null : (\r\n                                        <img\r\n                                          width=\"25\"\r\n                                          height=\"25\"\r\n                                          onClick={() =>\r\n                                            this.deleteTreatment(index)\r\n                                          }\r\n                                          className=\"ml-3\"\r\n                                          src={closeIcon}\r\n                                          alt=\"\"\r\n                                        />\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })\r\n                      : null}\r\n                  </TableWrapper> */}\r\n        <div className=\"appointment-form\">\r\n          <div className=\"row\">\r\n            <div className=\"appointment\">\r\n              <div className=\"appointment-holder\">\r\n                <div className=\"treatment-section p-0\">\r\n                  {recurringList && recurringList.length > 0 ? (\r\n                    <div className=\"mt-5 mb-3\">\r\n                      <div>\r\n                        <p>Recurring Related Appointments</p>\r\n                      </div>\r\n\r\n                      <div className=\"row selected selected-header mb-2\">\r\n                        <div className=\"col-1\">\r\n                          <NormalCheckbox\r\n                            label={`All`}\r\n                            onChange={e =>\r\n                              this.handleRecurringSelectAllCheckbox(e)\r\n                            }\r\n                            value={recurringSelectAll}\r\n                            name=\"recurringSelectAll\"\r\n                            checked={recurringSelectAll}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-2 p-0\">{t(\"Date\")}</div>\r\n                        <div className=\"col-1 p-0\">{t(\"Start\")}</div>\r\n                        <div className=\"col-1 p-0\">{t(\"End\")}</div>\r\n                        <div className=\"col-3 p-0 header-detail\">\r\n                          {t(\"Service\")}\r\n                        </div>\r\n\r\n                        <div className=\"col-1 p-0 header-detail\">\r\n                          {t(\"Duration\")}\r\n                        </div>\r\n                        <div className=\"col-2 p-0\">{t(\"Treatment staff\")}</div>\r\n                        <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                          <img\r\n                            src={req_therapist}\r\n                            alt=\"\"\r\n                            height=\"25\"\r\n                            width=\"25\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      {recurringList && recurringList.length > 0 ? (\r\n                        recurringList.map((item, index) => {\r\n                          return (\r\n                            <div className=\"row selected  mb-4\" key={index}>\r\n                              <div className=\"col-1 text-center\">\r\n                                <NormalCheckbox\r\n                                  onChange={e =>\r\n                                    this.handleRecurringlistCheckbox(e, item)\r\n                                  }\r\n                                  value={item.selected}\r\n                                  name=\"recurringItem\"\r\n                                  checked={item.selected}\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-2 p-0\">{item.date}</div>\r\n                              <div className=\"col-1 p-0\">{item.start_time}</div>\r\n                              <div className=\"col-1 p-0\">{item.end_time}</div>\r\n                              <div className=\"col-3 p-0 header-detail\">\r\n                                {item.item_name}\r\n                              </div>\r\n\r\n                              <div className=\"col-1 p-0 header-detail\">\r\n                                {item.add_duration}\r\n                              </div>\r\n                              <div className=\"col-2 p-0\">{item.emp_name}</div>\r\n                              <div className=\"col-1 p-0 d-flex justify-content-center\">\r\n                                <NormalCheckbox\r\n                                  onChange={e =>\r\n                                    this.handleRecurringlistCheckbox(e, item)\r\n                                  }\r\n                                  value={item.requesttherapist}\r\n                                  name=\"requesttherapist\"\r\n                                  checked={item.requesttherapist}\r\n                                  disabled\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })\r\n                      ) : (\r\n                        <div className=\"col-12 text-center w-100\">\r\n                          {t(\"No Data\")}\r\n                        </div>\r\n                      )}\r\n                      <div className=\"d-flex justify-content-end\">\r\n                        <div className=\"mt-5\">\r\n                          <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                              <NormalButton\r\n                                buttonClass={\"treatment\"}\r\n                                resetbg={true}\r\n                                className=\"col-12\"\r\n                                label=\"Cancel\"\r\n                                onClick={this.handleCloseDialog}\r\n                              />\r\n                            </div>\r\n                            <div>\r\n                              {appointmentId ? (\r\n                                <NormalButton\r\n                                  buttonClass={\"submit-btn\"}\r\n                                  mainbg={false}\r\n                                  className=\"col-12 submit-btn ml-4\"\r\n                                  label=\"Update Recurring\"\r\n                                  onClick={this.handleRecurringUpdate}\r\n                                />\r\n                              ) : null}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <NormalModal\r\n            className={\"multiple-appointment select-category\"}\r\n            style={{ minWidth: \"60%\" }}\r\n            modal={isOpenModal}\r\n            handleModal={this.handleDialog}\r\n          >\r\n            <img\r\n              onClick={this.handleDialog}\r\n              className=\"close\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"customer-list container\">\r\n              <div className=\"col-12 pl-0 mb-3 fw-500 py-2\">\r\n                <h5>{t(\"Select Treatment\")}</h5>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    {t(\"Category\")}\r\n                    <NormalSelect\r\n                      // placeholder=\"Enter here\"\r\n                      options={categoryList}\r\n                      value={treatmentField.category}\r\n                      name=\"category\"\r\n                      onChange={this.handleChangeTreatment}\r\n                      className=\"customer-name p-0\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    {t(\"Service\")}\r\n                    <input\r\n                      // placeholder=\"Enter here\"\r\n                      // options={siteList}\r\n                      value={treatmentField.treatment}\r\n                      name=\"treatment\"\r\n                      onChange={this.handleSearch}\r\n                      className=\"search px-3 p-0\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"table-container table-responsive mt-3\">\r\n                <TableWrapper\r\n                  headerDetails={treatmentListHeader}\r\n                  queryHandler={this.handlePagination}\r\n                  pageMeta={meta}\r\n                >\r\n                  {treatmentList.length > 0 ? (\r\n                    treatmentList.map((item, index) => {\r\n                      return (\r\n                        <tr\r\n                          className=\"w-100\"\r\n                          onClick={() => this.handleSelectTreatment(item)}\r\n                          key={index}\r\n                        >\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-left\">{item.Item_Class}</div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-left\">{item.item_desc}</div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-left\">{item.add_duration}</div>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <div className=\"text-right\">{item.item_price}</div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <td colSpan=\"12\">\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        {t(\"No data Available\")}\r\n                      </div>\r\n                    </td>\r\n                  )}\r\n                </TableWrapper>\r\n              </div>\r\n\r\n              <div className=\"row text-center justify-center w-100\">\r\n                <NormalButton\r\n                  buttonClass={\"col-3\"}\r\n                  resetbg={true}\r\n                  className=\"col-12 ml-4\"\r\n                  label=\"Cancel\"\r\n                  onClick={this.handleDialog}\r\n                />\r\n              </div>\r\n            </div>\r\n          </NormalModal>\r\n          <NormalModal\r\n            className={\"d-flex justify-content-center\"}\r\n            style={{ minWidth: \"20%\" }}\r\n            modal={isLoginConfirmation}\r\n            handleModal={() => {}}\r\n          >\r\n            <img\r\n              onClick={this.handleLoginConfirmationDialog}\r\n              className=\"close cursor-pointer\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <div className=\"row\">\r\n              <div className=\"d-flex flex-wrap\">\r\n                <div className=\"col-12 mb-4\">\r\n                  <p>{t(\"Please enter your login credential\")} </p>\r\n                </div>\r\n                <div className=\"col-12 form-group mb-3 pb-2\">\r\n                  <div className=\"input-group\">\r\n                    <NormalInput\r\n                      placeholder=\"Username\"\r\n                      value={dragusername}\r\n                      name=\"dragusername\"\r\n                      autocomplete=\"off\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12 form-group mb-3 pb-2\">\r\n                  <div className=\"input-group\">\r\n                    <NormalInput\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder=\"Password\"\r\n                      value={dragpassword}\r\n                      name=\"dragpassword\"\r\n                      autocomplete=\"off\"\r\n                      onChange={e => this.handleInputChange(e)}\r\n                    />\r\n                    <div className=\"input-group-addon right fs-14\">\r\n                      <span\r\n                        onClick={() => this.toggle(\"passwordVisible\")}\r\n                        className={`icon-${\r\n                          passwordVisible ? \"eye\" : \"eye-blocked\"\r\n                        } cursor-pointer fs-24`}\r\n                      ></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group mb-0 p-0 d-flex justify-content-center col-12\">\r\n                  <NormalButton\r\n                    onClick={this.handleLoginSubmit}\r\n                    label=\"PROCEED\"\r\n                    className=\"col-12 submit-btn\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </NormalModal>\r\n          <div className=\"col-12\">\r\n            {isTreatementModal ? (\r\n              <TreatmentPackage\r\n                isTreatementModal={isTreatementModal}\r\n                handleTreatementmodal={this.handleTreatementmodal}\r\n                handleSelectPackage={this.handleSelectPackage}\r\n                customerNumber={\r\n                  this.props.appointmentCustomerDetail.customerName\r\n                }\r\n                custName={this.props.appointmentCustomerDetail.custName}\r\n                custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n                cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n                CustomerRemark={\r\n                  this.props.appointmentCustomerDetail.cust_remark\r\n                }\r\n                CustomerRemarkFlag={false}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          {console.log(\r\n            this.props.appointmentCustomerDetail,\r\n            \"appointmentcustomerdetail\"\r\n          )}\r\n          {isTreatmentHistoryModal ? (\r\n            <TreatmentHistory\r\n              isTreatmentHistoryModal={isTreatmentHistoryModal}\r\n              handleTreatmentHistory={this.handleTreatmentHistory}\r\n              customerNumber={this.props.appointmentCustomerDetail.customerName}\r\n              custName={this.props.appointmentCustomerDetail.custName}\r\n              custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n              cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n              CustomerRemark={this.props.appointmentCustomerDetail.cust_remark}\r\n              CustomerRemarkFlag={true}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {isUpcomingAppointmentModal ? (\r\n            <UpcomingAppointment\r\n              isUpcomingAppointmentModal={isUpcomingAppointmentModal}\r\n              handleUpcomingAppointment={this.handleUpcomingAppointment}\r\n              customerNumber={this.props.appointmentCustomerDetail.customerName}\r\n              custName={this.props.appointmentCustomerDetail.custName}\r\n              custPhone={this.props.appointmentCustomerDetail.custPhone}\r\n              cust_refer={this.props.appointmentCustomerDetail.cust_refer}\r\n              CustomerRemark={this.props.appointmentCustomerDetail.cust_remark}\r\n              CustomerRemarkFlag={false}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mt-2\">\r\n          <div className=\"d-flex flex-wrap justify-content-center\">\r\n            <NormalButton\r\n              buttonClass={`p-2`}\r\n              mainbg={true}\r\n              className=\"col-12\"\r\n              label=\"Package\"\r\n              onClick={this.handleTreatementmodal}\r\n            />\r\n            <NormalButton\r\n              buttonClass={`p-2`}\r\n              mainbg={true}\r\n              className=\"col-12\"\r\n              label=\"Upcoming\"\r\n              onClick={this.handleUpcomingAppointment}\r\n            />\r\n            <NormalButton\r\n              buttonClass={`p-2`}\r\n              mainbg={true}\r\n              className=\"col-12\"\r\n              label=\"History\"\r\n              onClick={this.handleTreatmentHistory}\r\n            />\r\n            {/* {String(tokenDetail.role_code).toUpperCase() !== \"4\" &&\r\n                appointmentId ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Profile\"\r\n                    onClick={() =>\r\n                      history.push(`/admin/customerplus/${customerId}/account`)\r\n                    }\r\n                  />\r\n                ) : null}\r\n                {String(tokenDetail.role_code).toUpperCase() !== \"4\" &&\r\n                appointmentId ? (\r\n                  <NormalButton\r\n                    buttonClass={`p-2`}\r\n                    mainbg={true}\r\n                    className=\"col-12\"\r\n                    label=\"Cart\"\r\n                    onClick={this.handleGotoCart}\r\n                  />\r\n                ) : null} */}\r\n\r\n            {!appointmentId &&\r\n            this.props.AppointmentCopy &&\r\n            this.props.AppointmentCopy.appointmentId > 0 ? (\r\n              <NormalButton\r\n                buttonClass={`p-2`}\r\n                mainbg={true}\r\n                className=\"col-12\"\r\n                label=\"Paste Appt.\"\r\n                onClick={this.handlePasteAppointment}\r\n              />\r\n            ) : null}\r\n            {appointmentId ? (\r\n              <NormalButton\r\n                buttonClass={`p-2`}\r\n                mainbg={true}\r\n                className=\"col-12\"\r\n                label=\"Copy Appt.\"\r\n                onClick={this.handleCopyAppointment}\r\n              />\r\n            ) : null}\r\n            <NormalButton\r\n              buttonClass={`p-2`}\r\n              resetbg={true}\r\n              className=\"col-12\"\r\n              label=\"Cancel\"\r\n              onClick={this.handleCloseDialog}\r\n            />\r\n\r\n            <NormalButton\r\n              buttonClass={`p-2`}\r\n              submitBtn={true}\r\n              label={appointmentId ? \"Update\" : \"Confirm\"}\r\n              // onClick={e => {\r\n              //   e.target.setAttribute(\"disabled\", true);\r\n              //   this.handleUpdate();\r\n              // }}\r\n              onClick={_.debounce(async () => {\r\n                await this.handleLoginPopupCheck();\r\n              }, 500)}\r\n            />\r\n            {/* {appointmentId ? (\r\n              <NormalButton\r\n                buttonClass={`p-2`}\r\n                submitBtn={true}\r\n                label=\"Update\"\r\n                onClick={this.handleUpdate}\r\n              />\r\n            ) : (\r\n              <NormalButton\r\n                buttonClass={`p-2`}\r\n                submitBtn={true}\r\n                className=\"col-12\"\r\n                label=\"Confirm\"\r\n                onClick={this.handleSubmit}\r\n              />\r\n            )} */}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  customerDetail: state.appointment.customerDetail,\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selectedTreatmentList: state.appointment.selectedTreatmentList,\r\n  basicApptDetail: state.appointment.basicApptDetail,\r\n  appointmentCustomerDetail: state.appointment.appointmentCustomerDetail,\r\n  appointmentTreatmentList: state.appointment.appointmentTreatmentList,\r\n  AppointmentCopy: state.appointment.AppointmentCopy,\r\n  tokenDetail: state.authStore.tokenDetails,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      updateForm,\r\n      getSelectedTreatmentList,\r\n      getCommonApi,\r\n      commonCreateApi,\r\n      commonPatchApi,\r\n      commonDeleteApi,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const MobileSelectTreatment = withTranslation()(\r\n  connect(mapStateToProps, mapDispatchToProps)(MobileSelectTreatmentClass)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}