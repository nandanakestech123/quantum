{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\component\\\\common\\\\NormalFileUpload\\\\index.js\";\n// import React, { useState } from 'react'\n// import Dropzone from 'react-dropzone'\n// // import { api } from \"services/api\"\n// import { Toast } from \"service/toast\";\n// // import { fileUpload } from \"services/apiVariables\"\n// import uploaderImg from 'assets/images/uploader-img.svg';\n// export const NormalFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\n//     const [loader, changeLoader] = useState(false);\n//     return (\n//         <Dropzone\n//             disabled={disabled}\n//             onDrop={(files, a) => {\n//                 if (files.length) {\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\n//                         return ''\n//                     }\n//                     changeLoader(true)\n//                     handleFileUpload(files)\n//                     uploadFile(files).then((res) => {\n//                         if (handleFileUpload) {\n//                             handleFileUpload(res.data)\n//                             changeLoader(false)\n//                         }\n//                     }).catch((err) => {\n//                         changeLoader(false)\n//                     })\n//                 } else {\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\n//                 }\n//             }}>\n//             {({ getRootProps, getInputProps }) => (\n//                 <>\n//                     {(multiButton) ?\n//                         <div className={`${className} position-relative `}>\n//                             {children}\n//                             {(multiButton) ?\n//                                 <input {...getInputProps()} />\n//                                 : <input />}\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                             {(multiButton) ?\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Upload</span>\n//                                     </div>\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Remove</span>\n//                                     </div>\n//                                 </div>\n//                                 : ''}\n//                         </div>\n//                         :\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\n//                             {children}\n//                             <input {...getInputProps()} />\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                         </div>\n//                     }\n//                 </>\n//             )\n//             }\n//         </Dropzone >\n//     )\n// }\n// const uploadFile = ([file]) => {\n//     return new Promise((resolve, reject) => {\n//         let formData = new FormData()\n//         formData.append('key1', file)\n//         // fileUpload.body = formData\n//         // api(fileUpload).then((res) => {\n//         //     resolve(res)\n//         // }).catch((err) => {\n//         //     reject(reject)\n//         //     if (err.statusCode === 413) {\n//         //         Toast({ type: 'error', message: err.message });\n//         //     }\n//         // })\n//     })\n// }\n// const checkFileValidation = (files, validationType) => {\n//     return files.every((file) => {\n//         let temp = file.name.split('.')\n//         let type = temp[temp.length - 1]\n//         return validationType.indexOf(type) != -1\n//     })\n// }\n// const accept = (type) => {\n//     if (type == 'image') {\n//         return 'image/*'\n//     } else if (type == 'pdf') {\n//         return 'pdf/*'\n//     }\n// }\nimport React, { Component } from \"react\";\nimport { withTranslation } from \"react-i18next\";\n\nclass NormalFileUploadClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileArray: [],\n      imageArray: [],\n      filename: \"\"\n    };\n\n    this.uploadImageFiles = e => {\n      let {\n        fileArray,\n        imageArray\n      } = this.state;\n\n      if (fileArray.length < 5) {\n        fileArray.push(URL.createObjectURL(e.target.files[0]));\n        imageArray.push(e.target.files[0]);\n        this.setState({\n          fileArray,\n          imageArray\n        });\n      }\n    };\n\n    this.handlefile = e => {\n      let img = new FormData();\n      img.append(\"images\", e.target.files[0]);\n      this.props.handleFileUpload(e.target.files[0]);\n      this.setState({\n        filename: e.target.files[0].name\n      }); // console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\n    };\n\n    this.removepostFile = (e, name) => {\n      let {\n        fileArray\n      } = this.state;\n      let index = fileArray.indexOf(name);\n\n      if (index === 0) {\n        fileArray.shift();\n      } else {\n        fileArray.pop();\n      }\n\n      this.setState({\n        fileArray\n      });\n    };\n  }\n\n  render() {\n    let {\n      fileArray,\n      filename\n    } = this.state;\n    let {\n      t\n    } = this.props;\n    console.log(fileArray);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap image-upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-0\",\n      onChange: this.uploadImageFiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"fileUpload\",\n      className: \"btn upload-btn cursor-pointer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }, t(\"Upload File\")), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handlefile,\n      type: \"file\",\n      id: \"fileUpload\",\n      accept: \"file/*\",\n      className: \"d-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    })), (fileArray || []).map(url => /*#__PURE__*/React.createElement(React.Fragment, null, filename, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"position-relative image-folder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"close-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-close fs-10 pl-5\",\n      onClick: e => this.removepostFile(e, url),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 37\n      }\n    })))))));\n  }\n\n}\n\nexport const NormalFileUpload = withTranslation()(NormalFileUploadClass);","map":{"version":3,"sources":["F:/webfe/src/component/common/NormalFileUpload/index.js"],"names":["React","Component","withTranslation","NormalFileUploadClass","state","fileArray","imageArray","filename","uploadImageFiles","e","length","push","URL","createObjectURL","target","files","setState","handlefile","img","FormData","append","props","handleFileUpload","name","removepostFile","index","indexOf","shift","pop","render","t","console","log","map","url","NormalFileUpload"],"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","sourcesContent":["// import React, { useState } from 'react'\r\n// import Dropzone from 'react-dropzone'\r\n// // import { api } from \"services/api\"\r\n// import { Toast } from \"service/toast\";\r\n// // import { fileUpload } from \"services/apiVariables\"\r\n\r\n// import uploaderImg from 'assets/images/uploader-img.svg';\r\n\r\n// export const NormalFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\r\n\r\n//     const [loader, changeLoader] = useState(false);\r\n\r\n//     return (\r\n//         <Dropzone\r\n//             disabled={disabled}\r\n//             onDrop={(files, a) => {\r\n//                 if (files.length) {\r\n\r\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\r\n\r\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\r\n\r\n//                         return ''\r\n//                     }\r\n\r\n//                     changeLoader(true)\r\n\r\n//                     handleFileUpload(files)\r\n\r\n//                     uploadFile(files).then((res) => {\r\n\r\n//                         if (handleFileUpload) {\r\n\r\n//                             handleFileUpload(res.data)\r\n\r\n//                             changeLoader(false)\r\n\r\n//                         }\r\n\r\n//                     }).catch((err) => {\r\n\r\n//                         changeLoader(false)\r\n\r\n//                     })\r\n\r\n//                 } else {\r\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\r\n//                 }\r\n\r\n//             }}>\r\n\r\n//             {({ getRootProps, getInputProps }) => (\r\n//                 <>\r\n//                     {(multiButton) ?\r\n//                         <div className={`${className} position-relative `}>\r\n//                             {children}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <input {...getInputProps()} />\r\n//                                 : <input />}\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\r\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Upload</span>\r\n//                                     </div>\r\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Remove</span>\r\n//                                     </div>\r\n//                                 </div>\r\n//                                 : ''}\r\n//                         </div>\r\n//                         :\r\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\r\n\r\n//                             {children}\r\n\r\n//                             <input {...getInputProps()} />\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n//                         </div>\r\n//                     }\r\n\r\n//                 </>\r\n\r\n//             )\r\n//             }\r\n//         </Dropzone >\r\n//     )\r\n// }\r\n\r\n// const uploadFile = ([file]) => {\r\n\r\n//     return new Promise((resolve, reject) => {\r\n\r\n//         let formData = new FormData()\r\n\r\n//         formData.append('key1', file)\r\n\r\n//         // fileUpload.body = formData\r\n\r\n//         // api(fileUpload).then((res) => {\r\n//         //     resolve(res)\r\n//         // }).catch((err) => {\r\n//         //     reject(reject)\r\n//         //     if (err.statusCode === 413) {\r\n//         //         Toast({ type: 'error', message: err.message });\r\n//         //     }\r\n//         // })\r\n//     })\r\n// }\r\n\r\n// const checkFileValidation = (files, validationType) => {\r\n\r\n//     return files.every((file) => {\r\n\r\n//         let temp = file.name.split('.')\r\n\r\n//         let type = temp[temp.length - 1]\r\n\r\n//         return validationType.indexOf(type) != -1\r\n\r\n//     })\r\n\r\n// }\r\n\r\n// const accept = (type) => {\r\n\r\n//     if (type == 'image') {\r\n\r\n//         return 'image/*'\r\n\r\n//     } else if (type == 'pdf') {\r\n\r\n//         return 'pdf/*'\r\n\r\n//     }\r\n\r\n// }\r\n\r\nimport React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nclass NormalFileUploadClass extends Component {\r\n    state = {\r\n        fileArray: [],\r\n        imageArray: [],\r\n        filename: \"\",\r\n    };\r\n\r\n    uploadImageFiles = (e) => {\r\n        let { fileArray, imageArray } = this.state;\r\n        if (fileArray.length < 5) {\r\n            fileArray.push(URL.createObjectURL(e.target.files[0]));\r\n            imageArray.push(e.target.files[0]);\r\n            this.setState({ fileArray, imageArray });\r\n        }\r\n    };\r\n\r\n    handlefile = (e) => {\r\n        let img = new FormData();\r\n        img.append(\"images\", e.target.files[0]);\r\n        this.props.handleFileUpload(e.target.files[0]);\r\n        this.setState({ filename: e.target.files[0].name })\r\n        // console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\r\n    };\r\n\r\n    removepostFile = (e, name) => {\r\n        let { fileArray } = this.state;\r\n        let index = fileArray.indexOf(name);\r\n        if (index === 0) {\r\n            fileArray.shift();\r\n        } else {\r\n            fileArray.pop();\r\n        }\r\n        this.setState({\r\n            fileArray,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { fileArray, filename } = this.state;\r\n        let { t } = this.props;\r\n        console.log(fileArray);\r\n        return (\r\n            <>\r\n                <div className=\"d-flex flex-wrap image-upload\">\r\n                    <div className=\"p-0\" onChange={this.uploadImageFiles}>\r\n                        {/* <input type=\"file\" className=\"px-2 cursor-pointer custom-file-input\" accept=\"image/*,video/*\"  /> */}\r\n                        <label\r\n                            htmlFor=\"fileUpload\"\r\n                            className=\"btn upload-btn cursor-pointer\"\r\n                        >\r\n                            {t(\"Upload File\")}\r\n                        </label>\r\n                        <input\r\n                            onChange={this.handlefile}\r\n                            type=\"file\"\r\n                            id=\"fileUpload\"\r\n                            accept=\"file/*\"\r\n                            className=\"d-none\"\r\n                        ></input>\r\n                          \r\n                    </div>\r\n                    {(fileArray || []).map((url) => (\r\n                        <>\r\n                        {filename}\r\n                            <div className=\"position-relative image-folder\">\r\n                              \r\n                                <div className=\"close-icon\">\r\n                                    <span\r\n                                        className=\"icon-close fs-10 pl-5\"\r\n                                        onClick={(e) => this.removepostFile(e, url)}\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport const NormalFileUpload = withTranslation()(NormalFileUploadClass);\r\n"]},"metadata":{},"sourceType":"module"}