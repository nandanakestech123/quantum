{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\pages\\\\Auth\\\\ChangePassword.js\";\nimport React, { Component } from \"react\";\nimport { NormalInput, NormalButton } from \"component/common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { resetPassword, getTokenVerify } from \"redux/actions/auth\";\nexport class ChangePasswordClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formDetails: {\n        newPassword: \"\",\n        reEnterPassword: \"\"\n      },\n      newPasswordVisible: false,\n      reEnterPasswordVisible: false\n    };\n\n    this.toggle = key => {\n      this.setState(prevState => ({\n        [key]: !prevState[key]\n      }));\n    };\n\n    this.handleInput = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formDetails = Object.assign({}, this.state.formDetails);\n      formDetails[name] = value;\n      this.setState({\n        formDetails\n      });\n    };\n\n    this.handleChangePsssword = event => {\n      event.preventDefault();\n\n      if (this.validator.allValid()) {\n        let {\n          newPassword\n        } = this.state.formDetails;\n        let data = {\n          new_password: newPassword\n        };\n        this.props.resetPassword(`?emp_name=${this.props.match.params.name}`, data).then(() => {\n          this.props.history.push(\"/auth/login\");\n        });\n      } else {\n        this.validator.showMessages();\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.validator = new SimpleReactValidator({\n      validators: {\n        // password: {\n        //   message: 'The :attribute must be a valid format.',\n        //   rule: (val, params, validator) => {\n        //     return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\n        //   },\n        //   messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\n        //   required: true\n        // },\n        checkPassword: {\n          message: \"Given :attribute does not match\",\n          rule: function (val, params) {\n            return val === params[0];\n          }\n        }\n      },\n      element: message => /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-message font-md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, message),\n      autoForceUpdate: this\n    });\n  }\n\n  componentDidMount() {// this.props.getTokenVerify({ token: getUrlParameter(\"token\") });\n  }\n\n  render() {\n    let {\n      newPasswordVisible,\n      reEnterPasswordVisible\n    } = this.state;\n    let {\n      newPassword,\n      reEnterPassword\n    } = this.state.formDetails;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"changePassword\",\n      className: \"h-100 py-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-left common-heading pb-5 fs-28\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"Reset Password\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-4 pb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      type: newPasswordVisible ? \"text\" : \"password\",\n      name: \"newPassword\",\n      placeholder: \"New Password\",\n      value: newPassword,\n      onChange: this.handleInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-addon right fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.toggle(\"newPasswordVisible\"),\n      className: `icon-${newPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }))), this.validator.message(\"password\", newPassword, \"required|password\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-5 pb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      type: reEnterPasswordVisible ? \"text\" : \"password\",\n      name: \"reEnterPassword\",\n      placeholder: \"Confirm  New Password\",\n      value: reEnterPassword,\n      onChange: this.handleInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-addon right fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.toggle(\"reEnterPasswordVisible\"),\n      className: `icon-${reEnterPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }))), this.validator.message(\"Password\", reEnterPassword, `required|checkPassword:${newPassword}`)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-0 pt-5 d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      onClick: this.handleChangePsssword,\n      mainbg: true,\n      className: \"mr-2 col-12\",\n      label: \"continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    resetPassword,\n    getTokenVerify\n  }, dispatch);\n};\n\nlet component = ChangePasswordClass;\nexport const ChangePassword = connect(null, mapDispatchToProps)(component);","map":{"version":3,"sources":["E:/newfrontend/webfe/src/pages/Auth/ChangePassword.js"],"names":["React","Component","NormalInput","NormalButton","connect","bindActionCreators","SimpleReactValidator","resetPassword","getTokenVerify","ChangePasswordClass","state","formDetails","newPassword","reEnterPassword","newPasswordVisible","reEnterPasswordVisible","toggle","key","setState","prevState","handleInput","target","value","name","Object","assign","handleChangePsssword","event","preventDefault","validator","allValid","data","new_password","props","match","params","then","history","push","showMessages","componentWillMount","validators","checkPassword","message","rule","val","element","autoForceUpdate","componentDidMount","render","mapDispatchToProps","dispatch","component","ChangePassword"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NormalInput, NormalButton } from \"component/common\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport { resetPassword, getTokenVerify } from \"redux/actions/auth\";\r\n\r\nexport class ChangePasswordClass extends Component {\r\n  state = {\r\n    formDetails: {\r\n      newPassword: \"\",\r\n      reEnterPassword: \"\"\r\n    },\r\n    newPasswordVisible: false,\r\n    reEnterPasswordVisible: false\r\n  };\r\n\r\n  toggle = key => {\r\n    this.setState(prevState => ({\r\n      [key]: !prevState[key]\r\n    }));\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.validator = new SimpleReactValidator({\r\n      validators: {\r\n        // password: {\r\n        //   message: 'The :attribute must be a valid format.',\r\n        //   rule: (val, params, validator) => {\r\n        //     return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\r\n        //   },\r\n        //   messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\r\n        //   required: true\r\n        // },\r\n        checkPassword: {\r\n          message: \"Given :attribute does not match\",\r\n          rule: function (val, params) {\r\n            return val === params[0];\r\n          }\r\n        }\r\n      },\r\n      element: message => (\r\n        <span className=\"error-message font-md\">{message}</span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.props.getTokenVerify({ token: getUrlParameter(\"token\") });\r\n  }\r\n\r\n  handleInput = ({ target: { value, name } }) => {\r\n    let formDetails = Object.assign({}, this.state.formDetails);\r\n\r\n    formDetails[name] = value;\r\n\r\n    this.setState({\r\n      formDetails\r\n    });\r\n  };\r\n\r\n  handleChangePsssword = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.validator.allValid()) {\r\n      let { newPassword } = this.state.formDetails;\r\n      let data = {\r\n        new_password : newPassword\r\n      }\r\n      this.props.resetPassword(`?emp_name=${this.props.match.params.name}`, data).then(() => {\r\n        this.props.history.push(\"/auth/login\");\r\n      });\r\n    } else {\r\n      this.validator.showMessages();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { newPasswordVisible, reEnterPasswordVisible } = this.state;\r\n\r\n    let { newPassword, reEnterPassword } = this.state.formDetails;\r\n\r\n    return (\r\n      <>\r\n        <div id=\"changePassword\" className=\"h-100 py-5\">\r\n          <h1 className=\"text-left common-heading pb-5 fs-28\">Reset Password</h1>\r\n          <div className=\"form-group mb-4 pb-3\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                type={newPasswordVisible ? \"text\" : \"password\"}\r\n                name=\"newPassword\"\r\n                placeholder=\"New Password\"\r\n                value={newPassword}\r\n                onChange={this.handleInput}\r\n              />\r\n              <div className=\"input-group-addon right fs-14\">\r\n                <span\r\n                  onClick={() => this.toggle(\"newPasswordVisible\")}\r\n                  className={`icon-${newPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`}\r\n                ></span>\r\n              </div>\r\n            </div>\r\n            {this.validator.message(\r\n              \"password\",\r\n              newPassword,\r\n              \"required|password\"\r\n            )}\r\n          </div>\r\n          <div className=\"form-group mb-5 pb-5\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                type={reEnterPasswordVisible ? \"text\" : \"password\"}\r\n                name=\"reEnterPassword\"\r\n                placeholder=\"Confirm  New Password\"\r\n                value={reEnterPassword}\r\n                onChange={this.handleInput}\r\n              />\r\n              <div className=\"input-group-addon right fs-14\">\r\n                <span\r\n                  onClick={() => this.toggle(\"reEnterPasswordVisible\")}\r\n                  className={`icon-${reEnterPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`}\r\n                ></span>\r\n              </div>\r\n            </div>\r\n            {this.validator.message(\r\n              \"Password\",\r\n              reEnterPassword,\r\n              `required|checkPassword:${newPassword}`\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"form-group mb-0 pt-5 d-flex justify-content-center\">\r\n            <NormalButton\r\n              onClick={this.handleChangePsssword}\r\n              mainbg={true}\r\n              className=\"mr-2 col-12\"\r\n              label=\"continue\"\r\n              />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      resetPassword,\r\n      getTokenVerify\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nlet component = ChangePasswordClass;\r\n\r\nexport const ChangePassword = connect(null, mapDispatchToProps)(component);\r\n"]},"metadata":{},"sourceType":"module"}