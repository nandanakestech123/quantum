{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\Admin\\\\Cart\\\\cart\\\\payment.js\";\nimport React, { Component } from \"react\";\nimport { NormalInput, NormalTextarea, NormalButton, NormalSelect, NormalDate, NormalModal } from \"component/common\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\nimport { getPayment, createPayment } from \"redux/actions/payment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { history } from \"helpers\";\nimport { getCommonApi } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport closeIcon from \"assets/images/close.png\";\nimport helpers from \"../../../../service/Helper\";\n\nconst moment = require(\"moment\");\n\nexport class MakePaymentClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formFields: {\n        name: \"\",\n        contact: \"\",\n        address: \"\",\n        searchStaff: \"\",\n        payTableDropDownValue: \"\"\n      },\n      responseData: {},\n      premisesOption: [],\n      selectedCards: [],\n      selectedCardsPayAmount: 0,\n      cardOption: [],\n      ewalletoptions: [],\n      ewalletField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true\n      },\n      cardField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true,\n        pay_rem1: \"\",\n        pay_rem2: \"\",\n        pay_rem3: \"\",\n        pay_rem4: \"\",\n        App_code: \"\"\n      },\n      balance: 0,\n      errorMessage: \"123\",\n      prepaidCustomerData: [],\n      voucherCustomerData: [],\n      creditNoteCustomerData: [],\n      accountHeader: [],\n      isMakePaymentButtonClicked: \"false\",\n      isTreatmentDoneButton: true,\n      itemProductAmount: 0,\n      itemServiceAmount: 0,\n      itemProductServiceVoucherAmount: 0,\n      displayTablePrepaid: [],\n      displayTableCreditNote: [],\n      displayTableVoucher: [],\n      paytableData: [],\n      paytableFullData: [],\n      payGroupData: [],\n      selectPaymentGroup: \"\",\n      selectPaymentGroupId: \"\",\n      isSelectedPaymentType: \"\",\n      displayModelPaymentType: \"\",\n      txtUserPayAmount: 0,\n      isOpenSubPayment: false,\n      pay_rem4: \"\"\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n    };\n\n    this.getPayment = () => {\n      let {\n        id,\n        cartId,\n        cartData\n      } = this.props; //id = 82318;\n      //cartId = \"ICMD100226\";\n      //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\n\n      if (id) {\n        this.props.getPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`).then(res => {\n          this.setState({\n            responseData: res.data,\n            balance: Number(res.data.billable_amount),\n            txtUserPayAmount: Number(res.data.billable_amount)\n          });\n        });\n      } else {// history.push(\"/admin/cart\");\n      } //let {cartData} = this.props;\n\n\n      let stringifiedCartData = cartData.data;\n      console.log(stringifiedCartData);\n      let {\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      } = this.state;\n\n      if (stringifiedCartData) {\n        stringifiedCartData.map(item => {\n          //alert(JSON.stringify(item));\n          if (item.recorddetail === \"Product\") {\n            itemProductAmount += parseFloat(item.total_price);\n          }\n\n          if (item.recorddetail === \"Service\") {\n            itemServiceAmount += parseFloat(item.total_price);\n            console.log(itemServiceAmount);\n            console.log(item.total_price);\n          }\n\n          if (item.recorddetail === \"Product\" || item.recorddetail === \"Service\" || item.recorddetail === \"Voucher\") {\n            itemProductServiceVoucherAmount += parseFloat(item.total_price);\n          }\n        });\n      }\n\n      this.setState({\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      });\n    };\n\n    this.getDataFromResponses = data => {\n      let {\n        cardOption,\n        premisesOption\n      } = this.state;\n\n      for (let key of data.CARD) {\n        cardOption.push({\n          label: key.pay_description,\n          value: key.id\n        });\n      }\n\n      for (let key of data.CASH) {\n        premisesOption.push({\n          label: key.pay_description,\n          value: key.id\n        });\n      }\n\n      this.setState({\n        cardOption,\n        premisesOption\n      });\n    };\n\n    this.handleMultiple = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      console.log(\"handleMultiple\", value, name);\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n    };\n\n    this.getVoucherData = api => {\n      this.props.getCommonApi(`voucher/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          voucherCustomerData\n        } = this.state;\n        voucherCustomerData = data;\n        console.log(\"voucherCustomerData\", data); // accountHeader = header_data;\n\n        this.setState({\n          voucherCustomerData\n        }, () => {\n          console.log(\"test\");\n          this.HideVoucherTableData();\n        });\n      });\n    };\n\n    this.getPrepaidData = () => {\n      this.getPrepaidAccountData(\"\");\n    };\n\n    this.getPrepaidAccountData = api => {\n      console.log(\"dd\");\n      this.props.getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          prepaidCustomerData\n        } = this.state;\n        prepaidCustomerData = data;\n        console.log(\"prepaidCustomerData\", data); // accountHeader = header_data;\n\n        this.setState({\n          prepaidCustomerData\n        }, () => {\n          this.HidePrepaidTableData();\n        });\n      });\n    };\n\n    this.getCreditNoteAccountData = api => {\n      this.props.getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          creditNoteCustomerData\n        } = this.state;\n        creditNoteCustomerData = data; // accountHeader = header_data;\n\n        this.setState({\n          creditNoteCustomerData\n        }, () => {\n          this.HideCreditNoteTableData();\n        });\n      });\n    };\n\n    this.getPayGroup = () => {\n      this.props.getCommonApi(`paygroup/`).then(res => {\n        let {\n          payGroupData\n        } = this.state;\n\n        for (let key of res.data) {\n          payGroupData.push({\n            label: key.pay_group_code,\n            value: key.id,\n            picturelocation: key.picturelocation\n          });\n        }\n\n        this.setState({\n          payGroupData\n        });\n      });\n    };\n\n    this.getFullPayTable = () => {\n      this.props.getCommonApi(`paytablenew/`).then(res => {\n        let {\n          paytableFullData\n        } = this.state;\n        paytableFullData = res.data;\n        this.setState({\n          paytableFullData\n        });\n      });\n    };\n\n    this.getPayTableNameBasedOnId = payTableId => {\n      let {\n        paytableFullData\n      } = this.state;\n      const test = paytableFullData.filter(res => res.id == payTableId);\n      return test[0].pay_description;\n    };\n\n    this.handleChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n      let {\n        balance,\n        selectedCards,\n        txtUserPayAmount,\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      selectedCards.push({\n        pay_typeid: value,\n        pay_amt: parseFloat(txtUserPayAmount),\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false,\n        pay_rem4: this.state.pay_rem4\n      });\n      balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n      txtUserPayAmount = balance;\n      this.setState({\n        txtUserPayAmount,\n        balance,\n        isOpenSubPayment\n      });\n    };\n\n    this.handleCreditChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      this.setState({\n        cardField\n      });\n    };\n\n    this.handleTreatmentDone = () => {\n      let {\n        selectedCards\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: 2,\n        pay_amt: 0,\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false,\n        pay_rem4: this.state.pay_rem4\n      });\n      let data = selectedCards;\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`, data).then(res => {\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n    };\n\n    this.handleSubmit = () => {\n      let {\n        selectedCards\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"true\"\n      });\n      let data = selectedCards;\n      console.log(\"SubmitData\", data);\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`, data).then(res => {\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n    };\n\n    this.addCreditCard = async () => {\n      if (!this.validator.fieldValid(\"cardFieldType\")) {\n        this.validator.showMessageFor(\"cardFieldType\");\n        return;\n      }\n\n      let {\n        cardField,\n        selectedCards,\n        balance,\n        responseData,\n        txtUserPayAmount\n      } = this.state;\n      let userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (parseFloat(this.state.responseData.billable_amount) > 0) {\n        if (userPayAmount == 0) {\n          return;\n        }\n      }\n\n      if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\n        alert(this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\");\n        return;\n      } else {\n        selectedCards.push({\n          pay_typeid: cardField.pay_typeid,\n          pay_amt: userPayAmount,\n          credit_debit: true,\n          pay_premise: false,\n          pay_rem1: cardField.pay_rem1,\n          pay_rem2: cardField.pay_rem2,\n          pay_rem3: cardField.pay_rem3,\n          pay_rem4: this.state.pay_rem4,\n          prepaid: false\n        });\n      }\n\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addPrepaid = selectedPrepaid => {\n      const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\"YYYY-MM-DD\");\n      const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n      const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\n      let userPayAmount = 0;\n      let {\n        itemServiceAmount,\n        itemProductAmount,\n        itemProductServiceVoucherAmount,\n        txtUserPayAmount\n      } = this.state;\n      console.log(txtUserPayAmount);\n      userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (isValid) {\n        alert(\"Check Expiry Date\");\n        return;\n      }\n\n      if (userPayAmount <= 0) {\n        // alert(\"hi\");\n        return;\n      }\n\n      const selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\n\n      if (selectedRemainingPrepaidAmount < userPayAmount) {//return\n      }\n      /*\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      */\n\n\n      if (selectedPrepaid.conditiontype1 === \"Service Only\") {\n        //For Service\n        if (parseFloat(itemServiceAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemServiceAmount);\n          console.log(itemServiceAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemServiceAmount = itemServiceAmount - userPayAmount;\n        this.setState({\n          itemServiceAmount\n        });\n      } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\n        //For Product\n        if (parseFloat(itemProductAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductAmount = itemProductAmount - userPayAmount;\n        this.setState({\n          itemProductAmount\n        });\n      } else {\n        if (parseFloat(itemProductServiceVoucherAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemProductServiceVoucherAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductServiceVoucherAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductServiceVoucherAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductServiceVoucherAmount = itemProductServiceVoucherAmount - userPayAmount;\n        this.setState({\n          itemProductServiceVoucherAmount\n        });\n      }\n\n      if (userPayAmount == 0) {\n        return;\n      }\n\n      const payTypeId = 23;\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        selectedCards,\n        isOpenSubPayment\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: true,\n        pay_amt: userPayAmount,\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedPrepaid.pp_no + \" - \" + selectedPrepaid.line_no + \" - \" + selectedPrepaid.pp_desc,\n        pay_rem2: selectedPrepaid.id,\n        pay_rem4: this.state.pay_rem4,\n        prepaid_ct: selectedPrepaid.conditiontype1\n      });\n      console.log(\"BeforeAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      let setdisplayTablePrepaid = this.state.displayTablePrepaid;\n      setdisplayTablePrepaid.push(selectedPrepaid.id);\n      this.setState({\n        displayTablePrepaid: setdisplayTablePrepaid\n      });\n      console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      this.HidePrepaidTableData();\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setBalanceToAllTextBoxes(balance);\n      console.log(balance);\n      this.setState({\n        isOpenSubPayment: false\n      });\n    };\n\n    this.addVoucher = selectedVoucher => {\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        isOpenSubPayment,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        return;\n      }\n\n      const selectedVoucherAmount = parseFloat(selectedVoucher.value);\n      let pay_amt_setup = 0;\n\n      if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedVoucherAmount;\n      } else {\n        alert(\"Partial Amount is not applicable in voucher\");\n        return;\n      }\n\n      const payTypeId = 9;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedVoucher.voucher_no,\n        pay_rem2: selectedVoucher.voucher_no,\n        pay_rem4: this.state.pay_rem4\n      });\n      console.log(\"BeforeAdd-displayTableVoucher\", this.state.displayTableVoucher);\n      let setdisplayTableVoucher = this.state.displayTableVoucher;\n      setdisplayTableVoucher.push(selectedVoucher.voucher_no);\n      this.setState({\n        displayTableVoucher: setdisplayTableVoucher\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableVoucher);\n      this.HideVoucherTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addCreditNote = selectedCreditNote => {\n      console.log(selectedCreditNote);\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        return;\n      }\n\n      const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\n      console.log(selectedCreditNoteAmount);\n      let pay_amt_setup = 0;\n\n      if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedCreditNoteAmount;\n      } else {\n        pay_amt_setup = txtUserPayAmount;\n      }\n\n      const payTypeId = 17;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedCreditNote.credit_code,\n        pay_rem2: selectedCreditNote.transaction,\n        pay_rem4: this.state.pay_rem4\n      });\n      console.log(\"BeforeAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      let setdisplayTableCreditNote = this.state.displayTableCreditNote;\n      setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\n      this.setState({\n        displayTableCreditNote: setdisplayTableCreditNote\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      this.HideCreditNoteTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.removeCards = idx => () => {\n      let {\n        selectedCards,\n        balance,\n        cardField,\n        ewalletField,\n        itemProductServiceVoucherAmount,\n        itemProductAmount,\n        itemServiceAmount\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"false\"\n      });\n      balance = parseFloat(balance) + parseFloat(idx.pay_amt);\n      var array = [...selectedCards]; // make a separate copy of the array\n\n      var index = array.indexOf(idx);\n\n      if (idx.pay_typeid == 23) {\n        if (idx.prepaid_ct == \"Product Only\") {\n          itemProductAmount = itemProductAmount + idx.pay_amt;\n        } else if (idx.prepaid_ct == \"Service Only\") {\n          itemServiceAmount = itemServiceAmount + idx.pay_amt;\n        } else {\n          itemProductServiceVoucherAmount = itemProductServiceVoucherAmount + idx.pay_amt;\n        }\n\n        this.setState({\n          itemProductServiceVoucherAmount,\n          itemProductAmount,\n          itemServiceAmount\n        });\n      }\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        this.setState({\n          selectedCards: array,\n          balance\n        });\n      } //console.log(\"idx\", idx);\n\n\n      var removedTerm = idx.pay_typeid; //console.log(\"removedTerm\", removedTerm);\n      //console.log(\"idx.pay_rem2\", idx.pay_rem2);\n\n      if (removedTerm == \"23\") {\n        const items = this.state.displayTablePrepaid;\n        console.log(\"BeforeRemove-displayTablePrepaid\", items);\n        const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTablePrepaid: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTablePrepaid\", this.state.displayTablePrepaid);\n        });\n        this.getPrepaidAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"17\") {\n        const items = this.state.displayTableCreditNote;\n        console.log(\"BeforeRemove-displayTableCreditNote\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableCreditNote: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableCreditNote\", this.state.displayTableCreditNote);\n        });\n        this.getCreditNoteAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"9\") {\n        const items = this.state.displayTableVoucher;\n        console.log(\"BeforeRemove-displayTableVoucher\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableVoucher: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableVoucher\", this.state.displayTableVoucher);\n        });\n        this.getVoucherData(\"\");\n      }\n\n      cardField[\"pay_amt\"] = balance;\n      ewalletField[\"pay_amt\"] = balance;\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      this.props.getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`).then(res => {\n        this.setState({\n          paytableData: []\n        });\n        let {\n          paytableData,\n          isSelectedPaymentType,\n          displayModelPaymentType\n        } = this.state;\n        isSelectedPaymentType = selPayTypeName.trim();\n        displayModelPaymentType = selPayTypeName.trim();\n\n        for (let key of res.data) {\n          paytableData.push({\n            label: key.pay_description,\n            value: key.id\n          });\n        }\n\n        this.setState({\n          paytableData\n        }, () => {\n          let {\n            isOpenSubPayment\n          } = this.state;\n\n          if (paytableData.length == 0) {\n            alert(\"Pay Table Not Exists\");\n            return;\n          } else if (selPayTypeName.trim() === \"VOUCHER\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"PREPAID\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"Credit\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"CARD\") {\n            isOpenSubPayment = true;\n          } else if (paytableData.length == 1) {\n            isOpenSubPayment = false;\n            let payTypeId = paytableData[0].value;\n            let {\n              balance,\n              selectedCards,\n              txtUserPayAmount\n            } = this.state;\n\n            if (parseFloat(this.state.responseData.billable_amount) > 0) {\n              if (parseFloat(txtUserPayAmount) == 0) {\n                return;\n              }\n            }\n\n            if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\n              alert(this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"); //alert(\"Already Exists\");\n\n              return;\n            } else {\n              selectedCards.push({\n                pay_typeid: payTypeId,\n                pay_amt: parseFloat(txtUserPayAmount),\n                credit_debit: false,\n                pay_premise: true,\n                prepaid: false,\n                pay_rem4: this.state.pay_rem4\n              });\n              balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n              txtUserPayAmount = balance;\n              this.setState({\n                txtUserPayAmount,\n                balance\n              });\n              return;\n            }\n          } else if (paytableData.length >= 1) {\n            isOpenSubPayment = true;\n            isSelectedPaymentType = \"Multiple\";\n          }\n\n          this.setState({\n            isOpenSubPayment,\n            isSelectedPaymentType,\n            displayModelPaymentType\n          });\n        });\n      });\n    };\n\n    this.handleDialog = async () => {\n      let {\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      await this.setState({\n        isOpenSubPayment\n      });\n    };\n\n    this.handleChangeCard = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      await this.setState({\n        cardField\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPayment();\n    this.getPayGroup();\n    this.getFullPayTable();\n    this.getPrepaidData();\n    this.getCreditNoteAccountData(\"\");\n    this.getVoucherData(\"\");\n  }\n\n  handleChangeTextBox(event) {\n    this.setState({\n      txtUserPayAmount: event.target.value\n    });\n  }\n\n  handleChangeRemarkBox(event) {\n    this.setState({\n      pay_rem4: event.target.value\n    });\n  }\n\n  checkPayTypeIdAlreadyExists(val) {\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\n  }\n\n  HidePrepaidTableData() {\n    let {\n      prepaidCustomerData,\n      displayTablePrepaid\n    } = this.state;\n    displayTablePrepaid.map(item => {\n      var selectedPrepaid = prepaidCustomerData.filter(prepaid => prepaid.id != item);\n      this.setState({\n        prepaidCustomerData: selectedPrepaid\n      });\n    });\n  }\n\n  HideCreditNoteTableData() {\n    let {\n      creditNoteCustomerData,\n      displayTableCreditNote\n    } = this.state;\n    displayTableCreditNote.map(item => {\n      var selectedCreditNote = creditNoteCustomerData.filter(creditNote => creditNote.credit_code != item);\n      this.setState({\n        creditNoteCustomerData: selectedCreditNote\n      });\n    });\n  }\n\n  HideVoucherTableData() {\n    let {\n      voucherCustomerData,\n      displayTableVoucher\n    } = this.state;\n    displayTableVoucher.map(item => {\n      var selectedVoucher = voucherCustomerData.filter(voucher => voucher.voucher_no != item);\n      this.setState({\n        voucherCustomerData: selectedVoucher\n      });\n    });\n  }\n\n  setBalanceToAllTextBoxes(balance) {\n    this.setState({\n      balance: balance,\n      txtUserPayAmount: balance\n    });\n  }\n\n  checkTypeOfCartItemContainsDeposit(cartData) {\n    let stringifiedCartData = cartData.data;\n\n    if (stringifiedCartData) {\n      stringifiedCartData.map(item => {\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\n          this.state.isTreatmentDoneButton = false;\n        }\n      });\n    }\n  }\n\n  render() {\n    let {\n      responseData,\n      balance,\n      isTreatmentDoneButton,\n      payGroupData,\n      paytableData,\n      isOpenSubPayment,\n      isSelectedPaymentType,\n      displayModelPaymentType,\n      cardField,\n      pay_rem4\n    } = this.state;\n    let {\n      payTableDropDownValue\n    } = this.state.formFields;\n    console.log(payTableDropDownValue);\n    let insideRadioButtonData;\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\n\n    if (isSelectedPaymentType == \"VOUCHER\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-bordered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 15\n        }\n      }, \"Vocucher No\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 15\n        }\n      }, \"Value\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 15\n        }\n      }, \"Exp.Date\")), this.state.voucherCustomerData.map((selectedVoucher, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addVoucher.bind(this, selectedVoucher),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 17\n        }\n      }, selectedVoucher.voucher_no), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 17\n        }\n      }, selectedVoucher.value), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 17\n        }\n      }, selectedVoucher.issued_expiry_date)))));\n    } else if (isSelectedPaymentType == \"PREPAID\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 15\n        }\n      }, \"Category\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 15\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 15\n        }\n      }, \"Remaining\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 15\n        }\n      }, \"InvoiceNo\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 15\n        }\n      }, \"ExpDate\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 15\n        }\n      }, \"ConditionType\")), this.state.prepaidCustomerData.map((selectedPrepaid, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addPrepaid.bind(this, selectedPrepaid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_desc), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_total), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.remain), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.prepaid), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.exp_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.conditiontype1)))));\n    } else if (isSelectedPaymentType == \"Credit\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 9\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 15\n        }\n      }, \"Credit #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 15\n        }\n      }, \"Date\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 15\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 15\n        }\n      }, \"Balance\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 15\n        }\n      }, \"Status\")), this.state.creditNoteCustomerData.map((creditNote, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addCreditNote.bind(this, creditNote),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 17\n        }\n      }, creditNote.credit_code), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 17\n        }\n      }, creditNote.sa_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 17\n        }\n      }, creditNote.amount), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 17\n        }\n      }, creditNote.balance), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932,\n          columnNumber: 17\n        }\n      }, creditNote.status)))));\n    } else if (isSelectedPaymentType == \"CARD\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex flex-wrap justify-content-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 15\n        }\n      }, \"Select Card\", /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: cardField.pay_typeid,\n        name: \"pay_typeid\",\n        onChange: this.handleCreditChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 17\n        }\n      })), this.validator.message(\"cardFieldType\", cardField.pay_typeid, \"required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 962,\n          columnNumber: 15\n        }\n      }, \"Card No\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem1,\n        name: \"pay_rem1\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 973,\n          columnNumber: 15\n        }\n      }, \"Name\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem2,\n        name: \"pay_rem2\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 15\n        }\n      }, \"Exp Month / Year\", /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"mm/YYYY\",\n        value: cardField.pay_rem3,\n        name: \"pay_rem3\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 15\n        }\n      }, \"Approval Code\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.App_code,\n        name: \"App_code\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1006,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        mainbg: false,\n        className: \"col-12 mt-4 ml-2 btn-outline-success\",\n        label: \"CONFIRM\",\n        onClick: () => this.addCreditCard(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 15\n        }\n      }))));\n    } else if (isSelectedPaymentType == \"Multiple\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        className: \"col-12 fs-15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 17\n        }\n      }, \"Choose Option\"), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: payTableDropDownValue,\n        name: \"payTableDropDownValue\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 17\n        }\n      })))));\n    } else {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 31\n        }\n      });\n    }\n\n    let payGroupDataContent = [];\n    console.log(payGroupData);\n    payGroupData.forEach((item, i) => {\n      payGroupDataContent.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-1\",\n        style: {\n          width: \"100px\",\n          margin: \"50px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: helpers.getUrl() + \"media/\" + item.picturelocation,\n        label: item.label,\n        onClick: () => this.addNewPaymentData(item.value, item.label),\n        style: {\n          cursor: \"pointer\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          width: \"100px\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 13\n        }\n      }, item.label))));\n    });\n    let {\n      cartId,\n      cartData,\n      tokenDetails\n    } = this.props;\n    console.log(cartId, tokenDetails, this.props.cartData);\n    this.checkTypeOfCartItemContainsDeposit(cartData);\n    let userAddedPayTableData = /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-bordered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 7\n      }\n    }, this.state.selectedCards.map((selectedCards, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 13\n      }\n    }, this.getPayTableNameBasedOnId(selectedCards.pay_typeid)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 13\n      }\n    }, selectedCards.pay_amt.toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 p-0 fs-20 cursor-pointer\",\n      onClick: this.removeCards(selectedCards),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 17\n      }\n    }))))));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"payment-modal\",\n      style: {\n        minWidth: \"800px\"\n      },\n      modal: isOpenSubPayment,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"fs-18 f-600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 15\n      }\n    }, displayModelPaymentType)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 13\n      }\n    }), insideRadioButtonData), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      className: \"col-3 fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 13\n      }\n    }, \"Enter Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: this.state.txtUserPayAmount,\n      onChange: this.handleChangeTextBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 15\n      }\n    }), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|min:0,num\"), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|max:\" + this.state.balance + \",num\")), /*#__PURE__*/React.createElement(Label, {\n      className: \"col-2 fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 13\n      }\n    }, \"Remark\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: pay_rem4,\n      name: \"pay_rem4\",\n      onChange: this.handleChangeRemarkBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 13\n      }\n    }, \"Select Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-12 paymentGroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 11\n      }\n    }, payGroupDataContent)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment-section mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row pl-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-8 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-2 ml-1 payment fs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 17\n      }\n    }, userAddedPayTableData)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-2 ml-1 payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 19\n      }\n    }, \"List of selection's\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 21\n      }\n    }, \"Subtotal\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.subtotal), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 21\n      }\n    }, \"Discount ($)\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.discount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 21\n      }\n    }, \"Transac amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.trans_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 21\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.deposit_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 21\n      }\n    }, responseData.tax_lable), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.tax_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 21\n      }\n    }, \"Billing Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 f-700 text-center text-orenge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 21\n      }\n    }, \"$ \", responseData.billable_amount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 f-600 text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 21\n      }\n    }, \"Balance Amount: \", Number(balance).toFixed(2))))))), isTreatmentDoneButton ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"TREATMENT DONE\",\n      onClick: () => this.handleTreatmentDone(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 15\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200,\n        columnNumber: 11\n      }\n    }, this.state.isMakePaymentButtonClicked == \"true\" ? /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"Make payment\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"Make payment \",\n      onClick: () => this.handleSubmit(),\n      disabled: this.state.selectedCards.length <= 0 || balance > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetail: state.appointment.appointmentDetail,\n  selected_cstomer: state.common.selected_cstomer,\n  tokenDetails: state.authStore.tokenDetails\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getPayment,\n    getCommonApi,\n    createPayment\n  }, dispatch);\n};\n\nexport const Payment = connect(mapStateToProps, mapDispatchToProps)(MakePaymentClass);","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/Admin/Cart/cart/payment.js"],"names":["React","Component","NormalInput","NormalTextarea","NormalButton","NormalSelect","NormalDate","NormalModal","Button","Form","FormGroup","Label","Input","FormText","getPayment","createPayment","connect","bindActionCreators","history","getCommonApi","dateFormat","SimpleReactValidator","closeIcon","helpers","moment","require","MakePaymentClass","state","formFields","name","contact","address","searchStaff","payTableDropDownValue","responseData","premisesOption","selectedCards","selectedCardsPayAmount","cardOption","ewalletoptions","ewalletField","pay_typeid","pay_amt","credit_debit","cardField","pay_rem1","pay_rem2","pay_rem3","pay_rem4","App_code","balance","errorMessage","prepaidCustomerData","voucherCustomerData","creditNoteCustomerData","accountHeader","isMakePaymentButtonClicked","isTreatmentDoneButton","itemProductAmount","itemServiceAmount","itemProductServiceVoucherAmount","displayTablePrepaid","displayTableCreditNote","displayTableVoucher","paytableData","paytableFullData","payGroupData","selectPaymentGroup","selectPaymentGroupId","isSelectedPaymentType","displayModelPaymentType","txtUserPayAmount","isOpenSubPayment","componentWillMount","validator","element","message","autoForceUpdate","id","cartId","cartData","props","Date","then","res","setState","data","Number","billable_amount","stringifiedCartData","console","log","map","item","recorddetail","parseFloat","total_price","getDataFromResponses","key","CARD","push","label","pay_description","value","CASH","handleMultiple","target","Object","assign","getVoucherData","api","HideVoucherTableData","getPrepaidData","getPrepaidAccountData","HidePrepaidTableData","getCreditNoteAccountData","HideCreditNoteTableData","getPayGroup","pay_group_code","picturelocation","getFullPayTable","getPayTableNameBasedOnId","payTableId","test","filter","handleChange","pay_premise","prepaid","toFixed","handleCreditChange","handleTreatmentDone","sa_transacno","handleSubmit","addCreditCard","fieldValid","showMessageFor","userPayAmount","checkPayTypeIdAlreadyExists","alert","setBalanceToAllTextBoxes","addPrepaid","selectedPrepaid","prepaidExpDate","exp_date","format","todaysDate","isValid","isSameOrAfter","selectedRemainingPrepaidAmount","remain","conditiontype1","payTypeId","pp_no","line_no","pp_desc","prepaid_ct","setdisplayTablePrepaid","addVoucher","selectedVoucher","selectedVoucherAmount","pay_amt_setup","voucher_no","setdisplayTableVoucher","addCreditNote","selectedCreditNote","selectedCreditNoteAmount","credit_code","transaction","setdisplayTableCreditNote","removeCards","idx","array","index","indexOf","splice","removedTerm","items","valueToRemove","filteredItems","addNewPaymentData","selPayTypeId","selPayTypeName","trim","length","handleDialog","handleChangeCard","componentDidMount","handleChangeTextBox","event","handleChangeRemarkBox","val","some","creditNote","voucher","checkTypeOfCartItemContainsDeposit","type","render","insideRadioButtonData","cursor","bind","issued_expiry_date","pp_total","sa_date","amount","status","payGroupDataContent","forEach","i","width","margin","getUrl","textAlign","tokenDetails","userAddedPayTableData","minWidth","subtotal","discount","trans_amt","deposit_amt","tax_lable","tax_amt","mapStateToProps","appointmentDetail","appointment","selected_cstomer","common","authStore","mapDispatchToProps","dispatch","Payment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,UALF,EAMEC,WANF,QAOO,kBAPP;AAQA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,YAAhE;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,uBAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAO,cAAP;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,4BAApB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,OAAO,MAAMC,gBAAN,SAA+BzB,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAC9C0B,KAD8C,GACtC;AACNC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE,EADI;AAEVC,QAAAA,OAAO,EAAE,EAFC;AAGVC,QAAAA,OAAO,EAAE,EAHC;AAIVC,QAAAA,WAAW,EAAE,EAJH;AAKVC,QAAAA,qBAAqB,EAAE;AALb,OADN;AAQNC,MAAAA,YAAY,EAAE,EARR;AAUNC,MAAAA,cAAc,EAAE,EAVV;AAWNC,MAAAA,aAAa,EAAE,EAXT;AAYNC,MAAAA,sBAAsB,EAAE,CAZlB;AAaNC,MAAAA,UAAU,EAAE,EAbN;AAcNC,MAAAA,cAAc,EAAE,EAdV;AAgBNC,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE,IADA;AAEZC,QAAAA,OAAO,EAAE,EAFG;AAGZC,QAAAA,YAAY,EAAE;AAHF,OAhBR;AAqBNC,MAAAA,SAAS,EAAE;AACTH,QAAAA,UAAU,EAAE,IADH;AAETC,QAAAA,OAAO,EAAE,EAFA;AAGTC,QAAAA,YAAY,EAAE,IAHL;AAITE,QAAAA,QAAQ,EAAE,EAJD;AAKTC,QAAAA,QAAQ,EAAE,EALD;AAMTC,QAAAA,QAAQ,EAAE,EAND;AAOTC,QAAAA,QAAQ,EAAE,EAPD;AAQTC,QAAAA,QAAQ,EAAE;AARD,OArBL;AA+BNC,MAAAA,OAAO,EAAE,CA/BH;AAgCNC,MAAAA,YAAY,EAAE,KAhCR;AAiCNC,MAAAA,mBAAmB,EAAE,EAjCf;AAkCNC,MAAAA,mBAAmB,EAAE,EAlCf;AAmCNC,MAAAA,sBAAsB,EAAE,EAnClB;AAoCNC,MAAAA,aAAa,EAAE,EApCT;AAqCNC,MAAAA,0BAA0B,EAAE,OArCtB;AAsCNC,MAAAA,qBAAqB,EAAE,IAtCjB;AAuCNC,MAAAA,iBAAiB,EAAE,CAvCb;AAwCNC,MAAAA,iBAAiB,EAAE,CAxCb;AAyCNC,MAAAA,+BAA+B,EAAE,CAzC3B;AA0CNC,MAAAA,mBAAmB,EAAE,EA1Cf;AA2CNC,MAAAA,sBAAsB,EAAE,EA3ClB;AA4CNC,MAAAA,mBAAmB,EAAE,EA5Cf;AA6CNC,MAAAA,YAAY,EAAE,EA7CR;AA8CNC,MAAAA,gBAAgB,EAAE,EA9CZ;AA+CNC,MAAAA,YAAY,EAAE,EA/CR;AAgDNC,MAAAA,kBAAkB,EAAE,EAhDd;AAiDNC,MAAAA,oBAAoB,EAAE,EAjDhB;AAkDNC,MAAAA,qBAAqB,EAAE,EAlDjB;AAmDNC,MAAAA,uBAAuB,EAAE,EAnDnB;AAoDNC,MAAAA,gBAAgB,EAAE,CApDZ;AAqDNC,MAAAA,gBAAgB,EAAE,KArDZ;AAsDNxB,MAAAA,QAAQ,EAAE;AAtDJ,KADsC;;AAAA,SAkE9CyB,kBAlE8C,GAkEzB,MAAM;AACzB,WAAKC,SAAL,GAAiB,IAAIrD,oBAAJ,CAAyB;AACxCsD,QAAAA,OAAO,EAAEC,OAAO,iBACd;AAAM,UAAA,SAAS,EAAC,wCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,OADH,CAFsC;AAMxCC,QAAAA,eAAe,EAAE;AANuB,OAAzB,CAAjB;AAQD,KA3E6C;;AAAA,SA6E9C/D,UA7E8C,GA6EjC,MAAM;AACjB,UAAI;AAAEgE,QAAAA,EAAF;AAAMC,QAAAA,MAAN;AAAcC,QAAAA;AAAd,UAA2B,KAAKC,KAApC,CADiB,CAEjB;AACA;AACA;;AACA,UAAIH,EAAJ,EAAQ;AACN,aAAKG,KAAL,CACGnE,UADH,CAEK,cAAaM,UAAU,CACtB,IAAI8D,IAAJ,EADsB,EAEtB,YAFsB,CAGtB,cAAaJ,EAAG,YAAWC,MAAO,EALxC,EAOGI,IAPH,CAOQC,GAAG,IAAI;AACX,eAAKC,QAAL,CAAc;AACZnD,YAAAA,YAAY,EAAEkD,GAAG,CAACE,IADN;AAEZpC,YAAAA,OAAO,EAAEqC,MAAM,CAACH,GAAG,CAACE,IAAJ,CAASE,eAAV,CAFH;AAGZjB,YAAAA,gBAAgB,EAAEgB,MAAM,CAACH,GAAG,CAACE,IAAJ,CAASE,eAAV;AAHZ,WAAd;AAKD,SAbH;AAcD,OAfD,MAeO,CACL;AACD,OAtBgB,CAwBjB;;;AACA,UAAIC,mBAAmB,GAAGT,QAAQ,CAACM,IAAnC;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,mBAAZ;AACA,UAAI;AACF/B,QAAAA,iBADE;AAEFC,QAAAA,iBAFE;AAGFC,QAAAA;AAHE,UAIA,KAAKjC,KAJT;;AAKA,UAAI8D,mBAAJ,EAAyB;AACvBA,QAAAA,mBAAmB,CAACG,GAApB,CAAwBC,IAAI,IAAI;AAC9B;AACA,cAAIA,IAAI,CAACC,YAAL,KAAsB,SAA1B,EAAqC;AACnCpC,YAAAA,iBAAiB,IAAIqC,UAAU,CAACF,IAAI,CAACG,WAAN,CAA/B;AACD;;AACD,cAAIH,IAAI,CAACC,YAAL,KAAsB,SAA1B,EAAqC;AACnCnC,YAAAA,iBAAiB,IAAIoC,UAAU,CAACF,IAAI,CAACG,WAAN,CAA/B;AACAN,YAAAA,OAAO,CAACC,GAAR,CAAYhC,iBAAZ;AACA+B,YAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACG,WAAjB;AACD;;AACD,cACEH,IAAI,CAACC,YAAL,KAAsB,SAAtB,IACAD,IAAI,CAACC,YAAL,KAAsB,SADtB,IAEAD,IAAI,CAACC,YAAL,KAAsB,SAHxB,EAIE;AACAlC,YAAAA,+BAA+B,IAAImC,UAAU,CAACF,IAAI,CAACG,WAAN,CAA7C;AACD;AACF,SAjBD;AAkBD;;AACD,WAAKX,QAAL,CAAc;AACZ3B,QAAAA,iBADY;AAEZC,QAAAA,iBAFY;AAGZC,QAAAA;AAHY,OAAd;AAKD,KAtI6C;;AAAA,SAwI9CqC,oBAxI8C,GAwIvBX,IAAI,IAAI;AAC7B,UAAI;AAAEhD,QAAAA,UAAF;AAAcH,QAAAA;AAAd,UAAiC,KAAKR,KAA1C;;AACA,WAAK,IAAIuE,GAAT,IAAgBZ,IAAI,CAACa,IAArB,EAA2B;AACzB7D,QAAAA,UAAU,CAAC8D,IAAX,CAAgB;AAAEC,UAAAA,KAAK,EAAEH,GAAG,CAACI,eAAb;AAA8BC,UAAAA,KAAK,EAAEL,GAAG,CAACpB;AAAzC,SAAhB;AACD;;AACD,WAAK,IAAIoB,GAAT,IAAgBZ,IAAI,CAACkB,IAArB,EAA2B;AACzBrE,QAAAA,cAAc,CAACiE,IAAf,CAAoB;AAAEC,UAAAA,KAAK,EAAEH,GAAG,CAACI,eAAb;AAA8BC,UAAAA,KAAK,EAAEL,GAAG,CAACpB;AAAzC,SAApB;AACD;;AACD,WAAKO,QAAL,CAAc;AACZ/C,QAAAA,UADY;AAEZH,QAAAA;AAFY,OAAd;AAID,KApJ6C;;AAAA,SAsJ9CsE,cAtJ8C,GAsJ7B,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAF;AAAS1E,QAAAA;AAAT;AAAV,KAAD,KAAiC;AAChD6D,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BY,KAA9B,EAAqC1E,IAArC;AACA,UAAID,UAAU,GAAG+E,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjF,KAAL,CAAWC,UAA7B,CAAjB;AAEAA,MAAAA,UAAU,CAACC,IAAD,CAAV,GAAmB0E,KAAnB;AAEA,WAAKlB,QAAL,CAAc;AACZzD,QAAAA;AADY,OAAd;AAGD,KA/J6C;;AAAA,SAgK9CiF,cAhK8C,GAgK7BC,GAAG,IAAI;AACtB,WAAK7B,KAAL,CACG9D,YADH,CACiB,oBAAmB,KAAK8D,KAAL,CAAWH,EAAG,GAAEgC,GAAI,EADxD,EAEG3B,IAFH,CAEQe,GAAG,IAAI;AACX,YAAI;AAAEZ,UAAAA;AAAF,YAAWY,GAAf;AACA,YAAI;AAAE7C,UAAAA;AAAF,YAA0B,KAAK1B,KAAnC;AACA0B,QAAAA,mBAAmB,GAAGiC,IAAtB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCL,IAAnC,EAJW,CAKX;;AACA,aAAKD,QAAL,CAAc;AAAEhC,UAAAA;AAAF,SAAd,EAAuC,MAAM;AAC3CqC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAKoB,oBAAL;AACD,SAHD;AAID,OAZH;AAaD,KA9K6C;;AAAA,SAgL9CC,cAhL8C,GAgL7B,MAAM;AACrB,WAAKC,qBAAL,CAA2B,EAA3B;AACD,KAlL6C;;AAAA,SAmL9CA,qBAnL8C,GAmLtBH,GAAG,IAAI;AAC7BpB,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAKV,KAAL,CACG9D,YADH,CACiB,2BAA0B,KAAK8D,KAAL,CAAWH,EAAG,GAAEgC,GAAI,EAD/D,EAEG3B,IAFH,CAEQe,GAAG,IAAI;AACX,YAAI;AAAEZ,UAAAA;AAAF,YAAWY,GAAf;AACA,YAAI;AAAE9C,UAAAA;AAAF,YAA0B,KAAKzB,KAAnC;AACAyB,QAAAA,mBAAmB,GAAGkC,IAAtB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCL,IAAnC,EAJW,CAKX;;AACA,aAAKD,QAAL,CAAc;AAAEjC,UAAAA;AAAF,SAAd,EAAuC,MAAM;AAC3C,eAAK8D,oBAAL;AACD,SAFD;AAGD,OAXH;AAYD,KAjM6C;;AAAA,SAkM9CC,wBAlM8C,GAkMnBL,GAAG,IAAI;AAChC,WAAK7B,KAAL,CACG9D,YADH,CACiB,2BAA0B,KAAK8D,KAAL,CAAWH,EAAG,GAAEgC,GAAI,EAD/D,EAEG3B,IAFH,CAEQe,GAAG,IAAI;AACX,YAAI;AAAEZ,UAAAA;AAAF,YAAWY,GAAf;AACA,YAAI;AAAE5C,UAAAA;AAAF,YAA6B,KAAK3B,KAAtC;AACA2B,QAAAA,sBAAsB,GAAGgC,IAAzB,CAHW,CAIX;;AACA,aAAKD,QAAL,CAAc;AAAE/B,UAAAA;AAAF,SAAd,EAA0C,MAAM;AAC9C,eAAK8D,uBAAL;AACD,SAFD;AAGD,OAVH;AAWD,KA9M6C;;AAAA,SA+M9CC,WA/M8C,GA+MhC,MAAM;AAClB,WAAKpC,KAAL,CAAW9D,YAAX,CAAyB,WAAzB,EAAqCgE,IAArC,CAA0CC,GAAG,IAAI;AAC/C,YAAI;AAAElB,UAAAA;AAAF,YAAmB,KAAKvC,KAA5B;;AACA,aAAK,IAAIuE,GAAT,IAAgBd,GAAG,CAACE,IAApB,EAA0B;AACxBpB,UAAAA,YAAY,CAACkC,IAAb,CAAkB;AAChBC,YAAAA,KAAK,EAAEH,GAAG,CAACoB,cADK;AAEhBf,YAAAA,KAAK,EAAEL,GAAG,CAACpB,EAFK;AAGhByC,YAAAA,eAAe,EAAErB,GAAG,CAACqB;AAHL,WAAlB;AAKD;;AACD,aAAKlC,QAAL,CAAc;AACZnB,UAAAA;AADY,SAAd;AAGD,OAZD;AAaD,KA7N6C;;AAAA,SA8N9CsD,eA9N8C,GA8N5B,MAAM;AACtB,WAAKvC,KAAL,CAAW9D,YAAX,CAAyB,cAAzB,EAAwCgE,IAAxC,CAA6CC,GAAG,IAAI;AAClD,YAAI;AAAEnB,UAAAA;AAAF,YAAuB,KAAKtC,KAAhC;AACAsC,QAAAA,gBAAgB,GAAGmB,GAAG,CAACE,IAAvB;AACA,aAAKD,QAAL,CAAc;AACZpB,UAAAA;AADY,SAAd;AAGD,OAND;AAOD,KAtO6C;;AAAA,SAwO9CwD,wBAxO8C,GAwOnBC,UAAU,IAAI;AACvC,UAAI;AAAEzD,QAAAA;AAAF,UAAuB,KAAKtC,KAAhC;AACA,YAAMgG,IAAI,GAAG1D,gBAAgB,CAAC2D,MAAjB,CAAwBxC,GAAG,IAAIA,GAAG,CAACN,EAAJ,IAAU4C,UAAzC,CAAb;AACA,aAAOC,IAAI,CAAC,CAAD,CAAJ,CAAQrB,eAAf;AACD,KA5O6C;;AAAA,SAwP9CuB,YAxP8C,GAwP/B,CAAC;AAAEnB,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAF;AAAS1E,QAAAA;AAAT;AAAV,KAAD,KAAiC;AAC9C,UAAID,UAAU,GAAG+E,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjF,KAAL,CAAWC,UAA7B,CAAjB;AAEAA,MAAAA,UAAU,CAACC,IAAD,CAAV,GAAmB0E,KAAnB;AACA,WAAKlB,QAAL,CAAc;AACZzD,QAAAA;AADY,OAAd;AAGA,UAAI;AAAEsB,QAAAA,OAAF;AAAWd,QAAAA,aAAX;AAA0BmC,QAAAA,gBAA1B;AAA4CC,QAAAA;AAA5C,UACF,KAAK7C,KADP;AAEA6C,MAAAA,gBAAgB,GAAG,KAAnB;AACApC,MAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,QAAAA,UAAU,EAAE8D,KADK;AAEjB7D,QAAAA,OAAO,EAAEqD,UAAU,CAACxB,gBAAD,CAFF;AAGjB5B,QAAAA,YAAY,EAAE,KAHG;AAIjBmF,QAAAA,WAAW,EAAE,IAJI;AAKjBC,QAAAA,OAAO,EAAE,KALQ;AAMjB/E,QAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB;AANJ,OAAnB;AAQAE,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAGqB,gBAAX,CAAV,CAAuCyD,OAAvC,CAA+C,CAA/C,CAAV;AACAzD,MAAAA,gBAAgB,GAAGrB,OAAnB;AACA,WAAKmC,QAAL,CAAc;AAAEd,QAAAA,gBAAF;AAAoBrB,QAAAA,OAApB;AAA6BsB,QAAAA;AAA7B,OAAd;AACD,KA7Q6C;;AAAA,SA8Q9CyD,kBA9Q8C,GA8QzB,CAAC;AAAEvB,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAF;AAAS1E,QAAAA;AAAT;AAAV,KAAD,KAAiC;AACpD,UAAIe,SAAS,GAAG+D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjF,KAAL,CAAWiB,SAA7B,CAAhB;AAEAA,MAAAA,SAAS,CAACf,IAAD,CAAT,GAAkB0E,KAAlB;AACA,WAAKlB,QAAL,CAAc;AACZzC,QAAAA;AADY,OAAd;AAGD,KArR6C;;AAAA,SAsR9CsF,mBAtR8C,GAsRxB,MAAM;AAC1B,UAAI;AAAE9F,QAAAA;AAAF,UAAoB,KAAKT,KAA7B;AACAS,MAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,QAAAA,UAAU,EAAE,CADK;AAEjBC,QAAAA,OAAO,EAAE,CAFQ;AAGjBC,QAAAA,YAAY,EAAE,KAHG;AAIjBmF,QAAAA,WAAW,EAAE,IAJI;AAKjBC,QAAAA,OAAO,EAAE,KALQ;AAMjB/E,QAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB;AANJ,OAAnB;AAQA,UAAIsC,IAAI,GAAGlD,aAAX;AACA,UAAI;AAAE0C,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAiB,KAAKE,KAA1B;AACA,WAAKA,KAAL,CACGlE,aADH,CAEK,cAAaK,UAAU,CACtB,IAAI8D,IAAJ,EADsB,EAEtB,YAFsB,CAGtB,cAAaJ,EAAG,YAAWC,MAAO,EALxC,EAMIO,IANJ,EAQGH,IARH,CAQQC,GAAG,IAAI;AACXlE,QAAAA,OAAO,CAACkF,IAAR,CAAc,6BAA4BhB,GAAG,CAACE,IAAJ,CAAS6C,YAAa,EAAhE;AACD,OAVH;AAWD,KA7S6C;;AAAA,SA+S9CC,YA/S8C,GA+S/B,MAAM;AACnB,UAAI;AAAEhG,QAAAA;AAAF,UAAoB,KAAKT,KAA7B;AAEA,WAAK0D,QAAL,CAAc;AAAE7B,QAAAA,0BAA0B,EAAE;AAA9B,OAAd;AACA,UAAI8B,IAAI,GAAGlD,aAAX;AACAsD,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,IAA1B;AACA,UAAI;AAAER,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAiB,KAAKE,KAA1B;AACA,WAAKA,KAAL,CACGlE,aADH,CAEK,cAAaK,UAAU,CACtB,IAAI8D,IAAJ,EADsB,EAEtB,YAFsB,CAGtB,cAAaJ,EAAG,YAAWC,MAAO,EALxC,EAMIO,IANJ,EAQGH,IARH,CAQQC,GAAG,IAAI;AACXlE,QAAAA,OAAO,CAACkF,IAAR,CAAc,6BAA4BhB,GAAG,CAACE,IAAJ,CAAS6C,YAAa,EAAhE;AACD,OAVH;AAWD,KAjU6C;;AAAA,SAqU9CE,aArU8C,GAqU9B,YAAY;AAC1B,UAAI,CAAC,KAAK3D,SAAL,CAAe4D,UAAf,CAA0B,eAA1B,CAAL,EAAiD;AAC/C,aAAK5D,SAAL,CAAe6D,cAAf,CAA8B,eAA9B;AACA;AACD;;AAED,UAAI;AAAE3F,QAAAA,SAAF;AAAaR,QAAAA,aAAb;AAA4Bc,QAAAA,OAA5B;AAAqChB,QAAAA,YAArC;AAAmDqC,QAAAA;AAAnD,UACF,KAAK5C,KADP;AAEA,UAAI6G,aAAa,GAAGzC,UAAU,CAACxB,gBAAD,CAA9B;;AACA,UAAIwB,UAAU,CAAC,KAAKpE,KAAL,CAAWO,YAAX,CAAwBsD,eAAzB,CAAV,GAAsD,CAA1D,EAA6D;AAC3D,YAAIgD,aAAa,IAAI,CAArB,EAAwB;AACtB;AACD;AACF;;AACD,UAAI,KAAKC,2BAAL,CAAiC7F,SAAS,CAACH,UAA3C,CAAJ,EAA4D;AAC1DiG,QAAAA,KAAK,CACH,KAAKjB,wBAAL,CAA8B7E,SAAS,CAACH,UAAxC,IAAsD,iBADnD,CAAL;AAGA;AACD,OALD,MAKO;AACLL,QAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,UAAAA,UAAU,EAAEG,SAAS,CAACH,UADL;AAEjBC,UAAAA,OAAO,EAAE8F,aAFQ;AAGjB7F,UAAAA,YAAY,EAAE,IAHG;AAIjBmF,UAAAA,WAAW,EAAE,KAJI;AAKjBjF,UAAAA,QAAQ,EAAED,SAAS,CAACC,QALH;AAMjBC,UAAAA,QAAQ,EAAEF,SAAS,CAACE,QANH;AAOjBC,UAAAA,QAAQ,EAAEH,SAAS,CAACG,QAPH;AAQjBC,UAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB,QARJ;AASjB+E,UAAAA,OAAO,EAAE;AATQ,SAAnB;AAWD;;AAED7E,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAGsF,aAAX,CAAV,CAAoCR,OAApC,CAA4C,CAA5C,CAAV;AACA,WAAK3C,QAAL,CAAc;AAAEb,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACA,WAAKmE,wBAAL,CAA8BzF,OAA9B;AACD,KAzW6C;;AAAA,SA0W9C0F,UA1W8C,GA0WjCC,eAAe,IAAI;AAC9B,YAAMC,cAAc,GAAGtH,MAAM,CAACqH,eAAe,CAACE,QAAjB,CAAN,CAAiCC,MAAjC,CACrB,YADqB,CAAvB;AAGA,YAAMC,UAAU,GAAGzH,MAAM,CAAC,IAAI0D,IAAJ,EAAD,CAAN,CAAmB8D,MAAnB,CAA0B,YAA1B,CAAnB;AACA,YAAME,OAAO,GAAG1H,MAAM,CAACyH,UAAD,CAAN,CAAmBE,aAAnB,CAAiCL,cAAjC,CAAhB;AACA,UAAIN,aAAa,GAAG,CAApB;AACA,UAAI;AACF7E,QAAAA,iBADE;AAEFD,QAAAA,iBAFE;AAGFE,QAAAA,+BAHE;AAIFW,QAAAA;AAJE,UAKA,KAAK5C,KALT;AAMA+D,MAAAA,OAAO,CAACC,GAAR,CAAYpB,gBAAZ;AACAiE,MAAAA,aAAa,GAAGzC,UAAU,CAACxB,gBAAD,CAA1B;;AACA,UAAI2E,OAAJ,EAAa;AACXR,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACD;;AACD,UAAIF,aAAa,IAAI,CAArB,EAAwB;AACtB;AACA;AACD;;AAED,YAAMY,8BAA8B,GAAGrD,UAAU,CAAC8C,eAAe,CAACQ,MAAjB,CAAjD;;AACA,UAAID,8BAA8B,GAAGZ,aAArC,EAAoD,CAClD;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,UAAIK,eAAe,CAACS,cAAhB,KAAmC,cAAvC,EAAuD;AACrD;AACA,YAAIvD,UAAU,CAACpC,iBAAD,CAAV,IAAiC,CAArC,EAAwC;AACtC;AACD;;AACD,YAAIoC,UAAU,CAACpC,iBAAD,CAAV,IAAiCyF,8BAArC,EAAqE;AACnEZ,UAAAA,aAAa,GACXzC,UAAU,CAACxB,gBAAD,CAAV,GAA+BwB,UAAU,CAACpC,iBAAD,CAAzC,GACIoC,UAAU,CAACxB,gBAAD,CADd,GAEIwB,UAAU,CAACpC,iBAAD,CAHhB;AAIA+B,UAAAA,OAAO,CAACC,GAAR,CAAYhC,iBAAZ;AACA+B,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD,SAPD,MAOO;AACLA,UAAAA,aAAa,GAAGY,8BAAhB;AACA1D,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD;;AACD7E,QAAAA,iBAAiB,GAAGA,iBAAiB,GAAG6E,aAAxC;AACA,aAAKnD,QAAL,CAAc;AAAE1B,UAAAA;AAAF,SAAd;AACD,OAlBD,MAkBO,IAAIkF,eAAe,CAACS,cAAhB,KAAmC,cAAvC,EAAuD;AAC5D;AACA,YAAIvD,UAAU,CAACrC,iBAAD,CAAV,IAAiC,CAArC,EAAwC;AACtC;AACD;;AACD,YAAIqC,UAAU,CAACrC,iBAAD,CAAV,IAAiC0F,8BAArC,EAAqE;AACnEZ,UAAAA,aAAa,GACXzC,UAAU,CAACxB,gBAAD,CAAV,GAA+BwB,UAAU,CAACrC,iBAAD,CAAzC,GACIqC,UAAU,CAACxB,gBAAD,CADd,GAEIwB,UAAU,CAACrC,iBAAD,CAHhB;AAIAgC,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD,SAND,MAMO;AACLA,UAAAA,aAAa,GAAGY,8BAAhB;AACA1D,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD;;AACD9E,QAAAA,iBAAiB,GAAGA,iBAAiB,GAAG8E,aAAxC;AACA,aAAKnD,QAAL,CAAc;AAAE3B,UAAAA;AAAF,SAAd;AACD,OAjBM,MAiBA;AACL,YAAIqC,UAAU,CAACnC,+BAAD,CAAV,IAA+C,CAAnD,EAAsD;AACpD;AACD;;AACD,YACEmC,UAAU,CAACnC,+BAAD,CAAV,IACAwF,8BAFF,EAGE;AACAZ,UAAAA,aAAa,GACXzC,UAAU,CAACxB,gBAAD,CAAV,GACAwB,UAAU,CAACnC,+BAAD,CADV,GAEImC,UAAU,CAACxB,gBAAD,CAFd,GAGIwB,UAAU,CAACnC,+BAAD,CAJhB;AAKA8B,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD,SAVD,MAUO;AACLA,UAAAA,aAAa,GAAGY,8BAAhB;AACA1D,UAAAA,OAAO,CAACC,GAAR,CAAY6C,aAAZ;AACD;;AACD5E,QAAAA,+BAA+B,GAC7BA,+BAA+B,GAAG4E,aADpC;AAEA,aAAKnD,QAAL,CAAc;AAAEzB,UAAAA;AAAF,SAAd;AACD;;AACD,UAAI4E,aAAa,IAAI,CAArB,EAAwB;AACtB;AACD;;AACD,YAAMe,SAAS,GAAG,EAAlB;AACA,UAAI;AAAE3G,QAAAA,SAAF;AAAaJ,QAAAA,YAAb;AAA2BU,QAAAA,OAA3B;AAAoCd,QAAAA,aAApC;AAAmDoC,QAAAA;AAAnD,UACF,KAAK7C,KADP;AAGAS,MAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,QAAAA,UAAU,EAAE8G,SADK;AAEjBxB,QAAAA,OAAO,EAAE,IAFQ;AAGjBrF,QAAAA,OAAO,EAAE8F,aAHQ;AAIjB7F,QAAAA,YAAY,EAAE,KAJG;AAKjBmF,QAAAA,WAAW,EAAE,KALI;AAMjBjF,QAAAA,QAAQ,EACNgG,eAAe,CAACW,KAAhB,GACA,KADA,GAEAX,eAAe,CAACY,OAFhB,GAGA,KAHA,GAIAZ,eAAe,CAACa,OAXD;AAYjB5G,QAAAA,QAAQ,EAAE+F,eAAe,CAAC/D,EAZT;AAajB9B,QAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB,QAbJ;AAcjB2G,QAAAA,UAAU,EAAEd,eAAe,CAACS;AAdX,OAAnB;AAgBA5D,MAAAA,OAAO,CAACC,GAAR,CACE,+BADF,EAEE,KAAKhE,KAAL,CAAWkC,mBAFb;AAIA,UAAI+F,sBAAsB,GAAG,KAAKjI,KAAL,CAAWkC,mBAAxC;AACA+F,MAAAA,sBAAsB,CAACxD,IAAvB,CAA4ByC,eAAe,CAAC/D,EAA5C;AACA,WAAKO,QAAL,CAAc;AAAExB,QAAAA,mBAAmB,EAAE+F;AAAvB,OAAd;AACAlE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAKhE,KAAL,CAAWkC,mBAAvD;AACA,WAAKqD,oBAAL;AAEAhE,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAGsF,aAAX,CAAV,CAAoCR,OAApC,CAA4C,CAA5C,CAAV;AACA,WAAKW,wBAAL,CAA8BzF,OAA9B;AACAwC,MAAAA,OAAO,CAACC,GAAR,CAAYzC,OAAZ;AACA,WAAKmC,QAAL,CAAc;AAAEb,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACD,KA9e6C;;AAAA,SA0gB9CqF,UA1gB8C,GA0gBjCC,eAAe,IAAI;AAC9B,UAAI;AACFlH,QAAAA,SADE;AAEFJ,QAAAA,YAFE;AAGFU,QAAAA,OAHE;AAIFqB,QAAAA,gBAJE;AAKFC,QAAAA,gBALE;AAMFpC,QAAAA;AANE,UAOA,KAAKT,KAPT;;AAQA,UAAI4C,gBAAgB,IAAI,CAAxB,EAA2B;AACzB;AACD;;AACD,YAAMwF,qBAAqB,GAAGhE,UAAU,CAAC+D,eAAe,CAACvD,KAAjB,CAAxC;AACA,UAAIyD,aAAa,GAAG,CAApB;;AACA,UAAID,qBAAqB,IAAIhE,UAAU,CAACxB,gBAAD,CAAvC,EAA2D;AACzDyF,QAAAA,aAAa,GAAGD,qBAAhB;AACD,OAFD,MAEO;AACLrB,QAAAA,KAAK,CAAC,6CAAD,CAAL;AACA;AACD;;AACD,YAAMa,SAAS,GAAG,CAAlB;AAEAnH,MAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,QAAAA,UAAU,EAAE8G,SADK;AAEjBxB,QAAAA,OAAO,EAAE,KAFQ;AAGjBrF,QAAAA,OAAO,EAAEqD,UAAU,CAACiE,aAAD,CAHF;AAIjBrH,QAAAA,YAAY,EAAE,KAJG;AAKjBmF,QAAAA,WAAW,EAAE,KALI;AAMjBjF,QAAAA,QAAQ,EAAEiH,eAAe,CAACG,UANT;AAOjBnH,QAAAA,QAAQ,EAAEgH,eAAe,CAACG,UAPT;AAQjBjH,QAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB;AARJ,OAAnB;AAUA0C,MAAAA,OAAO,CAACC,GAAR,CACE,+BADF,EAEE,KAAKhE,KAAL,CAAWoC,mBAFb;AAIA,UAAImG,sBAAsB,GAAG,KAAKvI,KAAL,CAAWoC,mBAAxC;AACAmG,MAAAA,sBAAsB,CAAC9D,IAAvB,CAA4B0D,eAAe,CAACG,UAA5C;AACA,WAAK5E,QAAL,CAAc;AAAEtB,QAAAA,mBAAmB,EAAEmG;AAAvB,OAAd;AACAxE,MAAAA,OAAO,CAACC,GAAR,CACE,iCADF,EAEE,KAAKhE,KAAL,CAAWoC,mBAFb;AAIA,WAAKgD,oBAAL;AAEA7D,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAG8G,aAAX,CAAV,CAAoChC,OAApC,CAA4C,CAA5C,CAAV;AACA,WAAK3C,QAAL,CAAc;AAAEb,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACA,WAAKmE,wBAAL,CAA8BzF,OAA9B;AACD,KA1jB6C;;AAAA,SA2jB9CiH,aA3jB8C,GA2jB9BC,kBAAkB,IAAI;AACpC1E,MAAAA,OAAO,CAACC,GAAR,CAAYyE,kBAAZ;AACA,UAAI;AAAExH,QAAAA,SAAF;AAAaJ,QAAAA,YAAb;AAA2BU,QAAAA,OAA3B;AAAoCqB,QAAAA,gBAApC;AAAsDnC,QAAAA;AAAtD,UACF,KAAKT,KADP;;AAEA,UAAI4C,gBAAgB,IAAI,CAAxB,EAA2B;AACzB;AACD;;AACD,YAAM8F,wBAAwB,GAAGtE,UAAU,CAACqE,kBAAkB,CAAClH,OAApB,CAA3C;AACAwC,MAAAA,OAAO,CAACC,GAAR,CAAY0E,wBAAZ;AACA,UAAIL,aAAa,GAAG,CAApB;;AACA,UAAIK,wBAAwB,IAAItE,UAAU,CAACxB,gBAAD,CAA1C,EAA8D;AAC5DyF,QAAAA,aAAa,GAAGK,wBAAhB;AACD,OAFD,MAEO;AACLL,QAAAA,aAAa,GAAGzF,gBAAhB;AACD;;AACD,YAAMgF,SAAS,GAAG,EAAlB;AAEAnH,MAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,QAAAA,UAAU,EAAE8G,SADK;AAEjBxB,QAAAA,OAAO,EAAE,KAFQ;AAGjBrF,QAAAA,OAAO,EAAEqD,UAAU,CAACiE,aAAD,CAHF;AAIjBrH,QAAAA,YAAY,EAAE,KAJG;AAKjBmF,QAAAA,WAAW,EAAE,KALI;AAMjBjF,QAAAA,QAAQ,EAAEuH,kBAAkB,CAACE,WANZ;AAOjBxH,QAAAA,QAAQ,EAAEsH,kBAAkB,CAACG,WAPZ;AAQjBvH,QAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB;AARJ,OAAnB;AAUA0C,MAAAA,OAAO,CAACC,GAAR,CACE,kCADF,EAEE,KAAKhE,KAAL,CAAWmC,sBAFb;AAIA,UAAI0G,yBAAyB,GAAG,KAAK7I,KAAL,CAAWmC,sBAA3C;AACA0G,MAAAA,yBAAyB,CAACpE,IAA1B,CAA+BgE,kBAAkB,CAACE,WAAlD;AACA,WAAKjF,QAAL,CAAc;AAAEvB,QAAAA,sBAAsB,EAAE0G;AAA1B,OAAd;AACA9E,MAAAA,OAAO,CAACC,GAAR,CACE,iCADF,EAEE,KAAKhE,KAAL,CAAWmC,sBAFb;AAIA,WAAKsD,uBAAL;AAEAlE,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAG8G,aAAX,CAAV,CAAoChC,OAApC,CAA4C,CAA5C,CAAV;AACA,WAAK3C,QAAL,CAAc;AAAEb,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACA,WAAKmE,wBAAL,CAA8BzF,OAA9B;AACD,KAtmB6C;;AAAA,SA8mB9CuH,WA9mB8C,GA8mBhCC,GAAG,IAAI,MAAM;AACzB,UAAI;AACFtI,QAAAA,aADE;AAEFc,QAAAA,OAFE;AAGFN,QAAAA,SAHE;AAIFJ,QAAAA,YAJE;AAKFoB,QAAAA,+BALE;AAMFF,QAAAA,iBANE;AAOFC,QAAAA;AAPE,UAQA,KAAKhC,KART;AASA,WAAK0D,QAAL,CAAc;AAAE7B,QAAAA,0BAA0B,EAAE;AAA9B,OAAd;AACAN,MAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAD,CAAV,GAAsB6C,UAAU,CAAC2E,GAAG,CAAChI,OAAL,CAA1C;AACA,UAAIiI,KAAK,GAAG,CAAC,GAAGvI,aAAJ,CAAZ,CAZyB,CAYO;;AAChC,UAAIwI,KAAK,GAAGD,KAAK,CAACE,OAAN,CAAcH,GAAd,CAAZ;;AACA,UAAIA,GAAG,CAACjI,UAAJ,IAAkB,EAAtB,EAA0B;AACxB,YAAIiI,GAAG,CAACf,UAAJ,IAAkB,cAAtB,EAAsC;AACpCjG,UAAAA,iBAAiB,GAAGA,iBAAiB,GAAGgH,GAAG,CAAChI,OAA5C;AACD,SAFD,MAEO,IAAIgI,GAAG,CAACf,UAAJ,IAAkB,cAAtB,EAAsC;AAC3ChG,UAAAA,iBAAiB,GAAGA,iBAAiB,GAAG+G,GAAG,CAAChI,OAA5C;AACD,SAFM,MAEA;AACLkB,UAAAA,+BAA+B,GAC7BA,+BAA+B,GAAG8G,GAAG,CAAChI,OADxC;AAED;;AACD,aAAK2C,QAAL,CAAc;AACZzB,UAAAA,+BADY;AAEZF,UAAAA,iBAFY;AAGZC,UAAAA;AAHY,SAAd;AAKD;;AACD,UAAIiH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,QAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACA,aAAKvF,QAAL,CAAc;AAAEjD,UAAAA,aAAa,EAAEuI,KAAjB;AAAwBzH,UAAAA;AAAxB,SAAd;AACD,OAhCwB,CAiCzB;;;AACA,UAAI6H,WAAW,GAAGL,GAAG,CAACjI,UAAtB,CAlCyB,CAmCzB;AACA;;AACA,UAAIsI,WAAW,IAAI,IAAnB,EAAyB;AACvB,cAAMC,KAAK,GAAG,KAAKrJ,KAAL,CAAWkC,mBAAzB;AACA6B,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDqF,KAAhD;AACA,cAAMC,aAAa,GAAGP,GAAG,CAAC5H,QAA1B,CAHuB,CAGa;;AACpC4C,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CsF,aAA1C;AACA,cAAMC,aAAa,GAAGF,KAAK,CAACpD,MAAN,CAAa/B,IAAI,IAAIA,IAAI,KAAKoF,aAA9B,CAAtB;AACA,aAAK5F,QAAL,CAAc;AAAExB,UAAAA,mBAAmB,EAAEqH;AAAvB,SAAd,EAAsD,MAAM;AAC1DxF,UAAAA,OAAO,CAACC,GAAR,CACE,iCADF,EAEE,KAAKhE,KAAL,CAAWkC,mBAFb;AAID,SALD;AAMA,aAAKoD,qBAAL,CAA2B,EAA3B,EAZuB,CAavB;AACD;;AACD,UAAI8D,WAAW,IAAI,IAAnB,EAAyB;AACvB,cAAMC,KAAK,GAAG,KAAKrJ,KAAL,CAAWmC,sBAAzB;AACA4B,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDqF,KAAnD;AACA,cAAMC,aAAa,GAAGP,GAAG,CAAC7H,QAA1B,CAHuB,CAGa;;AACpC6C,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CsF,aAA1C;AACA,cAAMC,aAAa,GAAGF,KAAK,CAACpD,MAAN,CAAa/B,IAAI,IAAIA,IAAI,KAAKoF,aAA9B,CAAtB;AACA,aAAK5F,QAAL,CAAc;AAAEvB,UAAAA,sBAAsB,EAAEoH;AAA1B,SAAd,EAAyD,MAAM;AAC7DxF,UAAAA,OAAO,CAACC,GAAR,CACE,oCADF,EAEE,KAAKhE,KAAL,CAAWmC,sBAFb;AAID,SALD;AAMA,aAAKqD,wBAAL,CAA8B,EAA9B,EAZuB,CAavB;AACD;;AAED,UAAI4D,WAAW,IAAI,GAAnB,EAAwB;AACtB,cAAMC,KAAK,GAAG,KAAKrJ,KAAL,CAAWoC,mBAAzB;AACA2B,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDqF,KAAhD;AACA,cAAMC,aAAa,GAAGP,GAAG,CAAC7H,QAA1B,CAHsB,CAGc;;AACpC6C,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CsF,aAA1C;AACA,cAAMC,aAAa,GAAGF,KAAK,CAACpD,MAAN,CAAa/B,IAAI,IAAIA,IAAI,KAAKoF,aAA9B,CAAtB;AACA,aAAK5F,QAAL,CAAc;AAAEtB,UAAAA,mBAAmB,EAAEmH;AAAvB,SAAd,EAAsD,MAAM;AAC1DxF,UAAAA,OAAO,CAACC,GAAR,CACE,iCADF,EAEE,KAAKhE,KAAL,CAAWoC,mBAFb;AAID,SALD;AAMA,aAAK8C,cAAL,CAAoB,EAApB;AACD;;AACDjE,MAAAA,SAAS,CAAC,SAAD,CAAT,GAAuBM,OAAvB;AACAV,MAAAA,YAAY,CAAC,SAAD,CAAZ,GAA0BU,OAA1B;AACA,WAAKyF,wBAAL,CAA8BzF,OAA9B;AACD,KAnsB6C;;AAAA,SA8sB9CiI,iBA9sB8C,GA8sB1B,OAAOC,YAAP,EAAqBC,cAArB,KAAwC;AAC1D,UAAI,CAAC,KAAK3G,SAAL,CAAe4D,UAAf,CAA0B,QAA1B,CAAL,EAA0C;AACxC,aAAK5D,SAAL,CAAe6D,cAAf,CAA8B,QAA9B;AACA;AACD;;AACD,UAAI,CAAC,KAAK7D,SAAL,CAAe4D,UAAf,CAA0B,QAA1B,CAAL,EAA0C;AACxC,aAAK5D,SAAL,CAAe6D,cAAf,CAA8B,QAA9B;AACA;AACD;;AAED,WAAKtD,KAAL,CACG9D,YADH,CACiB,2BAA0BiK,YAAa,EADxD,EAEGjG,IAFH,CAEQC,GAAG,IAAI;AACX,aAAKC,QAAL,CAAc;AACZrB,UAAAA,YAAY,EAAE;AADF,SAAd;AAGA,YAAI;AAAEA,UAAAA,YAAF;AAAgBK,UAAAA,qBAAhB;AAAuCC,UAAAA;AAAvC,YACF,KAAK3C,KADP;AAEA0C,QAAAA,qBAAqB,GAAGgH,cAAc,CAACC,IAAf,EAAxB;AACAhH,QAAAA,uBAAuB,GAAG+G,cAAc,CAACC,IAAf,EAA1B;;AACA,aAAK,IAAIpF,GAAT,IAAgBd,GAAG,CAACE,IAApB,EAA0B;AACxBtB,UAAAA,YAAY,CAACoC,IAAb,CAAkB;AAAEC,YAAAA,KAAK,EAAEH,GAAG,CAACI,eAAb;AAA8BC,YAAAA,KAAK,EAAEL,GAAG,CAACpB;AAAzC,WAAlB;AACD;;AACD,aAAKO,QAAL,CACE;AACErB,UAAAA;AADF,SADF,EAIE,MAAM;AACJ,cAAI;AAAEQ,YAAAA;AAAF,cAAuB,KAAK7C,KAAhC;;AACA,cAAIqC,YAAY,CAACuH,MAAb,IAAuB,CAA3B,EAA8B;AAC5B7C,YAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD,WAHD,MAGO,IAAI2C,cAAc,CAACC,IAAf,OAA0B,SAA9B,EAAyC;AAC9C9G,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAFM,MAEA,IAAI6G,cAAc,CAACC,IAAf,OAA0B,SAA9B,EAAyC;AAC9C9G,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAFM,MAEA,IAAI6G,cAAc,CAACC,IAAf,OAA0B,QAA9B,EAAwC;AAC7C9G,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAFM,MAEA,IAAI6G,cAAc,CAACC,IAAf,OAA0B,MAA9B,EAAsC;AAC3C9G,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAFM,MAEA,IAAIR,YAAY,CAACuH,MAAb,IAAuB,CAA3B,EAA8B;AACnC/G,YAAAA,gBAAgB,GAAG,KAAnB;AACA,gBAAI+E,SAAS,GAAGvF,YAAY,CAAC,CAAD,CAAZ,CAAgBuC,KAAhC;AACA,gBAAI;AAAErD,cAAAA,OAAF;AAAWd,cAAAA,aAAX;AAA0BmC,cAAAA;AAA1B,gBAA+C,KAAK5C,KAAxD;;AACA,gBAAIoE,UAAU,CAAC,KAAKpE,KAAL,CAAWO,YAAX,CAAwBsD,eAAzB,CAAV,GAAsD,CAA1D,EAA6D;AAC3D,kBAAIO,UAAU,CAACxB,gBAAD,CAAV,IAAgC,CAApC,EAAuC;AACrC;AACD;AACF;;AACD,gBAAI,KAAKkE,2BAAL,CAAiCc,SAAjC,CAAJ,EAAiD;AAC/Cb,cAAAA,KAAK,CACH,KAAKjB,wBAAL,CAA8B8B,SAA9B,IAA2C,iBADxC,CAAL,CAD+C,CAI/C;;AACA;AACD,aAND,MAMO;AACLnH,cAAAA,aAAa,CAACgE,IAAd,CAAmB;AACjB3D,gBAAAA,UAAU,EAAE8G,SADK;AAEjB7G,gBAAAA,OAAO,EAAEqD,UAAU,CAACxB,gBAAD,CAFF;AAGjB5B,gBAAAA,YAAY,EAAE,KAHG;AAIjBmF,gBAAAA,WAAW,EAAE,IAJI;AAKjBC,gBAAAA,OAAO,EAAE,KALQ;AAMjB/E,gBAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB;AANJ,eAAnB;AAQAE,cAAAA,OAAO,GAAG6C,UAAU,CAAC7C,OAAO,GAAGqB,gBAAX,CAAV,CAAuCyD,OAAvC,CAA+C,CAA/C,CAAV;AACAzD,cAAAA,gBAAgB,GAAGrB,OAAnB;AACA,mBAAKmC,QAAL,CAAc;AAAEd,gBAAAA,gBAAF;AAAoBrB,gBAAAA;AAApB,eAAd;AACA;AACD;AACF,WA7BM,MA6BA,IAAIc,YAAY,CAACuH,MAAb,IAAuB,CAA3B,EAA8B;AACnC/G,YAAAA,gBAAgB,GAAG,IAAnB;AACAH,YAAAA,qBAAqB,GAAG,UAAxB;AACD;;AACD,eAAKgB,QAAL,CAAc;AACZb,YAAAA,gBADY;AAEZH,YAAAA,qBAFY;AAGZC,YAAAA;AAHY,WAAd;AAKD,SAvDH;AAyDD,OAtEH;AAuED,KA/xB6C;;AAAA,SAiyB9CkH,YAjyB8C,GAiyB/B,YAAY;AACzB,UAAI;AAAEhH,QAAAA;AAAF,UAAuB,KAAK7C,KAAhC;AACA6C,MAAAA,gBAAgB,GAAG,KAAnB;AACA,YAAM,KAAKa,QAAL,CAAc;AAClBb,QAAAA;AADkB,OAAd,CAAN;AAGD,KAvyB6C;;AAAA,SAyyB9CiH,gBAzyB8C,GAyyB3B,OAAO;AAAE/E,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAF;AAAS1E,QAAAA;AAAT;AAAV,KAAP,KAAuC;AACxD,UAAIe,SAAS,GAAG+D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjF,KAAL,CAAWiB,SAA7B,CAAhB;AAEAA,MAAAA,SAAS,CAACf,IAAD,CAAT,GAAkB0E,KAAlB;AAEA,YAAM,KAAKlB,QAAL,CAAc;AAClBzC,QAAAA;AADkB,OAAd,CAAN;AAGD,KAjzB6C;AAAA;;AA0D9C8I,EAAAA,iBAAiB,GAAG;AAClB,SAAK5K,UAAL;AACA,SAAKuG,WAAL;AACA,SAAKG,eAAL;AACA,SAAKR,cAAL;AACA,SAAKG,wBAAL,CAA8B,EAA9B;AACA,SAAKN,cAAL,CAAoB,EAApB;AACD;;AA6KD8E,EAAAA,mBAAmB,CAACC,KAAD,EAAQ;AACzB,SAAKvG,QAAL,CAAc;AACZd,MAAAA,gBAAgB,EAAEqH,KAAK,CAAClF,MAAN,CAAaH;AADnB,KAAd;AAGD;;AACDsF,EAAAA,qBAAqB,CAACD,KAAD,EAAQ;AAC3B,SAAKvG,QAAL,CAAc;AACZrC,MAAAA,QAAQ,EAAE4I,KAAK,CAAClF,MAAN,CAAaH;AADX,KAAd;AAGD;;AA2EDkC,EAAAA,2BAA2B,CAACqD,GAAD,EAAM;AAC/B,WAAO,KAAKnK,KAAL,CAAWS,aAAX,CAAyB2J,IAAzB,CAA8BlG,IAAI,IAAIiG,GAAG,KAAKjG,IAAI,CAACpD,UAAnD,CAAP;AACD;;AA2KDyE,EAAAA,oBAAoB,GAAG;AACrB,QAAI;AAAE9D,MAAAA,mBAAF;AAAuBS,MAAAA;AAAvB,QAA+C,KAAKlC,KAAxD;AACAkC,IAAAA,mBAAmB,CAAC+B,GAApB,CAAwBC,IAAI,IAAI;AAC9B,UAAIgD,eAAe,GAAGzF,mBAAmB,CAACwE,MAApB,CACpBG,OAAO,IAAIA,OAAO,CAACjD,EAAR,IAAce,IADL,CAAtB;AAGA,WAAKR,QAAL,CAAc;AAAEjC,QAAAA,mBAAmB,EAAEyF;AAAvB,OAAd;AACD,KALD;AAMD;;AACDzB,EAAAA,uBAAuB,GAAG;AACxB,QAAI;AAAE9D,MAAAA,sBAAF;AAA0BQ,MAAAA;AAA1B,QAAqD,KAAKnC,KAA9D;AACAmC,IAAAA,sBAAsB,CAAC8B,GAAvB,CAA2BC,IAAI,IAAI;AACjC,UAAIuE,kBAAkB,GAAG9G,sBAAsB,CAACsE,MAAvB,CACvBoE,UAAU,IAAIA,UAAU,CAAC1B,WAAX,IAA0BzE,IADjB,CAAzB;AAGA,WAAKR,QAAL,CAAc;AAAE/B,QAAAA,sBAAsB,EAAE8G;AAA1B,OAAd;AACD,KALD;AAMD;;AACDrD,EAAAA,oBAAoB,GAAG;AACrB,QAAI;AAAE1D,MAAAA,mBAAF;AAAuBU,MAAAA;AAAvB,QAA+C,KAAKpC,KAAxD;AACAoC,IAAAA,mBAAmB,CAAC6B,GAApB,CAAwBC,IAAI,IAAI;AAC9B,UAAIiE,eAAe,GAAGzG,mBAAmB,CAACuE,MAApB,CACpBqE,OAAO,IAAIA,OAAO,CAAChC,UAAR,IAAsBpE,IADb,CAAtB;AAGA,WAAKR,QAAL,CAAc;AAAEhC,QAAAA,mBAAmB,EAAEyG;AAAvB,OAAd;AACD,KALD;AAMD;;AA+FDnB,EAAAA,wBAAwB,CAACzF,OAAD,EAAU;AAChC,SAAKmC,QAAL,CAAc;AACZnC,MAAAA,OAAO,EAAEA,OADG;AAEZqB,MAAAA,gBAAgB,EAAErB;AAFN,KAAd;AAID;;AAuFDgJ,EAAAA,kCAAkC,CAAClH,QAAD,EAAW;AAC3C,QAAIS,mBAAmB,GAAGT,QAAQ,CAACM,IAAnC;;AACA,QAAIG,mBAAJ,EAAyB;AACvBA,MAAAA,mBAAmB,CAACG,GAApB,CAAwBC,IAAI,IAAI;AAC9B,YAAIA,IAAI,CAACsG,IAAL,KAAc,SAAd,IAA2BtG,IAAI,CAACsG,IAAL,KAAc,QAA7C,EAAuD;AACrD,eAAKxK,KAAL,CAAW8B,qBAAX,GAAmC,KAAnC;AACD;AACF,OAJD;AAKD;AACF;;AAsGD2I,EAAAA,MAAM,GAAG;AACP,QAAI;AACFlK,MAAAA,YADE;AAEFgB,MAAAA,OAFE;AAGFO,MAAAA,qBAHE;AAIFS,MAAAA,YAJE;AAKFF,MAAAA,YALE;AAMFQ,MAAAA,gBANE;AAOFH,MAAAA,qBAPE;AAQFC,MAAAA,uBARE;AASF1B,MAAAA,SATE;AAUFI,MAAAA;AAVE,QAWA,KAAKrB,KAXT;AAYA,QAAI;AAAEM,MAAAA;AAAF,QAA4B,KAAKN,KAAL,CAAWC,UAA3C;AACA8D,IAAAA,OAAO,CAACC,GAAR,CAAY1D,qBAAZ;AACA,QAAIoK,qBAAJ;AACA3G,IAAAA,OAAO,CAACC,GAAR,CAAYtB,qBAAZ,EAAmC,qBAAnC;;AACA,QAAIA,qBAAqB,IAAI,SAA7B,EAAwC;AACtCgI,MAAAA,qBAAqB,gBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,CADF,EAMG,KAAK1K,KAAL,CAAW0B,mBAAX,CAA+BuC,GAA/B,CAAmC,CAACkE,eAAD,EAAkBc,KAAlB,kBAClC;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAE;AAAE0B,UAAAA,MAAM,EAAE;AAAV,SAFT;AAGE,QAAA,OAAO,EAAE,KAAKzC,UAAL,CAAgB0C,IAAhB,CAAqB,IAArB,EAA2BzC,eAA3B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,eAAe,CAACG,UAArB,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,eAAe,CAACvD,KAArB,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKuD,eAAe,CAAC0C,kBAArB,CAPF,CADD,CANH,CADF,CADF;AAsBD,KAvBD,MAuBO,IAAInI,qBAAqB,IAAI,SAA7B,EAAwC;AAC7CgI,MAAAA,qBAAqB,gBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,SAAS,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBANF,CADF,EASG,KAAK1K,KAAL,CAAWyB,mBAAX,CAA+BwC,GAA/B,CAAmC,CAACiD,eAAD,EAAkB+B,KAAlB,kBAClC;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAE;AAAE0B,UAAAA,MAAM,EAAE;AAAV,SAFT;AAGE,QAAA,OAAO,EAAE,KAAK1D,UAAL,CAAgB2D,IAAhB,CAAqB,IAArB,EAA2B1D,eAA3B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,eAAe,CAACa,OAArB,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKb,eAAe,CAAC4D,QAArB,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK5D,eAAe,CAACQ,MAArB,CAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKR,eAAe,CAACd,OAArB,CARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKc,eAAe,CAACE,QAArB,CATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,eAAe,CAACS,cAArB,CAVF,CADD,CATH,CADF,CADF;AA4BD,KA7BM,MA6BA,IAAIjF,qBAAqB,IAAI,QAA7B,EAAuC;AAC5CgI,MAAAA,qBAAqB,gBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,GADH,eAEE;AAAO,QAAA,SAAS,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CADF,EAQG,KAAK1K,KAAL,CAAW2B,sBAAX,CAAkCsC,GAAlC,CAAsC,CAACoG,UAAD,EAAapB,KAAb,kBACrC;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAE;AAAE0B,UAAAA,MAAM,EAAE;AAAV,SAFT;AAGE,QAAA,OAAO,EAAE,KAAKnC,aAAL,CAAmBoC,IAAnB,CAAwB,IAAxB,EAA8BP,UAA9B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,UAAU,CAAC1B,WAAhB,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK0B,UAAU,CAACU,OAAhB,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKV,UAAU,CAACW,MAAhB,CAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKX,UAAU,CAAC9I,OAAhB,CARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK8I,UAAU,CAACY,MAAhB,CATF,CADD,CARH,CAFF,CADF;AA2BD,KA5BM,MA4BA,IAAIvI,qBAAqB,IAAI,MAA7B,EAAqC;AAC1CgI,MAAAA,qBAAqB,gBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAEE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAC,gBADd;AAEE,QAAA,OAAO,EAAErI,YAFX;AAGE,QAAA,KAAK,EAAEpB,SAAS,CAACH,UAHnB;AAIE,QAAA,IAAI,EAAC,YAJP;AAKE,QAAA,QAAQ,EAAE,KAAKwF,kBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAWG,KAAKvD,SAAL,CAAeE,OAAf,CACC,eADD,EAEChC,SAAS,CAACH,UAFX,EAGC,UAHD,CAXH,CAFF,eAmBE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBF,eAoBE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAEG,SAAS,CAACC,QADnB;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,QAAQ,EAAE,KAAK4I,gBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CApBF,eA8BE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA9BF,eA+BE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAE7I,SAAS,CAACE,QADnB;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,QAAQ,EAAE,KAAK2I,gBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CA/BF,eAyCE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzCF,eA0CE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEE,oBAAC,WAAD;AACE,QAAA,WAAW,EAAC,SADd;AAEE,QAAA,KAAK,EAAE7I,SAAS,CAACG,QAFnB;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,QAAQ,EAAE,KAAK0I,gBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CA1CF,eAqDE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArDF,eAsDE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAE7I,SAAS,CAACK,QADnB;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,QAAQ,EAAE,KAAKwI,gBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CAtDF,CADF,eAkEE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AACE,QAAA,MAAM,EAAE,KADV;AAEE,QAAA,SAAS,EAAC,sCAFZ;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,OAAO,EAAE,MAAM,KAAKpD,aAAL,EAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,eASE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF,CAlEF,CADF;AA4FD,KA7FM,MA6FA,IAAIhE,qBAAqB,IAAI,UAA7B,EAAyC;AAC9CgI,MAAAA,qBAAqB,gBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,oBAAC,YAAD;AACE,QAAA,WAAW,EAAC,gBADd;AAEE,QAAA,OAAO,EAAErI,YAFX;AAGE,QAAA,KAAK,EAAE/B,qBAHT;AAIE,QAAA,IAAI,EAAC,uBAJP;AAKE,QAAA,QAAQ,EAAE,KAAK4F,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CADF,CADF,CADF;AAkBD,KAnBM,MAmBA;AACLwE,MAAAA,qBAAqB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAxB;AACD;;AACD,QAAIQ,mBAAmB,GAAG,EAA1B;AACAnH,IAAAA,OAAO,CAACC,GAAR,CAAYzB,YAAZ;AACAA,IAAAA,YAAY,CAAC4I,OAAb,CAAqB,CAACjH,IAAD,EAAOkH,CAAP,KAAa;AAChCF,MAAAA,mBAAmB,CAACzG,IAApB,eACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,KAAK,EAAE;AAAE4G,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE;AAA1B,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,GAAG,EAAE1L,OAAO,CAAC2L,MAAR,KAAmB,QAAnB,GAA8BrH,IAAI,CAAC0B,eAD1C;AAEE,QAAA,KAAK,EAAE1B,IAAI,CAACQ,KAFd;AAGE,QAAA,OAAO,EAAE,MAAM,KAAK8E,iBAAL,CAAuBtF,IAAI,CAACU,KAA5B,EAAmCV,IAAI,CAACQ,KAAxC,CAHjB;AAIE,QAAA,KAAK,EAAE;AAAEiG,UAAAA,MAAM,EAAE;AAAV,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,KAAK,EAAE;AAAEU,UAAAA,KAAK,EAAE,OAAT;AAAkBG,UAAAA,SAAS,EAAE;AAA7B,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoDtH,IAAI,CAACQ,KAAzD,CADF,CARF,CADF;AAcD,KAfD;AAiBA,QAAI;AAAEtB,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBoI,MAAAA;AAApB,QAAqC,KAAKnI,KAA9C;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ,EAAoBqI,YAApB,EAAkC,KAAKnI,KAAL,CAAWD,QAA7C;AACA,SAAKkH,kCAAL,CAAwClH,QAAxC;AAEA,QAAIqI,qBAAqB,gBACvB;AAAO,MAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK1L,KAAL,CAAWS,aAAX,CAAyBwD,GAAzB,CAA6B,CAACxD,aAAD,EAAgBwI,KAAhB,kBAC5B;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnD,wBAAL,CAA8BrF,aAAa,CAACK,UAA5C,CADH,CADF,eAIE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAE;AAAE0K,QAAAA,SAAS,EAAE;AAAb,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG/K,aAAa,CAACM,OAAd,CAAsBsF,OAAtB,CAA8B,CAA9B,CADH,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,gCADZ;AAEE,MAAA,OAAO,EAAE,KAAKyC,WAAL,CAAiBrI,aAAjB,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,CAPF,CADD,CADH,CADF;AAsBA,wBACE,uDACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,SAAS,EAAE,eADb;AAEE,MAAA,KAAK,EAAE;AAAEkL,QAAAA,QAAQ,EAAE;AAAZ,OAFT;AAGE,MAAA,KAAK,EAAE9I,gBAHT;AAIE,MAAA,WAAW,EAAE,KAAKgH,YAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AACE,MAAA,OAAO,EAAE,KAAKA,YADhB;AAEE,MAAA,SAAS,EAAC,sBAFZ;AAGE,MAAA,GAAG,EAAElK,SAHP;AAIE,MAAA,GAAG,EAAC,EAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BgD,uBAA5B,CADF,CAZF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAgBG+H,qBAhBH,CADF,eAmBE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,KAAK,EAAE,KAAK1K,KAAL,CAAW4C,gBADpB;AAEE,MAAA,QAAQ,EAAE,KAAKoH,mBAAL,CAAyBY,IAAzB,CAA8B,IAA9B,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMG,KAAK7H,SAAL,CAAeE,OAAf,CACC,QADD,EAEC,KAAKjD,KAAL,CAAW4C,gBAFZ,EAGC,4BAHD,CANH,EAWG,KAAKG,SAAL,CAAeE,OAAf,CACC,QADD,EAEC,KAAKjD,KAAL,CAAW4C,gBAFZ,EAGC,0BAA0B,KAAK5C,KAAL,CAAWuB,OAArC,GAA+C,MAHhD,CAXH,CAFF,eAmBE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF,eAoBE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEF,QADT;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,QAAQ,EAAE,KAAK6I,qBAAL,CAA2BU,IAA3B,CAAgC,IAAhC,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApBF,CAnBF,eA+CE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CA/CF,eAkDE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CM,mBAA1C,CAlDF,CADF,eAqDE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGQ,qBADH,CADF,CADF,eAME;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0BnL,YAAY,CAACqL,QAAvC,CAFF,eAGE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0BrL,YAAY,CAACsL,QAAvC,CAJF,eAKE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF,eAME;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0BtL,YAAY,CAACuL,SAAvC,CANF,eAOE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,eAQE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0BvL,YAAY,CAACwL,WAAvC,CARF,eASE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBxL,YAAY,CAACyL,SAArC,CATF,eAUE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0BzL,YAAY,CAAC0L,OAAvC,CAVF,eAWE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAXF,eAcE;AAAK,MAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK1L,YAAY,CAACsD,eADlB,CAdF,eAiBE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACmBD,MAAM,CAACrC,OAAD,CAAN,CAAgB8E,OAAhB,CAAwB,CAAxB,CADnB,CAjBF,CAHF,CADF,CANF,CAFF,CADF,EAsCGvE,qBAAqB,gBACpB;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE,IADV;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,KAAK,EAAC,gBAHR;AAIE,MAAA,OAAO,EAAE,MAAM,KAAKyE,mBAAL,EAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADoB,GASlB,IA/CN,eAgDE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKvG,KAAL,CAAW6B,0BAAX,IAAyC,MAAzC,gBACC,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE,IADV;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAQC,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE,IADV;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,KAAK,EAAC,eAHR;AAIE,MAAA,OAAO,EAAE,MAAM,KAAK4E,YAAL,EAJjB;AAKE,MAAA,QAAQ,EAAE,KAAKzG,KAAL,CAAWS,aAAX,CAAyBmJ,MAAzB,IAAmC,CAAnC,IAAwCrI,OAAO,GAAG,CAL9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CAhDF,CArDF,CADF;AA2HD;;AA/qC6C;;AAkrChD,MAAM2K,eAAe,GAAGlM,KAAK,KAAK;AAChCmM,EAAAA,iBAAiB,EAAEnM,KAAK,CAACoM,WAAN,CAAkBD,iBADL;AAEhCE,EAAAA,gBAAgB,EAAErM,KAAK,CAACsM,MAAN,CAAaD,gBAFC;AAGhCZ,EAAAA,YAAY,EAAEzL,KAAK,CAACuM,SAAN,CAAgBd;AAHE,CAAL,CAA7B;;AAMA,MAAMe,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAOnN,kBAAkB,CACvB;AACEH,IAAAA,UADF;AAEEK,IAAAA,YAFF;AAGEJ,IAAAA;AAHF,GADuB,EAMvBqN,QANuB,CAAzB;AAQD,CATD;;AAWA,OAAO,MAAMC,OAAO,GAAGrN,OAAO,CAC5B6M,eAD4B,EAE5BM,kBAF4B,CAAP,CAGrBzM,gBAHqB,CAAhB","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalInput,\r\n  NormalTextarea,\r\n  NormalButton,\r\n  NormalSelect,\r\n  NormalDate,\r\n  NormalModal,\r\n} from \"component/common\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\nimport { getPayment, createPayment } from \"redux/actions/payment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { history } from \"helpers\";\r\nimport { getCommonApi } from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport helpers from \"../../../../service/Helper\";\r\nconst moment = require(\"moment\");\r\nexport class MakePaymentClass extends Component {\r\n  state = {\r\n    formFields: {\r\n      name: \"\",\r\n      contact: \"\",\r\n      address: \"\",\r\n      searchStaff: \"\",\r\n      payTableDropDownValue: \"\",\r\n    },\r\n    responseData: {},\r\n\r\n    premisesOption: [],\r\n    selectedCards: [],\r\n    selectedCardsPayAmount: 0,\r\n    cardOption: [],\r\n    ewalletoptions: [],\r\n\r\n    ewalletField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n    },\r\n    cardField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n      pay_rem1: \"\",\r\n      pay_rem2: \"\",\r\n      pay_rem3: \"\",\r\n      pay_rem4: \"\",\r\n      App_code: \"\",\r\n    },\r\n    balance: 0,\r\n    errorMessage: \"123\",\r\n    prepaidCustomerData: [],\r\n    voucherCustomerData: [],\r\n    creditNoteCustomerData: [],\r\n    accountHeader: [],\r\n    isMakePaymentButtonClicked: \"false\",\r\n    isTreatmentDoneButton: true,\r\n    itemProductAmount: 0,\r\n    itemServiceAmount: 0,\r\n    itemProductServiceVoucherAmount: 0,\r\n    displayTablePrepaid: [],\r\n    displayTableCreditNote: [],\r\n    displayTableVoucher: [],\r\n    paytableData: [],\r\n    paytableFullData: [],\r\n    payGroupData: [],\r\n    selectPaymentGroup: \"\",\r\n    selectPaymentGroupId: \"\",\r\n    isSelectedPaymentType: \"\",\r\n    displayModelPaymentType: \"\",\r\n    txtUserPayAmount: 0,\r\n    isOpenSubPayment: false,\r\n    pay_rem4: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getPayment();\r\n    this.getPayGroup();\r\n    this.getFullPayTable();\r\n    this.getPrepaidData();\r\n    this.getCreditNoteAccountData(\"\");\r\n    this.getVoucherData(\"\");\r\n  }\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  };\r\n  // get method for payment detail against appointment\r\n  getPayment = () => {\r\n    let { id, cartId, cartData } = this.props;\r\n    //id = 82318;\r\n    //cartId = \"ICMD100226\";\r\n    //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\r\n    if (id) {\r\n      this.props\r\n        .getPayment(\r\n          `?cart_date=${dateFormat(\r\n            new Date(),\r\n            \"yyyy-mm-dd\"\r\n          )}&cust_noid=${id}&cart_id=${cartId}`\r\n        )\r\n        .then(res => {\r\n          this.setState({\r\n            responseData: res.data,\r\n            balance: Number(res.data.billable_amount),\r\n            txtUserPayAmount: Number(res.data.billable_amount),\r\n          });\r\n        });\r\n    } else {\r\n      // history.push(\"/admin/cart\");\r\n    }\r\n\r\n    //let {cartData} = this.props;\r\n    let stringifiedCartData = cartData.data;\r\n    console.log(stringifiedCartData);\r\n    let {\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    } = this.state;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map(item => {\r\n        //alert(JSON.stringify(item));\r\n        if (item.recorddetail === \"Product\") {\r\n          itemProductAmount += parseFloat(item.total_price);\r\n        }\r\n        if (item.recorddetail === \"Service\") {\r\n          itemServiceAmount += parseFloat(item.total_price);\r\n          console.log(itemServiceAmount);\r\n          console.log(item.total_price);\r\n        }\r\n        if (\r\n          item.recorddetail === \"Product\" ||\r\n          item.recorddetail === \"Service\" ||\r\n          item.recorddetail === \"Voucher\"\r\n        ) {\r\n          itemProductServiceVoucherAmount += parseFloat(item.total_price);\r\n        }\r\n      });\r\n    }\r\n    this.setState({\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    });\r\n  };\r\n  // set data to dropdown fields\r\n  getDataFromResponses = data => {\r\n    let { cardOption, premisesOption } = this.state;\r\n    for (let key of data.CARD) {\r\n      cardOption.push({ label: key.pay_description, value: key.id });\r\n    }\r\n    for (let key of data.CASH) {\r\n      premisesOption.push({ label: key.pay_description, value: key.id });\r\n    }\r\n    this.setState({\r\n      cardOption,\r\n      premisesOption,\r\n    });\r\n  };\r\n\r\n  handleMultiple = ({ target: { value, name } }) => {\r\n    console.log(\"handleMultiple\", value, name);\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n\r\n    this.setState({\r\n      formFields,\r\n    });\r\n  };\r\n  getVoucherData = api => {\r\n    this.props\r\n      .getCommonApi(`voucher/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { voucherCustomerData } = this.state;\r\n        voucherCustomerData = data;\r\n        console.log(\"voucherCustomerData\", data);\r\n        // accountHeader = header_data;\r\n        this.setState({ voucherCustomerData }, () => {\r\n          console.log(\"test\");\r\n          this.HideVoucherTableData();\r\n        });\r\n      });\r\n  };\r\n\r\n  getPrepaidData = () => {\r\n    this.getPrepaidAccountData(\"\");\r\n  };\r\n  getPrepaidAccountData = api => {\r\n    console.log(\"dd\");\r\n    this.props\r\n      .getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { prepaidCustomerData } = this.state;\r\n        prepaidCustomerData = data;\r\n        console.log(\"prepaidCustomerData\", data);\r\n        // accountHeader = header_data;\r\n        this.setState({ prepaidCustomerData }, () => {\r\n          this.HidePrepaidTableData();\r\n        });\r\n      });\r\n  };\r\n  getCreditNoteAccountData = api => {\r\n    this.props\r\n      .getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`)\r\n      .then(key => {\r\n        let { data } = key;\r\n        let { creditNoteCustomerData } = this.state;\r\n        creditNoteCustomerData = data;\r\n        // accountHeader = header_data;\r\n        this.setState({ creditNoteCustomerData }, () => {\r\n          this.HideCreditNoteTableData();\r\n        });\r\n      });\r\n  };\r\n  getPayGroup = () => {\r\n    this.props.getCommonApi(`paygroup/`).then(res => {\r\n      let { payGroupData } = this.state;\r\n      for (let key of res.data) {\r\n        payGroupData.push({\r\n          label: key.pay_group_code,\r\n          value: key.id,\r\n          picturelocation: key.picturelocation,\r\n        });\r\n      }\r\n      this.setState({\r\n        payGroupData,\r\n      });\r\n    });\r\n  };\r\n  getFullPayTable = () => {\r\n    this.props.getCommonApi(`paytablenew/`).then(res => {\r\n      let { paytableFullData } = this.state;\r\n      paytableFullData = res.data;\r\n      this.setState({\r\n        paytableFullData,\r\n      });\r\n    });\r\n  };\r\n\r\n  getPayTableNameBasedOnId = payTableId => {\r\n    let { paytableFullData } = this.state;\r\n    const test = paytableFullData.filter(res => res.id == payTableId);\r\n    return test[0].pay_description;\r\n  };\r\n\r\n  handleChangeTextBox(event) {\r\n    this.setState({\r\n      txtUserPayAmount: event.target.value,\r\n    });\r\n  }\r\n  handleChangeRemarkBox(event) {\r\n    this.setState({\r\n      pay_rem4: event.target.value,\r\n    });\r\n  }\r\n  handleChange = ({ target: { value, name } }) => {\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n    this.setState({\r\n      formFields,\r\n    });\r\n    let { balance, selectedCards, txtUserPayAmount, isOpenSubPayment } =\r\n      this.state;\r\n    isOpenSubPayment = false;\r\n    selectedCards.push({\r\n      pay_typeid: value,\r\n      pay_amt: parseFloat(txtUserPayAmount),\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n    txtUserPayAmount = balance;\r\n    this.setState({ txtUserPayAmount, balance, isOpenSubPayment });\r\n  };\r\n  handleCreditChange = ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n    this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  handleTreatmentDone = () => {\r\n    let { selectedCards } = this.state;\r\n    selectedCards.push({\r\n      pay_typeid: 2,\r\n      pay_amt: 0,\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    let data = selectedCards;\r\n    let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}`,\r\n        data\r\n      )\r\n      .then(res => {\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n  };\r\n  // create payment detail\r\n  handleSubmit = () => {\r\n    let { selectedCards } = this.state;\r\n\r\n    this.setState({ isMakePaymentButtonClicked: \"true\" });\r\n    let data = selectedCards;\r\n    console.log(\"SubmitData\", data);\r\n    let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}`,\r\n        data\r\n      )\r\n      .then(res => {\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n  };\r\n  checkPayTypeIdAlreadyExists(val) {\r\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\r\n  }\r\n  addCreditCard = async () => {\r\n    if (!this.validator.fieldValid(\"cardFieldType\")) {\r\n      this.validator.showMessageFor(\"cardFieldType\");\r\n      return;\r\n    }\r\n\r\n    let { cardField, selectedCards, balance, responseData, txtUserPayAmount } =\r\n      this.state;\r\n    let userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n      if (userPayAmount == 0) {\r\n        return;\r\n      }\r\n    }\r\n    if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\r\n      alert(\r\n        this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\"\r\n      );\r\n      return;\r\n    } else {\r\n      selectedCards.push({\r\n        pay_typeid: cardField.pay_typeid,\r\n        pay_amt: userPayAmount,\r\n        credit_debit: true,\r\n        pay_premise: false,\r\n        pay_rem1: cardField.pay_rem1,\r\n        pay_rem2: cardField.pay_rem2,\r\n        pay_rem3: cardField.pay_rem3,\r\n        pay_rem4: this.state.pay_rem4,\r\n        prepaid: false,\r\n      });\r\n    }\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addPrepaid = selectedPrepaid => {\r\n    const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\r\n    let userPayAmount = 0;\r\n    let {\r\n      itemServiceAmount,\r\n      itemProductAmount,\r\n      itemProductServiceVoucherAmount,\r\n      txtUserPayAmount,\r\n    } = this.state;\r\n    console.log(txtUserPayAmount);\r\n    userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (isValid) {\r\n      alert(\"Check Expiry Date\");\r\n      return;\r\n    }\r\n    if (userPayAmount <= 0) {\r\n      // alert(\"hi\");\r\n      return;\r\n    }\r\n\r\n    const selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\r\n    if (selectedRemainingPrepaidAmount < userPayAmount) {\r\n      //return\r\n    }\r\n    /*\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n*/\r\n    if (selectedPrepaid.conditiontype1 === \"Service Only\") {\r\n      //For Service\r\n      if (parseFloat(itemServiceAmount) == 0) {\r\n        return;\r\n      }\r\n      if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemServiceAmount);\r\n        console.log(itemServiceAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemServiceAmount = itemServiceAmount - userPayAmount;\r\n      this.setState({ itemServiceAmount });\r\n    } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\r\n      //For Product\r\n      if (parseFloat(itemProductAmount) == 0) {\r\n        return;\r\n      }\r\n      if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductAmount = itemProductAmount - userPayAmount;\r\n      this.setState({ itemProductAmount });\r\n    } else {\r\n      if (parseFloat(itemProductServiceVoucherAmount) == 0) {\r\n        return;\r\n      }\r\n      if (\r\n        parseFloat(itemProductServiceVoucherAmount) <=\r\n        selectedRemainingPrepaidAmount\r\n      ) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) <\r\n          parseFloat(itemProductServiceVoucherAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductServiceVoucherAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductServiceVoucherAmount =\r\n        itemProductServiceVoucherAmount - userPayAmount;\r\n      this.setState({ itemProductServiceVoucherAmount });\r\n    }\r\n    if (userPayAmount == 0) {\r\n      return;\r\n    }\r\n    const payTypeId = 23;\r\n    let { cardField, ewalletField, balance, selectedCards, isOpenSubPayment } =\r\n      this.state;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: true,\r\n      pay_amt: userPayAmount,\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1:\r\n        selectedPrepaid.pp_no +\r\n        \" - \" +\r\n        selectedPrepaid.line_no +\r\n        \" - \" +\r\n        selectedPrepaid.pp_desc,\r\n      pay_rem2: selectedPrepaid.id,\r\n      pay_rem4: this.state.pay_rem4,\r\n      prepaid_ct: selectedPrepaid.conditiontype1,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTablePrepaid\",\r\n      this.state.displayTablePrepaid\r\n    );\r\n    let setdisplayTablePrepaid = this.state.displayTablePrepaid;\r\n    setdisplayTablePrepaid.push(selectedPrepaid.id);\r\n    this.setState({ displayTablePrepaid: setdisplayTablePrepaid });\r\n    console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\r\n    this.HidePrepaidTableData();\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setBalanceToAllTextBoxes(balance);\r\n    console.log(balance);\r\n    this.setState({ isOpenSubPayment: false });\r\n  };\r\n  HidePrepaidTableData() {\r\n    let { prepaidCustomerData, displayTablePrepaid } = this.state;\r\n    displayTablePrepaid.map(item => {\r\n      var selectedPrepaid = prepaidCustomerData.filter(\r\n        prepaid => prepaid.id != item\r\n      );\r\n      this.setState({ prepaidCustomerData: selectedPrepaid });\r\n    });\r\n  }\r\n  HideCreditNoteTableData() {\r\n    let { creditNoteCustomerData, displayTableCreditNote } = this.state;\r\n    displayTableCreditNote.map(item => {\r\n      var selectedCreditNote = creditNoteCustomerData.filter(\r\n        creditNote => creditNote.credit_code != item\r\n      );\r\n      this.setState({ creditNoteCustomerData: selectedCreditNote });\r\n    });\r\n  }\r\n  HideVoucherTableData() {\r\n    let { voucherCustomerData, displayTableVoucher } = this.state;\r\n    displayTableVoucher.map(item => {\r\n      var selectedVoucher = voucherCustomerData.filter(\r\n        voucher => voucher.voucher_no != item\r\n      );\r\n      this.setState({ voucherCustomerData: selectedVoucher });\r\n    });\r\n  }\r\n  addVoucher = selectedVoucher => {\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      txtUserPayAmount,\r\n      isOpenSubPayment,\r\n      selectedCards,\r\n    } = this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      return;\r\n    }\r\n    const selectedVoucherAmount = parseFloat(selectedVoucher.value);\r\n    let pay_amt_setup = 0;\r\n    if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedVoucherAmount;\r\n    } else {\r\n      alert(\"Partial Amount is not applicable in voucher\");\r\n      return;\r\n    }\r\n    const payTypeId = 9;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedVoucher.voucher_no,\r\n      pay_rem2: selectedVoucher.voucher_no,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableVoucher\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    let setdisplayTableVoucher = this.state.displayTableVoucher;\r\n    setdisplayTableVoucher.push(selectedVoucher.voucher_no);\r\n    this.setState({ displayTableVoucher: setdisplayTableVoucher });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    this.HideVoucherTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addCreditNote = selectedCreditNote => {\r\n    console.log(selectedCreditNote);\r\n    let { cardField, ewalletField, balance, txtUserPayAmount, selectedCards } =\r\n      this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      return;\r\n    }\r\n    const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\r\n    console.log(selectedCreditNoteAmount);\r\n    let pay_amt_setup = 0;\r\n    if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedCreditNoteAmount;\r\n    } else {\r\n      pay_amt_setup = txtUserPayAmount;\r\n    }\r\n    const payTypeId = 17;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedCreditNote.credit_code,\r\n      pay_rem2: selectedCreditNote.transaction,\r\n      pay_rem4: this.state.pay_rem4,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    let setdisplayTableCreditNote = this.state.displayTableCreditNote;\r\n    setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\r\n    this.setState({ displayTableCreditNote: setdisplayTableCreditNote });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    this.HideCreditNoteTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n\r\n  setBalanceToAllTextBoxes(balance) {\r\n    this.setState({\r\n      balance: balance,\r\n      txtUserPayAmount: balance,\r\n    });\r\n  }\r\n  removeCards = idx => () => {\r\n    let {\r\n      selectedCards,\r\n      balance,\r\n      cardField,\r\n      ewalletField,\r\n      itemProductServiceVoucherAmount,\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n    } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"false\" });\r\n    balance = parseFloat(balance) + parseFloat(idx.pay_amt);\r\n    var array = [...selectedCards]; // make a separate copy of the array\r\n    var index = array.indexOf(idx);\r\n    if (idx.pay_typeid == 23) {\r\n      if (idx.prepaid_ct == \"Product Only\") {\r\n        itemProductAmount = itemProductAmount + idx.pay_amt;\r\n      } else if (idx.prepaid_ct == \"Service Only\") {\r\n        itemServiceAmount = itemServiceAmount + idx.pay_amt;\r\n      } else {\r\n        itemProductServiceVoucherAmount =\r\n          itemProductServiceVoucherAmount + idx.pay_amt;\r\n      }\r\n      this.setState({\r\n        itemProductServiceVoucherAmount,\r\n        itemProductAmount,\r\n        itemServiceAmount,\r\n      });\r\n    }\r\n    if (index !== -1) {\r\n      array.splice(index, 1);\r\n      this.setState({ selectedCards: array, balance });\r\n    }\r\n    //console.log(\"idx\", idx);\r\n    var removedTerm = idx.pay_typeid;\r\n    //console.log(\"removedTerm\", removedTerm);\r\n    //console.log(\"idx.pay_rem2\", idx.pay_rem2);\r\n    if (removedTerm == \"23\") {\r\n      const items = this.state.displayTablePrepaid;\r\n      console.log(\"BeforeRemove-displayTablePrepaid\", items);\r\n      const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTablePrepaid: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTablePrepaid\",\r\n          this.state.displayTablePrepaid\r\n        );\r\n      });\r\n      this.getPrepaidAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n    if (removedTerm == \"17\") {\r\n      const items = this.state.displayTableCreditNote;\r\n      console.log(\"BeforeRemove-displayTableCreditNote\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableCreditNote: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableCreditNote\",\r\n          this.state.displayTableCreditNote\r\n        );\r\n      });\r\n      this.getCreditNoteAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n\r\n    if (removedTerm == \"9\") {\r\n      const items = this.state.displayTableVoucher;\r\n      console.log(\"BeforeRemove-displayTableVoucher\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableVoucher: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableVoucher\",\r\n          this.state.displayTableVoucher\r\n        );\r\n      });\r\n      this.getVoucherData(\"\");\r\n    }\r\n    cardField[\"pay_amt\"] = balance;\r\n    ewalletField[\"pay_amt\"] = balance;\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  checkTypeOfCartItemContainsDeposit(cartData) {\r\n    let stringifiedCartData = cartData.data;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map(item => {\r\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\r\n          this.state.isTreatmentDoneButton = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n\r\n    this.props\r\n      .getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`)\r\n      .then(res => {\r\n        this.setState({\r\n          paytableData: [],\r\n        });\r\n        let { paytableData, isSelectedPaymentType, displayModelPaymentType } =\r\n          this.state;\r\n        isSelectedPaymentType = selPayTypeName.trim();\r\n        displayModelPaymentType = selPayTypeName.trim();\r\n        for (let key of res.data) {\r\n          paytableData.push({ label: key.pay_description, value: key.id });\r\n        }\r\n        this.setState(\r\n          {\r\n            paytableData,\r\n          },\r\n          () => {\r\n            let { isOpenSubPayment } = this.state;\r\n            if (paytableData.length == 0) {\r\n              alert(\"Pay Table Not Exists\");\r\n              return;\r\n            } else if (selPayTypeName.trim() === \"VOUCHER\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"PREPAID\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"Credit\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"CARD\") {\r\n              isOpenSubPayment = true;\r\n            } else if (paytableData.length == 1) {\r\n              isOpenSubPayment = false;\r\n              let payTypeId = paytableData[0].value;\r\n              let { balance, selectedCards, txtUserPayAmount } = this.state;\r\n              if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n                if (parseFloat(txtUserPayAmount) == 0) {\r\n                  return;\r\n                }\r\n              }\r\n              if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\r\n                alert(\r\n                  this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"\r\n                );\r\n                //alert(\"Already Exists\");\r\n                return;\r\n              } else {\r\n                selectedCards.push({\r\n                  pay_typeid: payTypeId,\r\n                  pay_amt: parseFloat(txtUserPayAmount),\r\n                  credit_debit: false,\r\n                  pay_premise: true,\r\n                  prepaid: false,\r\n                  pay_rem4: this.state.pay_rem4,\r\n                });\r\n                balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n                txtUserPayAmount = balance;\r\n                this.setState({ txtUserPayAmount, balance });\r\n                return;\r\n              }\r\n            } else if (paytableData.length >= 1) {\r\n              isOpenSubPayment = true;\r\n              isSelectedPaymentType = \"Multiple\";\r\n            }\r\n            this.setState({\r\n              isOpenSubPayment,\r\n              isSelectedPaymentType,\r\n              displayModelPaymentType,\r\n            });\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  handleDialog = async () => {\r\n    let { isOpenSubPayment } = this.state;\r\n    isOpenSubPayment = false;\r\n    await this.setState({\r\n      isOpenSubPayment,\r\n    });\r\n  };\r\n\r\n  handleChangeCard = async ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n\r\n    await this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      responseData,\r\n      balance,\r\n      isTreatmentDoneButton,\r\n      payGroupData,\r\n      paytableData,\r\n      isOpenSubPayment,\r\n      isSelectedPaymentType,\r\n      displayModelPaymentType,\r\n      cardField,\r\n      pay_rem4,\r\n    } = this.state;\r\n    let { payTableDropDownValue } = this.state.formFields;\r\n    console.log(payTableDropDownValue);\r\n    let insideRadioButtonData;\r\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\r\n    if (isSelectedPaymentType == \"VOUCHER\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tr>\r\n              <td>Vocucher No</td>\r\n              <td>Value</td>\r\n              <td>Exp.Date</td>\r\n            </tr>\r\n            {this.state.voucherCustomerData.map((selectedVoucher, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addVoucher.bind(this, selectedVoucher)}\r\n              >\r\n                <td>{selectedVoucher.voucher_no}</td>\r\n                <td>{selectedVoucher.value}</td>\r\n                <td>{selectedVoucher.issued_expiry_date}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"PREPAID\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>Category</td>\r\n              <td>Amount</td>\r\n              <td>Remaining</td>\r\n              <td>InvoiceNo</td>\r\n              <td>ExpDate</td>\r\n              <td>ConditionType</td>\r\n            </tr>\r\n            {this.state.prepaidCustomerData.map((selectedPrepaid, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addPrepaid.bind(this, selectedPrepaid)}\r\n              >\r\n                <td>{selectedPrepaid.pp_desc}</td>\r\n                <td>{selectedPrepaid.pp_total}</td>\r\n                <td>{selectedPrepaid.remain}</td>\r\n                <td>{selectedPrepaid.prepaid}</td>\r\n                <td>{selectedPrepaid.exp_date}</td>\r\n                <td>{selectedPrepaid.conditiontype1}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Credit\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          {\" \"}\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>Credit #</td>\r\n              <td>Date</td>\r\n              <td>Amount</td>\r\n              <td>Balance</td>\r\n              <td>Status</td>\r\n            </tr>\r\n            {this.state.creditNoteCustomerData.map((creditNote, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addCreditNote.bind(this, creditNote)}\r\n              >\r\n                <td>{creditNote.credit_code}</td>\r\n                <td>{creditNote.sa_date}</td>\r\n                <td>{creditNote.amount}</td>\r\n                <td>{creditNote.balance}</td>\r\n                <td>{creditNote.status}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"CARD\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"d-flex flex-wrap justify-content-start\">\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Select Card\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={cardField.pay_typeid}\r\n                  name=\"pay_typeid\"\r\n                  onChange={this.handleCreditChange}\r\n                />\r\n              </div>\r\n              {this.validator.message(\r\n                \"cardFieldType\",\r\n                cardField.pay_typeid,\r\n                \"required\"\r\n              )}\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Card No\r\n                <NormalInput\r\n                  value={cardField.pay_rem1}\r\n                  name=\"pay_rem1\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Name\r\n                <NormalInput\r\n                  value={cardField.pay_rem2}\r\n                  name=\"pay_rem2\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Exp Month / Year\r\n                <NormalInput\r\n                  placeholder=\"mm/YYYY\"\r\n                  value={cardField.pay_rem3}\r\n                  name=\"pay_rem3\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Approval Code\r\n                <NormalInput\r\n                  value={cardField.App_code}\r\n                  name=\"App_code\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={false}\r\n                  className=\"col-12 mt-4 ml-2 btn-outline-success\"\r\n                  label=\"CONFIRM\"\r\n                  onClick={() => this.addCreditCard()}\r\n                />\r\n              </div>\r\n              <div className=\"col-1\"></div>\r\n            </div>\r\n            {/* <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={true}\r\n                  className=\"col-12 mt-4 ml-2\"\r\n                  label=\"CANCEL\"\r\n                  onClick={() => this.setState({ isOpenSubPayment: false })}\r\n                />\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Multiple\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                <Label className=\"col-12 fs-15\">Choose Option</Label>\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={payTableDropDownValue}\r\n                  name=\"payTableDropDownValue\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      insideRadioButtonData = <div></div>;\r\n    }\r\n    let payGroupDataContent = [];\r\n    console.log(payGroupData);\r\n    payGroupData.forEach((item, i) => {\r\n      payGroupDataContent.push(\r\n        <div className=\"col-md-1\" style={{ width: \"100px\", margin: \"50px\" }}>\r\n          <img\r\n            src={helpers.getUrl() + \"media/\" + item.picturelocation}\r\n            label={item.label}\r\n            onClick={() => this.addNewPaymentData(item.value, item.label)}\r\n            style={{ cursor: \"pointer\" }}\r\n          />\r\n          <br />\r\n          <center>\r\n            <p style={{ width: \"100px\", textAlign: \"center\" }}>{item.label}</p>\r\n          </center>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let { cartId, cartData, tokenDetails } = this.props;\r\n    console.log(cartId, tokenDetails, this.props.cartData);\r\n    this.checkTypeOfCartItemContainsDeposit(cartData);\r\n\r\n    let userAddedPayTableData = (\r\n      <table className=\"table table-bordered\">\r\n        {this.state.selectedCards.map((selectedCards, index) => (\r\n          <tr key={index}>\r\n            <td className=\"fs-18\">\r\n              {this.getPayTableNameBasedOnId(selectedCards.pay_typeid)}\r\n            </td>\r\n            <td className=\"fs-18\" style={{ textAlign: \"right\" }}>\r\n              {selectedCards.pay_amt.toFixed(2)}\r\n            </td>\r\n            <td>\r\n              <div\r\n                className=\"col-4 p-0 fs-20 cursor-pointer\"\r\n                onClick={this.removeCards(selectedCards)}\r\n              >\r\n                <span className=\"icon-delete\"></span>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    );\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n          <NormalModal\r\n            className={\"payment-modal\"}\r\n            style={{ minWidth: \"800px\" }}\r\n            modal={isOpenSubPayment}\r\n            handleModal={this.handleDialog}\r\n          >\r\n            <img\r\n              onClick={this.handleDialog}\r\n              className=\"close cursor-pointer\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <center>\r\n              <p className=\"fs-18 f-600\">{displayModelPaymentType}</p>\r\n            </center>\r\n            <br />\r\n            {insideRadioButtonData}\r\n          </NormalModal>\r\n          <div className=\"d-flex\">\r\n            <Label className=\"col-3 fs-18\">Enter Amount</Label>\r\n            <div className=\"col-2\">\r\n              <NormalInput\r\n                value={this.state.txtUserPayAmount}\r\n                onChange={this.handleChangeTextBox.bind(this)}\r\n              />\r\n\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|min:0,num\"\r\n              )}\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|max:\" + this.state.balance + \",num\"\r\n              )}\r\n            </div>\r\n            <Label className=\"col-2 fs-18\">Remark</Label>\r\n            <div className=\"col-5\">\r\n              <NormalInput\r\n                value={pay_rem4}\r\n                name=\"pay_rem4\"\r\n                onChange={this.handleChangeRemarkBox.bind(this)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12 \">\r\n            <h4>Select Payment Method</h4>\r\n          </div>\r\n          <div className=\"row col-12 paymentGroup\">{payGroupDataContent}</div>\r\n        </div>\r\n        <div className=\"make-payment-section mb-4\">\r\n          <div className=\"row pl-3\">\r\n            {/* <div className=\"text-right f-600\">Balance: {Number(balance).toFixed(2)}</div> */}\r\n            <div className=\"row \">\r\n              <div className=\"col-8 \">\r\n                <div className=\"p-2 ml-1 payment fs-12\">\r\n                  {userAddedPayTableData}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-4 \">\r\n                <div className=\"p-2 ml-1 payment\">\r\n                  <p>List of selection's</p>\r\n\r\n                  <div className=\"row fs-14\">\r\n                    <div className=\"col-7\">Subtotal</div>\r\n                    <div className=\"col-5\">$ {responseData.subtotal}</div>\r\n                    <div className=\"col-7\">Discount ($)</div>\r\n                    <div className=\"col-5\">$ {responseData.discount}</div>\r\n                    <div className=\"col-7\">Transac amount</div>\r\n                    <div className=\"col-5\">$ {responseData.trans_amt}</div>\r\n                    <div className=\"col-7\">Deposit</div>\r\n                    <div className=\"col-5\">$ {responseData.deposit_amt}</div>\r\n                    <div className=\"col-7\">{responseData.tax_lable}</div>\r\n                    <div className=\"col-5\">$ {responseData.tax_amt}</div>\r\n                    <div className=\"col-12 fs-22 text-center mt-5\">\r\n                      Billing Amount\r\n                    </div>\r\n                    <div className=\"col-12 fs-22 f-700 text-center text-orenge\">\r\n                      $ {responseData.billable_amount}\r\n                    </div>\r\n                    <div className=\"col-12 f-600 text-center mt-5\">\r\n                      Balance Amount: {Number(balance).toFixed(2)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {isTreatmentDoneButton ? (\r\n            <div className=\"make-payment mt-3 text-center\">\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"TREATMENT DONE\"\r\n                onClick={() => this.handleTreatmentDone()}\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <div className=\"make-payment mt-3 text-center\">\r\n            {this.state.isMakePaymentButtonClicked == \"true\" ? (\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"Make payment\"\r\n                disabled={true}\r\n              />\r\n            ) : (\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"Make payment \"\r\n                onClick={() => this.handleSubmit()}\r\n                disabled={this.state.selectedCards.length <= 0 || balance > 0}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selected_cstomer: state.common.selected_cstomer,\r\n  tokenDetails: state.authStore.tokenDetails,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getPayment,\r\n      getCommonApi,\r\n      createPayment,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const Payment = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MakePaymentClass);\r\n"]},"metadata":{},"sourceType":"module"}