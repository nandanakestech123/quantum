{"ast":null,"code":"/**\r\n * DevExtreme (viz/tree_map/colorizing.gradient.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _colorizing = require(\"./colorizing\");\n\nvar _min = Math.min;\nvar _max = Math.max;\n\nfunction createSimpleColorizer(getColor, range) {\n  return function (node) {\n    return getColor(node, range);\n  };\n}\n\nfunction getRangeData(range) {\n  return [Number(range[0]) || 0, range[1] - range[0] || 1];\n}\n\nfunction calculateRange(nodes, getValue) {\n  var i;\n  var ii = nodes.length;\n  var codes = [];\n  var code;\n\n  for (i = 0; i < ii; ++i) {\n    code = getValue(nodes[i]);\n\n    if (isFinite(code)) {\n      codes.push(code);\n    }\n  }\n\n  return getRangeData([_min.apply(null, codes), _max.apply(null, codes)]);\n}\n\nfunction createGuessingColorizer(getColor, getValue) {\n  var ranges = {};\n  return function (node) {\n    var parent = node.parent;\n    return getColor(node, ranges[parent._id] || (ranges[parent._id] = calculateRange(parent.nodes, getValue)));\n  };\n}\n\nfunction gradientColorizer(options, themeManager) {\n  var palette = themeManager.createGradientPalette(options.palette);\n  var getValue = (0, _colorizing.createColorCodeGetter)(options);\n  return \"range\" in options ? createSimpleColorizer(getColor, getRangeData(options.range || [])) : createGuessingColorizer(getColor, getValue);\n\n  function getColor(node, arg) {\n    return palette.getColor((getValue(node) - arg[0]) / arg[1]);\n  }\n}\n\n(0, _colorizing.addColorizer)(\"gradient\", gradientColorizer);\nvar _default = gradientColorizer;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/tree_map/colorizing.gradient.js"],"names":["exports","default","_colorizing","require","_min","Math","min","_max","max","createSimpleColorizer","getColor","range","node","getRangeData","Number","calculateRange","nodes","getValue","i","ii","length","codes","code","isFinite","push","apply","createGuessingColorizer","ranges","parent","_id","gradientColorizer","options","themeManager","palette","createGradientPalette","createColorCodeGetter","arg","addColorizer","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/tree_map/colorizing.gradient.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _colorizing = require(\"./colorizing\");\r\nvar _min = Math.min;\r\nvar _max = Math.max;\r\n\r\nfunction createSimpleColorizer(getColor, range) {\r\n    return function(node) {\r\n        return getColor(node, range)\r\n    }\r\n}\r\n\r\nfunction getRangeData(range) {\r\n    return [Number(range[0]) || 0, range[1] - range[0] || 1]\r\n}\r\n\r\nfunction calculateRange(nodes, getValue) {\r\n    var i;\r\n    var ii = nodes.length;\r\n    var codes = [];\r\n    var code;\r\n    for (i = 0; i < ii; ++i) {\r\n        code = getValue(nodes[i]);\r\n        if (isFinite(code)) {\r\n            codes.push(code)\r\n        }\r\n    }\r\n    return getRangeData([_min.apply(null, codes), _max.apply(null, codes)])\r\n}\r\n\r\nfunction createGuessingColorizer(getColor, getValue) {\r\n    var ranges = {};\r\n    return function(node) {\r\n        var parent = node.parent;\r\n        return getColor(node, ranges[parent._id] || (ranges[parent._id] = calculateRange(parent.nodes, getValue)))\r\n    }\r\n}\r\n\r\nfunction gradientColorizer(options, themeManager) {\r\n    var palette = themeManager.createGradientPalette(options.palette);\r\n    var getValue = (0, _colorizing.createColorCodeGetter)(options);\r\n    return \"range\" in options ? createSimpleColorizer(getColor, getRangeData(options.range || [])) : createGuessingColorizer(getColor, getValue);\r\n\r\n    function getColor(node, arg) {\r\n        return palette.getColor((getValue(node) - arg[0]) / arg[1])\r\n    }\r\n}(0, _colorizing.addColorizer)(\"gradient\", gradientColorizer);\r\nvar _default = gradientColorizer;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}