{"ast":null,"code":"/**\r\n * DevExtreme (viz/tree_map/colorizing.discrete.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _colorizing = require(\"./colorizing\");\n\nfunction discreteColorizer(options, themeManager, root) {\n  var palette = themeManager.createPalette(options.palette, {\n    useHighlight: true,\n    extensionMode: options.paletteExtensionMode,\n    count: options.colorizeGroups ? getNodesCount(root) : getLeafsCount(root)\n  });\n  return (options.colorizeGroups ? discreteGroupColorizer : discreteLeafColorizer)(palette, root);\n}\n\nfunction getLeafsCount(root) {\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var count = 0;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      count = Math.max(count, getLeafsCount(node));\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction discreteLeafColorizer(palette) {\n  var colors = palette.generateColors();\n  return function (node) {\n    return colors[node.index];\n  };\n}\n\nfunction getNodesCount(root) {\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var count = 0;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      count += getNodesCount(node) + 1;\n    }\n  }\n\n  return count;\n}\n\nfunction prepareDiscreteGroupColors(palette, root) {\n  var colors = {};\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      allNodes = allNodes.concat(node.nodes);\n      ii = allNodes.length;\n    } else {\n      if (!colors[node.parent._id]) {\n        colors[node.parent._id] = palette.getNextColor();\n      }\n    }\n  }\n\n  return colors;\n}\n\nfunction discreteGroupColorizer(palette, root) {\n  var colors = prepareDiscreteGroupColors(palette, root);\n  return function (node) {\n    return colors[node._id];\n  };\n}\n\n(0, _colorizing.addColorizer)(\"discrete\", discreteColorizer);\nvar _default = discreteColorizer;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/tree_map/colorizing.discrete.js"],"names":["exports","default","_colorizing","require","discreteColorizer","options","themeManager","root","palette","createPalette","useHighlight","extensionMode","paletteExtensionMode","count","colorizeGroups","getNodesCount","getLeafsCount","discreteGroupColorizer","discreteLeafColorizer","allNodes","nodes","slice","i","ii","length","node","isNode","Math","max","colors","generateColors","index","prepareDiscreteGroupColors","concat","parent","_id","getNextColor","addColorizer","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/tree_map/colorizing.discrete.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _colorizing = require(\"./colorizing\");\r\n\r\nfunction discreteColorizer(options, themeManager, root) {\r\n    var palette = themeManager.createPalette(options.palette, {\r\n        useHighlight: true,\r\n        extensionMode: options.paletteExtensionMode,\r\n        count: options.colorizeGroups ? getNodesCount(root) : getLeafsCount(root)\r\n    });\r\n    return (options.colorizeGroups ? discreteGroupColorizer : discreteLeafColorizer)(palette, root)\r\n}\r\n\r\nfunction getLeafsCount(root) {\r\n    var allNodes = root.nodes.slice();\r\n    var i;\r\n    var ii = allNodes.length;\r\n    var count = 0;\r\n    var node;\r\n    for (i = 0; i < ii; ++i) {\r\n        node = allNodes[i];\r\n        if (node.isNode()) {\r\n            count = Math.max(count, getLeafsCount(node))\r\n        } else {\r\n            count += 1\r\n        }\r\n    }\r\n    return count\r\n}\r\n\r\nfunction discreteLeafColorizer(palette) {\r\n    var colors = palette.generateColors();\r\n    return function(node) {\r\n        return colors[node.index]\r\n    }\r\n}\r\n\r\nfunction getNodesCount(root) {\r\n    var allNodes = root.nodes.slice();\r\n    var i;\r\n    var ii = allNodes.length;\r\n    var count = 0;\r\n    var node;\r\n    for (i = 0; i < ii; ++i) {\r\n        node = allNodes[i];\r\n        if (node.isNode()) {\r\n            count += getNodesCount(node) + 1\r\n        }\r\n    }\r\n    return count\r\n}\r\n\r\nfunction prepareDiscreteGroupColors(palette, root) {\r\n    var colors = {};\r\n    var allNodes = root.nodes.slice();\r\n    var i;\r\n    var ii = allNodes.length;\r\n    var node;\r\n    for (i = 0; i < ii; ++i) {\r\n        node = allNodes[i];\r\n        if (node.isNode()) {\r\n            allNodes = allNodes.concat(node.nodes);\r\n            ii = allNodes.length\r\n        } else {\r\n            if (!colors[node.parent._id]) {\r\n                colors[node.parent._id] = palette.getNextColor()\r\n            }\r\n        }\r\n    }\r\n    return colors\r\n}\r\n\r\nfunction discreteGroupColorizer(palette, root) {\r\n    var colors = prepareDiscreteGroupColors(palette, root);\r\n    return function(node) {\r\n        return colors[node._id]\r\n    }\r\n}(0, _colorizing.addColorizer)(\"discrete\", discreteColorizer);\r\nvar _default = discreteColorizer;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}