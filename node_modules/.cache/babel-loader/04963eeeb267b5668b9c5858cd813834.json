{"ast":null,"code":"import { QuotationActionType } from \"redux/actions/actionType\";\nimport { quotation } from \"../../service/apiVariables\";\nexport const updateQuotation = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.updateQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.updateQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createQuotation = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...quotation.addQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getQuotation = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.getQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.getQuotation\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: QuotationActionType.getQuotationListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteQuotation = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    quotation.deleteQuotation.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...quotation.deleteQuotation,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/quotation.js"],"names":["QuotationActionType","quotation","updateQuotation","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","addQuery","key","payload","then","response","message","status","type","catch","createQuotation","addQuotation","data","getQuotation","getQuotationListing","deleteQuotation"],"mappings":"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","sourcesContent":["import { QuotationActionType } from \"redux/actions/actionType\";\r\nimport { quotation } from \"../../service/apiVariables\";\r\n\r\n\r\nexport const updateQuotation =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.updateQuotation.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.updateQuotation, body })\r\n        .then((response) => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createQuotation =\r\n  (body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...quotation.addQuotation, body })\r\n        .then((response) => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n\r\n// get customer action\r\nexport const getQuotation =\r\n  (id) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n        quotation.getQuotation.addQuery = { key: \"id\", payload: id };\r\n\r\n      api({ ...quotation.getQuotation })\r\n        .then((response) => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200) {\r\n            dispatch({\r\n              type: QuotationActionType.getQuotationListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n  export const deleteQuotation =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      quotation.deleteQuotation.addQuery = { key: \"id\", payload: id };\r\n      api({ ...quotation.deleteQuotation, body })\r\n        .then((response) => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };"]},"metadata":{},"sourceType":"module"}