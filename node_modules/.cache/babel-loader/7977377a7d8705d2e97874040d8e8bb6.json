{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\component\\\\Admin\\\\TransactionHistory\\\\ChangePayment.js\";\nimport React, { Component } from \"react\";\nimport { NormalInput, NormalTextarea, NormalButton, NormalSelect, NormalDate, NormalModal, NormalDateTime } from \"component/common\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\nimport { getPayment, createPayment } from \"redux/actions/payment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { history } from \"helpers\";\nimport { getCommonApi, updateForm } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport closeIcon from \"assets/images/close.png\";\nimport helpers from \"../../../service/Helper\";\nimport { Toast } from \"service/toast\";\nimport { withTranslation } from \"react-i18next\";\nimport moment from \"moment\";\nexport class ChangePaymentClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formFields: {\n        name: \"\",\n        contact: \"\",\n        address: \"\",\n        searchStaff: \"\",\n        payTableDropDownValue: \"\"\n      },\n      responseData: {},\n      premisesOption: [],\n      selectedCards: [],\n      selectedCardsPayAmount: 0,\n      cardOption: [],\n      ewalletoptions: [],\n      ewalletField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true\n      },\n      cardField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true,\n        pay_rem1: \"\",\n        pay_rem2: \"\",\n        pay_rem3: \"\",\n        pay_rem4: \"\",\n        App_code: \"\"\n      },\n      balance: 0,\n      errorMessage: \"123\",\n      prepaidCustomerData: [],\n      voucherCustomerData: [],\n      creditNoteCustomerData: [],\n      accountHeader: [],\n      isMakePaymentButtonClicked: \"false\",\n      itemProductAmount: 0,\n      itemServiceAmount: 0,\n      itemProductServiceVoucherAmount: 0,\n      displayTablePrepaid: [],\n      displayTableCreditNote: [],\n      displayTableVoucher: [],\n      paytableData: [],\n      paytableFullData: [],\n      payGroupData: [],\n      selectPaymentGroup: \"\",\n      selectPaymentGroupId: \"\",\n      isSelectedPaymentType: \"\",\n      displayModelPaymentType: \"\",\n      txtUserPayAmount: 0,\n      isOpenSubPayment: false,\n      pay_rem4: \"\",\n      DateofPay: new Date(),\n      MinimumDate: new Date(),\n      is_paymentdate: false,\n      isMakePaymentLoading: false\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n    };\n\n    this.getPayment = () => {\n      let {\n        TransactionId\n      } = this.props;\n      let {\n        selectedCards\n      } = this.state;\n      this.props.getPayment(`paymentlist/?sa_transacno=${TransactionId}`).then(res => {\n        console.log(\"Payment Details:\", res);\n        let {\n          balance,\n          selectedCards,\n          txtUserPayAmount,\n          isOpenSubPayment\n        } = this.state;\n        let {\n          data,\n          status,\n          pay_list\n        } = res;\n\n        if (status === 200) {\n          this.setState({\n            responseData: data,\n            balance: Number(data.billable_amount),\n            txtUserPayAmount: Number(data.billable_amount)\n          });\n          pay_list.forEach(item => {\n            if (Number(item.pay_typeid) == 2) {\n              selectedCards.push({\n                pay_typeid: item.pay_typeid,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                prepaid: item.prepaid,\n                credit_debit: item.credit_debit,\n                pay_rem4: item.pay_rem4,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            } else if (Number(item.pay_typeid) == 4) {\n              selectedCards.push({\n                credit_debit: item.credit_debit,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                pay_rem1: item.pay_rem1,\n                pay_rem2: item.pay_rem2,\n                pay_rem3: item.pay_rem3,\n                pay_rem4: item.pay_rem4,\n                pay_typeid: item.pay_typeid,\n                prepaid: item.prepaid,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            } else if (Number(item.pay_typeid) == 17) {\n              selectedCards.push({\n                credit_debit: item.credit_debit,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                pay_rem1: item.pay_rem1,\n                pay_rem2: item.pay_rem2,\n                pay_rem4: item.pay_rem4,\n                pay_typeid: item.pay_typeid,\n                prepaid: item.prepaid,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            } else if (Number(item.pay_typeid) == 23) {\n              selectedCards.push({\n                credit_debit: item.credit_debit,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                pay_rem1: item.pay_rem1,\n                pay_rem2: item.pay_rem2,\n                pay_rem4: item.pay_rem4,\n                pay_typeid: item.pay_typeid,\n                prepaid: item.prepaid,\n                prepaid_ct: item.prepaid_ct,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            } else if (Number(item.pay_typeid) == 9) {\n              selectedCards.push({\n                credit_debit: item.credit_debit,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                pay_rem1: item.pay_rem1,\n                pay_rem4: item.pay_rem4,\n                pay_typeid: item.pay_typeid,\n                prepaid: item.prepaid,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            } else {\n              selectedCards.push({\n                credit_debit: item.credit_debit,\n                pay_amt: parseFloat(item.pay_amt),\n                pay_premise: item.pay_premise,\n                pay_rem1: item.pay_rem1,\n                pay_rem2: item.pay_rem2,\n                pay_rem3: item.pay_rem3,\n                pay_rem4: item.pay_rem4,\n                pay_typeid: item.pay_typeid,\n                prepaid: item.prepaid,\n                pay_desc: item.pay_desc,\n                gt_group: item.gt_group\n              });\n            }\n\n            balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n            txtUserPayAmount = balance;\n            this.setState({\n              txtUserPayAmount,\n              balance\n            });\n          });\n        }\n      });\n    };\n\n    this.handleMultiple = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      console.log(\"handleMultiple\", value, name);\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n    };\n\n    this.getPayGroup = () => {\n      this.props.getCommonApi(`paygroup/?gt_group=GT1`).then(res => {\n        console.log(res, \"paygroupresponse\");\n        let {\n          payGroupData\n        } = this.state;\n\n        for (let key of res.data) {\n          payGroupData.push({\n            label: key.pay_group_code,\n            value: key.id,\n            picturelocation: key.picturelocation\n          });\n        }\n\n        this.setState({\n          payGroupData\n        });\n      });\n    };\n\n    this.getFullPayTable = () => {\n      this.props.getCommonApi(`paytablenew/`).then(async res => {\n        let {\n          paytableFullData\n        } = this.state;\n        paytableFullData = res.data;\n        console.log(res.data, \"responseforGetfullpaytable\");\n        await this.setState({\n          paytableFullData\n        });\n      });\n    };\n\n    this.getPayTableNameBasedOnId = payTableId => {\n      debugger; // gt_group: \"GT1\"\n      // id: 6\n      // pay_code: \"UOBPN\"\n      // pay_description: \"UOB PAYNOW\"\n      // pay_group_name: \"UOB\"\n      // pay_groupid: 22\n      // if (\n      //   isSelectedPaymentType == \"VOUCHER\" ||\n      //   isSelectedPaymentType == \"PREPAID\" ||\n      //   isSelectedPaymentType == \"Credit\" ||\n      //   isSelectedPaymentType == \"OLD BILL\"\n      // ) {\n      //   const test = paytableFullData.filter(\n      //     res => res.pay_group_name.trim() == isSelectedPaymentType.trim()\n      //   );\n      //   return test[0].pay_description;\n      // } else {\n\n      const test = this.state.paytableFullData.filter(res => res.id == payTableId);\n      console.log(test, \"Filtered payment data\");\n      return test[0].pay_description; // }\n    };\n\n    this.handleChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n      let {\n        balance,\n        selectedCards,\n        txtUserPayAmount,\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      selectedCards.push({\n        pay_typeid: value,\n        pay_amt: parseFloat(txtUserPayAmount),\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false,\n        pay_rem4: this.state.pay_rem4,\n        gt_group: false\n      });\n      balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n      txtUserPayAmount = balance;\n      this.setState({\n        txtUserPayAmount,\n        balance,\n        isOpenSubPayment\n      });\n    };\n\n    this.handleCreditChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      this.setState({\n        cardField\n      });\n    };\n\n    this.handleSubmit = () => {\n      this.setState({\n        isMakePaymentLoading: true\n      });\n      let {\n        selectedCards,\n        DateofPay\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"true\"\n      });\n      let data = selectedCards;\n      console.log(\"SubmitDatapayment\", data);\n      let {\n        TransactionId\n      } = this.props;\n      this.props.createPayment(`changepayment/?sa_transacno=${TransactionId}`, data).then(res => {\n        this.setState({\n          isMakePaymentLoading: false\n        });\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n      this.setState({\n        isMakePaymentLoading: false\n      });\n    };\n\n    this.addCreditCard = async () => {\n      if (!this.validator.fieldValid(\"cardFieldType\")) {\n        this.validator.showMessageFor(\"cardFieldType\");\n        return;\n      }\n\n      let {\n        cardField,\n        selectedCards,\n        balance,\n        responseData,\n        txtUserPayAmount\n      } = this.state;\n      let userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (parseFloat(this.state.responseData.billable_amount) > 0) {\n        if (userPayAmount == 0) {\n          return;\n        }\n      }\n\n      if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\n        let result = this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\";\n        Toast({\n          type: \"error\",\n          message: result\n        });\n        return;\n      } else {\n        selectedCards.push({\n          pay_typeid: cardField.pay_typeid,\n          pay_amt: userPayAmount,\n          credit_debit: true,\n          pay_premise: false,\n          pay_rem1: cardField.pay_rem1,\n          pay_rem2: cardField.pay_rem2,\n          pay_rem3: cardField.pay_rem3,\n          pay_rem4: this.state.pay_rem4,\n          prepaid: false,\n          gt_group: false\n        });\n      }\n\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addPrepaid = selectedPrepaid => {\n      const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\"YYYY-MM-DD\");\n      const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n      const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\n      let userPayAmount = 0;\n      let {\n        itemServiceAmount,\n        itemProductAmount,\n        itemProductServiceVoucherAmount,\n        txtUserPayAmount\n      } = this.state;\n      console.log(txtUserPayAmount);\n      userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (isValid) {\n        Toast({\n          type: \"error\",\n          message: \"Check Expiry Date\"\n        });\n        return;\n      }\n\n      if (userPayAmount <= 0) {\n        Toast({\n          type: \"error\",\n          message: \"Prepaid is Not allowed\"\n        });\n        return;\n      }\n\n      let selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\n\n      if (selectedRemainingPrepaidAmount < userPayAmount) {//return\n      } else if (selectedRemainingPrepaidAmount > userPayAmount) {\n        selectedRemainingPrepaidAmount = parseFloat(userPayAmount);\n      }\n\n      if (selectedPrepaid.conditiontype1 === \"Service Only\") {\n        //For Service\n        if (parseFloat(itemServiceAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is Not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemServiceAmount);\n          console.log(itemServiceAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemServiceAmount = itemServiceAmount - userPayAmount;\n        this.setState({\n          itemServiceAmount\n        });\n      } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\n        //For Product\n        if (parseFloat(itemProductAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductAmount = itemProductAmount - userPayAmount;\n        this.setState({\n          itemProductAmount\n        });\n      } else {\n        if (parseFloat(itemProductServiceVoucherAmount) == 0) {\n          Toast({\n            type: \"error\",\n            message: \"Prepaid is not allowed\"\n          });\n          return;\n        }\n\n        if (parseFloat(itemProductServiceVoucherAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductServiceVoucherAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductServiceVoucherAmount);\n          console.log(userPayAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n          console.log(userPayAmount);\n        }\n\n        itemProductServiceVoucherAmount = itemProductServiceVoucherAmount - userPayAmount;\n        this.setState({\n          itemProductServiceVoucherAmount\n        });\n      }\n\n      if (userPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Prepaid is not allowed\"\n        });\n        return;\n      }\n\n      const payTypeId = 23;\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        selectedCards,\n        isOpenSubPayment\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: true,\n        pay_amt: userPayAmount,\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedPrepaid.pp_no + \" - \" + selectedPrepaid.line_no + \" - \" + selectedPrepaid.pp_desc,\n        pay_rem2: selectedPrepaid.id,\n        pay_rem4: this.state.pay_rem4,\n        prepaid_ct: selectedPrepaid.conditiontype1,\n        gt_group: false\n      });\n      console.log(\"BeforeAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      let setdisplayTablePrepaid = this.state.displayTablePrepaid;\n      setdisplayTablePrepaid.push(selectedPrepaid.id);\n      this.setState({\n        displayTablePrepaid: setdisplayTablePrepaid\n      });\n      console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      this.HidePrepaidTableData();\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setBalanceToAllTextBoxes(balance);\n      console.log(balance);\n      this.setState({\n        isOpenSubPayment: false\n      });\n    };\n\n    this.addVoucher = selectedVoucher => {\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        isOpenSubPayment,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Voucher is not allowed\"\n        });\n        return;\n      }\n\n      const selectedVoucherAmount = parseFloat(selectedVoucher.value);\n      let pay_amt_setup = 0;\n\n      if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedVoucherAmount;\n      } else {\n        Toast({\n          type: \"error\",\n          message: \"Partial Amount is not applicable in voucher\"\n        });\n        return; // alert(\"Partial Amount is not applicable in voucher\");\n        // return;\n      }\n\n      const payTypeId = 9;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedVoucher.voucher_no,\n        pay_rem2: selectedVoucher.voucher_no,\n        pay_rem4: this.state.pay_rem4,\n        gt_group: false\n      });\n      console.log(\"BeforeAdd-displayTableVoucher\", this.state.displayTableVoucher);\n      let setdisplayTableVoucher = this.state.displayTableVoucher;\n      setdisplayTableVoucher.push(selectedVoucher.voucher_no);\n      this.setState({\n        displayTableVoucher: setdisplayTableVoucher\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableVoucher);\n      this.HideVoucherTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addCreditNote = selectedCreditNote => {\n      console.log(selectedCreditNote);\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        Toast({\n          type: \"error\",\n          message: \"Credit Note is not allowed\"\n        });\n        return;\n      }\n\n      const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\n      console.log(selectedCreditNoteAmount);\n      let pay_amt_setup = 0;\n\n      if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedCreditNoteAmount;\n      } else {\n        pay_amt_setup = txtUserPayAmount;\n      }\n\n      const payTypeId = 17;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedCreditNote.credit_code,\n        pay_rem2: selectedCreditNote.transaction,\n        pay_rem4: this.state.pay_rem4,\n        gt_group: false\n      });\n      console.log(\"BeforeAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      let setdisplayTableCreditNote = this.state.displayTableCreditNote;\n      setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\n      this.setState({\n        displayTableCreditNote: setdisplayTableCreditNote\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      this.HideCreditNoteTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.removeCards = idx => () => {\n      let {\n        selectedCards,\n        balance,\n        cardField,\n        ewalletField,\n        itemProductServiceVoucherAmount,\n        itemProductAmount,\n        itemServiceAmount\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"false\"\n      });\n      balance = parseFloat(balance) + parseFloat(idx.pay_amt);\n      var array = [...selectedCards]; // make a separate copy of the array\n\n      var index = array.indexOf(idx);\n\n      if (idx.pay_typeid == 23) {\n        if (idx.prepaid_ct == \"Product Only\") {\n          itemProductAmount = itemProductAmount + idx.pay_amt;\n        } else if (idx.prepaid_ct == \"Service Only\") {\n          itemServiceAmount = itemServiceAmount + idx.pay_amt;\n        } else {\n          itemProductServiceVoucherAmount = itemProductServiceVoucherAmount + idx.pay_amt;\n        }\n\n        this.setState({\n          itemProductServiceVoucherAmount,\n          itemProductAmount,\n          itemServiceAmount\n        });\n      }\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        this.setState({\n          selectedCards: array,\n          balance\n        });\n      } //console.log(\"idx\", idx);\n\n\n      var removedTerm = idx.pay_typeid; //console.log(\"removedTerm\", removedTerm);\n      //console.log(\"idx.pay_rem2\", idx.pay_rem2);\n\n      if (removedTerm == \"23\") {\n        const items = this.state.displayTablePrepaid;\n        console.log(\"BeforeRemove-displayTablePrepaid\", items);\n        const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTablePrepaid: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTablePrepaid\", this.state.displayTablePrepaid);\n        });\n        this.getPrepaidAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"17\") {\n        const items = this.state.displayTableCreditNote;\n        console.log(\"BeforeRemove-displayTableCreditNote\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableCreditNote: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableCreditNote\", this.state.displayTableCreditNote);\n        });\n        this.getCreditNoteAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"9\") {\n        const items = this.state.displayTableVoucher;\n        console.log(\"BeforeRemove-displayTableVoucher\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableVoucher: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableVoucher\", this.state.displayTableVoucher);\n        });\n        this.getVoucherData(\"\");\n      }\n\n      cardField[\"pay_amt\"] = balance;\n      ewalletField[\"pay_amt\"] = balance;\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      this.props.getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`).then(res => {\n        this.setState({\n          paytableData: []\n        });\n        let {\n          paytableData,\n          isSelectedPaymentType,\n          displayModelPaymentType\n        } = this.state;\n        isSelectedPaymentType = selPayTypeName.trim();\n        displayModelPaymentType = selPayTypeName.trim();\n\n        for (let key of res.data) {\n          paytableData.push({\n            label: key.pay_description,\n            value: key.id\n          });\n        }\n\n        this.setState({\n          paytableData\n        }, () => {\n          let {\n            isOpenSubPayment\n          } = this.state;\n\n          if (paytableData.length == 0) {\n            Toast({\n              type: \"error\",\n              message: \"Pay Table Not Exists\"\n            });\n            return;\n          } else if (selPayTypeName.trim() === \"VOUCHER\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"PREPAID\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"Credit\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"CARD\") {\n            isOpenSubPayment = true;\n          } else if (paytableData.length == 1) {\n            isOpenSubPayment = false;\n            let payTypeId = paytableData[0].value;\n            let {\n              balance,\n              selectedCards,\n              txtUserPayAmount\n            } = this.state;\n\n            if (parseFloat(this.state.responseData.billable_amount) > 0) {\n              if (parseFloat(txtUserPayAmount) == 0) {\n                return;\n              }\n            }\n\n            if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\n              let result = this.getPayTableNameBasedOnId(payTypeId) + \" already exists\";\n              Toast({\n                type: \"error\",\n                message: result\n              }); //alert(\"Already Exists\");\n\n              return;\n            } else {\n              selectedCards.push({\n                pay_typeid: payTypeId,\n                pay_amt: parseFloat(txtUserPayAmount),\n                credit_debit: false,\n                pay_premise: true,\n                prepaid: false,\n                pay_rem4: this.state.pay_rem4,\n                gt_group: false\n              });\n              balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n              txtUserPayAmount = balance;\n              this.setState({\n                txtUserPayAmount,\n                balance\n              });\n              return;\n            }\n          } else if (paytableData.length >= 1) {\n            isOpenSubPayment = true;\n            isSelectedPaymentType = \"Multiple\";\n          }\n\n          this.setState({\n            isOpenSubPayment,\n            isSelectedPaymentType,\n            displayModelPaymentType\n          });\n        });\n      });\n    };\n\n    this.handleDialog = async () => {\n      let {\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      await this.setState({\n        isOpenSubPayment\n      });\n    };\n\n    this.handleChangeCard = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      await this.setState({\n        cardField\n      });\n    };\n\n    this.handleDatePick = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        DateofPay\n      } = this.state;\n      DateofPay = value;\n      await this.setState({\n        DateofPay\n      });\n      let DatePayment = {};\n      DatePayment[\"DateofPayment\"] = value;\n      await this.props.updateForm(\"CartPaymentDate\", DatePayment);\n    };\n  }\n\n  componentDidMount() {\n    this.getFullPayTable();\n    this.getPayGroup();\n    this.getPayment();\n  }\n\n  handleChangeTextBox(event) {\n    this.setState({\n      txtUserPayAmount: event.target.value\n    });\n  }\n\n  handleChangeRemarkBox(event) {\n    this.setState({\n      pay_rem4: event.target.value\n    });\n  }\n\n  checkPayTypeIdAlreadyExists(val) {\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\n  }\n\n  HidePrepaidTableData() {\n    let {\n      prepaidCustomerData,\n      displayTablePrepaid\n    } = this.state;\n    displayTablePrepaid.map(item => {\n      var selectedPrepaid = prepaidCustomerData.filter(prepaid => prepaid.id != item);\n      this.setState({\n        prepaidCustomerData: selectedPrepaid\n      });\n    });\n  }\n\n  HideCreditNoteTableData() {\n    let {\n      creditNoteCustomerData,\n      displayTableCreditNote\n    } = this.state;\n    displayTableCreditNote.map(item => {\n      var selectedCreditNote = creditNoteCustomerData.filter(creditNote => creditNote.credit_code != item);\n      this.setState({\n        creditNoteCustomerData: selectedCreditNote\n      });\n    });\n  }\n\n  HideVoucherTableData() {\n    let {\n      voucherCustomerData,\n      displayTableVoucher\n    } = this.state;\n    displayTableVoucher.map(item => {\n      var selectedVoucher = voucherCustomerData.filter(voucher => voucher.voucher_no != item);\n      this.setState({\n        voucherCustomerData: selectedVoucher\n      });\n    });\n  }\n\n  setBalanceToAllTextBoxes(balance) {\n    this.setState({\n      balance: balance,\n      txtUserPayAmount: balance\n    });\n  }\n\n  checkTypeOfCartItemContainsDeposit(cartData) {\n    let stringifiedCartData = cartData.data;\n\n    if (stringifiedCartData) {\n      stringifiedCartData.map(item => {\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\n          this.state.isTreatmentDoneButton = false;\n        }\n      });\n    }\n  }\n\n  render() {\n    let {\n      responseData,\n      balance,\n      payGroupData,\n      paytableData,\n      isOpenSubPayment,\n      isSelectedPaymentType,\n      displayModelPaymentType,\n      cardField,\n      pay_rem4,\n      DateofPay,\n      MinimumDate,\n      is_paymentdate,\n      isMakePaymentLoading\n    } = this.state;\n    let {\n      t\n    } = this.props;\n    let {\n      payTableDropDownValue\n    } = this.state.formFields;\n    console.log(payTableDropDownValue);\n    let insideRadioButtonData;\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\n\n    if (isSelectedPaymentType == \"VOUCHER\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-bordered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 15\n        }\n      }, t(\"Vocucher No\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 15\n        }\n      }, t(\"Value\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 15\n        }\n      }, t(\"Exp. Date\"))), this.state.voucherCustomerData.map((selectedVoucher, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addVoucher.bind(this, selectedVoucher),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 17\n        }\n      }, selectedVoucher.voucher_no), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 17\n        }\n      }, selectedVoucher.value), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 17\n        }\n      }, selectedVoucher.issued_expiry_date)))));\n    } else if (isSelectedPaymentType == \"PREPAID\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 15\n        }\n      }, t(\"Category\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 15\n        }\n      }, t(\"Amount\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 15\n        }\n      }, t(\"Remaining\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 15\n        }\n      }, t(\"Invoice No.\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 15\n        }\n      }, t(\"Exp. Date\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 15\n        }\n      }, t(\"Condition Type\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 15\n        }\n      }, t(\"Use Amount\"))), this.state.prepaidCustomerData.map((selectedPrepaid, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addPrepaid.bind(this, selectedPrepaid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_desc), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_total), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.remain), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.prepaid), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.exp_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.conditiontype1), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.Finaluse_amt)))));\n    } else if (isSelectedPaymentType == \"Credit\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 15\n        }\n      }, t(\"Credit\"), \" #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 15\n        }\n      }, t(\"Date\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 15\n        }\n      }, t(\"Amount\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 973,\n          columnNumber: 15\n        }\n      }, t(\"Balance\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 15\n        }\n      }, t(\"Status\"))), this.state.creditNoteCustomerData.map((creditNote, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addCreditNote.bind(this, creditNote),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 17\n        }\n      }, creditNote.credit_code), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 17\n        }\n      }, creditNote.sa_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 17\n        }\n      }, creditNote.amount), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 17\n        }\n      }, creditNote.balance), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 17\n        }\n      }, creditNote.status)))));\n    } else if (isSelectedPaymentType == \"CARD\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex flex-wrap justify-content-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 15\n        }\n      }, t(\"Select Card\"), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: cardField.pay_typeid,\n        name: \"pay_typeid\",\n        onChange: this.handleCreditChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 17\n        }\n      })), this.validator.message(\"cardFieldType\", cardField.pay_typeid, \"required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 15\n        }\n      }, t(\"Card No.\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem1,\n        name: \"pay_rem1\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1026,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 15\n        }\n      }, t(\"Name\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem2,\n        name: \"pay_rem2\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 15\n        }\n      }, t(\"Exp Month\"), \" / \", t(\"Year\"), /*#__PURE__*/React.createElement(NormalInput, {\n        placeholder: \"mm/YYYY\",\n        value: cardField.pay_rem3,\n        name: \"pay_rem3\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1040,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 15\n        }\n      }, t(\"Approval Code\"), /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.App_code,\n        name: \"App_code\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1062,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        mainbg: false,\n        className: \"col-12 mt-4 ml-2 btn-outline-success\",\n        label: \"CONFIRM\",\n        onClick: () => this.addCreditCard(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1063,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1070,\n          columnNumber: 15\n        }\n      }))));\n    } else if (isSelectedPaymentType == \"Multiple\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1079,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        className: \"col-12 fs-15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 17\n        }\n      }, t(\"Choose Option\")), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: payTableDropDownValue,\n        name: \"payTableDropDownValue\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 17\n        }\n      })))));\n    } else {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 31\n        }\n      });\n    }\n\n    let payGroupDataContent = [];\n    console.log(payGroupData);\n    payGroupData.forEach((item, i) => {\n      payGroupDataContent.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-4 payment-item cursor-pointer\",\n        style: {\n          width: \"50px\",\n          padding: \"15px\"\n        },\n        key: i,\n        onClick: () => this.addNewPaymentData(item.value, item.label),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1107,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: helpers.getUrl() + \"media/\" + item.picturelocation,\n        label: item.label,\n        style: {\n          textAlign: \"center\"\n        },\n        width: \"40\",\n        height: \"40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          width: \"100px\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117,\n          columnNumber: 13\n        }\n      }, item.label))));\n    });\n    let {\n      cartId,\n      cartData,\n      tokenDetails\n    } = this.props;\n    console.log(cartId, tokenDetails, this.props.cartData); //this.checkTypeOfCartItemContainsDeposit(cartData);\n\n    let userAddedPayTableData = /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-bordered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 7\n      }\n    }, this.state.selectedCards.map((selectedCards, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 13\n      }\n    }, selectedCards.pay_desc ? selectedCards.pay_desc : this.getPayTableNameBasedOnId(selectedCards.pay_typeid)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 13\n      }\n    }, selectedCards.pay_amt.toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 13\n      }\n    }, !selectedCards.gt_group ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 p-0 fs-20 cursor-pointer\",\n      onClick: this.removeCards(selectedCards),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 19\n      }\n    })) : null))));\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-2 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-left text-black common-label-text \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 13\n      }\n    }, t(\"Enter Amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: this.state.txtUserPayAmount,\n      onChange: this.handleChangeTextBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 15\n      }\n    }), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|min:0,num\"), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|max:\" + this.state.balance + \",num\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 13\n      }\n    }, t(\"Remark\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: pay_rem4,\n      name: \"pay_rem4\",\n      onChange: this.handleChangeRemarkBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-2 col-12 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 11\n      }\n    }, is_paymentdate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 17\n      }\n    }, t(\"Date\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalDate, {\n      value: new Date(DateofPay),\n      name: \"DateofPay\",\n      type: \"date\",\n      onChange: this.handleDatePick,\n      minDate: new Date(MinimumDate),\n      maxDate: new Date(),\n      showDisabledMonthNavigation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1194,\n        columnNumber: 19\n      }\n    }))) : null), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4 col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210,\n        columnNumber: 15\n      }\n    }, isMakePaymentLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"d-flex align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1212,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"spinner-border\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214,\n        columnNumber: 23\n      }\n    }, t(\"Loading...\")))) : this.state.isMakePaymentButtonClicked == \"true\" ? /*#__PURE__*/React.createElement(NormalButton, {\n      submitBtn: true,\n      className: \"col-12\",\n      label: \"Make payment\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(NormalButton, {\n      submitBtn: true,\n      className: \"col-12\",\n      label: \"Make payment\",\n      onClick: () => this.handleSubmit(),\n      disabled: this.state.selectedCards.length <= 0 || balance > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 9\n      }\n    }, t(\"Select Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row paymentGroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1244,\n        columnNumber: 13\n      }\n    }, payGroupData.length > 0 ? payGroupData.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-3 col-4 payment-item cursor-pointer\",\n        style: {\n          width: \"50px\",\n          padding: \"15px\"\n        },\n        key: index,\n        onClick: () => this.addNewPaymentData(item.value, item.label),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1248,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1256,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: helpers.getUrl() + \"media/\" + item.picturelocation,\n        label: item.label,\n        style: {\n          textAlign: \"center\"\n        },\n        width: \"40\",\n        height: \"40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1257,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1267,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          width: \"100px\",\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1268,\n          columnNumber: 25\n        }\n      }, item.label)));\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 make-payment-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 13\n      }\n    }, t(\"List of Selections\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-1 mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-7 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 23\n      }\n    }, t(\"Subtotal\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.subtotal), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 23\n      }\n    }, t(\"Discount ($)\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.discount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 23\n      }\n    }, t(\"Transac amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1292,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.trans_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 23\n      }\n    }, t(\"Deposit\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.deposit_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 23\n      }\n    }, responseData.tax_lable), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.tax_amt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302,\n        columnNumber: 23\n      }\n    }, t(\"Billing Amount\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 fw-700 text-center text-orenge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305,\n        columnNumber: 23\n      }\n    }, \"$ \", responseData.billable_amount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 f-600 text-center mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 23\n      }\n    }, t(\"Balance Amount\"), \": \", Number(balance).toFixed(2))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 mt-2 payment-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 15\n      }\n    }, userAddedPayTableData)))), /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"payment-modal\",\n      style: {\n        minWidth: \"70%\"\n      },\n      modal: isOpenSubPayment,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"fs-18 f-600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 13\n      }\n    }, displayModelPaymentType)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337,\n        columnNumber: 11\n      }\n    }), insideRadioButtonData));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetail: state.appointment.appointmentDetail,\n  selected_cstomer: state.common.selected_cstomer,\n  tokenDetails: state.authStore.tokenDetails,\n  CartPaymentDate: state.appointment.CartPaymentDate\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getPayment,\n    getCommonApi,\n    createPayment,\n    updateForm\n  }, dispatch);\n};\n\nexport const ChangePayment = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(ChangePaymentClass));","map":{"version":3,"sources":["F:/webfe/src/component/Admin/TransactionHistory/ChangePayment.js"],"names":["React","Component","NormalInput","NormalTextarea","NormalButton","NormalSelect","NormalDate","NormalModal","NormalDateTime","Button","Form","FormGroup","Label","Input","FormText","getPayment","createPayment","connect","bindActionCreators","history","getCommonApi","updateForm","dateFormat","SimpleReactValidator","closeIcon","helpers","Toast","withTranslation","moment","ChangePaymentClass","state","formFields","name","contact","address","searchStaff","payTableDropDownValue","responseData","premisesOption","selectedCards","selectedCardsPayAmount","cardOption","ewalletoptions","ewalletField","pay_typeid","pay_amt","credit_debit","cardField","pay_rem1","pay_rem2","pay_rem3","pay_rem4","App_code","balance","errorMessage","prepaidCustomerData","voucherCustomerData","creditNoteCustomerData","accountHeader","isMakePaymentButtonClicked","itemProductAmount","itemServiceAmount","itemProductServiceVoucherAmount","displayTablePrepaid","displayTableCreditNote","displayTableVoucher","paytableData","paytableFullData","payGroupData","selectPaymentGroup","selectPaymentGroupId","isSelectedPaymentType","displayModelPaymentType","txtUserPayAmount","isOpenSubPayment","DateofPay","Date","MinimumDate","is_paymentdate","isMakePaymentLoading","componentWillMount","validator","element","message","autoForceUpdate","TransactionId","props","then","res","console","log","data","status","pay_list","setState","Number","billable_amount","forEach","item","push","parseFloat","pay_premise","prepaid","pay_desc","gt_group","prepaid_ct","toFixed","handleMultiple","target","value","Object","assign","getPayGroup","key","label","pay_group_code","id","picturelocation","getFullPayTable","getPayTableNameBasedOnId","payTableId","test","filter","pay_description","handleChange","handleCreditChange","handleSubmit","sa_transacno","addCreditCard","fieldValid","showMessageFor","userPayAmount","checkPayTypeIdAlreadyExists","result","type","setBalanceToAllTextBoxes","addPrepaid","selectedPrepaid","prepaidExpDate","exp_date","format","todaysDate","isValid","isSameOrAfter","selectedRemainingPrepaidAmount","remain","conditiontype1","payTypeId","pp_no","line_no","pp_desc","setdisplayTablePrepaid","HidePrepaidTableData","addVoucher","selectedVoucher","selectedVoucherAmount","pay_amt_setup","voucher_no","setdisplayTableVoucher","HideVoucherTableData","addCreditNote","selectedCreditNote","selectedCreditNoteAmount","credit_code","transaction","setdisplayTableCreditNote","HideCreditNoteTableData","removeCards","idx","array","index","indexOf","splice","removedTerm","items","valueToRemove","filteredItems","getPrepaidAccountData","getCreditNoteAccountData","getVoucherData","addNewPaymentData","selPayTypeId","selPayTypeName","trim","length","handleDialog","handleChangeCard","handleDatePick","DatePayment","componentDidMount","handleChangeTextBox","event","handleChangeRemarkBox","val","some","map","creditNote","voucher","checkTypeOfCartItemContainsDeposit","cartData","stringifiedCartData","isTreatmentDoneButton","render","t","insideRadioButtonData","cursor","bind","issued_expiry_date","pp_total","Finaluse_amt","sa_date","amount","payGroupDataContent","i","width","padding","getUrl","textAlign","cartId","tokenDetails","userAddedPayTableData","subtotal","discount","trans_amt","deposit_amt","tax_lable","tax_amt","minWidth","mapStateToProps","appointmentDetail","appointment","selected_cstomer","common","authStore","CartPaymentDate","mapDispatchToProps","dispatch","ChangePayment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalInput,\r\n  NormalTextarea,\r\n  NormalButton,\r\n  NormalSelect,\r\n  NormalDate,\r\n  NormalModal,\r\n  NormalDateTime,\r\n} from \"component/common\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\nimport { getPayment, createPayment } from \"redux/actions/payment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { history } from \"helpers\";\r\nimport { getCommonApi, updateForm } from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport helpers from \"../../../service/Helper\";\r\nimport { Toast } from \"service/toast\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport moment from \"moment\";\r\n\r\nexport class ChangePaymentClass extends Component {\r\n  state = {\r\n    formFields: {\r\n      name: \"\",\r\n      contact: \"\",\r\n      address: \"\",\r\n      searchStaff: \"\",\r\n      payTableDropDownValue: \"\",\r\n    },\r\n    responseData: {},\r\n\r\n    premisesOption: [],\r\n    selectedCards: [],\r\n    selectedCardsPayAmount: 0,\r\n    cardOption: [],\r\n    ewalletoptions: [],\r\n\r\n    ewalletField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n    },\r\n    cardField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n      pay_rem1: \"\",\r\n      pay_rem2: \"\",\r\n      pay_rem3: \"\",\r\n      pay_rem4: \"\",\r\n      App_code: \"\",\r\n    },\r\n    balance: 0,\r\n    errorMessage: \"123\",\r\n    prepaidCustomerData: [],\r\n    voucherCustomerData: [],\r\n    creditNoteCustomerData: [],\r\n    accountHeader: [],\r\n    isMakePaymentButtonClicked: \"false\",\r\n    itemProductAmount: 0,\r\n    itemServiceAmount: 0,\r\n    itemProductServiceVoucherAmount: 0,\r\n    displayTablePrepaid: [],\r\n    displayTableCreditNote: [],\r\n    displayTableVoucher: [],\r\n    paytableData: [],\r\n    paytableFullData: [],\r\n    payGroupData: [],\r\n    selectPaymentGroup: \"\",\r\n    selectPaymentGroupId: \"\",\r\n    isSelectedPaymentType: \"\",\r\n    displayModelPaymentType: \"\",\r\n    txtUserPayAmount: 0,\r\n    isOpenSubPayment: false,\r\n    pay_rem4: \"\",\r\n    DateofPay: new Date(),\r\n    MinimumDate: new Date(),\r\n    is_paymentdate: false,\r\n    isMakePaymentLoading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getFullPayTable();\r\n    this.getPayGroup();\r\n    this.getPayment();\r\n  }\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  };\r\n  // get method for payment detail against appointment\r\n  getPayment = () => {\r\n    let { TransactionId } = this.props;\r\n    let { selectedCards } = this.state;\r\n    this.props\r\n      .getPayment(`paymentlist/?sa_transacno=${TransactionId}`)\r\n      .then(res => {\r\n        console.log(\"Payment Details:\", res);\r\n        let { balance, selectedCards, txtUserPayAmount, isOpenSubPayment } =\r\n          this.state;\r\n        let { data, status, pay_list } = res;\r\n        if (status === 200) {\r\n          this.setState({\r\n            responseData: data,\r\n            balance: Number(data.billable_amount),\r\n            txtUserPayAmount: Number(data.billable_amount),\r\n          });\r\n          pay_list.forEach(item => {\r\n            if (Number(item.pay_typeid) == 2) {\r\n              selectedCards.push({\r\n                pay_typeid: item.pay_typeid,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                prepaid: item.prepaid,\r\n                credit_debit: item.credit_debit,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            } else if (Number(item.pay_typeid) == 4) {\r\n              selectedCards.push({\r\n                credit_debit: item.credit_debit,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                pay_rem1: item.pay_rem1,\r\n                pay_rem2: item.pay_rem2,\r\n                pay_rem3: item.pay_rem3,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_typeid: item.pay_typeid,\r\n                prepaid: item.prepaid,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            } else if (Number(item.pay_typeid) == 17) {\r\n              selectedCards.push({\r\n                credit_debit: item.credit_debit,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                pay_rem1: item.pay_rem1,\r\n                pay_rem2: item.pay_rem2,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_typeid: item.pay_typeid,\r\n                prepaid: item.prepaid,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            } else if (Number(item.pay_typeid) == 23) {\r\n              selectedCards.push({\r\n                credit_debit: item.credit_debit,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                pay_rem1: item.pay_rem1,\r\n                pay_rem2: item.pay_rem2,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_typeid: item.pay_typeid,\r\n                prepaid: item.prepaid,\r\n                prepaid_ct: item.prepaid_ct,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            } else if (Number(item.pay_typeid) == 9) {\r\n              selectedCards.push({\r\n                credit_debit: item.credit_debit,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                pay_rem1: item.pay_rem1,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_typeid: item.pay_typeid,\r\n                prepaid: item.prepaid,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            } else {\r\n              selectedCards.push({\r\n                credit_debit: item.credit_debit,\r\n                pay_amt: parseFloat(item.pay_amt),\r\n                pay_premise: item.pay_premise,\r\n                pay_rem1: item.pay_rem1,\r\n                pay_rem2: item.pay_rem2,\r\n                pay_rem3: item.pay_rem3,\r\n                pay_rem4: item.pay_rem4,\r\n                pay_typeid: item.pay_typeid,\r\n                prepaid: item.prepaid,\r\n                pay_desc: item.pay_desc,\r\n                gt_group: item.gt_group,\r\n              });\r\n            }\r\n            balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n            txtUserPayAmount = balance;\r\n            this.setState({ txtUserPayAmount, balance });\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleMultiple = ({ target: { value, name } }) => {\r\n    console.log(\"handleMultiple\", value, name);\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n\r\n    this.setState({\r\n      formFields,\r\n    });\r\n  };\r\n\r\n  getPayGroup = () => {\r\n    this.props.getCommonApi(`paygroup/?gt_group=GT1`).then(res => {\r\n      console.log(res, \"paygroupresponse\");\r\n      let { payGroupData } = this.state;\r\n      for (let key of res.data) {\r\n        payGroupData.push({\r\n          label: key.pay_group_code,\r\n          value: key.id,\r\n          picturelocation: key.picturelocation,\r\n        });\r\n      }\r\n      this.setState({\r\n        payGroupData,\r\n      });\r\n    });\r\n  };\r\n  getFullPayTable = () => {\r\n    this.props.getCommonApi(`paytablenew/`).then(async res => {\r\n      let { paytableFullData } = this.state;\r\n      paytableFullData = res.data;\r\n      console.log(res.data, \"responseforGetfullpaytable\");\r\n      await this.setState({\r\n        paytableFullData,\r\n      });\r\n    });\r\n  };\r\n\r\n  getPayTableNameBasedOnId = payTableId => {\r\n    debugger;\r\n    // gt_group: \"GT1\"\r\n    // id: 6\r\n    // pay_code: \"UOBPN\"\r\n    // pay_description: \"UOB PAYNOW\"\r\n    // pay_group_name: \"UOB\"\r\n    // pay_groupid: 22\r\n\r\n    // if (\r\n    //   isSelectedPaymentType == \"VOUCHER\" ||\r\n    //   isSelectedPaymentType == \"PREPAID\" ||\r\n    //   isSelectedPaymentType == \"Credit\" ||\r\n    //   isSelectedPaymentType == \"OLD BILL\"\r\n    // ) {\r\n    //   const test = paytableFullData.filter(\r\n    //     res => res.pay_group_name.trim() == isSelectedPaymentType.trim()\r\n    //   );\r\n    //   return test[0].pay_description;\r\n    // } else {\r\n    const test = this.state.paytableFullData.filter(\r\n      res => res.id == payTableId\r\n    );\r\n    console.log(test, \"Filtered payment data\");\r\n    return test[0].pay_description;\r\n\r\n    // }\r\n  };\r\n\r\n  handleChangeTextBox(event) {\r\n    this.setState({\r\n      txtUserPayAmount: event.target.value,\r\n    });\r\n  }\r\n  handleChangeRemarkBox(event) {\r\n    this.setState({\r\n      pay_rem4: event.target.value,\r\n    });\r\n  }\r\n  handleChange = ({ target: { value, name } }) => {\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n    this.setState({\r\n      formFields,\r\n    });\r\n    let { balance, selectedCards, txtUserPayAmount, isOpenSubPayment } =\r\n      this.state;\r\n    isOpenSubPayment = false;\r\n    selectedCards.push({\r\n      pay_typeid: value,\r\n      pay_amt: parseFloat(txtUserPayAmount),\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n      pay_rem4: this.state.pay_rem4,\r\n      gt_group: false,\r\n    });\r\n    balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n    txtUserPayAmount = balance;\r\n    this.setState({ txtUserPayAmount, balance, isOpenSubPayment });\r\n  };\r\n  handleCreditChange = ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n    this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  // create payment detail\r\n  handleSubmit = () => {\r\n    this.setState({\r\n      isMakePaymentLoading: true,\r\n    });\r\n    let { selectedCards, DateofPay } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"true\" });\r\n\r\n    let data = selectedCards;\r\n    console.log(\"SubmitDatapayment\", data);\r\n    let { TransactionId } = this.props;\r\n    this.props\r\n      .createPayment(`changepayment/?sa_transacno=${TransactionId}`, data)\r\n      .then(res => {\r\n        this.setState({\r\n          isMakePaymentLoading: false,\r\n        });\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n    this.setState({\r\n      isMakePaymentLoading: false,\r\n    });\r\n  };\r\n  checkPayTypeIdAlreadyExists(val) {\r\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\r\n  }\r\n  addCreditCard = async () => {\r\n    if (!this.validator.fieldValid(\"cardFieldType\")) {\r\n      this.validator.showMessageFor(\"cardFieldType\");\r\n      return;\r\n    }\r\n\r\n    let { cardField, selectedCards, balance, responseData, txtUserPayAmount } =\r\n      this.state;\r\n    let userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n      if (userPayAmount == 0) {\r\n        return;\r\n      }\r\n    }\r\n    if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\r\n      let result =\r\n        this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\";\r\n      Toast({\r\n        type: \"error\",\r\n        message: result,\r\n      });\r\n\r\n      return;\r\n    } else {\r\n      selectedCards.push({\r\n        pay_typeid: cardField.pay_typeid,\r\n        pay_amt: userPayAmount,\r\n        credit_debit: true,\r\n        pay_premise: false,\r\n        pay_rem1: cardField.pay_rem1,\r\n        pay_rem2: cardField.pay_rem2,\r\n        pay_rem3: cardField.pay_rem3,\r\n        pay_rem4: this.state.pay_rem4,\r\n        prepaid: false,\r\n        gt_group: false,\r\n      });\r\n    }\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addPrepaid = selectedPrepaid => {\r\n    const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\r\n    let userPayAmount = 0;\r\n    let {\r\n      itemServiceAmount,\r\n      itemProductAmount,\r\n      itemProductServiceVoucherAmount,\r\n      txtUserPayAmount,\r\n    } = this.state;\r\n    console.log(txtUserPayAmount);\r\n    userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (isValid) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Check Expiry Date\",\r\n      });\r\n      return;\r\n    }\r\n    if (userPayAmount <= 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Prepaid is Not allowed\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    let selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\r\n\r\n    if (selectedRemainingPrepaidAmount < userPayAmount) {\r\n      //return\r\n    } else if (selectedRemainingPrepaidAmount > userPayAmount) {\r\n      selectedRemainingPrepaidAmount = parseFloat(userPayAmount);\r\n    }\r\n\r\n    if (selectedPrepaid.conditiontype1 === \"Service Only\") {\r\n      //For Service\r\n      if (parseFloat(itemServiceAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is Not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemServiceAmount);\r\n        console.log(itemServiceAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemServiceAmount = itemServiceAmount - userPayAmount;\r\n      this.setState({ itemServiceAmount });\r\n    } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\r\n      //For Product\r\n      if (parseFloat(itemProductAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductAmount = itemProductAmount - userPayAmount;\r\n      this.setState({ itemProductAmount });\r\n    } else {\r\n      if (parseFloat(itemProductServiceVoucherAmount) == 0) {\r\n        Toast({\r\n          type: \"error\",\r\n          message: \"Prepaid is not allowed\",\r\n        });\r\n        return;\r\n      }\r\n      if (\r\n        parseFloat(itemProductServiceVoucherAmount) <=\r\n        selectedRemainingPrepaidAmount\r\n      ) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) <\r\n          parseFloat(itemProductServiceVoucherAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductServiceVoucherAmount);\r\n        console.log(userPayAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n        console.log(userPayAmount);\r\n      }\r\n      itemProductServiceVoucherAmount =\r\n        itemProductServiceVoucherAmount - userPayAmount;\r\n      this.setState({ itemProductServiceVoucherAmount });\r\n    }\r\n    if (userPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Prepaid is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const payTypeId = 23;\r\n    let { cardField, ewalletField, balance, selectedCards, isOpenSubPayment } =\r\n      this.state;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: true,\r\n      pay_amt: userPayAmount,\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1:\r\n        selectedPrepaid.pp_no +\r\n        \" - \" +\r\n        selectedPrepaid.line_no +\r\n        \" - \" +\r\n        selectedPrepaid.pp_desc,\r\n      pay_rem2: selectedPrepaid.id,\r\n      pay_rem4: this.state.pay_rem4,\r\n      prepaid_ct: selectedPrepaid.conditiontype1,\r\n      gt_group: false,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTablePrepaid\",\r\n      this.state.displayTablePrepaid\r\n    );\r\n    let setdisplayTablePrepaid = this.state.displayTablePrepaid;\r\n    setdisplayTablePrepaid.push(selectedPrepaid.id);\r\n    this.setState({ displayTablePrepaid: setdisplayTablePrepaid });\r\n    console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\r\n    this.HidePrepaidTableData();\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setBalanceToAllTextBoxes(balance);\r\n    console.log(balance);\r\n    this.setState({ isOpenSubPayment: false });\r\n  };\r\n  HidePrepaidTableData() {\r\n    let { prepaidCustomerData, displayTablePrepaid } = this.state;\r\n    displayTablePrepaid.map(item => {\r\n      var selectedPrepaid = prepaidCustomerData.filter(\r\n        prepaid => prepaid.id != item\r\n      );\r\n      this.setState({ prepaidCustomerData: selectedPrepaid });\r\n    });\r\n  }\r\n  HideCreditNoteTableData() {\r\n    let { creditNoteCustomerData, displayTableCreditNote } = this.state;\r\n    displayTableCreditNote.map(item => {\r\n      var selectedCreditNote = creditNoteCustomerData.filter(\r\n        creditNote => creditNote.credit_code != item\r\n      );\r\n      this.setState({ creditNoteCustomerData: selectedCreditNote });\r\n    });\r\n  }\r\n  HideVoucherTableData() {\r\n    let { voucherCustomerData, displayTableVoucher } = this.state;\r\n    displayTableVoucher.map(item => {\r\n      var selectedVoucher = voucherCustomerData.filter(\r\n        voucher => voucher.voucher_no != item\r\n      );\r\n      this.setState({ voucherCustomerData: selectedVoucher });\r\n    });\r\n  }\r\n  addVoucher = selectedVoucher => {\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      txtUserPayAmount,\r\n      isOpenSubPayment,\r\n      selectedCards,\r\n    } = this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Voucher is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const selectedVoucherAmount = parseFloat(selectedVoucher.value);\r\n    let pay_amt_setup = 0;\r\n    if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedVoucherAmount;\r\n    } else {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Partial Amount is not applicable in voucher\",\r\n      });\r\n      return;\r\n      // alert(\"Partial Amount is not applicable in voucher\");\r\n      // return;\r\n    }\r\n    const payTypeId = 9;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedVoucher.voucher_no,\r\n      pay_rem2: selectedVoucher.voucher_no,\r\n      pay_rem4: this.state.pay_rem4,\r\n      gt_group: false,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableVoucher\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    let setdisplayTableVoucher = this.state.displayTableVoucher;\r\n    setdisplayTableVoucher.push(selectedVoucher.voucher_no);\r\n    this.setState({ displayTableVoucher: setdisplayTableVoucher });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    this.HideVoucherTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addCreditNote = selectedCreditNote => {\r\n    console.log(selectedCreditNote);\r\n    let { cardField, ewalletField, balance, txtUserPayAmount, selectedCards } =\r\n      this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      Toast({\r\n        type: \"error\",\r\n        message: \"Credit Note is not allowed\",\r\n      });\r\n      return;\r\n    }\r\n    const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\r\n    console.log(selectedCreditNoteAmount);\r\n    let pay_amt_setup = 0;\r\n    if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedCreditNoteAmount;\r\n    } else {\r\n      pay_amt_setup = txtUserPayAmount;\r\n    }\r\n    const payTypeId = 17;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedCreditNote.credit_code,\r\n      pay_rem2: selectedCreditNote.transaction,\r\n      pay_rem4: this.state.pay_rem4,\r\n      gt_group: false,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    let setdisplayTableCreditNote = this.state.displayTableCreditNote;\r\n    setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\r\n    this.setState({ displayTableCreditNote: setdisplayTableCreditNote });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    this.HideCreditNoteTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n\r\n  setBalanceToAllTextBoxes(balance) {\r\n    this.setState({\r\n      balance: balance,\r\n      txtUserPayAmount: balance,\r\n    });\r\n  }\r\n  removeCards = idx => () => {\r\n    let {\r\n      selectedCards,\r\n      balance,\r\n      cardField,\r\n      ewalletField,\r\n      itemProductServiceVoucherAmount,\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n    } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"false\" });\r\n    balance = parseFloat(balance) + parseFloat(idx.pay_amt);\r\n    var array = [...selectedCards]; // make a separate copy of the array\r\n    var index = array.indexOf(idx);\r\n    if (idx.pay_typeid == 23) {\r\n      if (idx.prepaid_ct == \"Product Only\") {\r\n        itemProductAmount = itemProductAmount + idx.pay_amt;\r\n      } else if (idx.prepaid_ct == \"Service Only\") {\r\n        itemServiceAmount = itemServiceAmount + idx.pay_amt;\r\n      } else {\r\n        itemProductServiceVoucherAmount =\r\n          itemProductServiceVoucherAmount + idx.pay_amt;\r\n      }\r\n      this.setState({\r\n        itemProductServiceVoucherAmount,\r\n        itemProductAmount,\r\n        itemServiceAmount,\r\n      });\r\n    }\r\n    if (index !== -1) {\r\n      array.splice(index, 1);\r\n      this.setState({ selectedCards: array, balance });\r\n    }\r\n    //console.log(\"idx\", idx);\r\n    var removedTerm = idx.pay_typeid;\r\n    //console.log(\"removedTerm\", removedTerm);\r\n    //console.log(\"idx.pay_rem2\", idx.pay_rem2);\r\n    if (removedTerm == \"23\") {\r\n      const items = this.state.displayTablePrepaid;\r\n      console.log(\"BeforeRemove-displayTablePrepaid\", items);\r\n      const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTablePrepaid: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTablePrepaid\",\r\n          this.state.displayTablePrepaid\r\n        );\r\n      });\r\n      this.getPrepaidAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n    if (removedTerm == \"17\") {\r\n      const items = this.state.displayTableCreditNote;\r\n      console.log(\"BeforeRemove-displayTableCreditNote\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableCreditNote: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableCreditNote\",\r\n          this.state.displayTableCreditNote\r\n        );\r\n      });\r\n      this.getCreditNoteAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n\r\n    if (removedTerm == \"9\") {\r\n      const items = this.state.displayTableVoucher;\r\n      console.log(\"BeforeRemove-displayTableVoucher\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter(item => item !== valueToRemove);\r\n      this.setState({ displayTableVoucher: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableVoucher\",\r\n          this.state.displayTableVoucher\r\n        );\r\n      });\r\n      this.getVoucherData(\"\");\r\n    }\r\n    cardField[\"pay_amt\"] = balance;\r\n    ewalletField[\"pay_amt\"] = balance;\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  checkTypeOfCartItemContainsDeposit(cartData) {\r\n    let stringifiedCartData = cartData.data;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map(item => {\r\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\r\n          this.state.isTreatmentDoneButton = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n\r\n    this.props\r\n      .getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`)\r\n      .then(res => {\r\n        this.setState({\r\n          paytableData: [],\r\n        });\r\n        let { paytableData, isSelectedPaymentType, displayModelPaymentType } =\r\n          this.state;\r\n        isSelectedPaymentType = selPayTypeName.trim();\r\n        displayModelPaymentType = selPayTypeName.trim();\r\n        for (let key of res.data) {\r\n          paytableData.push({ label: key.pay_description, value: key.id });\r\n        }\r\n        this.setState(\r\n          {\r\n            paytableData,\r\n          },\r\n          () => {\r\n            let { isOpenSubPayment } = this.state;\r\n            if (paytableData.length == 0) {\r\n              Toast({\r\n                type: \"error\",\r\n                message: \"Pay Table Not Exists\",\r\n              });\r\n              return;\r\n            } else if (selPayTypeName.trim() === \"VOUCHER\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"PREPAID\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"Credit\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"CARD\") {\r\n              isOpenSubPayment = true;\r\n            } else if (paytableData.length == 1) {\r\n              isOpenSubPayment = false;\r\n              let payTypeId = paytableData[0].value;\r\n              let { balance, selectedCards, txtUserPayAmount } = this.state;\r\n              if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n                if (parseFloat(txtUserPayAmount) == 0) {\r\n                  return;\r\n                }\r\n              }\r\n              if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\r\n                let result =\r\n                  this.getPayTableNameBasedOnId(payTypeId) + \" already exists\";\r\n                Toast({\r\n                  type: \"error\",\r\n                  message: result,\r\n                });\r\n                //alert(\"Already Exists\");\r\n                return;\r\n              } else {\r\n                selectedCards.push({\r\n                  pay_typeid: payTypeId,\r\n                  pay_amt: parseFloat(txtUserPayAmount),\r\n                  credit_debit: false,\r\n                  pay_premise: true,\r\n                  prepaid: false,\r\n                  pay_rem4: this.state.pay_rem4,\r\n                  gt_group: false,\r\n                });\r\n                balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n                txtUserPayAmount = balance;\r\n                this.setState({ txtUserPayAmount, balance });\r\n                return;\r\n              }\r\n            } else if (paytableData.length >= 1) {\r\n              isOpenSubPayment = true;\r\n              isSelectedPaymentType = \"Multiple\";\r\n            }\r\n            this.setState({\r\n              isOpenSubPayment,\r\n              isSelectedPaymentType,\r\n              displayModelPaymentType,\r\n            });\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  handleDialog = async () => {\r\n    let { isOpenSubPayment } = this.state;\r\n    isOpenSubPayment = false;\r\n    await this.setState({\r\n      isOpenSubPayment,\r\n    });\r\n  };\r\n\r\n  handleChangeCard = async ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n\r\n    await this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  handleDatePick = async ({ target: { value, name } }) => {\r\n    let { DateofPay } = this.state;\r\n    DateofPay = value;\r\n    await this.setState({\r\n      DateofPay,\r\n    });\r\n\r\n    let DatePayment = {};\r\n    DatePayment[\"DateofPayment\"] = value;\r\n    await this.props.updateForm(\"CartPaymentDate\", DatePayment);\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      responseData,\r\n      balance,\r\n      payGroupData,\r\n      paytableData,\r\n      isOpenSubPayment,\r\n      isSelectedPaymentType,\r\n      displayModelPaymentType,\r\n      cardField,\r\n      pay_rem4,\r\n      DateofPay,\r\n      MinimumDate,\r\n      is_paymentdate,\r\n      isMakePaymentLoading,\r\n    } = this.state;\r\n    let { t } = this.props;\r\n    let { payTableDropDownValue } = this.state.formFields;\r\n    console.log(payTableDropDownValue);\r\n    let insideRadioButtonData;\r\n    console.log(isSelectedPaymentType, \"selectedpaymenttype\");\r\n    if (isSelectedPaymentType == \"VOUCHER\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tr>\r\n              <td>{t(\"Vocucher No\")}</td>\r\n              <td>{t(\"Value\")}</td>\r\n              <td>{t(\"Exp. Date\")}</td>\r\n            </tr>\r\n            {this.state.voucherCustomerData.map((selectedVoucher, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addVoucher.bind(this, selectedVoucher)}\r\n              >\r\n                <td>{selectedVoucher.voucher_no}</td>\r\n                <td>{selectedVoucher.value}</td>\r\n                <td>{selectedVoucher.issued_expiry_date}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"PREPAID\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>{t(\"Category\")}</td>\r\n              <td>{t(\"Amount\")}</td>\r\n              <td>{t(\"Remaining\")}</td>\r\n              <td>{t(\"Invoice No.\")}</td>\r\n              <td>{t(\"Exp. Date\")}</td>\r\n              <td>{t(\"Condition Type\")}</td>\r\n              <td>{t(\"Use Amount\")}</td>\r\n            </tr>\r\n            {this.state.prepaidCustomerData.map((selectedPrepaid, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addPrepaid.bind(this, selectedPrepaid)}\r\n              >\r\n                <td>{selectedPrepaid.pp_desc}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.pp_total}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.remain}</td>\r\n                <td>{selectedPrepaid.prepaid}</td>\r\n                <td>{selectedPrepaid.exp_date}</td>\r\n                <td>{selectedPrepaid.conditiontype1}</td>\r\n                <td className=\"text-right\">{selectedPrepaid.Finaluse_amt}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Credit\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>{t(\"Credit\")} #</td>\r\n              <td>{t(\"Date\")}</td>\r\n              <td>{t(\"Amount\")}</td>\r\n              <td>{t(\"Balance\")}</td>\r\n              <td>{t(\"Status\")}</td>\r\n            </tr>\r\n            {this.state.creditNoteCustomerData.map((creditNote, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addCreditNote.bind(this, creditNote)}\r\n              >\r\n                <td>{creditNote.credit_code}</td>\r\n                <td>{creditNote.sa_date}</td>\r\n                <td>{creditNote.amount}</td>\r\n                <td>{creditNote.balance}</td>\r\n                <td>{creditNote.status}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"CARD\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"d-flex flex-wrap justify-content-start\">\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Select Card\")}\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={cardField.pay_typeid}\r\n                  name=\"pay_typeid\"\r\n                  onChange={this.handleCreditChange}\r\n                />\r\n              </div>\r\n              {this.validator.message(\r\n                \"cardFieldType\",\r\n                cardField.pay_typeid,\r\n                \"required\"\r\n              )}\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Card No.\")}\r\n                <NormalInput\r\n                  value={cardField.pay_rem1}\r\n                  name=\"pay_rem1\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Name\")}\r\n                <NormalInput\r\n                  value={cardField.pay_rem2}\r\n                  name=\"pay_rem2\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Exp Month\")} / {t(\"Year\")}\r\n                <NormalInput\r\n                  placeholder=\"mm/YYYY\"\r\n                  value={cardField.pay_rem3}\r\n                  name=\"pay_rem3\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                {t(\"Approval Code\")}\r\n                <NormalInput\r\n                  value={cardField.App_code}\r\n                  name=\"App_code\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={false}\r\n                  className=\"col-12 mt-4 ml-2 btn-outline-success\"\r\n                  label=\"CONFIRM\"\r\n                  onClick={() => this.addCreditCard()}\r\n                />\r\n              </div>\r\n              <div className=\"col-1\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Multiple\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                <Label className=\"col-12 fs-15\">{t(\"Choose Option\")}</Label>\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={payTableDropDownValue}\r\n                  name=\"payTableDropDownValue\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      insideRadioButtonData = <div></div>;\r\n    }\r\n    let payGroupDataContent = [];\r\n    console.log(payGroupData);\r\n    payGroupData.forEach((item, i) => {\r\n      payGroupDataContent.push(\r\n        <div\r\n          className=\"col-md-3 col-4 payment-item cursor-pointer\"\r\n          style={{ width: \"50px\", padding: \"15px\" }}\r\n          key={i}\r\n          onClick={() => this.addNewPaymentData(item.value, item.label)}\r\n        >\r\n          <center>\r\n            <img\r\n              src={helpers.getUrl() + \"media/\" + item.picturelocation}\r\n              label={item.label}\r\n              style={{ textAlign: \"center\" }}\r\n              width=\"40\"\r\n              height=\"40\"\r\n            />\r\n          </center>\r\n          <center>\r\n            <p style={{ width: \"100px\", textAlign: \"center\" }}>{item.label}</p>\r\n          </center>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let { cartId, cartData, tokenDetails } = this.props;\r\n    console.log(cartId, tokenDetails, this.props.cartData);\r\n    //this.checkTypeOfCartItemContainsDeposit(cartData);\r\n\r\n    let userAddedPayTableData = (\r\n      <table className=\"table table-bordered\">\r\n        {this.state.selectedCards.map((selectedCards, index) => (\r\n          <tr key={index}>\r\n            <td className=\"fs-18\">\r\n              {selectedCards.pay_desc\r\n                ? selectedCards.pay_desc\r\n                : this.getPayTableNameBasedOnId(selectedCards.pay_typeid)}\r\n            </td>\r\n            <td className=\"fs-18\" style={{ textAlign: \"right\" }}>\r\n              {selectedCards.pay_amt.toFixed(2)}\r\n            </td>\r\n            <td>\r\n              {!selectedCards.gt_group ? (\r\n                <div\r\n                  className=\"col-4 p-0 fs-20 cursor-pointer\"\r\n                  onClick={this.removeCards(selectedCards)}\r\n                >\r\n                  <span className=\"icon-delete\"></span>\r\n                </div>\r\n              ) : null}\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    );\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"d-flex flex-wrap\">\r\n          <div className=\"col-md-2 col-12 mb-2\">\r\n            <label className=\"text-left text-black common-label-text \">\r\n              {t(\"Enter Amount\")}\r\n            </label>\r\n\r\n            <div className=\"input-group mb-2\">\r\n              <NormalInput\r\n                value={this.state.txtUserPayAmount}\r\n                onChange={this.handleChangeTextBox.bind(this)}\r\n              />\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|min:0,num\"\r\n              )}\r\n              {this.validator.message(\r\n                \"Amount\",\r\n                this.state.txtUserPayAmount,\r\n                \"required|numeric|max:\" + this.state.balance + \",num\"\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 col-12 mb-2\">\r\n            <Label>{t(\"Remark\")}</Label>\r\n            <div className=\"input-group mb-2\">\r\n              <NormalInput\r\n                value={pay_rem4}\r\n                name=\"pay_rem4\"\r\n                onChange={this.handleChangeRemarkBox.bind(this)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-2 col-12 mb-2\">\r\n            {is_paymentdate ? (\r\n              <>\r\n                <Label>{t(\"Date\")}</Label>\r\n                <div className=\"input-group mb-2\">\r\n                  <NormalDate\r\n                    value={new Date(DateofPay)}\r\n                    name=\"DateofPay\"\r\n                    type=\"date\"\r\n                    onChange={this.handleDatePick}\r\n                    minDate={new Date(MinimumDate)}\r\n                    maxDate={new Date()}\r\n                    showDisabledMonthNavigation\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"col-md-4 col-12\">\r\n            <div className=\"d-flex justify-content-end\">\r\n              <div className=\"make-payment mt-3 text-center\">\r\n                {isMakePaymentLoading ? (\r\n                  <div class=\"d-flex align-items-center justify-content-center\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                      <span class=\"sr-only\">{t(\"Loading...\")}</span>\r\n                    </div>\r\n                  </div>\r\n                ) : this.state.isMakePaymentButtonClicked == \"true\" ? (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    disabled={true}\r\n                  />\r\n                ) : (\r\n                  <NormalButton\r\n                    submitBtn={true}\r\n                    className=\"col-12\"\r\n                    label=\"Make payment\"\r\n                    onClick={() => this.handleSubmit()}\r\n                    disabled={\r\n                      this.state.selectedCards.length <= 0 || balance > 0\r\n                    }\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <h4>{t(\"Select Payment Method\")}</h4>\r\n\r\n        <div className=\"row paymentGroup\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"d-flex flex-wrap\">\r\n              {payGroupData.length > 0 ? (\r\n                payGroupData.map((item, index) => {\r\n                  return (\r\n                    <div\r\n                      className=\"col-md-3 col-4 payment-item cursor-pointer\"\r\n                      style={{ width: \"50px\", padding: \"15px\" }}\r\n                      key={index}\r\n                      onClick={() =>\r\n                        this.addNewPaymentData(item.value, item.label)\r\n                      }\r\n                    >\r\n                      <center>\r\n                        <img\r\n                          src={\r\n                            helpers.getUrl() + \"media/\" + item.picturelocation\r\n                          }\r\n                          label={item.label}\r\n                          style={{ textAlign: \"center\" }}\r\n                          width=\"40\"\r\n                          height=\"40\"\r\n                        />\r\n                      </center>\r\n                      <center>\r\n                        <p style={{ width: \"100px\", textAlign: \"center\" }}>\r\n                          {item.label}\r\n                        </p>\r\n                      </center>\r\n                    </div>\r\n                  );\r\n                })\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6 make-payment-section\">\r\n            <p className=\"h6\">{t(\"List of Selections\")}</p>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12 mt-1 mb-1\">\r\n                <div className=\"d-flex payment\">\r\n                  <div className=\"col-md-7 p-0\">\r\n                    <div className=\"d-flex flex-wrap fs-14\">\r\n                      <div className=\"col-6\">{t(\"Subtotal\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.subtotal}</div>\r\n                      <div className=\"col-6\">{t(\"Discount ($)\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.discount}</div>\r\n                      <div className=\"col-6\">{t(\"Transac amount\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.trans_amt}</div>\r\n                      <div className=\"col-6\">{t(\"Deposit\")}</div>\r\n                      <div className=\"col-6\">$ {responseData.deposit_amt}</div>\r\n                      <div className=\"col-6\">{responseData.tax_lable}</div>\r\n                      <div className=\"col-6\">$ {responseData.tax_amt}</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-5\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                      <div className=\"col-12 fs-22 text-center\">\r\n                        {t(\"Billing Amount\")}\r\n                      </div>\r\n                      <div className=\"col-12 fs-22 fw-700 text-center text-orenge\">\r\n                        $ {responseData.billable_amount}\r\n                      </div>\r\n                      <div className=\"col-12 f-600 text-center mt-2\">\r\n                        {t(\"Balance Amount\")}: {Number(balance).toFixed(2)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-12 mt-2 payment-list\">\r\n              <div className=\"fs-12\">{userAddedPayTableData}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <NormalModal\r\n          className={\"payment-modal\"}\r\n          style={{ minWidth: \"70%\" }}\r\n          modal={isOpenSubPayment}\r\n          handleModal={this.handleDialog}\r\n        >\r\n          <img\r\n            onClick={this.handleDialog}\r\n            className=\"close cursor-pointer\"\r\n            src={closeIcon}\r\n            alt=\"\"\r\n          />\r\n          <center>\r\n            <p className=\"fs-18 f-600\">{displayModelPaymentType}</p>\r\n          </center>\r\n          <br />\r\n          {insideRadioButtonData}\r\n        </NormalModal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selected_cstomer: state.common.selected_cstomer,\r\n  tokenDetails: state.authStore.tokenDetails,\r\n  CartPaymentDate: state.appointment.CartPaymentDate,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getPayment,\r\n      getCommonApi,\r\n      createPayment,\r\n      updateForm,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const ChangePayment = withTranslation()(\r\n  connect(mapStateToProps, mapDispatchToProps)(ChangePaymentClass)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}