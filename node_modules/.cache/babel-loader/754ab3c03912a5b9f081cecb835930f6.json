{"ast":null,"code":"import { Tcm } from \"service/apiVariables\";\nexport const getTcmApi = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    Tcm.getTcm.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...Tcm.getTcm\n    }).then(response => {\n      resolve(response);\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const tcmCreateApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    Tcm.postTCM.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...Tcm.postTCM,\n      body\n    }).then(response => {\n      resolve(response); // let message = \"success\";\n      // let { error, success } = response;\n      // if (success === \"1\") {\n      //   Toast({ type: \"success\", message });\n      // } else {\n      //   reject(Toast({ type: \"error\", error }));\n      // }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal update method\n\nexport const tcmUpdateApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    Tcm.updateTCM.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...Tcm.updateTCM,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        success\n      } = response;\n\n      if (success === \"1\") {\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal update method\n\nexport const tcmPatchApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    Tcm.patchTcm.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...Tcm.patchTcm,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/TCM.js"],"names":["Tcm","getTcmApi","id","dispatch","getState","api","Toast","Promise","resolve","reject","getTcm","addQuery","key","payload","then","response","catch","message","type","tcmCreateApi","body","postTCM","tcmUpdateApi","updateTCM","status","success","tcmPatchApi","patchTcm"],"mappings":"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","sourcesContent":["import { Tcm } from \"service/apiVariables\";\r\n\r\nexport const getTcmApi =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.getTcm.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.getTcm })\r\n        .then(response => {\r\n          resolve(response);\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\nexport const tcmCreateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.postTCM.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.postTCM, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          // let message = \"success\";\r\n          // let { error, success } = response;\r\n          // if (success === \"1\") {\r\n          //   Toast({ type: \"success\", message });\r\n          // } else {\r\n          //   reject(Toast({ type: \"error\", error }));\r\n          // }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const tcmUpdateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.updateTCM.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.updateTCM, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, success } = response;\r\n          if (success === \"1\") {\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const tcmPatchApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.patchTcm.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.patchTcm, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200) {\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}