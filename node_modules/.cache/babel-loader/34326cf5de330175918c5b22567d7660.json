{"ast":null,"code":"import { CommonActionType } from \"redux/actions/actionType\";\nimport { common } from \"service/apiVariables\";\nimport { history } from \"../../helpers\";\nimport { Toast } from \"../../service/toast\"; // common branch create method\n\nexport const createBranch = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...common.addBranch,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common branch update method\n\nexport const updateBranch = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.updateBranch.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.updateBranch,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common get branch\n\nexport const getBranch = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.getBranch.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.getBranch\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getBranchList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common jobtitle get method\n\nexport const getJobtitle = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...common.getJobtitle\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getJobtitleList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common get shift method\n\nexport const getShift = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.getShift.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.getShift\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getShiftList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common get category method\n\nexport const getCategory = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...common.getCategory\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getCategoryList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get common skills method\n\nexport const getSkills = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...common.getSkills\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getSkillsList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // common get customer method\n\nexport const getCustomer = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...common.getCustomer\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: CommonActionType.getCustomerList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal get method\n\nexport const getCommonApi = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.getCommon.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.getCommon\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        data,\n        status\n      } = response; // if (status === 200 || status === 201) {\n      //   Toast({ type: 'success', message })\n      // } else {\n      //   reject(Toast({ type: 'error', message }));\n      // }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal post method\n\nexport const commonCreateApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.addCommon.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.addCommon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n      console.log(response, \"commoncreateapiresponse\");\n\n      if (status === 200 || status === 201) {// Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal update method\n\nexport const commonUpdateApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.updateCommon.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.updateCommon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {//    Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal update method\n\nexport const commonPatchApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.commonPatch.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.commonPatch,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {//Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // universal delete method\n\nexport const commonDeleteApi = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    common.deleteCommon.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...common.deleteCommon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // store data action for form field\n\nexport function updateForm(type, data) {\n  return {\n    type: type,\n    payload: data\n  };\n}","map":{"version":3,"sources":["F:/webfe/src/redux/actions/common.js"],"names":["CommonActionType","common","history","Toast","createBranch","body","dispatch","getState","api","Promise","resolve","reject","addBranch","then","response","message","status","type","catch","updateBranch","id","addQuery","key","payload","getBranch","data","getBranchList","getJobtitle","getJobtitleList","getShift","getShiftList","getCategory","getCategoryList","getSkills","getSkillsList","getCustomer","getCustomerList","getCommonApi","getCommon","commonCreateApi","addCommon","console","log","commonUpdateApi","updateCommon","commonPatchApi","commonPatch","commonDeleteApi","deleteCommon","updateForm"],"mappings":"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","sourcesContent":["import { CommonActionType } from \"redux/actions/actionType\";\r\nimport { common } from \"service/apiVariables\";\r\nimport { history } from \"../../helpers\";\r\nimport { Toast } from \"../../service/toast\";\r\n\r\n// common branch create method\r\nexport const createBranch =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...common.addBranch, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common branch update method\r\nexport const updateBranch =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.updateBranch.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.updateBranch, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common get branch\r\nexport const getBranch =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.getBranch.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.getBranch })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getBranchList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common jobtitle get method\r\nexport const getJobtitle =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...common.getJobtitle })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getJobtitleList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common get shift method\r\nexport const getShift =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.getShift.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.getShift })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getShiftList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common get category method\r\nexport const getCategory =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...common.getCategory })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getCategoryList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get common skills method\r\nexport const getSkills =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...common.getSkills })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getSkillsList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// common get customer method\r\nexport const getCustomer =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...common.getCustomer })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({ type: CommonActionType.getCustomerList, payload: data });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal get method\r\nexport const getCommonApi =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.getCommon.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.getCommon })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, data, status } = response;\r\n          // if (status === 200 || status === 201) {\r\n          //   Toast({ type: 'success', message })\r\n          // } else {\r\n          //   reject(Toast({ type: 'error', message }));\r\n          // }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal post method\r\nexport const commonCreateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.addCommon.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.addCommon, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          console.log(response, \"commoncreateapiresponse\");\r\n          if (status === 200 || status === 201) {\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const commonUpdateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.updateCommon.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.updateCommon, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            //    Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const commonPatchApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.commonPatch.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.commonPatch, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            //Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal delete method\r\nexport const commonDeleteApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      common.deleteCommon.addQuery = { key: \"id\", payload: id };\r\n      api({ ...common.deleteCommon, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// store data action for form field\r\nexport function updateForm(type, data) {\r\n  return {\r\n    type: type,\r\n    payload: data,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}