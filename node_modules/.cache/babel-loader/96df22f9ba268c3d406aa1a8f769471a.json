{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\quantumCode20082022\\\\src\\\\component\\\\Admin\\\\NewAppointment\\\\NewListAppointment\\\\Scheduler\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { NewSchedulerModal } from \"component/common/Plugins/NewScheduler\"; // import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\n\nimport { getCustomer, getCommonApi, commonDeleteApi } from \"redux/actions/common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\"; // import timeOption from 'data/timeOption.json'\n\nimport { dateFormat } from \"service/helperFunctions\";\nimport { history } from \"helpers\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { CreateAppointment, updateForm } from \"redux/actions/appointment\";\nimport { NewCreateAppointment } from \"../../NewCreateAppointment/index\";\nimport { LoadPanel } from \"devextreme-react/load-panel\";\nimport moment from \"moment\";\nimport { BrowserView, MobileView, isBrowser, isMobile } from \"react-device-detect\";\nexport class SchedulerClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      appointment: [{\n        time: \"10.00 AM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Benjamin\",\n        treatment: \"Head Massage\"\n      }, {\n        time: \"12.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Daniel\",\n        treatment: \"Pedicure\"\n      }, {\n        time: \"1.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"John\",\n        treatment: \"Haircut\"\n      }, {\n        time: \"2.00 PM,\",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Josua\",\n        treatment: \"Manicure\"\n      }, {\n        time: \"4.00 PM, \",\n        date: \"Wednesday, 1st April, 2020\",\n        name: \"Derrik\",\n        treatment: \"Body Massage\"\n      }],\n      events: [],\n      brachList: [],\n      formField: {\n        branchId: \"\",\n        time: \"\",\n        staff_id: \"\"\n      },\n      list: [],\n      filterDate: new Date(),\n      filterType: \"day\",\n      selectedId: \"\",\n      staffList: [],\n      page: 1,\n      meta: [],\n      searchtext: \"\",\n      staffSortlist: [],\n      isOpenModal: false,\n      loadPanelVisible: false,\n      showIndicator: true,\n      shading: true,\n      showPane: true,\n      groupByType: \"staff\",\n      SchedulerSetting: {\n        settingId: 0,\n        startday_hour: \"\",\n        endday_hour: \"\",\n        cell_duration: \"\",\n        resource_count: \"\"\n      },\n      settingData: {}\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.getSettingInfo();\n      this.handleItemSettings();\n    };\n\n    this.handleItemSettings = () => {\n      let {\n        settingData\n      } = this.state;\n      this.props.getCommonApi(`userlist/`).then(async key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(key, \"settingsData AppointmentCreate\");\n\n        if (status === 200) {\n          settingData = data;\n          await this.setState({\n            settingData\n          });\n        }\n      });\n    };\n\n    this.getSettingInfo = () => {\n      let {\n        SchedulerSetting\n      } = this.state;\n      this.props.getCommonApi(`siteappointsetting/`).then(async key => {\n        let {\n          status,\n          data\n        } = key;\n        console.log(key, \"siteappointsetting\");\n\n        if (status == \"200\") {\n          if (data) {\n            SchedulerSetting[\"settingId\"] = data[0].id;\n            SchedulerSetting[\"startday_hour\"] = data[0].startday_hour ? Number(data[0].startday_hour) : 8;\n            SchedulerSetting[\"endday_hour\"] = data[0].endday_hour ? Number(data[0].endday_hour) : 21;\n            SchedulerSetting[\"cell_duration\"] = data[0].cell_duration ? Number(data[0].cell_duration) : 15;\n\n            if (isMobile) {\n              SchedulerSetting[\"resource_count\"] = 1;\n            } else {\n              SchedulerSetting[\"resource_count\"] = data[0].resource_count ? Number(data[0].resource_count) : 5;\n            }\n\n            console.log(SchedulerSetting, \"siteappointsettingafterrender\");\n            await this.setState({\n              SchedulerSetting\n            });\n            await this.props.updateForm(\"SchedulerSetting\", SchedulerSetting);\n            let {\n              filterDate,\n              filterType\n            } = this.state; // this.props\n            //   .getCommonApi(\n            //     `customeroutstanding/?date=${dateFormat(\n            //       filterDate\n            //     )}&check=${filterType}`\n            //   )\n            //   .then(key => {});\n\n            this.getAppointmentWithStaff();\n          }\n        }\n      });\n    };\n\n    this.getHoursFromDate = date => {\n      let hour = date.getHours();\n      let minute = date.getMinutes();\n      let hours = hour > 9 ? hour : \"0\" + hour;\n      let minutes;\n\n      if (minute < 15) {\n        minutes = \"00\";\n      } else if (minute >= 15 && minute < 30) {\n        minutes = \"15\";\n      } else if (minute >= 30 && minute < 45) {\n        minutes = \"30\";\n      } else if (minute >= 45 && minute < 59) {\n        minutes = \"45\";\n      }\n\n      return hours + \":\" + minutes;\n    };\n\n    this.handleEmptyEvent = async (date, e) => {\n      let {\n        customerDetail\n      } = this.props;\n      let {\n        formField\n      } = this.state;\n      let time = new Date(date);\n      formField[\"time\"] = this.getHoursFromDate(time);\n      formField[\"date\"] = date;\n      formField[\"appt_id\"] = 0;\n\n      if (e.groups) {\n        formField[\"staff_id\"] = e.groups.id;\n      }\n\n      if (e.appt_id) {\n        formField[\"appt_id\"] = e.appt_id;\n      }\n\n      await this.setState({\n        formField\n      });\n      console.log(date, e, \"hgjsydfisuyfsdfm ==== handleEmptyEvent\", time.getHours);\n      await this.props.updateForm(\"basicApptDetail\", formField);\n      await this.setState({\n        isOpenModal: true\n      });\n    };\n\n    this.handleCloseDialog = async () => {\n      await this.props.updateForm(\"treatmentList\", []);\n      await this.props.updateForm(\"basicApptDetail\", {});\n      await this.props.updateForm(\"appointmentCustomerDetail\", {});\n      await this.setState({\n        isOpenModal: false\n      });\n    };\n\n    this.handleChangeFilter = async (prevMode, prevDate, newMode, newDate, search) => {\n      let {\n        filterDate,\n        filterType,\n        searchtext\n      } = this.state;\n      filterDate = newDate;\n      filterType = newMode;\n      searchtext = search;\n      await this.setState({\n        filterDate,\n        filterType,\n        searchtext\n      }); //if (newMode === \"day\" || newMode === \"week\") {\n      // this.props\n      //   .getCommonApi(\n      //     `customeroutstanding/?date=${dateFormat(newDate)}&check=${newMode}`\n      //   )\n      //   .then(key => {});\n      //}\n\n      console.log(\"dfhgfhjhjghjdfhg\", prevMode, prevDate, newMode, newDate);\n\n      if (prevMode !== newMode || prevDate !== newDate) {\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.handleChange = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        formField\n      } = this.state;\n      formField[name] = value;\n      await this.setState({\n        formField\n      });\n\n      if (name === \"branchId\") {\n        this.getAppointmentWithStaff();\n      }\n\n      this.props.updateForm(\"basicApptDetail\", formField);\n    };\n\n    this.handleDelete = async (id, event) => {\n      let {\n        selectedId\n      } = this.state;\n      console.log(id, \"===afasfasdfdfasd=====\", selectedId);\n\n      if (id !== selectedId) {\n        await this.setState({\n          selectedId: id\n        });\n        await this.props.commonDeleteApi(`appointment/${id}/`).then(res => {});\n      }\n    };\n\n    this.handleOpenStaff = (one, two, three) => {\n      console.log(\"namdfsfgsghsfghf\", one, two, three);\n      let {\n        filterDate\n      } = this.state;\n      this.props.handleOpen(filterDate);\n    };\n\n    this.getAppointmentWithStaff = () => {\n      this.setState({\n        loadPanelVisible: true\n      }, () => {\n        let {\n          filterDate,\n          filterType,\n          page,\n          searchtext,\n          staffList,\n          events,\n          meta,\n          groupByType\n        } = this.state;\n        this.props.getCommonApi(`empappointmentview/?date=${dateFormat(filterDate)}&check=${filterType}&page=${page}&limit=${Number(this.props.SchedulerSetting.resource_count)}&search=${searchtext}&type=${groupByType}`).then(async key => {\n          console.log(\"starttime: \", moment(new Date(), \"DD/MM/YYYY HH:mm:ss\"));\n          let {\n            status,\n            data,\n            event\n          } = key;\n          setTimeout(this.hideLoadPanel);\n\n          if (status === 200) {\n            if (data) {\n              staffList = [];\n\n              if (data.dataList.length > 0) {\n                staffList = data.dataList;\n              }\n\n              events = [];\n              meta = []; //this.setState({ events, meta });\n\n              meta = data.meta; //events = event;\n\n              if (event.length > 0) {\n                events = event; // event.forEach(cell => {\n                //   let filterList = events.find(\n                //     Appoint =>\n                //       Appoint.linkcode === cell.linkcode &&\n                //       Appoint.id === cell.id &&\n                //       Appoint.cust_id === cell.cust_id &&\n                //       (Appoint.endDate === cell.startDate ||\n                //         Appoint.startDate === cell.endDate)\n                //   );\n                //   if (filterList) {\n                //     if (filterList.startDate < cell.startDate) {\n                //       filterList[\"startDate\"] = filterList.startDate;\n                //     } else {\n                //       filterList[\"startDate\"] = cell.startDate;\n                //     }\n                //     if (filterList.endDate > cell.endDate) {\n                //       filterList[\"endDate\"] = filterList.endDate;\n                //     } else {\n                //       filterList[\"endDate\"] = cell.endDate;\n                //     }\n                //     filterList[\"appt_remark\"] =\n                //       filterList.appt_remark + \" \" + \"/\" + \" \" + cell.appt_remark;\n                //     filterList[\"Merged\"] = true;\n                //     this.setState({ ...this.state.events, filterList });\n                //   } else {\n                //     events.push(cell);\n                //     this.setState({ ...events, events });\n                //   }\n                // });\n              }\n\n              await this.setState({\n                events,\n                meta,\n                staffList\n              });\n              console.log(\"endtime: \", moment(new Date(), \"DD/MM/YYYY HH:mm:ss\")); // await this.setState({ events, staffList, meta });\n              //console.log(event, \"appointment cell data\");\n            }\n          }\n        });\n      });\n    };\n\n    this.handleNext = async () => {\n      let {\n        page\n      } = this.state;\n      page = page + 1;\n      await this.setState({\n        page\n      });\n\n      if (page > 0) {\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.handleBack = async () => {\n      let {\n        page\n      } = this.state;\n      page = page - 1;\n      await this.setState({\n        page\n      });\n\n      if (page > 0) {\n        this.getAppointmentWithStaff();\n      }\n    };\n\n    this.hideLoadPanel = async () => {\n      let loadPanelVisible = Object.assign({}, this.state.loadPanelVisible);\n      loadPanelVisible = false;\n      await this.setState({\n        loadPanelVisible\n      });\n    };\n\n    this.groupByAppointment = async groupBy => {\n      await this.setState({\n        groupByType: groupBy\n      });\n      this.getAppointmentWithStaff();\n    };\n\n    this.timeToMins = time => {\n      var b = time.split(\":\");\n      return b[0] * 60 + +b[1];\n    };\n  }\n\n  render() {\n    let {\n      appointment,\n      brachList,\n      branchId,\n      formField,\n      list,\n      events,\n      filterType,\n      filterDate,\n      staffList,\n      meta,\n      searchtext,\n      staffSortlist,\n      isLoading,\n      isOpenModal,\n      SchedulerSetting\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 m-0\",\n      id: \"appointment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadPanel, {\n      shadingColor: \"rgba(0,0,0,0.4)\",\n      position: `center`,\n      onHiding: this.hideLoadPanel,\n      visible: this.state.loadPanelVisible,\n      showIndicator: this.state.showIndicator,\n      shading: this.state.shading,\n      showPane: this.state.showPane,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NewSchedulerModal, {\n      staffList: this.state.staffList,\n      meta: this.state.meta,\n      event: this.state.events,\n      onEmptyClick: (date, e) => this.handleEmptyEvent(date, e),\n      handleChangeFilter: this.handleChangeFilter,\n      filterType: filterType,\n      filterDate: filterDate,\n      searchtext: searchtext,\n      onDeleteEvent: this.handleDelete,\n      handleBack: this.handleBack,\n      handleNext: this.handleNext,\n      staffSortlist: this.state.staffSortlist,\n      getAppointmentWithStaff: this.getAppointmentWithStaff,\n      groupByAppointment: groupBy => this.groupByAppointment(groupBy),\n      handleAppointmentSetting: this.getSettingInfo,\n      settingData: this.state.settingData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NewCreateAppointment, {\n      isOpenModal: isOpenModal,\n      handleCloseDialog: this.handleCloseDialog,\n      handleSaveorUpdate: this.getAppointmentWithStaff,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customerDetail: state.appointment.customerDetail,\n  customerList: state.common.customerList,\n  multipleCustomerForm: state.appointment.multipleCustomerForm,\n  SchedulerSetting: state.appointment.SchedulerSetting\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getCustomer,\n    getCommonApi,\n    updateForm,\n    commonDeleteApi\n  }, dispatch);\n};\n\nexport const Scheduler = connect(mapStateToProps, mapDispatchToProps)(SchedulerClass);","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/component/Admin/NewAppointment/NewListAppointment/Scheduler/index.js"],"names":["React","Component","NewSchedulerModal","getCustomer","getCommonApi","commonDeleteApi","connect","bindActionCreators","dateFormat","history","SimpleReactValidator","CreateAppointment","updateForm","NewCreateAppointment","LoadPanel","moment","BrowserView","MobileView","isBrowser","isMobile","SchedulerClass","state","appointment","time","date","name","treatment","events","brachList","formField","branchId","staff_id","list","filterDate","Date","filterType","selectedId","staffList","page","meta","searchtext","staffSortlist","isOpenModal","loadPanelVisible","showIndicator","shading","showPane","groupByType","SchedulerSetting","settingId","startday_hour","endday_hour","cell_duration","resource_count","settingData","componentWillMount","validator","element","message","autoForceUpdate","componentDidMount","getSettingInfo","handleItemSettings","props","then","key","status","data","console","log","setState","id","Number","getAppointmentWithStaff","getHoursFromDate","hour","getHours","minute","getMinutes","hours","minutes","handleEmptyEvent","e","customerDetail","groups","appt_id","handleCloseDialog","handleChangeFilter","prevMode","prevDate","newMode","newDate","search","handleChange","target","value","handleDelete","event","res","handleOpenStaff","one","two","three","handleOpen","setTimeout","hideLoadPanel","dataList","length","handleNext","handleBack","Object","assign","groupByAppointment","groupBy","timeToMins","b","split","render","isLoading","mapStateToProps","customerList","common","multipleCustomerForm","mapDispatchToProps","dispatch","Scheduler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,QAAkC,uCAAlC,C,CACA;;AAEA,SACEC,WADF,EAEEC,YAFF,EAGEC,eAHF,QAIO,sBAJP;AAKA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC,C,CACA;;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,cAAP;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,2BAA9C;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,QAJF,QAKO,qBALP;AAOA,OAAO,MAAMC,cAAN,SAA6BnB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAC5CoB,KAD4C,GACpC;AACNC,MAAAA,WAAW,EAAE,CACX;AACEC,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,IAAI,EAAE,4BAFR;AAGEC,QAAAA,IAAI,EAAE,UAHR;AAIEC,QAAAA,SAAS,EAAE;AAJb,OADW,EAOX;AACEH,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,IAAI,EAAE,4BAFR;AAGEC,QAAAA,IAAI,EAAE,QAHR;AAIEC,QAAAA,SAAS,EAAE;AAJb,OAPW,EAaX;AACEH,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,IAAI,EAAE,4BAFR;AAGEC,QAAAA,IAAI,EAAE,MAHR;AAIEC,QAAAA,SAAS,EAAE;AAJb,OAbW,EAmBX;AACEH,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,IAAI,EAAE,4BAFR;AAGEC,QAAAA,IAAI,EAAE,OAHR;AAIEC,QAAAA,SAAS,EAAE;AAJb,OAnBW,EAyBX;AACEH,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,IAAI,EAAE,4BAFR;AAGEC,QAAAA,IAAI,EAAE,QAHR;AAIEC,QAAAA,SAAS,EAAE;AAJb,OAzBW,CADP;AAiCNC,MAAAA,MAAM,EAAE,EAjCF;AAkCNC,MAAAA,SAAS,EAAE,EAlCL;AAmCNC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE,EADD;AAETP,QAAAA,IAAI,EAAE,EAFG;AAGTQ,QAAAA,QAAQ,EAAE;AAHD,OAnCL;AAwCNC,MAAAA,IAAI,EAAE,EAxCA;AAyCNC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,EAzCN;AA0CNC,MAAAA,UAAU,EAAE,KA1CN;AA2CNC,MAAAA,UAAU,EAAE,EA3CN;AA4CNC,MAAAA,SAAS,EAAE,EA5CL;AA6CNC,MAAAA,IAAI,EAAE,CA7CA;AA8CNC,MAAAA,IAAI,EAAE,EA9CA;AA+CNC,MAAAA,UAAU,EAAE,EA/CN;AAgDNC,MAAAA,aAAa,EAAE,EAhDT;AAiDNC,MAAAA,WAAW,EAAE,KAjDP;AAkDNC,MAAAA,gBAAgB,EAAE,KAlDZ;AAmDNC,MAAAA,aAAa,EAAE,IAnDT;AAoDNC,MAAAA,OAAO,EAAE,IApDH;AAqDNC,MAAAA,QAAQ,EAAE,IArDJ;AAsDNC,MAAAA,WAAW,EAAE,OAtDP;AAuDNC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,SAAS,EAAE,CADK;AAEhBC,QAAAA,aAAa,EAAE,EAFC;AAGhBC,QAAAA,WAAW,EAAE,EAHG;AAIhBC,QAAAA,aAAa,EAAE,EAJC;AAKhBC,QAAAA,cAAc,EAAE;AALA,OAvDZ;AA8DNC,MAAAA,WAAW,EAAE;AA9DP,KADoC;;AAAA,SAkE5CC,kBAlE4C,GAkEvB,MAAM;AACzB,WAAKC,SAAL,GAAiB,IAAI9C,oBAAJ,CAAyB;AACxC+C,QAAAA,OAAO,EAAEC,OAAO,iBACd;AAAM,UAAA,SAAS,EAAC,wCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,OADH,CAFsC;AAMxCC,QAAAA,eAAe,EAAE;AANuB,OAAzB,CAAjB;AAQD,KA3E2C;;AAAA,SA4E5CC,iBA5E4C,GA4ExB,MAAM;AACxB,WAAKC,cAAL;AACA,WAAKC,kBAAL;AACD,KA/E2C;;AAAA,SAiF5CA,kBAjF4C,GAiFvB,MAAM;AACzB,UAAI;AAAER,QAAAA;AAAF,UAAkB,KAAKjC,KAA3B;AACA,WAAK0C,KAAL,CAAW3D,YAAX,CAAyB,WAAzB,EAAqC4D,IAArC,CAA0C,MAAMC,GAAN,IAAa;AACrD,YAAI;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAmBF,GAAvB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAAiB,gCAAjB;;AACA,YAAIC,MAAM,KAAK,GAAf,EAAoB;AAClBZ,UAAAA,WAAW,GAAGa,IAAd;AACA,gBAAM,KAAKG,QAAL,CAAc;AAClBhB,YAAAA;AADkB,WAAd,CAAN;AAGD;AACF,OATD;AAUD,KA7F2C;;AAAA,SA8F5CO,cA9F4C,GA8F3B,MAAM;AACrB,UAAI;AAAEb,QAAAA;AAAF,UAAuB,KAAK3B,KAAhC;AACA,WAAK0C,KAAL,CAAW3D,YAAX,CAAyB,qBAAzB,EAA+C4D,IAA/C,CAAoD,MAAMC,GAAN,IAAa;AAC/D,YAAI;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAmBF,GAAvB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAAiB,oBAAjB;;AACA,YAAIC,MAAM,IAAI,KAAd,EAAqB;AACnB,cAAIC,IAAJ,EAAU;AACRnB,YAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCmB,IAAI,CAAC,CAAD,CAAJ,CAAQI,EAAxC;AACAvB,YAAAA,gBAAgB,CAAC,eAAD,CAAhB,GAAoCmB,IAAI,CAAC,CAAD,CAAJ,CAAQjB,aAAR,GAChCsB,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQjB,aAAT,CAD0B,GAEhC,CAFJ;AAGAF,YAAAA,gBAAgB,CAAC,aAAD,CAAhB,GAAkCmB,IAAI,CAAC,CAAD,CAAJ,CAAQhB,WAAR,GAC9BqB,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQhB,WAAT,CADwB,GAE9B,EAFJ;AAGAH,YAAAA,gBAAgB,CAAC,eAAD,CAAhB,GAAoCmB,IAAI,CAAC,CAAD,CAAJ,CAAQf,aAAR,GAChCoB,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQf,aAAT,CAD0B,GAEhC,EAFJ;;AAGA,gBAAIjC,QAAJ,EAAc;AACZ6B,cAAAA,gBAAgB,CAAC,gBAAD,CAAhB,GAAqC,CAArC;AACD,aAFD,MAEO;AACLA,cAAAA,gBAAgB,CAAC,gBAAD,CAAhB,GAAqCmB,IAAI,CAAC,CAAD,CAAJ,CAAQd,cAAR,GACjCmB,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQd,cAAT,CAD2B,GAEjC,CAFJ;AAGD;;AAEDe,YAAAA,OAAO,CAACC,GAAR,CAAYrB,gBAAZ,EAA8B,+BAA9B;AACA,kBAAM,KAAKsB,QAAL,CAAc;AAClBtB,cAAAA;AADkB,aAAd,CAAN;AAGA,kBAAM,KAAKe,KAAL,CAAWnD,UAAX,CAAsB,kBAAtB,EAA0CoC,gBAA1C,CAAN;AACA,gBAAI;AAAEf,cAAAA,UAAF;AAAcE,cAAAA;AAAd,gBAA6B,KAAKd,KAAtC,CAxBQ,CAyBR;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAKoD,uBAAL;AACD;AACF;AACF,OAvCD;AAwCD,KAxI2C;;AAAA,SA0I5CC,gBA1I4C,GA0IzBlD,IAAI,IAAI;AACzB,UAAImD,IAAI,GAAGnD,IAAI,CAACoD,QAAL,EAAX;AACA,UAAIC,MAAM,GAAGrD,IAAI,CAACsD,UAAL,EAAb;AACA,UAAIC,KAAK,GAAGJ,IAAI,GAAG,CAAP,GAAWA,IAAX,GAAkB,MAAMA,IAApC;AACA,UAAIK,OAAJ;;AACA,UAAIH,MAAM,GAAG,EAAb,EAAiB;AACfG,QAAAA,OAAO,GAAG,IAAV;AACD,OAFD,MAEO,IAAIH,MAAM,IAAI,EAAV,IAAgBA,MAAM,GAAG,EAA7B,EAAiC;AACtCG,QAAAA,OAAO,GAAG,IAAV;AACD,OAFM,MAEA,IAAIH,MAAM,IAAI,EAAV,IAAgBA,MAAM,GAAG,EAA7B,EAAiC;AACtCG,QAAAA,OAAO,GAAG,IAAV;AACD,OAFM,MAEA,IAAIH,MAAM,IAAI,EAAV,IAAgBA,MAAM,GAAG,EAA7B,EAAiC;AACtCG,QAAAA,OAAO,GAAG,IAAV;AACD;;AACD,aAAOD,KAAK,GAAG,GAAR,GAAcC,OAArB;AACD,KAzJ2C;;AAAA,SA2J5CC,gBA3J4C,GA2JzB,OAAOzD,IAAP,EAAa0D,CAAb,KAAmB;AACpC,UAAI;AAAEC,QAAAA;AAAF,UAAqB,KAAKpB,KAA9B;AACA,UAAI;AAAElC,QAAAA;AAAF,UAAgB,KAAKR,KAAzB;AAEA,UAAIE,IAAI,GAAG,IAAIW,IAAJ,CAASV,IAAT,CAAX;AAEAK,MAAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,KAAK6C,gBAAL,CAAsBnD,IAAtB,CAApB;AACAM,MAAAA,SAAS,CAAC,MAAD,CAAT,GAAoBL,IAApB;AACAK,MAAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAvB;;AACA,UAAIqD,CAAC,CAACE,MAAN,EAAc;AACZvD,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBqD,CAAC,CAACE,MAAF,CAASb,EAAjC;AACD;;AACD,UAAIW,CAAC,CAACG,OAAN,EAAe;AACbxD,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAuBqD,CAAC,CAACG,OAAzB;AACD;;AAED,YAAM,KAAKf,QAAL,CAAc;AAAEzC,QAAAA;AAAF,OAAd,CAAN;AACAuC,MAAAA,OAAO,CAACC,GAAR,CACE7C,IADF,EAEE0D,CAFF,EAGE,wCAHF,EAIE3D,IAAI,CAACqD,QAJP;AAMA,YAAM,KAAKb,KAAL,CAAWnD,UAAX,CAAsB,iBAAtB,EAAyCiB,SAAzC,CAAN;AACA,YAAM,KAAKyC,QAAL,CAAc;AAAE5B,QAAAA,WAAW,EAAE;AAAf,OAAd,CAAN;AACD,KApL2C;;AAAA,SAqL5C4C,iBArL4C,GAqLxB,YAAY;AAC9B,YAAM,KAAKvB,KAAL,CAAWnD,UAAX,CAAsB,eAAtB,EAAuC,EAAvC,CAAN;AACA,YAAM,KAAKmD,KAAL,CAAWnD,UAAX,CAAsB,iBAAtB,EAAyC,EAAzC,CAAN;AACA,YAAM,KAAKmD,KAAL,CAAWnD,UAAX,CAAsB,2BAAtB,EAAmD,EAAnD,CAAN;AACA,YAAM,KAAK0D,QAAL,CAAc;AAClB5B,QAAAA,WAAW,EAAE;AADK,OAAd,CAAN;AAGD,KA5L2C;;AAAA,SA8L5C6C,kBA9L4C,GA8LvB,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,MAA7C,KAAwD;AAC3E,UAAI;AAAE3D,QAAAA,UAAF;AAAcE,QAAAA,UAAd;AAA0BK,QAAAA;AAA1B,UAAyC,KAAKnB,KAAlD;AACAY,MAAAA,UAAU,GAAG0D,OAAb;AACAxD,MAAAA,UAAU,GAAGuD,OAAb;AACAlD,MAAAA,UAAU,GAAGoD,MAAb;AACA,YAAM,KAAKtB,QAAL,CAAc;AAClBrC,QAAAA,UADkB;AAElBE,QAAAA,UAFkB;AAGlBK,QAAAA;AAHkB,OAAd,CAAN,CAL2E,CAU3E;AACA;AACA;AACA;AACA;AACA;AACA;;AACA4B,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCmB,QAAhC,EAA0CC,QAA1C,EAAoDC,OAApD,EAA6DC,OAA7D;;AACA,UAAIH,QAAQ,KAAKE,OAAb,IAAwBD,QAAQ,KAAKE,OAAzC,EAAkD;AAChD,aAAKlB,uBAAL;AACD;AACF,KAnN2C;;AAAA,SAqN5CoB,YArN4C,GAqN7B,OAAO;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAF;AAAStE,QAAAA;AAAT;AAAV,KAAP,KAAuC;AACpD,UAAI;AAAEI,QAAAA;AAAF,UAAgB,KAAKR,KAAzB;AACAQ,MAAAA,SAAS,CAACJ,IAAD,CAAT,GAAkBsE,KAAlB;AACA,YAAM,KAAKzB,QAAL,CAAc;AAClBzC,QAAAA;AADkB,OAAd,CAAN;;AAGA,UAAIJ,IAAI,KAAK,UAAb,EAAyB;AACvB,aAAKgD,uBAAL;AACD;;AACD,WAAKV,KAAL,CAAWnD,UAAX,CAAsB,iBAAtB,EAAyCiB,SAAzC;AACD,KA/N2C;;AAAA,SAiO5CmE,YAjO4C,GAiO7B,OAAOzB,EAAP,EAAW0B,KAAX,KAAqB;AAClC,UAAI;AAAE7D,QAAAA;AAAF,UAAiB,KAAKf,KAA1B;AACA+C,MAAAA,OAAO,CAACC,GAAR,CAAYE,EAAZ,EAAgB,wBAAhB,EAA0CnC,UAA1C;;AACA,UAAImC,EAAE,KAAKnC,UAAX,EAAuB;AACrB,cAAM,KAAKkC,QAAL,CAAc;AAClBlC,UAAAA,UAAU,EAAEmC;AADM,SAAd,CAAN;AAGA,cAAM,KAAKR,KAAL,CAAW1D,eAAX,CAA4B,eAAckE,EAAG,GAA7C,EAAiDP,IAAjD,CAAsDkC,GAAG,IAAI,CAAE,CAA/D,CAAN;AACD;AACF,KA1O2C;;AAAA,SA4O5CC,eA5O4C,GA4O1B,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AACrClC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC+B,GAAhC,EAAqCC,GAArC,EAA0CC,KAA1C;AACA,UAAI;AAAErE,QAAAA;AAAF,UAAiB,KAAKZ,KAA1B;AACA,WAAK0C,KAAL,CAAWwC,UAAX,CAAsBtE,UAAtB;AACD,KAhP2C;;AAAA,SAkP5CwC,uBAlP4C,GAkPlB,MAAM;AAC9B,WAAKH,QAAL,CACE;AACE3B,QAAAA,gBAAgB,EAAE;AADpB,OADF,EAIE,MAAM;AACJ,YAAI;AACFV,UAAAA,UADE;AAEFE,UAAAA,UAFE;AAGFG,UAAAA,IAHE;AAIFE,UAAAA,UAJE;AAKFH,UAAAA,SALE;AAMFV,UAAAA,MANE;AAOFY,UAAAA,IAPE;AAQFQ,UAAAA;AARE,YASA,KAAK1B,KATT;AAWA,aAAK0C,KAAL,CACG3D,YADH,CAEK,4BAA2BI,UAAU,CACpCyB,UADoC,CAEpC,UAASE,UAAW,SAAQG,IAAK,UAASkC,MAAM,CAChD,KAAKT,KAAL,CAAWf,gBAAX,CAA4BK,cADoB,CAEhD,WAAUb,UAAW,SAAQO,WAAY,EAN/C,EAQGiB,IARH,CAQQ,MAAMC,GAAN,IAAa;AACjBG,UAAAA,OAAO,CAACC,GAAR,CACE,aADF,EAEEtD,MAAM,CAAC,IAAImB,IAAJ,EAAD,EAAa,qBAAb,CAFR;AAIA,cAAI;AAAEgC,YAAAA,MAAF;AAAUC,YAAAA,IAAV;AAAgB8B,YAAAA;AAAhB,cAA0BhC,GAA9B;AACAuC,UAAAA,UAAU,CAAC,KAAKC,aAAN,CAAV;;AACA,cAAIvC,MAAM,KAAK,GAAf,EAAoB;AAClB,gBAAIC,IAAJ,EAAU;AACR9B,cAAAA,SAAS,GAAG,EAAZ;;AACA,kBAAI8B,IAAI,CAACuC,QAAL,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BtE,gBAAAA,SAAS,GAAG8B,IAAI,CAACuC,QAAjB;AACD;;AACD/E,cAAAA,MAAM,GAAG,EAAT;AACAY,cAAAA,IAAI,GAAG,EAAP,CANQ,CAOR;;AACAA,cAAAA,IAAI,GAAG4B,IAAI,CAAC5B,IAAZ,CARQ,CASR;;AAEA,kBAAI0D,KAAK,CAACU,MAAN,GAAe,CAAnB,EAAsB;AACpBhF,gBAAAA,MAAM,GAAGsE,KAAT,CADoB,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,oBAAM,KAAK3B,QAAL,CAAc;AAAE3C,gBAAAA,MAAF;AAAUY,gBAAAA,IAAV;AAAgBF,gBAAAA;AAAhB,eAAd,CAAN;AACA+B,cAAAA,OAAO,CAACC,GAAR,CACE,WADF,EAEEtD,MAAM,CAAC,IAAImB,IAAJ,EAAD,EAAa,qBAAb,CAFR,EA5CQ,CAgDR;AAEA;AACD;AACF;AACF,SArEH;AAsED,OAtFH;AAwFD,KA3U2C;;AAAA,SA6U5C0E,UA7U4C,GA6U/B,YAAY;AACvB,UAAI;AAAEtE,QAAAA;AAAF,UAAW,KAAKjB,KAApB;AACAiB,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACA,YAAM,KAAKgC,QAAL,CAAc;AAClBhC,QAAAA;AADkB,OAAd,CAAN;;AAGA,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,aAAKmC,uBAAL;AACD;AACF,KAtV2C;;AAAA,SAwV5CoC,UAxV4C,GAwV/B,YAAY;AACvB,UAAI;AAAEvE,QAAAA;AAAF,UAAW,KAAKjB,KAApB;AACAiB,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACA,YAAM,KAAKgC,QAAL,CAAc;AAClBhC,QAAAA;AADkB,OAAd,CAAN;;AAGA,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,aAAKmC,uBAAL;AACD;AACF,KAjW2C;;AAAA,SAkW5CgC,aAlW4C,GAkW5B,YAAY;AAC1B,UAAI9D,gBAAgB,GAAGmE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK1F,KAAL,CAAWsB,gBAA7B,CAAvB;AACAA,MAAAA,gBAAgB,GAAG,KAAnB;AACA,YAAM,KAAK2B,QAAL,CAAc;AAClB3B,QAAAA;AADkB,OAAd,CAAN;AAGD,KAxW2C;;AAAA,SA0W5CqE,kBA1W4C,GA0WvB,MAAMC,OAAN,IAAiB;AACpC,YAAM,KAAK3C,QAAL,CAAc;AAClBvB,QAAAA,WAAW,EAAEkE;AADK,OAAd,CAAN;AAGA,WAAKxC,uBAAL;AACD,KA/W2C;;AAAA,SAgX5CyC,UAhX4C,GAgX/B3F,IAAI,IAAI;AACnB,UAAI4F,CAAC,GAAG5F,IAAI,CAAC6F,KAAL,CAAW,GAAX,CAAR;AACA,aAAOD,CAAC,CAAC,CAAD,CAAD,GAAO,EAAP,GAAY,CAACA,CAAC,CAAC,CAAD,CAArB;AACD,KAnX2C;AAAA;;AAqX5CE,EAAAA,MAAM,GAAG;AACP,QAAI;AACF/F,MAAAA,WADE;AAEFM,MAAAA,SAFE;AAGFE,MAAAA,QAHE;AAIFD,MAAAA,SAJE;AAKFG,MAAAA,IALE;AAMFL,MAAAA,MANE;AAOFQ,MAAAA,UAPE;AAQFF,MAAAA,UARE;AASFI,MAAAA,SATE;AAUFE,MAAAA,IAVE;AAWFC,MAAAA,UAXE;AAYFC,MAAAA,aAZE;AAaF6E,MAAAA,SAbE;AAcF5E,MAAAA,WAdE;AAeFM,MAAAA;AAfE,QAgBA,KAAK3B,KAhBT;AAkBA,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,EAAE,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAC,iBADf;AAEE,MAAA,QAAQ,EAAG,QAFb;AAGE,MAAA,QAAQ,EAAE,KAAKoF,aAHjB;AAIE,MAAA,OAAO,EAAE,KAAKpF,KAAL,CAAWsB,gBAJtB;AAKE,MAAA,aAAa,EAAE,KAAKtB,KAAL,CAAWuB,aAL5B;AAME,MAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWwB,OANtB;AAOE,MAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWyB,QAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAWE,oBAAC,iBAAD;AACE,MAAA,SAAS,EAAE,KAAKzB,KAAL,CAAWgB,SADxB;AAEE,MAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWkB,IAFnB;AAGE,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWM,MAHpB;AAIE,MAAA,YAAY,EAAE,CAACH,IAAD,EAAO0D,CAAP,KAAa,KAAKD,gBAAL,CAAsBzD,IAAtB,EAA4B0D,CAA5B,CAJ7B;AAKE,MAAA,kBAAkB,EAAE,KAAKK,kBAL3B;AAME,MAAA,UAAU,EAAEpD,UANd;AAOE,MAAA,UAAU,EAAEF,UAPd;AAQE,MAAA,UAAU,EAAEO,UARd;AASE,MAAA,aAAa,EAAE,KAAKwD,YATtB;AAUE,MAAA,UAAU,EAAE,KAAKa,UAVnB;AAWE,MAAA,UAAU,EAAE,KAAKD,UAXnB;AAYE,MAAA,aAAa,EAAE,KAAKvF,KAAL,CAAWoB,aAZ5B;AAaE,MAAA,uBAAuB,EAAE,KAAKgC,uBAbhC;AAcE,MAAA,kBAAkB,EAAEwC,OAAO,IAAI,KAAKD,kBAAL,CAAwBC,OAAxB,CAdjC;AAeE,MAAA,wBAAwB,EAAE,KAAKpD,cAfjC;AAgBE,MAAA,WAAW,EAAE,KAAKxC,KAAL,CAAWiC,WAhB1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,eA8BE,oBAAC,oBAAD;AACE,MAAA,WAAW,EAAEZ,WADf;AAEE,MAAA,iBAAiB,EAAE,KAAK4C,iBAF1B;AAGE,MAAA,kBAAkB,EAAE,KAAKb,uBAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,CADF;AAsCD;;AA9a2C;;AAib9C,MAAM8C,eAAe,GAAGlG,KAAK,KAAK;AAChC8D,EAAAA,cAAc,EAAE9D,KAAK,CAACC,WAAN,CAAkB6D,cADF;AAEhCqC,EAAAA,YAAY,EAAEnG,KAAK,CAACoG,MAAN,CAAaD,YAFK;AAGhCE,EAAAA,oBAAoB,EAAErG,KAAK,CAACC,WAAN,CAAkBoG,oBAHR;AAIhC1E,EAAAA,gBAAgB,EAAE3B,KAAK,CAACC,WAAN,CAAkB0B;AAJJ,CAAL,CAA7B;;AAOA,MAAM2E,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAOrH,kBAAkB,CACvB;AACEJ,IAAAA,WADF;AAEEC,IAAAA,YAFF;AAGEQ,IAAAA,UAHF;AAIEP,IAAAA;AAJF,GADuB,EAOvBuH,QAPuB,CAAzB;AASD,CAVD;;AAYA,OAAO,MAAMC,SAAS,GAAGvH,OAAO,CAC9BiH,eAD8B,EAE9BI,kBAF8B,CAAP,CAGvBvG,cAHuB,CAAlB","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NewSchedulerModal } from \"component/common/Plugins/NewScheduler\";\r\n// import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\r\n\r\nimport {\r\n  getCustomer,\r\n  getCommonApi,\r\n  commonDeleteApi,\r\n} from \"redux/actions/common\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n// import timeOption from 'data/timeOption.json'\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport { history } from \"helpers\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { CreateAppointment, updateForm } from \"redux/actions/appointment\";\r\nimport { NewCreateAppointment } from \"../../NewCreateAppointment/index\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport moment from \"moment\";\r\nimport {\r\n  BrowserView,\r\n  MobileView,\r\n  isBrowser,\r\n  isMobile,\r\n} from \"react-device-detect\";\r\n\r\nexport class SchedulerClass extends Component {\r\n  state = {\r\n    appointment: [\r\n      {\r\n        time: \"10.00 AM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Benjamin\",\r\n        treatment: \"Head Massage\",\r\n      },\r\n      {\r\n        time: \"12.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Daniel\",\r\n        treatment: \"Pedicure\",\r\n      },\r\n      {\r\n        time: \"1.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"John\",\r\n        treatment: \"Haircut\",\r\n      },\r\n      {\r\n        time: \"2.00 PM,\",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Josua\",\r\n        treatment: \"Manicure\",\r\n      },\r\n      {\r\n        time: \"4.00 PM, \",\r\n        date: \"Wednesday, 1st April, 2020\",\r\n        name: \"Derrik\",\r\n        treatment: \"Body Massage\",\r\n      },\r\n    ],\r\n    events: [],\r\n    brachList: [],\r\n    formField: {\r\n      branchId: \"\",\r\n      time: \"\",\r\n      staff_id: \"\",\r\n    },\r\n    list: [],\r\n    filterDate: new Date(),\r\n    filterType: \"day\",\r\n    selectedId: \"\",\r\n    staffList: [],\r\n    page: 1,\r\n    meta: [],\r\n    searchtext: \"\",\r\n    staffSortlist: [],\r\n    isOpenModal: false,\r\n    loadPanelVisible: false,\r\n    showIndicator: true,\r\n    shading: true,\r\n    showPane: true,\r\n    groupByType: \"staff\",\r\n    SchedulerSetting: {\r\n      settingId: 0,\r\n      startday_hour: \"\",\r\n      endday_hour: \"\",\r\n      cell_duration: \"\",\r\n      resource_count: \"\",\r\n    },\r\n    settingData: {},\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: message => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  };\r\n  componentDidMount = () => {\r\n    this.getSettingInfo();\r\n    this.handleItemSettings();\r\n  };\r\n\r\n  handleItemSettings = () => {\r\n    let { settingData } = this.state;\r\n    this.props.getCommonApi(`userlist/`).then(async key => {\r\n      let { status, data } = key;\r\n      console.log(key, \"settingsData AppointmentCreate\");\r\n      if (status === 200) {\r\n        settingData = data;\r\n        await this.setState({\r\n          settingData,\r\n        });\r\n      }\r\n    });\r\n  };\r\n  getSettingInfo = () => {\r\n    let { SchedulerSetting } = this.state;\r\n    this.props.getCommonApi(`siteappointsetting/`).then(async key => {\r\n      let { status, data } = key;\r\n      console.log(key, \"siteappointsetting\");\r\n      if (status == \"200\") {\r\n        if (data) {\r\n          SchedulerSetting[\"settingId\"] = data[0].id;\r\n          SchedulerSetting[\"startday_hour\"] = data[0].startday_hour\r\n            ? Number(data[0].startday_hour)\r\n            : 8;\r\n          SchedulerSetting[\"endday_hour\"] = data[0].endday_hour\r\n            ? Number(data[0].endday_hour)\r\n            : 21;\r\n          SchedulerSetting[\"cell_duration\"] = data[0].cell_duration\r\n            ? Number(data[0].cell_duration)\r\n            : 15;\r\n          if (isMobile) {\r\n            SchedulerSetting[\"resource_count\"] = 1;\r\n          } else {\r\n            SchedulerSetting[\"resource_count\"] = data[0].resource_count\r\n              ? Number(data[0].resource_count)\r\n              : 5;\r\n          }\r\n\r\n          console.log(SchedulerSetting, \"siteappointsettingafterrender\");\r\n          await this.setState({\r\n            SchedulerSetting,\r\n          });\r\n          await this.props.updateForm(\"SchedulerSetting\", SchedulerSetting);\r\n          let { filterDate, filterType } = this.state;\r\n          // this.props\r\n          //   .getCommonApi(\r\n          //     `customeroutstanding/?date=${dateFormat(\r\n          //       filterDate\r\n          //     )}&check=${filterType}`\r\n          //   )\r\n          //   .then(key => {});\r\n          this.getAppointmentWithStaff();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  getHoursFromDate = date => {\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let hours = hour > 9 ? hour : \"0\" + hour;\r\n    let minutes;\r\n    if (minute < 15) {\r\n      minutes = \"00\";\r\n    } else if (minute >= 15 && minute < 30) {\r\n      minutes = \"15\";\r\n    } else if (minute >= 30 && minute < 45) {\r\n      minutes = \"30\";\r\n    } else if (minute >= 45 && minute < 59) {\r\n      minutes = \"45\";\r\n    }\r\n    return hours + \":\" + minutes;\r\n  };\r\n\r\n  handleEmptyEvent = async (date, e) => {\r\n    let { customerDetail } = this.props;\r\n    let { formField } = this.state;\r\n\r\n    let time = new Date(date);\r\n\r\n    formField[\"time\"] = this.getHoursFromDate(time);\r\n    formField[\"date\"] = date;\r\n    formField[\"appt_id\"] = 0;\r\n    if (e.groups) {\r\n      formField[\"staff_id\"] = e.groups.id;\r\n    }\r\n    if (e.appt_id) {\r\n      formField[\"appt_id\"] = e.appt_id;\r\n    }\r\n\r\n    await this.setState({ formField });\r\n    console.log(\r\n      date,\r\n      e,\r\n      \"hgjsydfisuyfsdfm ==== handleEmptyEvent\",\r\n      time.getHours\r\n    );\r\n    await this.props.updateForm(\"basicApptDetail\", formField);\r\n    await this.setState({ isOpenModal: true });\r\n  };\r\n  handleCloseDialog = async () => {\r\n    await this.props.updateForm(\"treatmentList\", []);\r\n    await this.props.updateForm(\"basicApptDetail\", {});\r\n    await this.props.updateForm(\"appointmentCustomerDetail\", {});\r\n    await this.setState({\r\n      isOpenModal: false,\r\n    });\r\n  };\r\n\r\n  handleChangeFilter = async (prevMode, prevDate, newMode, newDate, search) => {\r\n    let { filterDate, filterType, searchtext } = this.state;\r\n    filterDate = newDate;\r\n    filterType = newMode;\r\n    searchtext = search;\r\n    await this.setState({\r\n      filterDate,\r\n      filterType,\r\n      searchtext,\r\n    });\r\n    //if (newMode === \"day\" || newMode === \"week\") {\r\n    // this.props\r\n    //   .getCommonApi(\r\n    //     `customeroutstanding/?date=${dateFormat(newDate)}&check=${newMode}`\r\n    //   )\r\n    //   .then(key => {});\r\n    //}\r\n    console.log(\"dfhgfhjhjghjdfhg\", prevMode, prevDate, newMode, newDate);\r\n    if (prevMode !== newMode || prevDate !== newDate) {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n\r\n  handleChange = async ({ target: { value, name } }) => {\r\n    let { formField } = this.state;\r\n    formField[name] = value;\r\n    await this.setState({\r\n      formField,\r\n    });\r\n    if (name === \"branchId\") {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n    this.props.updateForm(\"basicApptDetail\", formField);\r\n  };\r\n\r\n  handleDelete = async (id, event) => {\r\n    let { selectedId } = this.state;\r\n    console.log(id, \"===afasfasdfdfasd=====\", selectedId);\r\n    if (id !== selectedId) {\r\n      await this.setState({\r\n        selectedId: id,\r\n      });\r\n      await this.props.commonDeleteApi(`appointment/${id}/`).then(res => {});\r\n    }\r\n  };\r\n\r\n  handleOpenStaff = (one, two, three) => {\r\n    console.log(\"namdfsfgsghsfghf\", one, two, three);\r\n    let { filterDate } = this.state;\r\n    this.props.handleOpen(filterDate);\r\n  };\r\n\r\n  getAppointmentWithStaff = () => {\r\n    this.setState(\r\n      {\r\n        loadPanelVisible: true,\r\n      },\r\n      () => {\r\n        let {\r\n          filterDate,\r\n          filterType,\r\n          page,\r\n          searchtext,\r\n          staffList,\r\n          events,\r\n          meta,\r\n          groupByType,\r\n        } = this.state;\r\n\r\n        this.props\r\n          .getCommonApi(\r\n            `empappointmentview/?date=${dateFormat(\r\n              filterDate\r\n            )}&check=${filterType}&page=${page}&limit=${Number(\r\n              this.props.SchedulerSetting.resource_count\r\n            )}&search=${searchtext}&type=${groupByType}`\r\n          )\r\n          .then(async key => {\r\n            console.log(\r\n              \"starttime: \",\r\n              moment(new Date(), \"DD/MM/YYYY HH:mm:ss\")\r\n            );\r\n            let { status, data, event } = key;\r\n            setTimeout(this.hideLoadPanel);\r\n            if (status === 200) {\r\n              if (data) {\r\n                staffList = [];\r\n                if (data.dataList.length > 0) {\r\n                  staffList = data.dataList;\r\n                }\r\n                events = [];\r\n                meta = [];\r\n                //this.setState({ events, meta });\r\n                meta = data.meta;\r\n                //events = event;\r\n\r\n                if (event.length > 0) {\r\n                  events = event;\r\n                  // event.forEach(cell => {\r\n                  //   let filterList = events.find(\r\n                  //     Appoint =>\r\n                  //       Appoint.linkcode === cell.linkcode &&\r\n                  //       Appoint.id === cell.id &&\r\n                  //       Appoint.cust_id === cell.cust_id &&\r\n                  //       (Appoint.endDate === cell.startDate ||\r\n                  //         Appoint.startDate === cell.endDate)\r\n                  //   );\r\n                  //   if (filterList) {\r\n                  //     if (filterList.startDate < cell.startDate) {\r\n                  //       filterList[\"startDate\"] = filterList.startDate;\r\n                  //     } else {\r\n                  //       filterList[\"startDate\"] = cell.startDate;\r\n                  //     }\r\n                  //     if (filterList.endDate > cell.endDate) {\r\n                  //       filterList[\"endDate\"] = filterList.endDate;\r\n                  //     } else {\r\n                  //       filterList[\"endDate\"] = cell.endDate;\r\n                  //     }\r\n                  //     filterList[\"appt_remark\"] =\r\n                  //       filterList.appt_remark + \" \" + \"/\" + \" \" + cell.appt_remark;\r\n                  //     filterList[\"Merged\"] = true;\r\n                  //     this.setState({ ...this.state.events, filterList });\r\n                  //   } else {\r\n                  //     events.push(cell);\r\n                  //     this.setState({ ...events, events });\r\n                  //   }\r\n                  // });\r\n                }\r\n                await this.setState({ events, meta, staffList });\r\n                console.log(\r\n                  \"endtime: \",\r\n                  moment(new Date(), \"DD/MM/YYYY HH:mm:ss\")\r\n                );\r\n                // await this.setState({ events, staffList, meta });\r\n\r\n                //console.log(event, \"appointment cell data\");\r\n              }\r\n            }\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  handleNext = async () => {\r\n    let { page } = this.state;\r\n    page = page + 1;\r\n    await this.setState({\r\n      page,\r\n    });\r\n    if (page > 0) {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n\r\n  handleBack = async () => {\r\n    let { page } = this.state;\r\n    page = page - 1;\r\n    await this.setState({\r\n      page,\r\n    });\r\n    if (page > 0) {\r\n      this.getAppointmentWithStaff();\r\n    }\r\n  };\r\n  hideLoadPanel = async () => {\r\n    let loadPanelVisible = Object.assign({}, this.state.loadPanelVisible);\r\n    loadPanelVisible = false;\r\n    await this.setState({\r\n      loadPanelVisible,\r\n    });\r\n  };\r\n\r\n  groupByAppointment = async groupBy => {\r\n    await this.setState({\r\n      groupByType: groupBy,\r\n    });\r\n    this.getAppointmentWithStaff();\r\n  };\r\n  timeToMins = time => {\r\n    var b = time.split(\":\");\r\n    return b[0] * 60 + +b[1];\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      appointment,\r\n      brachList,\r\n      branchId,\r\n      formField,\r\n      list,\r\n      events,\r\n      filterType,\r\n      filterDate,\r\n      staffList,\r\n      meta,\r\n      searchtext,\r\n      staffSortlist,\r\n      isLoading,\r\n      isOpenModal,\r\n      SchedulerSetting,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"col-12 m-0\" id=\"appointment\">\r\n        <LoadPanel\r\n          shadingColor=\"rgba(0,0,0,0.4)\"\r\n          position={`center`}\r\n          onHiding={this.hideLoadPanel}\r\n          visible={this.state.loadPanelVisible}\r\n          showIndicator={this.state.showIndicator}\r\n          shading={this.state.shading}\r\n          showPane={this.state.showPane}\r\n        />\r\n\r\n        <NewSchedulerModal\r\n          staffList={this.state.staffList}\r\n          meta={this.state.meta}\r\n          event={this.state.events}\r\n          onEmptyClick={(date, e) => this.handleEmptyEvent(date, e)}\r\n          handleChangeFilter={this.handleChangeFilter}\r\n          filterType={filterType}\r\n          filterDate={filterDate}\r\n          searchtext={searchtext}\r\n          onDeleteEvent={this.handleDelete}\r\n          handleBack={this.handleBack}\r\n          handleNext={this.handleNext}\r\n          staffSortlist={this.state.staffSortlist}\r\n          getAppointmentWithStaff={this.getAppointmentWithStaff}\r\n          groupByAppointment={groupBy => this.groupByAppointment(groupBy)}\r\n          handleAppointmentSetting={this.getSettingInfo}\r\n          settingData={this.state.settingData}\r\n        />\r\n\r\n        <NewCreateAppointment\r\n          isOpenModal={isOpenModal}\r\n          handleCloseDialog={this.handleCloseDialog}\r\n          handleSaveorUpdate={this.getAppointmentWithStaff}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  customerDetail: state.appointment.customerDetail,\r\n  customerList: state.common.customerList,\r\n  multipleCustomerForm: state.appointment.multipleCustomerForm,\r\n  SchedulerSetting: state.appointment.SchedulerSetting,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getCustomer,\r\n      getCommonApi,\r\n      updateForm,\r\n      commonDeleteApi,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const Scheduler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SchedulerClass);\r\n"]},"metadata":{},"sourceType":"module"}