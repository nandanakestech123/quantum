{"ast":null,"code":"import { EquipmentActionType } from \"redux/actions/actionType\";\nimport { equipment } from \"../../service/apiVariables\";\nexport const updateequipment = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    equipment.updateequipmentinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...equipment.updateequipmentinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createequipment = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  console.log(\"inside createequipment inside action file\", { ...equipment.addequipment\n  });\n  return new Promise((resolve, reject) => {\n    api({ ...equipment.addequipmentinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getequipment = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    equipment.getequipmentinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...equipment.getequipmentinvoice\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: EquipmentActionType.getProjectListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteequipment = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    equipment.deleteequipmentinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...equipment.deleteequipmentinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/equipment.js"],"names":["EquipmentActionType","equipment","updateequipment","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","updateequipmentinvoice","addQuery","key","payload","then","response","message","status","type","catch","createequipment","console","log","addequipment","addequipmentinvoice","data","getequipment","getequipmentinvoice","getProjectListing","deleteequipment","deleteequipmentinvoice"],"mappings":"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","sourcesContent":["import { EquipmentActionType } from \"redux/actions/actionType\";\r\nimport { equipment } from \"../../service/apiVariables\";\r\n\r\nexport const updateequipment =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      equipment.updateequipmentinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...equipment.updateequipmentinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createequipment =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n      console.log(\"inside createequipment inside action file\",{ ...equipment.addequipment })\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...equipment.addequipmentinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getequipment =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      equipment.getequipmentinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n\r\n      api({ ...equipment.getequipmentinvoice })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: EquipmentActionType.getProjectListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deleteequipment =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      equipment.deleteequipmentinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...equipment.deleteequipmentinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}