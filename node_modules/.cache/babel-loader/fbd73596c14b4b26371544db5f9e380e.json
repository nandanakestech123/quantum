{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\common\\\\DragFileUpload\\\\index.js\";\n// import React, { useState } from 'react'\n// import Dropzone from 'react-dropzone'\n// // import { api } from \"services/api\"\n// import { Toast } from \"service/toast\";\n// // import { fileUpload } from \"services/apiVariables\"\n// import uploaderImg from 'assets/images/uploader-img.svg';\n// export const DragFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\n//     const [loader, changeLoader] = useState(false);\n//     return (\n//         <Dropzone\n//             disabled={disabled}\n//             onDrop={(files, a) => {\n//                 if (files.length) {\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\n//                         return ''\n//                     }\n//                     changeLoader(true)\n//                     handleFileUpload(files)\n//                     uploadFile(files).then((res) => {\n//                         if (handleFileUpload) {\n//                             handleFileUpload(res.data)\n//                             changeLoader(false)\n//                         }\n//                     }).catch((err) => {\n//                         changeLoader(false)\n//                     })\n//                 } else {\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\n//                 }\n//             }}>\n//             {({ getRootProps, getInputProps }) => (\n//                 <>\n//                     {(multiButton) ?\n//                         <div className={`${className} position-relative `}>\n//                             {children}\n//                             {(multiButton) ?\n//                                 <input {...getInputProps()} />\n//                                 : <input />}\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                             {(multiButton) ?\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Upload</span>\n//                                     </div>\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\n//                                         <img src={uploaderImg} />\n//                                         <span>Remove</span>\n//                                     </div>\n//                                 </div>\n//                                 : ''}\n//                         </div>\n//                         :\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\n//                             {children}\n//                             <input {...getInputProps()} />\n//                             {loader ? <div className=\"upload-loader\">\n//                                 <div className=\"position-relative w-100 h-100\">\n//                                     <div className=\"loader-circle\"></div>\n//                                 </div>\n//                             </div> : ''}\n//                         </div>\n//                     }\n//                 </>\n//             )\n//             }\n//         </Dropzone >\n//     )\n// }\n// const uploadFile = ([file]) => {\n//     return new Promise((resolve, reject) => {\n//         let formData = new FormData()\n//         formData.append('key1', file)\n//         // fileUpload.body = formData\n//         // api(fileUpload).then((res) => {\n//         //     resolve(res)\n//         // }).catch((err) => {\n//         //     reject(reject)\n//         //     if (err.statusCode === 413) {\n//         //         Toast({ type: 'error', message: err.message });\n//         //     }\n//         // })\n//     })\n// }\n// const checkFileValidation = (files, validationType) => {\n//     return files.every((file) => {\n//         let temp = file.name.split('.')\n//         let type = temp[temp.length - 1]\n//         return validationType.indexOf(type) != -1\n//     })\n// }\n// const accept = (type) => {\n//     if (type == 'image') {\n//         return 'image/*'\n//     } else if (type == 'pdf') {\n//         return 'pdf/*'\n//     }\n// }\nimport React, { Component } from 'react';\nexport class DragFileUpload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileArray: [],\n      imageArray: []\n    };\n\n    this.uploadImageFiles = e => {\n      let {\n        fileArray,\n        imageArray\n      } = this.state;\n\n      if (fileArray.length < 5) {\n        fileArray.push(URL.createObjectURL(e.target.files[0]));\n        imageArray.push(e.target.files[0]);\n        this.setState({\n          fileArray,\n          imageArray\n        });\n      }\n    };\n\n    this.handlefile = e => {\n      let img = new FormData();\n      img.append('images', e.target.files[0]);\n      this.props.handleFileUpload(e.target.files[0]); // console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\n    };\n\n    this.removepostImage = (e, name) => {\n      let {\n        fileArray\n      } = this.state;\n      let index = fileArray.indexOf(name);\n\n      if (index === 0) {\n        fileArray.shift();\n      } else {\n        fileArray.pop();\n      }\n\n      this.setState({\n        fileArray\n      });\n    };\n  }\n\n  render() {\n    let {\n      fileArray\n    } = this.state;\n    console.log(fileArray);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap image-upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-0\",\n      onChange: this.uploadImageFiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"imageUpload\",\n      className: \"btn upload-btn cursor-pointer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, \"Upload Image\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handlefile,\n      type: \"file\",\n      id: \"imageUpload\",\n      accept: \"image/*\",\n      className: \"d-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    })), (fileArray || []).map(url => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"position-relative image-folder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: url,\n      alt: \"...\",\n      className: \"image-upload position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"close-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-close fs-10\",\n      onClick: e => this.removepostImage(e, url),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 37\n      }\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/common/DragFileUpload/index.js"],"names":["React","Component","DragFileUpload","state","fileArray","imageArray","uploadImageFiles","e","length","push","URL","createObjectURL","target","files","setState","handlefile","img","FormData","append","props","handleFileUpload","removepostImage","name","index","indexOf","shift","pop","render","console","log","map","url"],"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","sourcesContent":["// import React, { useState } from 'react'\r\n// import Dropzone from 'react-dropzone'\r\n// // import { api } from \"services/api\"\r\n// import { Toast } from \"service/toast\";\r\n// // import { fileUpload } from \"services/apiVariables\"\r\n\r\n// import uploaderImg from 'assets/images/uploader-img.svg';\r\n\r\n// export const DragFileUpload = ({ label = \"Upload\", children, className, disabled = false, handleFileUpload = '', acceptFileFormat = ['png', 'jpeg', 'svg', 'jpg'], type = 'image', maxSize = 10000000000000, handleFileRemove, multiButton = false, hasImage }) => {\r\n\r\n//     const [loader, changeLoader] = useState(false);\r\n\r\n\r\n//     return (\r\n//         <Dropzone\r\n//             disabled={disabled}\r\n//             onDrop={(files, a) => {\r\n//                 if (files.length) {\r\n\r\n//                     if (!checkFileValidation(files, acceptFileFormat)) {\r\n\r\n//                         Toast({ type: 'error', message: `Please upload ${acceptFileFormat.join('/')} within 10mb` })\r\n\r\n//                         return ''\r\n//                     }\r\n\r\n//                     changeLoader(true)\r\n\r\n//                     handleFileUpload(files)\r\n\r\n//                     uploadFile(files).then((res) => {\r\n\r\n//                         if (handleFileUpload) {\r\n\r\n//                             handleFileUpload(res.data)\r\n\r\n//                             changeLoader(false)\r\n\r\n//                         }\r\n\r\n//                     }).catch((err) => {\r\n\r\n//                         changeLoader(false)\r\n\r\n//                     })\r\n\r\n//                 } else {\r\n//                     Toast({ type: 'error', message: `Please upload ${type} within 10mb` })\r\n//                 }\r\n\r\n//             }}>\r\n\r\n//             {({ getRootProps, getInputProps }) => (\r\n//                 <>\r\n//                     {(multiButton) ?\r\n//                         <div className={`${className} position-relative `}>\r\n//                             {children}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <input {...getInputProps()} />\r\n//                                 : <input />}\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n\r\n//                             {(multiButton) ?\r\n//                                 <div className={`overlay-button d-flex position-absolute ${(hasImage) ? 'hasImage' : ''}`}>\r\n//                                     <div {...getRootProps()} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Upload</span>\r\n//                                     </div>\r\n//                                     <div onClick={handleFileRemove} className=\"uploader-content d-flex align-items-center justify-content-center mx-2\">\r\n//                                         <img src={uploaderImg} />\r\n//                                         <span>Remove</span>\r\n//                                     </div>\r\n//                                 </div>\r\n//                                 : ''}\r\n//                         </div>\r\n//                         :\r\n//                         <div {...getRootProps()} className={`${className} position-relative `}>\r\n\r\n//                             {children}\r\n\r\n//                             <input {...getInputProps()} />\r\n//                             {loader ? <div className=\"upload-loader\">\r\n//                                 <div className=\"position-relative w-100 h-100\">\r\n//                                     <div className=\"loader-circle\"></div>\r\n//                                 </div>\r\n//                             </div> : ''}\r\n//                         </div>\r\n//                     }\r\n\r\n//                 </>\r\n\r\n//             )\r\n//             }\r\n//         </Dropzone >\r\n//     )\r\n// }\r\n\r\n// const uploadFile = ([file]) => {\r\n\r\n//     return new Promise((resolve, reject) => {\r\n\r\n//         let formData = new FormData()\r\n\r\n//         formData.append('key1', file)\r\n\r\n//         // fileUpload.body = formData\r\n\r\n//         // api(fileUpload).then((res) => {\r\n//         //     resolve(res)\r\n//         // }).catch((err) => {\r\n//         //     reject(reject)\r\n//         //     if (err.statusCode === 413) {\r\n//         //         Toast({ type: 'error', message: err.message });\r\n//         //     }\r\n//         // })\r\n//     })\r\n// }\r\n\r\n\r\n// const checkFileValidation = (files, validationType) => {\r\n\r\n//     return files.every((file) => {\r\n\r\n//         let temp = file.name.split('.')\r\n\r\n//         let type = temp[temp.length - 1]\r\n\r\n//         return validationType.indexOf(type) != -1\r\n\r\n//     })\r\n\r\n// }\r\n\r\n// const accept = (type) => {\r\n\r\n//     if (type == 'image') {\r\n\r\n//         return 'image/*'\r\n\r\n//     } else if (type == 'pdf') {\r\n\r\n//         return 'pdf/*'\r\n\r\n//     }\r\n\r\n// }\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\n\r\nexport class DragFileUpload extends Component {\r\n\r\n    state = {\r\n        fileArray: [],\r\n        imageArray: []\r\n    }\r\n   \r\n    uploadImageFiles = (e) => {\r\n        let { fileArray, imageArray } = this.state;\r\n        if (fileArray.length < 5) {\r\n            fileArray.push(URL.createObjectURL(e.target.files[0]))\r\n            imageArray.push(e.target.files[0])\r\n            this.setState({ fileArray, imageArray })\r\n        }\r\n    }\r\n\r\n    handlefile = (e) => {\r\n        \r\n        let img = new FormData()\r\n        img.append('images', e.target.files[0])\r\n        this.props.handleFileUpload(e.target.files[0]);\r\n        // console.log(e.target.files[0], \"sdkflodsjfpsjdf ===\", img)\r\n    }\r\n\r\n    removepostImage = (e, name) => {\r\n        let { fileArray } = this.state;\r\n        let index = fileArray.indexOf(name);\r\n        if (index === 0) {\r\n            fileArray.shift();\r\n        } else {\r\n            fileArray.pop();\r\n        }\r\n        this.setState({\r\n            fileArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { fileArray } = this.state\r\n        console.log(fileArray)\r\n        return (\r\n           <>\r\n                <div className=\"d-flex flex-wrap image-upload\">\r\n                    <div className=\"p-0\" onChange={this.uploadImageFiles}>\r\n                        {/* <input type=\"file\" className=\"px-2 cursor-pointer custom-file-input\" accept=\"image/*,video/*\"  /> */}\r\n                        <label htmlFor=\"imageUpload\" className=\"btn upload-btn cursor-pointer\">Upload Image</label>\r\n                        <input onChange={this.handlefile} type=\"file\" id=\"imageUpload\" accept=\"image/*\" className=\"d-none\"></input>\r\n                    </div>\r\n                    {(fileArray || []).map(url => (\r\n                        <>\r\n                            <div className=\"position-relative image-folder\">\r\n                                <img src={url} alt=\"...\" className=\"image-upload position-relative\" />\r\n                                <div className=\"close-icon\">\r\n                                    <span className=\"icon-close fs-10\" onClick={(e) => this.removepostImage(e, url)}></span>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}