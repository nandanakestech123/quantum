{"ast":null,"code":"/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.summary_display_modes.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.applyDisplaySummaryMode = applyDisplaySummaryMode;\nexports.applyRunningTotal = applyRunningTotal;\nexports.createMockSummaryCell = createMockSummaryCell;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _uiPivot_grid = require(\"./ui.pivot_grid.utils\");\n\nvar COLUMN = \"column\";\nvar ROW = \"row\";\nvar NULL = null;\n\nvar calculatePercentValue = function calculatePercentValue(value, totalValue) {\n  var result = value / totalValue;\n\n  if (!(0, _type.isDefined)(value) || isNaN(result)) {\n    result = NULL;\n  }\n\n  return result;\n};\n\nvar _percentOfGrandTotal = function _percentOfGrandTotal(e, dimension) {\n  return calculatePercentValue(e.value(), e.grandTotal(dimension).value());\n};\n\nvar percentOfParent = function percentOfParent(e, dimension) {\n  var parent = e.parent(dimension);\n  var parentValue = parent ? parent.value() : e.value();\n  return calculatePercentValue(e.value(), parentValue);\n};\n\nvar createAbsoluteVariationExp = function createAbsoluteVariationExp(allowCrossGroup) {\n  return function (e) {\n    var prevCell = e.prev(COLUMN, allowCrossGroup);\n    var prevValue = prevCell && prevCell.value();\n\n    if ((0, _type.isDefined)(prevValue) && (0, _type.isDefined)(e.value())) {\n      return e.value() - prevValue;\n    }\n\n    return NULL;\n  };\n};\n\nvar createPercentVariationExp = function createPercentVariationExp(allowCrossGroup) {\n  var absoluteExp = createAbsoluteVariationExp(allowCrossGroup);\n  return function (e) {\n    var absVar = absoluteExp(e);\n    var prevCell = e.prev(COLUMN, allowCrossGroup);\n    var prevValue = prevCell && prevCell.value();\n    return absVar !== NULL && prevValue ? absVar / prevValue : NULL;\n  };\n};\n\nvar summaryDictionary = {\n  percentOfColumnTotal: function percentOfColumnTotal(e) {\n    return percentOfParent(e, ROW);\n  },\n  percentOfRowTotal: function percentOfRowTotal(e) {\n    return percentOfParent(e, COLUMN);\n  },\n  percentOfColumnGrandTotal: function percentOfColumnGrandTotal(e) {\n    return _percentOfGrandTotal(e, ROW);\n  },\n  percentOfRowGrandTotal: function percentOfRowGrandTotal(e) {\n    return _percentOfGrandTotal(e, COLUMN);\n  },\n  percentOfGrandTotal: function percentOfGrandTotal(e) {\n    return _percentOfGrandTotal(e);\n  }\n};\n\nvar getPrevCellCrossGroup = function getPrevCellCrossGroup(cell, direction) {\n  if (!cell || !cell.parent(direction)) {\n    return;\n  }\n\n  var prevCell = cell.prev(direction);\n\n  if (!prevCell) {\n    prevCell = getPrevCellCrossGroup(cell.parent(direction), direction);\n  }\n\n  return prevCell;\n};\n\nvar createRunningTotalExpr = function createRunningTotalExpr(field) {\n  if (!field.runningTotal) {\n    return;\n  }\n\n  var direction = field.runningTotal === COLUMN ? ROW : COLUMN;\n  return function (e) {\n    var prevCell = field.allowCrossGroupCalculation ? getPrevCellCrossGroup(e, direction) : e.prev(direction, false);\n    var value = e.value(true);\n    var prevValue = prevCell && prevCell.value(true);\n\n    if ((0, _type.isDefined)(prevValue) && (0, _type.isDefined)(value)) {\n      value = prevValue + value;\n    } else {\n      if ((0, _type.isDefined)(prevValue)) {\n        value = prevValue;\n      }\n    }\n\n    return value;\n  };\n};\n\nfunction createCache() {\n  return {\n    fields: {},\n    positions: {}\n  };\n}\n\nfunction getFieldPos(descriptions, field, cache) {\n  var fieldParams = {\n    index: -1\n  };\n\n  if (!(0, _type.isObject)(field)) {\n    if (cache.fields[field]) {\n      field = cache[field];\n    } else {\n      var allFields = descriptions.columns.concat(descriptions.rows).concat(descriptions.values);\n      var fieldIndex = (0, _uiPivot_grid.findField)(allFields, field);\n      field = cache[field] = allFields[fieldIndex];\n    }\n  }\n\n  if (field) {\n    var area = field.area || \"data\";\n    fieldParams = cache.positions[field.index] = cache.positions[field.index] || {\n      area: area,\n      index: (0, _array.inArray)(field, descriptions[\"data\" === area ? \"values\" : area + \"s\"])\n    };\n  }\n\n  return fieldParams;\n}\n\nfunction getPathFieldName(dimension) {\n  return dimension === ROW ? \"_rowPath\" : \"_columnPath\";\n}\n\nvar SummaryCell = function SummaryCell(columnPath, rowPath, data, descriptions, fieldIndex, fieldsCache) {\n  this._columnPath = columnPath;\n  this._rowPath = rowPath;\n  this._fieldIndex = fieldIndex;\n  this._fieldsCache = fieldsCache || createCache();\n  this._data = data;\n  this._descriptions = descriptions;\n  var cell = data.values && data.values[rowPath[0].index] && data.values[rowPath[0].index][columnPath[0].index];\n\n  if (cell) {\n    cell.originalCell = cell.originalCell || cell.slice();\n    cell.postProcessedFlags = cell.postProcessedFlags || [];\n    this._cell = cell;\n  }\n};\n\nSummaryCell.prototype = (0, _extend.extend)(SummaryCell.prototype, {\n  _getPath: function _getPath(dimension) {\n    return this[getPathFieldName(dimension)];\n  },\n  _getDimension: function _getDimension(dimension) {\n    dimension = dimension === ROW ? \"rows\" : \"columns\";\n    return this._descriptions[dimension];\n  },\n  _createCell: function _createCell(config) {\n    var that = this;\n    return new SummaryCell(config._columnPath || that._columnPath, config._rowPath || that._rowPath, that._data, that._descriptions, that._fieldIndex);\n  },\n  parent: function parent(direction) {\n    var path = this._getPath(direction).slice();\n\n    var config = {};\n    path.shift();\n\n    if (path.length) {\n      config[getPathFieldName(direction)] = path;\n      return this._createCell(config);\n    }\n\n    return NULL;\n  },\n  children: function children(direction) {\n    var path = this._getPath(direction).slice();\n\n    var item = path[0];\n    var result = [];\n    var cellConfig = {};\n\n    if (item.children) {\n      for (var i = 0; i < item.children.length; i++) {\n        cellConfig[getPathFieldName(direction)] = [item.children[i]].concat(path.slice());\n        result.push(this._createCell(cellConfig));\n      }\n    }\n\n    return result;\n  },\n  grandTotal: function grandTotal(direction) {\n    var config = {};\n    var rowPath = this._rowPath;\n    var columnPath = this._columnPath;\n\n    var dimensionPath = this._getPath(direction);\n\n    var pathFieldName = getPathFieldName(direction);\n\n    if (!direction) {\n      config._rowPath = [rowPath[rowPath.length - 1]];\n      config._columnPath = [columnPath[columnPath.length - 1]];\n    } else {\n      config[pathFieldName] = [dimensionPath[dimensionPath.length - 1]];\n    }\n\n    return this._createCell(config);\n  },\n  next: function next(direction, allowCrossGroup) {\n    var currentPath = this._getPath(direction);\n\n    var item = currentPath[0];\n    var parent = this.parent(direction);\n    var siblings;\n\n    if (parent) {\n      var index = (0, _array.inArray)(item, currentPath[1].children);\n      siblings = parent.children(direction);\n\n      if (siblings[index + 1]) {\n        return siblings[index + 1];\n      }\n    }\n\n    if (allowCrossGroup && parent) {\n      do {\n        parent = parent.next(direction, allowCrossGroup);\n        siblings = parent ? parent.children(direction) : [];\n      } while (parent && !siblings.length);\n\n      return siblings[0] || NULL;\n    }\n\n    return NULL;\n  },\n  prev: function prev(direction, allowCrossGroup) {\n    var currentPath = this._getPath(direction);\n\n    var item = currentPath[0];\n    var parent = this.parent(direction);\n    var siblings;\n\n    if (parent) {\n      var index = (0, _array.inArray)(item, currentPath[1].children);\n      siblings = parent.children(direction);\n\n      if (siblings[index - 1]) {\n        return siblings[index - 1];\n      }\n    }\n\n    if (allowCrossGroup && parent) {\n      do {\n        parent = parent.prev(direction, allowCrossGroup);\n        siblings = parent ? parent.children(direction) : [];\n      } while (parent && !siblings.length);\n\n      return siblings[siblings.length - 1] || NULL;\n    }\n\n    return NULL;\n  },\n  cell: function cell() {\n    return this._cell;\n  },\n  field: function field(area) {\n    if (\"data\" === area) {\n      return this._descriptions.values[this._fieldIndex];\n    }\n\n    var path = this._getPath(area);\n\n    var descriptions = this._getDimension(area);\n\n    var field = descriptions[path.length - 2];\n    return field || NULL;\n  },\n  child: function child(direction, fieldValue) {\n    var children = this.children(direction);\n\n    for (var i = 0; i < children.length; i++) {\n      var childLevelField = childLevelField || children[i].field(direction);\n\n      if (children[i].value(childLevelField) === fieldValue) {\n        return children[i];\n      }\n    }\n\n    return NULL;\n  },\n  slice: function slice(field, value) {\n    var that = this;\n    var config = {};\n    var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n    var area = fieldPos.area;\n    var fieldIndex = fieldPos.index;\n    var sliceCell = NULL;\n    var newPath = [];\n\n    if (area === ROW || area === COLUMN) {\n      var path = this._getPath(area).slice();\n\n      var level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\n\n      if (path[level]) {\n        newPath[path.length - 1] = path[path.length - 1];\n\n        for (var i = level; i >= 0; i--) {\n          if (path[i + 1]) {\n            var childItems = path[i + 1].children || [];\n            var currentValue = i === level ? value : path[i].value;\n            path[i] = void 0;\n\n            for (var childIndex = 0; childIndex < childItems.length; childIndex++) {\n              if (childItems[childIndex].value === currentValue) {\n                path[i] = childItems[childIndex];\n                break;\n              }\n            }\n          }\n\n          if (void 0 === path[i]) {\n            return sliceCell;\n          }\n        }\n\n        config[getPathFieldName(area)] = path;\n        sliceCell = that._createCell(config);\n      }\n    }\n\n    return sliceCell;\n  },\n  value: function value(arg1, arg2) {\n    var cell = this._cell;\n    var fieldIndex = this._fieldIndex;\n    var fistArgIsBoolean = true === arg1 || false === arg1;\n    var field = !fistArgIsBoolean ? arg1 : NULL;\n    var needCalculatedValue = fistArgIsBoolean && arg1 || arg2;\n\n    if ((0, _type.isDefined)(field)) {\n      var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n      fieldIndex = fieldPos.index;\n\n      if (\"data\" !== fieldPos.area) {\n        var path = this._getPath(fieldPos.area);\n\n        var level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\n        return path[level] && path[level].value;\n      }\n    }\n\n    if (cell && cell.originalCell) {\n      return needCalculatedValue ? cell[fieldIndex] : cell.originalCell[fieldIndex];\n    }\n\n    return NULL;\n  },\n  isPostProcessed: function isPostProcessed(field) {\n    var fieldIndex = this._fieldIndex;\n\n    if ((0, _type.isDefined)(field)) {\n      var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\n      fieldIndex = fieldPos.index;\n\n      if (\"data\" !== fieldPos.area) {\n        return false;\n      }\n    }\n\n    return !!(this._cell && this._cell.postProcessedFlags[fieldIndex]);\n  }\n});\n\nfunction getExpression(field) {\n  var summaryDisplayMode = field.summaryDisplayMode;\n  var crossGroupCalculation = field.allowCrossGroupCalculation;\n  var expression = NULL;\n\n  if ((0, _type.isFunction)(field.calculateSummaryValue)) {\n    expression = field.calculateSummaryValue;\n  } else {\n    if (summaryDisplayMode) {\n      if (\"absoluteVariation\" === summaryDisplayMode) {\n        expression = createAbsoluteVariationExp(crossGroupCalculation);\n      } else {\n        if (\"percentVariation\" === summaryDisplayMode) {\n          expression = createPercentVariationExp(crossGroupCalculation);\n        } else {\n          expression = summaryDictionary[summaryDisplayMode];\n        }\n      }\n\n      if (expression && !field.format && summaryDisplayMode.indexOf(\"percent\") !== -1) {\n        (0, _uiPivot_grid.setFieldProperty)(field, \"format\", \"percent\");\n      }\n    }\n  }\n\n  return expression;\n}\n\nfunction processDataCell(data, rowIndex, columnIndex, isRunningTotalCalculation) {\n  var values = data.values[rowIndex][columnIndex] = data.values[rowIndex][columnIndex] || [];\n  var originalCell = values.originalCell;\n\n  if (!originalCell) {\n    return;\n  }\n\n  if (values.allowResetting || !isRunningTotalCalculation) {\n    data.values[rowIndex][columnIndex] = originalCell.slice();\n  }\n\n  data.values[rowIndex][columnIndex].allowResetting = isRunningTotalCalculation;\n}\n\nfunction applyDisplaySummaryMode(descriptions, data) {\n  var expressions = [];\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var valueFields = descriptions.values;\n  var fieldsCache = createCache();\n  data.values = data.values || [];\n  (0, _uiPivot_grid.foreachTree)(columnElements, function (columnPath) {\n    columnPath[0].isEmpty = [];\n  }, false);\n  (0, _uiPivot_grid.foreachTree)(rowElements, function (rowPath) {\n    var rowItem = rowPath[0];\n    rowItem.isEmpty = [];\n    data.values[rowItem.index] = data.values[rowItem.index] || [];\n    (0, _uiPivot_grid.foreachTree)(columnElements, function (columnPath) {\n      var columnItem = columnPath[0];\n      var isEmptyCell;\n      processDataCell(data, rowItem.index, columnItem.index, false);\n\n      for (var i = 0; i < valueFields.length; i++) {\n        var field = valueFields[i];\n        var expression = expressions[i] = void 0 === expressions[i] ? getExpression(field) : expressions[i];\n        isEmptyCell = false;\n\n        if (expression) {\n          var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\n          var cell = expressionArg.cell();\n          var value = cell[i] = expression(expressionArg);\n          cell.postProcessedFlags[i] = true;\n          isEmptyCell = null === value || void 0 === value;\n        }\n\n        if (void 0 === columnItem.isEmpty[i]) {\n          columnItem.isEmpty[i] = true;\n        }\n\n        if (void 0 === rowItem.isEmpty[i]) {\n          rowItem.isEmpty[i] = true;\n        }\n\n        if (!isEmptyCell) {\n          rowItem.isEmpty[i] = columnItem.isEmpty[i] = false;\n        }\n      }\n    }, false);\n  }, false);\n  data.isEmptyGrandTotalRow = rowElements[0].isEmpty;\n  data.isEmptyGrandTotalColumn = columnElements[0].isEmpty;\n}\n\nfunction applyRunningTotal(descriptions, data) {\n  var expressions = [];\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var valueFields = descriptions.values;\n  var fieldsCache = createCache();\n  data.values = data.values || [];\n  (0, _uiPivot_grid.foreachTree)(rowElements, function (rowPath) {\n    var rowItem = rowPath[0];\n    data.values[rowItem.index] = data.values[rowItem.index] || [];\n    (0, _uiPivot_grid.foreachTree)(columnElements, function (columnPath) {\n      var columnItem = columnPath[0];\n      processDataCell(data, rowItem.index, columnItem.index, true);\n\n      for (var i = 0; i < valueFields.length; i++) {\n        var field = valueFields[i];\n        var expression = expressions[i] = void 0 === expressions[i] ? createRunningTotalExpr(field) : expressions[i];\n\n        if (expression) {\n          var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\n          var cell = expressionArg.cell();\n          cell[i] = expression(expressionArg);\n          cell.postProcessedFlags[i] = true;\n        }\n      }\n    }, false);\n  }, false);\n}\n\nfunction createMockSummaryCell(descriptions, fields, indices) {\n  var summaryCell = new SummaryCell([], [], {}, descriptions, 0);\n\n  summaryCell.value = function (fieldId) {\n    if ((0, _type.isDefined)(fieldId)) {\n      var index = (0, _uiPivot_grid.findField)(fields, fieldId);\n      var field = fields[index];\n\n      if (!indices[index] && field && !(0, _type.isDefined)(field.area)) {\n        descriptions.values.push(field);\n        indices[index] = true;\n      }\n    }\n  };\n\n  summaryCell.grandTotal = function () {\n    return this;\n  };\n\n  summaryCell.children = function () {\n    return [];\n  };\n\n  return summaryCell;\n}","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/pivot_grid/ui.pivot_grid.summary_display_modes.js"],"names":["exports","applyDisplaySummaryMode","applyRunningTotal","createMockSummaryCell","_type","require","_extend","_array","_uiPivot_grid","COLUMN","ROW","NULL","calculatePercentValue","value","totalValue","result","isDefined","isNaN","_percentOfGrandTotal","e","dimension","grandTotal","percentOfParent","parent","parentValue","createAbsoluteVariationExp","allowCrossGroup","prevCell","prev","prevValue","createPercentVariationExp","absoluteExp","absVar","summaryDictionary","percentOfColumnTotal","percentOfRowTotal","percentOfColumnGrandTotal","percentOfRowGrandTotal","percentOfGrandTotal","getPrevCellCrossGroup","cell","direction","createRunningTotalExpr","field","runningTotal","allowCrossGroupCalculation","createCache","fields","positions","getFieldPos","descriptions","cache","fieldParams","index","isObject","allFields","columns","concat","rows","values","fieldIndex","findField","area","inArray","getPathFieldName","SummaryCell","columnPath","rowPath","data","fieldsCache","_columnPath","_rowPath","_fieldIndex","_fieldsCache","_data","_descriptions","originalCell","slice","postProcessedFlags","_cell","prototype","extend","_getPath","_getDimension","_createCell","config","that","path","shift","length","children","item","cellConfig","i","push","dimensionPath","pathFieldName","next","currentPath","siblings","child","fieldValue","childLevelField","fieldPos","sliceCell","newPath","level","childItems","currentValue","childIndex","arg1","arg2","fistArgIsBoolean","needCalculatedValue","isPostProcessed","getExpression","summaryDisplayMode","crossGroupCalculation","expression","isFunction","calculateSummaryValue","format","indexOf","setFieldProperty","processDataCell","rowIndex","columnIndex","isRunningTotalCalculation","allowResetting","expressions","columnElements","grandTotalColumnIndex","rowElements","grandTotalRowIndex","valueFields","foreachTree","isEmpty","rowItem","columnItem","isEmptyCell","expressionArg","isEmptyGrandTotalRow","isEmptyGrandTotalColumn","indices","summaryCell","fieldId"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/pivot_grid/ui.pivot_grid.summary_display_modes.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.applyDisplaySummaryMode = applyDisplaySummaryMode;\r\nexports.applyRunningTotal = applyRunningTotal;\r\nexports.createMockSummaryCell = createMockSummaryCell;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _array = require(\"../../core/utils/array\");\r\nvar _uiPivot_grid = require(\"./ui.pivot_grid.utils\");\r\nvar COLUMN = \"column\";\r\nvar ROW = \"row\";\r\nvar NULL = null;\r\nvar calculatePercentValue = function(value, totalValue) {\r\n    var result = value / totalValue;\r\n    if (!(0, _type.isDefined)(value) || isNaN(result)) {\r\n        result = NULL\r\n    }\r\n    return result\r\n};\r\nvar _percentOfGrandTotal = function(e, dimension) {\r\n    return calculatePercentValue(e.value(), e.grandTotal(dimension).value())\r\n};\r\nvar percentOfParent = function(e, dimension) {\r\n    var parent = e.parent(dimension);\r\n    var parentValue = parent ? parent.value() : e.value();\r\n    return calculatePercentValue(e.value(), parentValue)\r\n};\r\nvar createAbsoluteVariationExp = function(allowCrossGroup) {\r\n    return function(e) {\r\n        var prevCell = e.prev(COLUMN, allowCrossGroup);\r\n        var prevValue = prevCell && prevCell.value();\r\n        if ((0, _type.isDefined)(prevValue) && (0, _type.isDefined)(e.value())) {\r\n            return e.value() - prevValue\r\n        }\r\n        return NULL\r\n    }\r\n};\r\nvar createPercentVariationExp = function(allowCrossGroup) {\r\n    var absoluteExp = createAbsoluteVariationExp(allowCrossGroup);\r\n    return function(e) {\r\n        var absVar = absoluteExp(e);\r\n        var prevCell = e.prev(COLUMN, allowCrossGroup);\r\n        var prevValue = prevCell && prevCell.value();\r\n        return absVar !== NULL && prevValue ? absVar / prevValue : NULL\r\n    }\r\n};\r\nvar summaryDictionary = {\r\n    percentOfColumnTotal: function(e) {\r\n        return percentOfParent(e, ROW)\r\n    },\r\n    percentOfRowTotal: function(e) {\r\n        return percentOfParent(e, COLUMN)\r\n    },\r\n    percentOfColumnGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e, ROW)\r\n    },\r\n    percentOfRowGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e, COLUMN)\r\n    },\r\n    percentOfGrandTotal: function(e) {\r\n        return _percentOfGrandTotal(e)\r\n    }\r\n};\r\nvar getPrevCellCrossGroup = function getPrevCellCrossGroup(cell, direction) {\r\n    if (!cell || !cell.parent(direction)) {\r\n        return\r\n    }\r\n    var prevCell = cell.prev(direction);\r\n    if (!prevCell) {\r\n        prevCell = getPrevCellCrossGroup(cell.parent(direction), direction)\r\n    }\r\n    return prevCell\r\n};\r\nvar createRunningTotalExpr = function(field) {\r\n    if (!field.runningTotal) {\r\n        return\r\n    }\r\n    var direction = field.runningTotal === COLUMN ? ROW : COLUMN;\r\n    return function(e) {\r\n        var prevCell = field.allowCrossGroupCalculation ? getPrevCellCrossGroup(e, direction) : e.prev(direction, false);\r\n        var value = e.value(true);\r\n        var prevValue = prevCell && prevCell.value(true);\r\n        if ((0, _type.isDefined)(prevValue) && (0, _type.isDefined)(value)) {\r\n            value = prevValue + value\r\n        } else {\r\n            if ((0, _type.isDefined)(prevValue)) {\r\n                value = prevValue\r\n            }\r\n        }\r\n        return value\r\n    }\r\n};\r\n\r\nfunction createCache() {\r\n    return {\r\n        fields: {},\r\n        positions: {}\r\n    }\r\n}\r\n\r\nfunction getFieldPos(descriptions, field, cache) {\r\n    var fieldParams = {\r\n        index: -1\r\n    };\r\n    if (!(0, _type.isObject)(field)) {\r\n        if (cache.fields[field]) {\r\n            field = cache[field]\r\n        } else {\r\n            var allFields = descriptions.columns.concat(descriptions.rows).concat(descriptions.values);\r\n            var fieldIndex = (0, _uiPivot_grid.findField)(allFields, field);\r\n            field = cache[field] = allFields[fieldIndex]\r\n        }\r\n    }\r\n    if (field) {\r\n        var area = field.area || \"data\";\r\n        fieldParams = cache.positions[field.index] = cache.positions[field.index] || {\r\n            area: area,\r\n            index: (0, _array.inArray)(field, descriptions[\"data\" === area ? \"values\" : area + \"s\"])\r\n        }\r\n    }\r\n    return fieldParams\r\n}\r\n\r\nfunction getPathFieldName(dimension) {\r\n    return dimension === ROW ? \"_rowPath\" : \"_columnPath\"\r\n}\r\nvar SummaryCell = function(columnPath, rowPath, data, descriptions, fieldIndex, fieldsCache) {\r\n    this._columnPath = columnPath;\r\n    this._rowPath = rowPath;\r\n    this._fieldIndex = fieldIndex;\r\n    this._fieldsCache = fieldsCache || createCache();\r\n    this._data = data;\r\n    this._descriptions = descriptions;\r\n    var cell = data.values && data.values[rowPath[0].index] && data.values[rowPath[0].index][columnPath[0].index];\r\n    if (cell) {\r\n        cell.originalCell = cell.originalCell || cell.slice();\r\n        cell.postProcessedFlags = cell.postProcessedFlags || [];\r\n        this._cell = cell\r\n    }\r\n};\r\nSummaryCell.prototype = (0, _extend.extend)(SummaryCell.prototype, {\r\n    _getPath: function(dimension) {\r\n        return this[getPathFieldName(dimension)]\r\n    },\r\n    _getDimension: function(dimension) {\r\n        dimension = dimension === ROW ? \"rows\" : \"columns\";\r\n        return this._descriptions[dimension]\r\n    },\r\n    _createCell: function(config) {\r\n        var that = this;\r\n        return new SummaryCell(config._columnPath || that._columnPath, config._rowPath || that._rowPath, that._data, that._descriptions, that._fieldIndex)\r\n    },\r\n    parent: function(direction) {\r\n        var path = this._getPath(direction).slice();\r\n        var config = {};\r\n        path.shift();\r\n        if (path.length) {\r\n            config[getPathFieldName(direction)] = path;\r\n            return this._createCell(config)\r\n        }\r\n        return NULL\r\n    },\r\n    children: function(direction) {\r\n        var path = this._getPath(direction).slice();\r\n        var item = path[0];\r\n        var result = [];\r\n        var cellConfig = {};\r\n        if (item.children) {\r\n            for (var i = 0; i < item.children.length; i++) {\r\n                cellConfig[getPathFieldName(direction)] = [item.children[i]].concat(path.slice());\r\n                result.push(this._createCell(cellConfig))\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    grandTotal: function(direction) {\r\n        var config = {};\r\n        var rowPath = this._rowPath;\r\n        var columnPath = this._columnPath;\r\n        var dimensionPath = this._getPath(direction);\r\n        var pathFieldName = getPathFieldName(direction);\r\n        if (!direction) {\r\n            config._rowPath = [rowPath[rowPath.length - 1]];\r\n            config._columnPath = [columnPath[columnPath.length - 1]]\r\n        } else {\r\n            config[pathFieldName] = [dimensionPath[dimensionPath.length - 1]]\r\n        }\r\n        return this._createCell(config)\r\n    },\r\n    next: function(direction, allowCrossGroup) {\r\n        var currentPath = this._getPath(direction);\r\n        var item = currentPath[0];\r\n        var parent = this.parent(direction);\r\n        var siblings;\r\n        if (parent) {\r\n            var index = (0, _array.inArray)(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index + 1]) {\r\n                return siblings[index + 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.next(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[0] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    prev: function(direction, allowCrossGroup) {\r\n        var currentPath = this._getPath(direction);\r\n        var item = currentPath[0];\r\n        var parent = this.parent(direction);\r\n        var siblings;\r\n        if (parent) {\r\n            var index = (0, _array.inArray)(item, currentPath[1].children);\r\n            siblings = parent.children(direction);\r\n            if (siblings[index - 1]) {\r\n                return siblings[index - 1]\r\n            }\r\n        }\r\n        if (allowCrossGroup && parent) {\r\n            do {\r\n                parent = parent.prev(direction, allowCrossGroup);\r\n                siblings = parent ? parent.children(direction) : []\r\n            } while (parent && !siblings.length);\r\n            return siblings[siblings.length - 1] || NULL\r\n        }\r\n        return NULL\r\n    },\r\n    cell: function() {\r\n        return this._cell\r\n    },\r\n    field: function field(area) {\r\n        if (\"data\" === area) {\r\n            return this._descriptions.values[this._fieldIndex]\r\n        }\r\n        var path = this._getPath(area);\r\n        var descriptions = this._getDimension(area);\r\n        var field = descriptions[path.length - 2];\r\n        return field || NULL\r\n    },\r\n    child: function(direction, fieldValue) {\r\n        var children = this.children(direction);\r\n        for (var i = 0; i < children.length; i++) {\r\n            var childLevelField = childLevelField || children[i].field(direction);\r\n            if (children[i].value(childLevelField) === fieldValue) {\r\n                return children[i]\r\n            }\r\n        }\r\n        return NULL\r\n    },\r\n    slice: function(field, value) {\r\n        var that = this;\r\n        var config = {};\r\n        var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n        var area = fieldPos.area;\r\n        var fieldIndex = fieldPos.index;\r\n        var sliceCell = NULL;\r\n        var newPath = [];\r\n        if (area === ROW || area === COLUMN) {\r\n            var path = this._getPath(area).slice();\r\n            var level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\r\n            if (path[level]) {\r\n                newPath[path.length - 1] = path[path.length - 1];\r\n                for (var i = level; i >= 0; i--) {\r\n                    if (path[i + 1]) {\r\n                        var childItems = path[i + 1].children || [];\r\n                        var currentValue = i === level ? value : path[i].value;\r\n                        path[i] = void 0;\r\n                        for (var childIndex = 0; childIndex < childItems.length; childIndex++) {\r\n                            if (childItems[childIndex].value === currentValue) {\r\n                                path[i] = childItems[childIndex];\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    if (void 0 === path[i]) {\r\n                        return sliceCell\r\n                    }\r\n                }\r\n                config[getPathFieldName(area)] = path;\r\n                sliceCell = that._createCell(config)\r\n            }\r\n        }\r\n        return sliceCell\r\n    },\r\n    value: function(arg1, arg2) {\r\n        var cell = this._cell;\r\n        var fieldIndex = this._fieldIndex;\r\n        var fistArgIsBoolean = true === arg1 || false === arg1;\r\n        var field = !fistArgIsBoolean ? arg1 : NULL;\r\n        var needCalculatedValue = fistArgIsBoolean && arg1 || arg2;\r\n        if ((0, _type.isDefined)(field)) {\r\n            var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n            fieldIndex = fieldPos.index;\r\n            if (\"data\" !== fieldPos.area) {\r\n                var path = this._getPath(fieldPos.area);\r\n                var level = fieldIndex !== -1 && path.length - 2 - fieldIndex;\r\n                return path[level] && path[level].value\r\n            }\r\n        }\r\n        if (cell && cell.originalCell) {\r\n            return needCalculatedValue ? cell[fieldIndex] : cell.originalCell[fieldIndex]\r\n        }\r\n        return NULL\r\n    },\r\n    isPostProcessed: function(field) {\r\n        var fieldIndex = this._fieldIndex;\r\n        if ((0, _type.isDefined)(field)) {\r\n            var fieldPos = getFieldPos(this._descriptions, field, this._fieldsCache);\r\n            fieldIndex = fieldPos.index;\r\n            if (\"data\" !== fieldPos.area) {\r\n                return false\r\n            }\r\n        }\r\n        return !!(this._cell && this._cell.postProcessedFlags[fieldIndex])\r\n    }\r\n});\r\n\r\nfunction getExpression(field) {\r\n    var summaryDisplayMode = field.summaryDisplayMode;\r\n    var crossGroupCalculation = field.allowCrossGroupCalculation;\r\n    var expression = NULL;\r\n    if ((0, _type.isFunction)(field.calculateSummaryValue)) {\r\n        expression = field.calculateSummaryValue\r\n    } else {\r\n        if (summaryDisplayMode) {\r\n            if (\"absoluteVariation\" === summaryDisplayMode) {\r\n                expression = createAbsoluteVariationExp(crossGroupCalculation)\r\n            } else {\r\n                if (\"percentVariation\" === summaryDisplayMode) {\r\n                    expression = createPercentVariationExp(crossGroupCalculation)\r\n                } else {\r\n                    expression = summaryDictionary[summaryDisplayMode]\r\n                }\r\n            }\r\n            if (expression && !field.format && summaryDisplayMode.indexOf(\"percent\") !== -1) {\r\n                (0, _uiPivot_grid.setFieldProperty)(field, \"format\", \"percent\")\r\n            }\r\n        }\r\n    }\r\n    return expression\r\n}\r\n\r\nfunction processDataCell(data, rowIndex, columnIndex, isRunningTotalCalculation) {\r\n    var values = data.values[rowIndex][columnIndex] = data.values[rowIndex][columnIndex] || [];\r\n    var originalCell = values.originalCell;\r\n    if (!originalCell) {\r\n        return\r\n    }\r\n    if (values.allowResetting || !isRunningTotalCalculation) {\r\n        data.values[rowIndex][columnIndex] = originalCell.slice()\r\n    }\r\n    data.values[rowIndex][columnIndex].allowResetting = isRunningTotalCalculation\r\n}\r\n\r\nfunction applyDisplaySummaryMode(descriptions, data) {\r\n    var expressions = [];\r\n    var columnElements = [{\r\n        index: data.grandTotalColumnIndex,\r\n        children: data.columns\r\n    }];\r\n    var rowElements = [{\r\n        index: data.grandTotalRowIndex,\r\n        children: data.rows\r\n    }];\r\n    var valueFields = descriptions.values;\r\n    var fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    (0, _uiPivot_grid.foreachTree)(columnElements, function(columnPath) {\r\n        columnPath[0].isEmpty = []\r\n    }, false);\r\n    (0, _uiPivot_grid.foreachTree)(rowElements, function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        rowItem.isEmpty = [];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        (0, _uiPivot_grid.foreachTree)(columnElements, function(columnPath) {\r\n            var columnItem = columnPath[0];\r\n            var isEmptyCell;\r\n            processDataCell(data, rowItem.index, columnItem.index, false);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                var field = valueFields[i];\r\n                var expression = expressions[i] = void 0 === expressions[i] ? getExpression(field) : expressions[i];\r\n                isEmptyCell = false;\r\n                if (expression) {\r\n                    var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    var cell = expressionArg.cell();\r\n                    var value = cell[i] = expression(expressionArg);\r\n                    cell.postProcessedFlags[i] = true;\r\n                    isEmptyCell = null === value || void 0 === value\r\n                }\r\n                if (void 0 === columnItem.isEmpty[i]) {\r\n                    columnItem.isEmpty[i] = true\r\n                }\r\n                if (void 0 === rowItem.isEmpty[i]) {\r\n                    rowItem.isEmpty[i] = true\r\n                }\r\n                if (!isEmptyCell) {\r\n                    rowItem.isEmpty[i] = columnItem.isEmpty[i] = false\r\n                }\r\n            }\r\n        }, false)\r\n    }, false);\r\n    data.isEmptyGrandTotalRow = rowElements[0].isEmpty;\r\n    data.isEmptyGrandTotalColumn = columnElements[0].isEmpty\r\n}\r\n\r\nfunction applyRunningTotal(descriptions, data) {\r\n    var expressions = [];\r\n    var columnElements = [{\r\n        index: data.grandTotalColumnIndex,\r\n        children: data.columns\r\n    }];\r\n    var rowElements = [{\r\n        index: data.grandTotalRowIndex,\r\n        children: data.rows\r\n    }];\r\n    var valueFields = descriptions.values;\r\n    var fieldsCache = createCache();\r\n    data.values = data.values || [];\r\n    (0, _uiPivot_grid.foreachTree)(rowElements, function(rowPath) {\r\n        var rowItem = rowPath[0];\r\n        data.values[rowItem.index] = data.values[rowItem.index] || [];\r\n        (0, _uiPivot_grid.foreachTree)(columnElements, function(columnPath) {\r\n            var columnItem = columnPath[0];\r\n            processDataCell(data, rowItem.index, columnItem.index, true);\r\n            for (var i = 0; i < valueFields.length; i++) {\r\n                var field = valueFields[i];\r\n                var expression = expressions[i] = void 0 === expressions[i] ? createRunningTotalExpr(field) : expressions[i];\r\n                if (expression) {\r\n                    var expressionArg = new SummaryCell(columnPath, rowPath, data, descriptions, i, fieldsCache);\r\n                    var cell = expressionArg.cell();\r\n                    cell[i] = expression(expressionArg);\r\n                    cell.postProcessedFlags[i] = true\r\n                }\r\n            }\r\n        }, false)\r\n    }, false)\r\n}\r\n\r\nfunction createMockSummaryCell(descriptions, fields, indices) {\r\n    var summaryCell = new SummaryCell([], [], {}, descriptions, 0);\r\n    summaryCell.value = function(fieldId) {\r\n        if ((0, _type.isDefined)(fieldId)) {\r\n            var index = (0, _uiPivot_grid.findField)(fields, fieldId);\r\n            var field = fields[index];\r\n            if (!indices[index] && field && !(0, _type.isDefined)(field.area)) {\r\n                descriptions.values.push(field);\r\n                indices[index] = true\r\n            }\r\n        }\r\n    };\r\n    summaryCell.grandTotal = function() {\r\n        return this\r\n    };\r\n    summaryCell.children = function() {\r\n        return []\r\n    };\r\n    return summaryCell\r\n}\r\n"]},"metadata":{},"sourceType":"script"}