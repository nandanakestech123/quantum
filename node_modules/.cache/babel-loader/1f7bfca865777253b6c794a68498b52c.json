{"ast":null,"code":"import { StaffPlusActionType } from \"redux/actions/actionType\";\nimport { staffPlus } from \"service/apiVariables\"; // create staffplus action\n\nexport const createStaffPlus = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...staffPlus.addStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get workschedule action\n\nexport const getWorkSchedule = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getWorkSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getWorkSchedule\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getStaffPlusWorkSchedule,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {// reject(Toast({ type: 'error', message }));\n        }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update workschedule action\n\nexport const updateWorkSchedule = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.updateWorkSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.updateWorkSchedule,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update staffplus action\n\nexport const updateStaffPlus = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.updateStaff.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.updateStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update staffplus action\n\nexport const updateEmpInfo = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.updateEmpInfo.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.updateEmpInfo,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get staffplus  action\n\nexport const getStaffPlus = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getStaffPlus.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getStaffPlus\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getStaffPlusDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get skilllist  action\n\nexport const getSkillList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getSkillList.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getSkillList\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getStaffPlusSkillList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // update emp skilllist action\n\nexport const updateEmpSkillList = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.updateEmpSkillList.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.updateEmpSkillList,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get emp skilllist  action\n\nexport const getEmpSkillList = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getEmpSkillList.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getEmpSkillList\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getEmpEmpSkillList,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get staffplus schedule  action\n\nexport const getStaffSchedule = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getSchedule\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getStaffPlusSchedule,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; //update staffplus schedule action\n\nexport const updateStaffPlusSchedule = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...staffPlus.updateSchedule,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get staffplus schedule  action\n\nexport const getAllEmpSchedule = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.getAllEmpSchedule.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.getAllEmpSchedule\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getStaffPlusAllEmpSchedule,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // delete staff action\n\nexport const deleteStaffPlus = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    staffPlus.deleteStaff.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...staffPlus.deleteStaff,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get staffplus authorization  action\n\nexport const getAuthorizationSettings = () => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...staffPlus.getSecurityAuthorizationSettings\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: StaffPlusActionType.getAuthorizationSettings,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; //update staffplus authorization settings action\n\nexport const updateAuthorizationSettings = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...staffPlus.updateSecurityAuthorizationSettings,\n      body,\n      header: {\n        type: \"Content-Type\",\n        value: \"application/json\"\n      }\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/staffPlus.js"],"names":["StaffPlusActionType","staffPlus","createStaffPlus","body","dispatch","getState","api","Toast","Promise","resolve","reject","addStaff","then","response","message","status","data","type","catch","getWorkSchedule","id","addQuery","key","payload","getStaffPlusWorkSchedule","updateWorkSchedule","updateStaffPlus","updateStaff","updateEmpInfo","getStaffPlus","getStaffPlusDetail","getSkillList","getStaffPlusSkillList","updateEmpSkillList","header","value","getEmpSkillList","getEmpEmpSkillList","getStaffSchedule","getSchedule","getStaffPlusSchedule","updateStaffPlusSchedule","updateSchedule","getAllEmpSchedule","getStaffPlusAllEmpSchedule","deleteStaffPlus","deleteStaff","getAuthorizationSettings","getSecurityAuthorizationSettings","updateAuthorizationSettings","updateSecurityAuthorizationSettings"],"mappings":"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","sourcesContent":["import { StaffPlusActionType } from \"redux/actions/actionType\";\nimport { staffPlus } from \"service/apiVariables\";\n\n// create staffplus action\nexport const createStaffPlus =\n  (body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({ ...staffPlus.addStaff, body })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get workschedule action\nexport const getWorkSchedule =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getWorkSchedule.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getWorkSchedule })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getStaffPlusWorkSchedule,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            // reject(Toast({ type: 'error', message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update workschedule action\nexport const updateWorkSchedule =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.updateWorkSchedule.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.updateWorkSchedule, body })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update staffplus action\nexport const updateStaffPlus =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.updateStaff.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.updateStaff, body })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update staffplus action\nexport const updateEmpInfo =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.updateEmpInfo.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.updateEmpInfo, body })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get staffplus  action\nexport const getStaffPlus =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getStaffPlus.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getStaffPlus })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getStaffPlusDetail,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get skilllist  action\nexport const getSkillList =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getSkillList.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getSkillList })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getStaffPlusSkillList,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// update emp skilllist action\nexport const updateEmpSkillList =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.updateEmpSkillList.addQuery = { key: \"id\", payload: id };\n      api({\n        ...staffPlus.updateEmpSkillList,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get emp skilllist  action\nexport const getEmpSkillList =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getEmpSkillList.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getEmpSkillList })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getEmpEmpSkillList,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get staffplus schedule  action\nexport const getStaffSchedule =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getSchedule.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getSchedule })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getStaffPlusSchedule,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n//update staffplus schedule action\nexport const updateStaffPlusSchedule =\n  (body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({\n        ...staffPlus.updateSchedule,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get staffplus schedule  action\nexport const getAllEmpSchedule =\n  (id) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.getAllEmpSchedule.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.getAllEmpSchedule })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getStaffPlusAllEmpSchedule,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// delete staff action\nexport const deleteStaffPlus =\n  (id, body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      staffPlus.deleteStaff.addQuery = { key: \"id\", payload: id };\n      api({ ...staffPlus.deleteStaff, body })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n// get staffplus authorization  action\nexport const getAuthorizationSettings =\n  () =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({ ...staffPlus.getSecurityAuthorizationSettings })\n        .then((response) => {\n          resolve(response);\n          let { message, status, data } = response;\n          if (status === 200) {\n            dispatch({\n              type: StaffPlusActionType.getAuthorizationSettings,\n              payload: data,\n            });\n            // Toast({ type: 'success', message })\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n\n//update staffplus authorization settings action\nexport const updateAuthorizationSettings =\n  (body) =>\n  (dispatch, getState, { api, Toast }) => {\n    return new Promise((resolve, reject) => {\n      api({\n        ...staffPlus.updateSecurityAuthorizationSettings,\n        body,\n        header: { type: \"Content-Type\", value: \"application/json\" },\n      })\n        .then((response) => {\n          resolve(response);\n          let { message, status } = response;\n          if (status === 200) {\n            Toast({ type: \"success\", message });\n          } else {\n            reject(Toast({ type: \"error\", message }));\n          }\n        })\n        .catch(({ message }) => {\n          reject(Toast({ type: \"error\", message }));\n        });\n    });\n  };\n"]},"metadata":{},"sourceType":"module"}