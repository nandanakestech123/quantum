{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\component\\\\Admin\\\\Appointment\\\\ListAppointment\\\\CommonScheduler\\\\Calander.js\";\nimport React, { Component } from 'react';\nimport { SchedulerModal } from 'component/common/Plugins'; // import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\n\nimport { NormalDateTime } from 'component/common';\nimport { getCustomer, getCommonApi, commonDeleteApi } from 'redux/actions/common';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\"; // import timeOption from 'data/timeOption.json'\n\nimport { dateFormat } from 'service/helperFunctions';\nimport { history } from 'helpers';\nimport './style.scss';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { CreateAppointment, updateForm } from 'redux/actions/appointment';\nimport { Scheduler } from './Scheduler';\nconst data = [{\n  start_date: '2020-06-09 4:00',\n  end_date: '2020-06-09 6:00',\n  text: 'Event 1',\n  id: 1\n}, {\n  start_date: '2020-06-11 8:00',\n  end_date: '2020-06-11 10:00',\n  text: 'Event 2',\n  id: 2\n}, {\n  start_date: '2020-06-12 12:00',\n  end_date: '2018-06-12 14:00',\n  text: 'dblclick me!',\n  id: 3\n}];\nexport class SchedulerClass extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      formField: {\n        search: \"\",\n        menuOption: \"\",\n        menuId: \"\",\n        appointmentDate: new Date()\n      },\n      list: [],\n      filterDate: new Date(),\n      filterType: 'day',\n      selectedId: \"\",\n      menuOption: [{\n        lable: \"Name\",\n        value: \"name\"\n      }],\n      dayWeekMonth: \"day\"\n    };\n\n    this.componentWillMount = async () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n      let {\n        brachList,\n        appointment,\n        formField,\n        filterDate\n      } = this.state;\n      this.props.getCommonApi(`treatment/Outlet/`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n\n        if (status === 200) {\n          for (let value of data) {// brachList.push({ value: value.id, label: value.itemsite_desc })\n          }\n\n          this.setState({\n            brachList\n          }); // console.log(brachList, \"jhksdfkjsdhfks\")\n        }\n      });\n      this.getAvailability();\n\n      if (this.props.selectedDate) {\n        await this.setState({\n          filterDate: this.props.selectedDate\n        });\n      }\n\n      this.getAppointment();\n    };\n\n    this.getAvailability = () => {\n      let {\n        filterDate\n      } = this.state;\n      this.setState({\n        list: []\n      });\n      this.props.getCommonApi(`staffsavailable/?Appt_date=${dateFormat(filterDate, \"yyyy-mm-dd\")}`).then(key => {\n        let {\n          status,\n          data\n        } = key;\n\n        if (status === 200) {\n          // for (let value of data) {\n          //     staffList.push({ value: value.id, label: value.emp_name })\n          // }\n          this.setState({\n            list: data\n          });\n        }\n      });\n    };\n\n    this.handleAppointmentOpen = (id, e) => {\n      console.log(e, id, \"hgjsydfisuyfsdfm ==== handleAppointmentOpen\");\n    };\n\n    this.handleEmptyEvent = async (date, e) => {\n      let {\n        customerDetail\n      } = this.props;\n      let {\n        formField\n      } = this.state; // if (this.validator.allValid()) {\n\n      let time = new Date(date);\n      formField['time'] = time.getHours() > 9 ? time.getHours() + \":00\" : \"0\" + time.getHours() + \":00\";\n      await this.setState({\n        formField\n      });\n      console.log(date, e, \"hgjsydfisuyfsdfm ==== handleEmptyEvent\", time.getHours);\n      await this.props.updateForm('basicApptDetail', formField);\n      history.push(`/admin/appointment/create`); // console.log(date, e, \"hgjsydfisuyfsdfm ====\");\n      // } else {\n      //     this.validator.showMessages();\n      // }\n    };\n\n    this.getAppointment = () => {\n      let {\n        brachList,\n        events,\n        formField,\n        filterType,\n        filterDate\n      } = this.state;\n      this.props.getCommonApi(`appointmentcalender/?date=${dateFormat(filterDate, \"yyyy-mm-dd\")}&check=${filterType}`).then(async key => {\n        let {\n          status,\n          data\n        } = key;\n        events = [];\n\n        if (status === 200) {\n          await this.setState({\n            events: null\n          });\n          events = data;\n          await this.setState({\n            events\n          }); // console.log(events, \"jhksdfkjsdhfks\", key)\n        }\n      });\n    };\n\n    this.handleChangeFilter = async (prevMode, prevDate, newMode, newDate) => {\n      let {\n        filterDate,\n        filterType\n      } = this.state;\n      filterDate = newDate;\n      filterType = newMode;\n      await this.setState({\n        filterDate,\n        filterType\n      });\n      this.getAvailability();\n      this.getAppointment();\n    };\n\n    this.handleChange = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let {\n        formField\n      } = this.state;\n      formField[name] = value;\n      await this.setState({\n        formField\n      });\n\n      if (name === \"branchId\") {\n        this.getAvailability();\n        this.getAppointment();\n      } // console.log(formField, \"afasfasdfdfasd\")\n\n\n      this.props.updateForm('basicApptDetail', formField);\n    };\n\n    this.handleDelete = async (id, event) => {\n      let {\n        selectedId\n      } = this.state;\n      console.log(id, \"===afasfasdfdfasd=====\", selectedId);\n\n      if (id !== selectedId) {\n        await this.setState({\n          selectedId: id\n        });\n        await this.props.commonDeleteApi(`appointment/${id}/`).then(res => {});\n      }\n    };\n\n    this.handleDatePick = async (name, value) => {\n      let {\n        filterDate\n      } = this.state;\n      filterDate = value;\n      await this.setState({\n        filterDate\n      });\n      this.props.handleFilterChange(value);\n      this.child.handleAppointment(value);\n      this.getAppointment();\n    };\n\n    this.openDetail = id => {\n      history.push(`/admin/appointment/${id}/detail`);\n    };\n\n    this.handleChangeView = data => {\n      let {\n        dayWeekMonth\n      } = this.state;\n      dayWeekMonth = data;\n      this.setState({\n        dayWeekMonth\n      });\n    };\n\n    this.child = React.createRef();\n  }\n\n  render() {\n    let {\n      appointment,\n      brachList,\n      branchId,\n      formField,\n      list,\n      events,\n      filterType,\n      menuOption,\n      dayWeekMonth,\n      filterDate\n    } = this.state;\n    let {\n      search,\n      menuId,\n      appointmentDate\n    } = formField;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row define-height px-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 day-week-month filter-date d-flex pl-2 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group py-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NormalDateTime, {\n      onChange: this.handleDatePick,\n      inputcol: \"p-0 inTime\",\n      value: filterDate ? new Date(filterDate) : new Date(),\n      name: \"cust_dob\",\n      className: \"dob-pick\",\n      showYearDropdown: true,\n      dateFormat: \"MM/dd/yyyy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-8 day-week-month d-flex pl-2 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.props.handleBack,\n      className: `menu my-3 ${dayWeekMonth === 'day' ? \"active\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, \"Back\")), /*#__PURE__*/React.createElement(Scheduler, {\n      data: events,\n      filterDate: filterDate,\n      onRef: ref => this.child = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  customerDetail: state.appointment.customerDetail,\n  customerList: state.common.customerList,\n  multipleCustomerForm: state.appointment.multipleCustomerForm\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getCustomer,\n    getCommonApi,\n    updateForm,\n    commonDeleteApi\n  }, dispatch);\n};\n\nexport const Calander = connect(mapStateToProps, mapDispatchToProps)(SchedulerClass);","map":{"version":3,"sources":["F:/webfe/src/component/Admin/Appointment/ListAppointment/CommonScheduler/Calander.js"],"names":["React","Component","SchedulerModal","NormalDateTime","getCustomer","getCommonApi","commonDeleteApi","connect","bindActionCreators","dateFormat","history","SimpleReactValidator","CreateAppointment","updateForm","Scheduler","data","start_date","end_date","text","id","SchedulerClass","constructor","props","state","events","formField","search","menuOption","menuId","appointmentDate","Date","list","filterDate","filterType","selectedId","lable","value","dayWeekMonth","componentWillMount","validator","element","message","autoForceUpdate","brachList","appointment","then","key","status","setState","getAvailability","selectedDate","getAppointment","handleAppointmentOpen","e","console","log","handleEmptyEvent","date","customerDetail","time","getHours","push","handleChangeFilter","prevMode","prevDate","newMode","newDate","handleChange","target","name","handleDelete","event","res","handleDatePick","handleFilterChange","child","handleAppointment","openDetail","handleChangeView","createRef","render","branchId","handleBack","ref","mapStateToProps","customerList","common","multipleCustomerForm","mapDispatchToProps","dispatch","Calander"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,0BAA/B,C,CACA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,eAApC,QAA2D,sBAA3D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC,C,CACA;;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,cAAP;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,2BAA9C;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,IAAI,GAAG,CACT;AAAEC,EAAAA,UAAU,EAAE,iBAAd;AAAiCC,EAAAA,QAAQ,EAAE,iBAA3C;AAA8DC,EAAAA,IAAI,EAAE,SAApE;AAA+EC,EAAAA,EAAE,EAAE;AAAnF,CADS,EAET;AAAEH,EAAAA,UAAU,EAAE,iBAAd;AAAiCC,EAAAA,QAAQ,EAAE,kBAA3C;AAA+DC,EAAAA,IAAI,EAAE,SAArE;AAAgFC,EAAAA,EAAE,EAAE;AAApF,CAFS,EAGT;AAAEH,EAAAA,UAAU,EAAE,kBAAd;AAAkCC,EAAAA,QAAQ,EAAE,kBAA5C;AAAgEC,EAAAA,IAAI,EAAE,cAAtE;AAAsFC,EAAAA,EAAE,EAAE;AAA1F,CAHS,CAAb;AAMA,OAAO,MAAMC,cAAN,SAA6BnB,SAA7B,CAAuC;AAC1CoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAInBC,KAJmB,GAIX;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAIJC,MAAAA,SAAS,EAAE;AACPC,QAAAA,MAAM,EAAE,EADD;AAEPC,QAAAA,UAAU,EAAE,EAFL;AAGPC,QAAAA,MAAM,EAAE,EAHD;AAIPC,QAAAA,eAAe,EAAE,IAAIC,IAAJ;AAJV,OAJP;AAUJC,MAAAA,IAAI,EAAE,EAVF;AAWJC,MAAAA,UAAU,EAAE,IAAIF,IAAJ,EAXR;AAYJG,MAAAA,UAAU,EAAE,KAZR;AAaJC,MAAAA,UAAU,EAAE,EAbR;AAcJP,MAAAA,UAAU,EAAE,CACR;AAAEQ,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OADQ,CAdR;AAiBJC,MAAAA,YAAY,EAAE;AAjBV,KAJW;;AAAA,SAwBnBC,kBAxBmB,GAwBE,YAAW;AAC5B,WAAKC,SAAL,GAAiB,IAAI5B,oBAAJ,CAAyB;AACtC6B,QAAAA,OAAO,EAAEC,OAAO,iBAAI;AAAM,UAAA,SAAS,EAAC,wCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0DA,OAA1D,CADkB;AAEtCC,QAAAA,eAAe,EAAE;AAFqB,OAAzB,CAAjB;AAIA,UAAI;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,WAAb;AAA0BnB,QAAAA,SAA1B;AAAqCO,QAAAA;AAArC,UAAoD,KAAKT,KAA7D;AACA,WAAKD,KAAL,CAAWjB,YAAX,CAAyB,mBAAzB,EAA6CwC,IAA7C,CAAmDC,GAAD,IAAS;AACvD,YAAI;AAAEC,UAAAA,MAAF;AAAUhC,UAAAA;AAAV,YAAmB+B,GAAvB;;AACA,YAAIC,MAAM,KAAK,GAAf,EAAoB;AAChB,eAAK,IAAIX,KAAT,IAAkBrB,IAAlB,EAAwB,CACpB;AACH;;AACD,eAAKiC,QAAL,CAAc;AAAEL,YAAAA;AAAF,WAAd,EAJgB,CAKhB;AACH;AACJ,OATD;AAUA,WAAKM,eAAL;;AACA,UAAG,KAAK3B,KAAL,CAAW4B,YAAd,EAA2B;AACvB,cAAM,KAAKF,QAAL,CAAc;AAChBhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAW4B;AADP,SAAd,CAAN;AAGH;;AACD,WAAKC,cAAL;AACH,KA/CkB;;AAAA,SAiDnBF,eAjDmB,GAiDD,MAAM;AACpB,UAAI;AAAEjB,QAAAA;AAAF,UAAiB,KAAKT,KAA1B;AACA,WAAKyB,QAAL,CAAc;AAAEjB,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,WAAKT,KAAL,CAAWjB,YAAX,CAAyB,8BAA6BI,UAAU,CAACuB,UAAD,EAAa,YAAb,CAA2B,EAA3F,EAA8Fa,IAA9F,CAAoGC,GAAD,IAAS;AACxG,YAAI;AAAEC,UAAAA,MAAF;AAAUhC,UAAAA;AAAV,YAAmB+B,GAAvB;;AACA,YAAIC,MAAM,KAAK,GAAf,EAAoB;AAChB;AACA;AACA;AACA,eAAKC,QAAL,CAAc;AAAEjB,YAAAA,IAAI,EAAEhB;AAAR,WAAd;AACH;AACJ,OARD;AASH,KA7DkB;;AAAA,SA+DnBqC,qBA/DmB,GA+DK,CAACjC,EAAD,EAAKkC,CAAL,KAAW;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAAelC,EAAf,EAAmB,6CAAnB;AACH,KAjEkB;;AAAA,SAmEnBqC,gBAnEmB,GAmEA,OAAOC,IAAP,EAAaJ,CAAb,KAAmB;AAClC,UAAI;AAAEK,QAAAA;AAAF,UAAqB,KAAKpC,KAA9B;AACA,UAAI;AAAEG,QAAAA;AAAF,UAAgB,KAAKF,KAAzB,CAFkC,CAGlC;;AACA,UAAIoC,IAAI,GAAG,IAAI7B,IAAJ,CAAS2B,IAAT,CAAX;AACAhC,MAAAA,SAAS,CAAC,MAAD,CAAT,GAAoBkC,IAAI,CAACC,QAAL,KAAkB,CAAlB,GAAuBD,IAAI,CAACC,QAAL,KAAkB,KAAzC,GAAmD,MAAMD,IAAI,CAACC,QAAL,EAAP,GAA0B,KAAhG;AACA,YAAM,KAAKZ,QAAL,CAAc;AAAEvB,QAAAA;AAAF,OAAd,CAAN;AACA6B,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAkBJ,CAAlB,EAAqB,wCAArB,EAA+DM,IAAI,CAACC,QAApE;AACA,YAAM,KAAKtC,KAAL,CAAWT,UAAX,CAAsB,iBAAtB,EAAyCY,SAAzC,CAAN;AACAf,MAAAA,OAAO,CAACmD,IAAR,CAAc,2BAAd,EATkC,CAUlC;AACA;AACA;AACA;AAEH,KAlFkB;;AAAA,SAoFnBV,cApFmB,GAoFF,MAAM;AACnB,UAAI;AAAER,QAAAA,SAAF;AAAanB,QAAAA,MAAb;AAAqBC,QAAAA,SAArB;AAAgCQ,QAAAA,UAAhC;AAA4CD,QAAAA;AAA5C,UAA2D,KAAKT,KAApE;AACA,WAAKD,KAAL,CAAWjB,YAAX,CAAyB,6BAA4BI,UAAU,CAACuB,UAAD,EAAa,YAAb,CAA2B,UAASC,UAAW,EAA9G,EAAiHY,IAAjH,CAAsH,MAAOC,GAAP,IAAe;AACjI,YAAI;AAAEC,UAAAA,MAAF;AAAUhC,UAAAA;AAAV,YAAmB+B,GAAvB;AACAtB,QAAAA,MAAM,GAAG,EAAT;;AACA,YAAIuB,MAAM,KAAK,GAAf,EAAoB;AAChB,gBAAM,KAAKC,QAAL,CAAc;AAAExB,YAAAA,MAAM,EAAE;AAAV,WAAd,CAAN;AACAA,UAAAA,MAAM,GAAGT,IAAT;AACA,gBAAM,KAAKiC,QAAL,CAAc;AAAExB,YAAAA;AAAF,WAAd,CAAN,CAHgB,CAIhB;AACH;AACJ,OATD;AAUH,KAhGkB;;AAAA,SAiGnBsC,kBAjGmB,GAiGE,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,OAApC,KAAgD;AAEjE,UAAI;AAAElC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA6B,KAAKV,KAAtC;AACAS,MAAAA,UAAU,GAAGkC,OAAb;AACAjC,MAAAA,UAAU,GAAGgC,OAAb;AACA,YAAM,KAAKjB,QAAL,CAAc;AAChBhB,QAAAA,UADgB;AAEhBC,QAAAA;AAFgB,OAAd,CAAN;AAIA,WAAKgB,eAAL;AACA,WAAKE,cAAL;AACH,KA5GkB;;AAAA,SA8GnBgB,YA9GmB,GA8GJ,OAAO;AAAEC,MAAAA,MAAM,EAAE;AAAEhC,QAAAA,KAAF;AAASiC,QAAAA;AAAT;AAAV,KAAP,KAAuC;AAClD,UAAI;AAAE5C,QAAAA;AAAF,UAAgB,KAAKF,KAAzB;AACAE,MAAAA,SAAS,CAAC4C,IAAD,CAAT,GAAkBjC,KAAlB;AACA,YAAM,KAAKY,QAAL,CAAc;AAChBvB,QAAAA;AADgB,OAAd,CAAN;;AAGA,UAAI4C,IAAI,KAAK,UAAb,EAAyB;AACrB,aAAKpB,eAAL;AACA,aAAKE,cAAL;AACH,OATiD,CAUlD;;;AACA,WAAK7B,KAAL,CAAWT,UAAX,CAAsB,iBAAtB,EAAyCY,SAAzC;AACH,KA1HkB;;AAAA,SA4HnB6C,YA5HmB,GA4HJ,OAAOnD,EAAP,EAAWoD,KAAX,KAAqB;AAChC,UAAI;AAAErC,QAAAA;AAAF,UAAiB,KAAKX,KAA1B;AACA+B,MAAAA,OAAO,CAACC,GAAR,CAAYpC,EAAZ,EAAgB,wBAAhB,EAA0Ce,UAA1C;;AACA,UAAIf,EAAE,KAAKe,UAAX,EAAuB;AACnB,cAAM,KAAKc,QAAL,CAAc;AAChBd,UAAAA,UAAU,EAAEf;AADI,SAAd,CAAN;AAGA,cAAM,KAAKG,KAAL,CAAWhB,eAAX,CAA4B,eAAca,EAAG,GAA7C,EAAiD0B,IAAjD,CAAuD2B,GAAD,IAAS,CAEpE,CAFK,CAAN;AAGH;AAEJ,KAxIkB;;AAAA,SA0InBC,cA1ImB,GA0IF,OAAOJ,IAAP,EAAajC,KAAb,KAAuB;AACpC,UAAI;AAAEJ,QAAAA;AAAF,UAAiB,KAAKT,KAA1B;AACAS,MAAAA,UAAU,GAAGI,KAAb;AACA,YAAM,KAAKY,QAAL,CAAc;AAChBhB,QAAAA;AADgB,OAAd,CAAN;AAGA,WAAKV,KAAL,CAAWoD,kBAAX,CAA8BtC,KAA9B;AACA,WAAKuC,KAAL,CAAWC,iBAAX,CAA6BxC,KAA7B;AACA,WAAKe,cAAL;AACH,KAnJkB;;AAAA,SAqJnB0B,UArJmB,GAqJL1D,EAAD,IAAQ;AACjBT,MAAAA,OAAO,CAACmD,IAAR,CAAc,sBAAqB1C,EAAG,SAAtC;AACH,KAvJkB;;AAAA,SAyJnB2D,gBAzJmB,GAyJC/D,IAAD,IAAU;AACzB,UAAI;AAAEsB,QAAAA;AAAF,UAAmB,KAAKd,KAA5B;AACAc,MAAAA,YAAY,GAAGtB,IAAf;AACA,WAAKiC,QAAL,CAAc;AACVX,QAAAA;AADU,OAAd;AAGH,KA/JkB;;AAEf,SAAKsC,KAAL,GAAa3E,KAAK,CAAC+E,SAAN,EAAb;AACD;;AA8JHC,EAAAA,MAAM,GAAG;AACL,QAAI;AAAEpC,MAAAA,WAAF;AAAeD,MAAAA,SAAf;AAA0BsC,MAAAA,QAA1B;AAAoCxD,MAAAA,SAApC;AAA+CM,MAAAA,IAA/C;AAAqDP,MAAAA,MAArD;AAA6DS,MAAAA,UAA7D;AAAyEN,MAAAA,UAAzE;AAAqFU,MAAAA,YAArF;AAAmGL,MAAAA;AAAnG,QAAkH,KAAKT,KAA3H;AACA,QAAI;AAAEG,MAAAA,MAAF;AAAUE,MAAAA,MAAV;AAAkBC,MAAAA;AAAlB,QAAsCJ,SAA1C;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ,oBAAC,cAAD;AACI,MAAA,QAAQ,EAAE,KAAKgD,cADnB;AAEI,MAAA,QAAQ,EAAC,YAFb;AAGI,MAAA,KAAK,EAAEzC,UAAU,GAAI,IAAIF,IAAJ,CAASE,UAAT,CAAJ,GAA2B,IAAIF,IAAJ,EAHhD;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,SAAS,EAAC,UALd;AAMI,MAAA,gBAAgB,EAAE,IANtB;AAOI,MAAA,UAAU,EAAC,YAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR,CADA,CADJ,eAaI;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAW4D,UAAzB;AAAqC,MAAA,SAAS,EAAG,aAAY7C,YAAY,KAAK,KAAjB,GAAyB,QAAzB,GAAoC,EAAG,EAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAbJ,eAkBQ,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEb,MAAjB;AAAyB,MAAA,UAAU,EAAEQ,UAArC;AAAiD,MAAA,KAAK,EAAEmD,GAAG,IAAK,KAAKR,KAAL,GAAaQ,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBR,CADJ;AAsBH;;AA3LyC;;AA8L9C,MAAMC,eAAe,GAAI7D,KAAD,KAAY;AAChCmC,EAAAA,cAAc,EAAEnC,KAAK,CAACqB,WAAN,CAAkBc,cADF;AAEhC2B,EAAAA,YAAY,EAAE9D,KAAK,CAAC+D,MAAN,CAAaD,YAFK;AAGhCE,EAAAA,oBAAoB,EAAEhE,KAAK,CAACqB,WAAN,CAAkB2C;AAHR,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAOjF,kBAAkB,CAAC;AACtBJ,IAAAA,WADsB;AAEtBC,IAAAA,YAFsB;AAGtBQ,IAAAA,UAHsB;AAItBP,IAAAA;AAJsB,GAAD,EAKtBmF,QALsB,CAAzB;AAMH,CAPD;;AASA,OAAO,MAAMC,QAAQ,GAAGnF,OAAO,CAAC6E,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CpE,cAA7C,CAAjB","sourcesContent":["import React, { Component } from 'react';\r\nimport { SchedulerModal } from 'component/common/Plugins';\r\n// import BigSchedulerModal from 'component/common/Plugins/BigScheduler';\r\nimport { NormalDateTime } from 'component/common';\r\nimport { getCustomer, getCommonApi, commonDeleteApi } from 'redux/actions/common';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\n// import timeOption from 'data/timeOption.json'\r\nimport { dateFormat } from 'service/helperFunctions';\r\nimport { history } from 'helpers';\r\nimport './style.scss';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport { CreateAppointment, updateForm } from 'redux/actions/appointment';\r\nimport { Scheduler } from './Scheduler';\r\n\r\nconst data = [\r\n    { start_date: '2020-06-09 4:00', end_date: '2020-06-09 6:00', text: 'Event 1', id: 1 },\r\n    { start_date: '2020-06-11 8:00', end_date: '2020-06-11 10:00', text: 'Event 2', id: 2 },\r\n    { start_date: '2020-06-12 12:00', end_date: '2018-06-12 14:00', text: 'dblclick me!', id: 3 }\r\n];\r\n\r\nexport class SchedulerClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.child = React.createRef();\r\n      }\r\n    state = {\r\n\r\n        events: [],\r\n\r\n        formField: {\r\n            search: \"\",\r\n            menuOption: \"\",\r\n            menuId: \"\",\r\n            appointmentDate: new Date()\r\n        },\r\n        list: [],\r\n        filterDate: new Date(),\r\n        filterType: 'day',\r\n        selectedId: \"\",\r\n        menuOption: [\r\n            { lable: \"Name\", value: \"name\" }\r\n        ],\r\n        dayWeekMonth: \"day\"\r\n    }\r\n\r\n    componentWillMount = async() => {\r\n        this.validator = new SimpleReactValidator({\r\n            element: message => <span className=\"error-message text-danger validNo fs14\">{message}</span>,\r\n            autoForceUpdate: this,\r\n        });\r\n        let { brachList, appointment, formField, filterDate } = this.state;\r\n        this.props.getCommonApi(`treatment/Outlet/`).then((key) => {\r\n            let { status, data } = key;\r\n            if (status === 200) {\r\n                for (let value of data) {\r\n                    // brachList.push({ value: value.id, label: value.itemsite_desc })\r\n                }\r\n                this.setState({ brachList })\r\n                // console.log(brachList, \"jhksdfkjsdhfks\")\r\n            }\r\n        })\r\n        this.getAvailability()\r\n        if(this.props.selectedDate){\r\n            await this.setState({\r\n                filterDate: this.props.selectedDate\r\n            })\r\n        }\r\n        this.getAppointment();\r\n    }\r\n\r\n    getAvailability = () => {\r\n        let { filterDate } = this.state;\r\n        this.setState({ list: [] })\r\n        this.props.getCommonApi(`staffsavailable/?Appt_date=${dateFormat(filterDate, \"yyyy-mm-dd\")}`).then((key) => {\r\n            let { status, data } = key;\r\n            if (status === 200) {\r\n                // for (let value of data) {\r\n                //     staffList.push({ value: value.id, label: value.emp_name })\r\n                // }\r\n                this.setState({ list: data })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAppointmentOpen = (id, e) => {\r\n        console.log(e, id, \"hgjsydfisuyfsdfm ==== handleAppointmentOpen\");\r\n    }\r\n\r\n    handleEmptyEvent = async (date, e) => {\r\n        let { customerDetail } = this.props;\r\n        let { formField } = this.state;\r\n        // if (this.validator.allValid()) {\r\n        let time = new Date(date)\r\n        formField['time'] = time.getHours() > 9 ? (time.getHours() + \":00\") : (\"0\" + time.getHours()) + \":00\";\r\n        await this.setState({ formField });\r\n        console.log(date, e, \"hgjsydfisuyfsdfm ==== handleEmptyEvent\", time.getHours);\r\n        await this.props.updateForm('basicApptDetail', formField);\r\n        history.push(`/admin/appointment/create`)\r\n        // console.log(date, e, \"hgjsydfisuyfsdfm ====\");\r\n        // } else {\r\n        //     this.validator.showMessages();\r\n        // }\r\n\r\n    }\r\n\r\n    getAppointment = () => {\r\n        let { brachList, events, formField, filterType, filterDate } = this.state;\r\n        this.props.getCommonApi(`appointmentcalender/?date=${dateFormat(filterDate, \"yyyy-mm-dd\")}&check=${filterType}`).then(async (key) => {\r\n            let { status, data } = key;\r\n            events = [];\r\n            if (status === 200) {\r\n                await this.setState({ events: null })\r\n                events = data;\r\n                await this.setState({ events })\r\n                // console.log(events, \"jhksdfkjsdhfks\", key)\r\n            }\r\n        })\r\n    }\r\n    handleChangeFilter = async (prevMode, prevDate, newMode, newDate) => {\r\n\r\n        let { filterDate, filterType } = this.state;\r\n        filterDate = newDate;\r\n        filterType = newMode;\r\n        await this.setState({\r\n            filterDate,\r\n            filterType\r\n        })\r\n        this.getAvailability();\r\n        this.getAppointment()\r\n    }\r\n\r\n    handleChange = async ({ target: { value, name } }) => {\r\n        let { formField } = this.state;\r\n        formField[name] = value;\r\n        await this.setState({\r\n            formField,\r\n        });\r\n        if (name === \"branchId\") {\r\n            this.getAvailability();\r\n            this.getAppointment();\r\n        }\r\n        // console.log(formField, \"afasfasdfdfasd\")\r\n        this.props.updateForm('basicApptDetail', formField);\r\n    };\r\n\r\n    handleDelete = async (id, event) => {\r\n        let { selectedId } = this.state;\r\n        console.log(id, \"===afasfasdfdfasd=====\", selectedId)\r\n        if (id !== selectedId) {\r\n            await this.setState({\r\n                selectedId: id\r\n            })\r\n            await this.props.commonDeleteApi(`appointment/${id}/`).then((res) => {\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleDatePick = async (name, value) => {\r\n        let { filterDate } = this.state;\r\n        filterDate = value;\r\n        await this.setState({\r\n            filterDate,\r\n        });\r\n        this.props.handleFilterChange(value)\r\n        this.child.handleAppointment(value);\r\n        this.getAppointment();\r\n    };\r\n\r\n    openDetail = (id) => {\r\n        history.push(`/admin/appointment/${id}/detail`)\r\n    }\r\n\r\n    handleChangeView = (data) => {\r\n        let { dayWeekMonth } = this.state;\r\n        dayWeekMonth = data;\r\n        this.setState({\r\n            dayWeekMonth\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { appointment, brachList, branchId, formField, list, events, filterType, menuOption, dayWeekMonth, filterDate } = this.state;\r\n        let { search, menuId, appointmentDate } = formField;\r\n        return (\r\n            <div className=\"row define-height px-3\">\r\n                <div className=\"col-4 day-week-month filter-date d-flex pl-2 \">\r\n                <div className=\"input-group py-3\">\r\n                        <NormalDateTime\r\n                            onChange={this.handleDatePick}\r\n                            inputcol=\"p-0 inTime\"\r\n                            value={filterDate ? (new Date(filterDate)): new Date()}\r\n                            name=\"cust_dob\"\r\n                            className=\"dob-pick\"\r\n                            showYearDropdown={true}\r\n                            dateFormat=\"MM/dd/yyyy\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-8 day-week-month d-flex pl-2 \">\r\n                    <div onClick={this.props.handleBack} className={`menu my-3 ${dayWeekMonth === 'day' ? \"active\" : \"\"}`}>Back</div>\r\n                    {/* <div onClick={() => this.handleChangeView('week')} className={`menu ${dayWeekMonth === 'week' ? \"active\" : \"\"}`}>Week</div>\r\n                    <div onClick={() => this.handleChangeView('month')} className={`menu ${dayWeekMonth === 'month' ? \"active\" : \"\"}`}>Month</div> */}\r\n                </div>\r\n                    <Scheduler data={events} filterDate={filterDate} onRef={ref => (this.child = ref)}></Scheduler>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    customerDetail: state.appointment.customerDetail,\r\n    customerList: state.common.customerList,\r\n    multipleCustomerForm: state.appointment.multipleCustomerForm\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        getCustomer,\r\n        getCommonApi,\r\n        updateForm,\r\n        commonDeleteApi\r\n    }, dispatch)\r\n}\r\n\r\nexport const Calander = connect(mapStateToProps, mapDispatchToProps)(SchedulerClass)"]},"metadata":{},"sourceType":"module"}