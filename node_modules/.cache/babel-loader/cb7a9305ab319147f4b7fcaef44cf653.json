{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\pages\\\\Auth\\\\Login.js\";\nimport React, { Component } from 'react';\nimport { NormalInput, NormalCheckbox, NormalButton, NormalSelect } from 'component/common';\nimport Cookies from 'universal-cookie';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport SimpleReactValidator from 'simple-react-validator';\nimport { login, getLoginSaloon } from 'redux/actions/auth';\nimport { history } from 'helpers/index';\nimport 'assets/scss/pages/login.scss';\nimport { Link } from 'react-router-dom';\nconst cookies = new Cookies();\nexport class LoginClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formFields: {\n        salon: \"\",\n        username: '',\n        password: ''\n      },\n      rememberme: '',\n      passwordVisible: false,\n      salonList: []\n    };\n\n    this.handleChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.validator.allValid()) {\n        let {\n          formFields,\n          rememberme\n        } = this.state;\n        this.props.login(formFields).then(res => {\n          let {\n            status,\n            data\n          } = res;\n\n          if (status === 200) {\n            history.push('/admin/dashboard');\n\n            if (rememberme) {\n              let date = new Date();\n              date.setTime(date.getTime() + 48 * 60 * 60 * 1000);\n              let dateString = date.toGMTString();\n              cookies.set('emailId', formFields.emailId, [{\n                path: '/'\n              }, {\n                expires: dateString\n              }]);\n              cookies.set('password', formFields.password, [{\n                path: '/'\n              }, {\n                expires: dateString\n              }]);\n            }\n          }\n        });\n      } else {\n        this.validator.showMessages();\n      }\n    };\n\n    this.toggle = key => {\n      this.setState(prevState => ({\n        [key]: !prevState[key]\n      }));\n    };\n  }\n\n  componentWillMount() {\n    this.validator = new SimpleReactValidator({\n      // validators: {\n      //   password: {\n      //     message: 'The :attribute must be a valid format.',\n      //     rule: (val, params, validator) => {\n      //       return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\n      //     },\n      //     messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\n      //     required: true\n      //   }\n      // },\n      element: message => /*#__PURE__*/React.createElement(\"span\", {\n        className: \"error-message font-md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 27\n        }\n      }, message),\n      autoForceUpdate: this\n    });\n    let {\n      salonList\n    } = this.state;\n    this.props.getLoginSaloon().then(res => {\n      for (let key of res.data) {\n        salonList.push({\n          value: key.id,\n          label: key.itemsite_desc\n        });\n      }\n\n      this.setState({\n        salonList\n      });\n    });\n  }\n\n  render() {\n    let {\n      formFields,\n      passwordVisible,\n      rememberme,\n      salonList\n    } = this.state;\n    let {\n      username,\n      password,\n      salon\n    } = formFields;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-container h-100 py-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-left login-heading mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Sign in to access BeauteSoft\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-4 pb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalSelect // placeholder=\"Enter here\"\n    , {\n      options: salonList,\n      value: salon,\n      name: \"salon\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    })), this.validator.message('salon', salon, 'required|string')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-4 pb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      placeholder: \"Username\",\n      value: username,\n      name: \"username\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    })), this.validator.message('Username', username, 'required|string')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-4 pb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      type: passwordVisible ? 'text' : 'password',\n      placeholder: \"Password\",\n      value: password,\n      name: \"password\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-group-addon right fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.toggle('passwordVisible'),\n      className: `icon-${passwordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }))), this.validator.message('Password', password, 'required')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between align-items-center mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalCheckbox, {\n      value: \"\",\n      label: \"Keep me signed in\",\n      name: \"rememberme\",\n      checked: rememberme,\n      onChange: () => this.toggle('rememberme'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Link, {\n      className: \"d-flex align-items-center ml-2\",\n      to: \"/auth/forgotPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fs-13 text-right tc-primary link-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"Forgot Password\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group mb-0 p-0 d-flex justify-content-center col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      buttonClass: \"w-100\",\n      onClick: this.handleSubmit,\n      id: \"loginBtn\",\n      label: \"LOGIN\",\n      mainbg: true,\n      className: \"mr-2 fs-14 col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    login,\n    getLoginSaloon\n  }, dispatch);\n};\n\nlet component = LoginClass;\nexport const Login = connect(null, mapDispatchToProps)(component);","map":{"version":3,"sources":["E:/newfrontend/webfe/src/pages/Auth/Login.js"],"names":["React","Component","NormalInput","NormalCheckbox","NormalButton","NormalSelect","Cookies","connect","bindActionCreators","SimpleReactValidator","login","getLoginSaloon","history","Link","cookies","LoginClass","state","formFields","salon","username","password","rememberme","passwordVisible","salonList","handleChange","target","value","name","Object","assign","setState","handleSubmit","event","preventDefault","validator","allValid","props","then","res","status","data","push","date","Date","setTime","getTime","dateString","toGMTString","set","emailId","path","expires","showMessages","toggle","key","prevState","componentWillMount","element","message","autoForceUpdate","id","label","itemsite_desc","render","mapDispatchToProps","dispatch","component","Login"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { NormalInput, NormalCheckbox, NormalButton, NormalSelect } from 'component/common';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport { login, getLoginSaloon } from 'redux/actions/auth';\r\nimport { history } from 'helpers/index';\r\nimport 'assets/scss/pages/login.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport class LoginClass extends Component {\r\n  state = {\r\n    formFields: {\r\n      salon: \"\",\r\n      username: '',\r\n      password: ''\r\n    },\r\n    rememberme: '',\r\n    passwordVisible: false,\r\n    salonList: []\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.validator = new SimpleReactValidator({\r\n      // validators: {\r\n      //   password: {\r\n      //     message: 'The :attribute must be a valid format.',\r\n      //     rule: (val, params, validator) => {\r\n      //       return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\r\n      //     },\r\n      //     messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\r\n      //     required: true\r\n      //   }\r\n      // },\r\n      element: message => <span className=\"error-message font-md\">{message}</span>,\r\n      autoForceUpdate: this,\r\n    });\r\n    let { salonList } = this.state;\r\n    this.props.getLoginSaloon().then((res) => {\r\n      for (let key of res.data) {\r\n        salonList.push({ value: key.id, label: key.itemsite_desc })\r\n      }\r\n      this.setState({ salonList })\r\n    })\r\n  }\r\n\r\n  handleChange = ({ target: { value, name } }) => {\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n\r\n    this.setState({\r\n      formFields,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.validator.allValid()) {\r\n      let { formFields, rememberme } = this.state;\r\n\r\n      this.props.login(formFields).then((res) => {\r\n        let { status, data } = res;\r\n        if (status === 200) {\r\n          history.push('/admin/dashboard');\r\n          if (rememberme) {\r\n            let date = new Date();\r\n            date.setTime(date.getTime() + 48 * 60 * 60 * 1000);\r\n            let dateString = date.toGMTString();\r\n            cookies.set('emailId', formFields.emailId, [{ path: '/' }, { expires: dateString }]);\r\n            cookies.set('password', formFields.password, [{ path: '/' }, { expires: dateString }]);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      this.validator.showMessages();\r\n    }\r\n  };\r\n\r\n  toggle = key => {\r\n    this.setState(prevState => ({\r\n      [key]: !prevState[key],\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let { formFields, passwordVisible, rememberme, salonList } = this.state;\r\n\r\n    let { username, password, salon } = formFields;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"login-container h-100 py-5\">\r\n          <h1 className=\"text-left login-heading mb-5\">Sign in to access BeauteSoft</h1>\r\n          <div className=\"form-group mb-4 pb-3\">\r\n            <div className=\"input-group\">\r\n              <NormalSelect\r\n                // placeholder=\"Enter here\"\r\n                options={salonList}\r\n                value={salon}\r\n                name=\"salon\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            {this.validator.message('salon', salon, 'required|string')}\r\n          </div>\r\n          <div className=\"form-group mb-4 pb-3\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                placeholder=\"Username\"\r\n                value={username}\r\n                name=\"username\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            {this.validator.message('Username', username, 'required|string')}\r\n          </div>\r\n          <div className=\"form-group mb-4 pb-3\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                type={passwordVisible ? 'text' : 'password'}\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                name=\"password\"\r\n                onChange={this.handleChange}\r\n              />\r\n              <div className=\"input-group-addon right fs-14\">\r\n                <span\r\n                  onClick={() => this.toggle('passwordVisible')}\r\n                  className={`icon-${passwordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`}\r\n                ></span>\r\n              </div>\r\n            </div>\r\n            {/* {this.validator.message('Password', password, 'required|password')} */}\r\n            {this.validator.message('Password', password, 'required')}\r\n          </div>\r\n          <div className=\"d-flex justify-content-between align-items-center mb-5\">\r\n            <div className=\"checkbox\">\r\n              <NormalCheckbox\r\n                value=\"\"\r\n                label=\"Keep me signed in\"\r\n                name=\"rememberme\"\r\n                checked={rememberme}\r\n                onChange={() => this.toggle('rememberme')}\r\n              />\r\n            </div>\r\n            <Link className=\"d-flex align-items-center ml-2\" to=\"/auth/forgotPassword\">\r\n              <span className=\"fs-13 text-right tc-primary link-text\">Forgot Password</span>\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"form-group mb-0 p-0 d-flex justify-content-center col-12\">\r\n            <NormalButton buttonClass={\"w-100\"} onClick={this.handleSubmit} id=\"loginBtn\" label=\"LOGIN\" mainbg={true} className=\"mr-2 fs-14 col-12\" />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      login,\r\n      getLoginSaloon\r\n    },\r\n    dispatch,\r\n  );\r\n};\r\n\r\nlet component = LoginClass;\r\n\r\nexport const Login = connect(null, mapDispatchToProps)(component);\r\n"]},"metadata":{},"sourceType":"module"}