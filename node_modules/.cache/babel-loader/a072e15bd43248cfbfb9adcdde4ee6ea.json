{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.getCaretInBoundaries = getCaretInBoundaries;\nexports.getCaretOffset = exports.isCaretInBoundaries = exports.getCaretAfterFormat = exports.getCaretWithOffset = exports.getCaretBoundaries = void 0;\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar getCaretBoundaries = function getCaretBoundaries(text, format) {\n  if (\"string\" === typeof format) {\n    var signParts = format.split(\";\");\n\n    var sign = _number.default.getSign(text, format);\n\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    format = signParts[sign < 0 ? 1 : 0];\n\n    var mockEscapedStubs = function mockEscapedStubs(str) {\n      return str.replace(/'([^']*)'/g, function (str) {\n        return str.split(\"\").map(function () {\n          return \" \";\n        }).join(\"\").substr(2);\n      });\n    };\n\n    format = mockEscapedStubs(format);\n    var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\n    var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\n    return {\n      start: prefixStubLength,\n      end: text.length - postfixStubLength\n    };\n  } else {\n    return {\n      start: 0,\n      end: text.length\n    };\n  }\n};\n\nexports.getCaretBoundaries = getCaretBoundaries;\n\nvar _getDigitCountBeforeIndex = function _getDigitCountBeforeIndex(index, text) {\n  var decimalSeparator = _number.default.getDecimalSeparator();\n\n  var regExp = new RegExp(\"[^0-9\" + (0, _common.escapeRegExp)(decimalSeparator) + \"]\", \"g\");\n  var textBeforePosition = text.slice(0, index);\n  return textBeforePosition.replace(regExp, \"\").length;\n};\n\nvar _reverseText = function _reverseText(text) {\n  return text.split(\"\").reverse().join(\"\");\n};\n\nvar _getDigitPositionByIndex = function _getDigitPositionByIndex(digitIndex, text) {\n  if (!digitIndex) {\n    return -1;\n  }\n\n  var regExp = /[0-9]/g;\n  var counter = 1;\n  var index = null;\n  var result = regExp.exec(text);\n\n  while (result) {\n    index = result.index;\n\n    if (!digitIndex || counter >= digitIndex) {\n      return index;\n    }\n\n    counter++;\n    result = regExp.exec(text);\n  }\n\n  return null === index ? text.length : index;\n};\n\nvar _trimNonNumericCharsFromEnd = function _trimNonNumericCharsFromEnd(text) {\n  return text.replace(/[^0-9e]+$/, \"\");\n};\n\nvar getCaretWithOffset = function getCaretWithOffset(caret, offset) {\n  if (void 0 === caret.start) {\n    caret = {\n      start: caret,\n      end: caret\n    };\n  }\n\n  return {\n    start: caret.start + offset,\n    end: caret.end + offset\n  };\n};\n\nexports.getCaretWithOffset = getCaretWithOffset;\n\nvar getCaretAfterFormat = function getCaretAfterFormat(text, formatted, caret, format) {\n  caret = getCaretWithOffset(caret, 0);\n\n  var point = _number.default.getDecimalSeparator();\n\n  var isSeparatorBasedText = isSeparatorBasedString(text);\n  var pointPosition = isSeparatorBasedText ? 0 : text.indexOf(point);\n  var newPointPosition = formatted.indexOf(point);\n  var textParts = isSeparatorBasedText ? text.split(text[pointPosition]) : text.split(point);\n  var formattedParts = formatted.split(point);\n  var isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\n\n  if (isCaretOnFloat) {\n    var relativeIndex = caret.start - pointPosition - 1;\n\n    var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\n\n    var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\n    return getCaretInBoundaries(newPosition, formatted, format);\n  } else {\n    var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\n\n    var positionFromEnd = textParts[0].length - caret.start;\n\n    var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\n\n    var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\n\n    var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\n    return getCaretInBoundaries(newPositionFromBegin, formatted, format);\n  }\n};\n\nexports.getCaretAfterFormat = getCaretAfterFormat;\n\nfunction isSeparatorBasedString(text) {\n  return 1 === text.length && !!text.match(/^[,.][0-9]*$/g);\n}\n\nvar isCaretInBoundaries = function isCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretInBoundaries(caret, text, format);\n  return caret.start >= boundaries.start && caret.end <= boundaries.end;\n};\n\nexports.isCaretInBoundaries = isCaretInBoundaries;\n\nfunction getCaretInBoundaries(caret, text, format) {\n  caret = getCaretWithOffset(caret, 0);\n  var boundaries = getCaretBoundaries(text, format);\n  var adjustedCaret = {\n    start: (0, _math.fitIntoRange)(caret.start, boundaries.start, boundaries.end),\n    end: (0, _math.fitIntoRange)(caret.end, boundaries.start, boundaries.end)\n  };\n  return adjustedCaret;\n}\n\nvar getCaretOffset = function getCaretOffset(previousText, newText, format) {\n  var previousBoundaries = getCaretBoundaries(previousText, format);\n  var newBoundaries = getCaretBoundaries(newText, format);\n  return newBoundaries.start - previousBoundaries.start;\n};\n\nexports.getCaretOffset = getCaretOffset;","map":{"version":3,"sources":["F:/webfe/node_modules/devextreme/ui/number_box/number_box.caret.js"],"names":["exports","getCaretInBoundaries","getCaretOffset","isCaretInBoundaries","getCaretAfterFormat","getCaretWithOffset","getCaretBoundaries","_math","require","_common","_number","_interopRequireDefault","obj","__esModule","text","format","signParts","split","sign","default","getSign","mockEscapedStubs","str","replace","map","join","substr","prefixStubLength","exec","length","postfixStubLength","start","end","_getDigitCountBeforeIndex","index","decimalSeparator","getDecimalSeparator","regExp","RegExp","escapeRegExp","textBeforePosition","slice","_reverseText","reverse","_getDigitPositionByIndex","digitIndex","counter","result","_trimNonNumericCharsFromEnd","caret","offset","formatted","point","isSeparatorBasedText","isSeparatorBasedString","pointPosition","indexOf","newPointPosition","textParts","formattedParts","isCaretOnFloat","relativeIndex","digitsBefore","newPosition","formattedIntPart","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","match","boundaries","adjustedCaret","fitIntoRange","previousText","newText","previousBoundaries","newBoundaries"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretOffset = exports.isCaretInBoundaries = exports.getCaretAfterFormat = exports.getCaretWithOffset = exports.getCaretBoundaries = void 0;\r\nvar _math = require(\"../../core/utils/math\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar getCaretBoundaries = function(text, format) {\r\n    if (\"string\" === typeof format) {\r\n        var signParts = format.split(\";\");\r\n        var sign = _number.default.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        format = signParts[sign < 0 ? 1 : 0];\r\n        var mockEscapedStubs = function(str) {\r\n            return str.replace(/'([^']*)'/g, function(str) {\r\n                return str.split(\"\").map(function() {\r\n                    return \" \"\r\n                }).join(\"\").substr(2)\r\n            })\r\n        };\r\n        format = mockEscapedStubs(format);\r\n        var prefixStubLength = /^[^#0.,]*/.exec(format)[0].length;\r\n        var postfixStubLength = /[^#0.,]*$/.exec(format)[0].length;\r\n        return {\r\n            start: prefixStubLength,\r\n            end: text.length - postfixStubLength\r\n        }\r\n    } else {\r\n        return {\r\n            start: 0,\r\n            end: text.length\r\n        }\r\n    }\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = _number.default.getDecimalSeparator();\r\n    var regExp = new RegExp(\"[^0-9\" + (0, _common.escapeRegExp)(decimalSeparator) + \"]\", \"g\");\r\n    var textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g;\r\n    var counter = 1;\r\n    var index = null;\r\n    var result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar _trimNonNumericCharsFromEnd = function(text) {\r\n    return text.replace(/[^0-9e]+$/, \"\")\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = _number.default.getDecimalSeparator();\r\n    var isSeparatorBasedText = isSeparatorBasedString(text);\r\n    var pointPosition = isSeparatorBasedText ? 0 : text.indexOf(point);\r\n    var newPointPosition = formatted.indexOf(point);\r\n    var textParts = isSeparatorBasedText ? text.split(text[pointPosition]) : text.split(point);\r\n    var formattedParts = formatted.split(point);\r\n    var isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1;\r\n        var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);\r\n        var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);\r\n        var positionFromEnd = textParts[0].length - caret.start;\r\n        var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));\r\n        var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));\r\n        var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\n\r\nfunction isSeparatorBasedString(text) {\r\n    return 1 === text.length && !!text.match(/^[,.][0-9]*$/g)\r\n}\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\n\r\nfunction getCaretInBoundaries(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format);\r\n    var adjustedCaret = {\r\n        start: (0, _math.fitIntoRange)(caret.start, boundaries.start, boundaries.end),\r\n        end: (0, _math.fitIntoRange)(caret.end, boundaries.start, boundaries.end)\r\n    };\r\n    return adjustedCaret\r\n}\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format);\r\n    var newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretOffset = getCaretOffset;\r\n"]},"metadata":{},"sourceType":"script"}