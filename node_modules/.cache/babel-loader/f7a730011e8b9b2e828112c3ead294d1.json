{"ast":null,"code":"import { ProjectActionType } from \"redux/actions/actionType\";\nimport { project } from \"../../service/apiVariables\";\nexport const createActivity = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...project.addActivity,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //   Toast({ type: \"success\", message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const updateProject = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    project.updateProject.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...project.updateProject,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createProject = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...project.addProject,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getProject = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    project.getProject.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...project.getProject\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: ProjectActionType.getProjectListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteProject = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    project.deleteProject.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...project.deleteProject,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/project.js"],"names":["ProjectActionType","project","createActivity","body","dispatch","getState","api","Toast","Promise","resolve","reject","addActivity","then","response","message","status","data","type","catch","updateProject","id","addQuery","key","payload","createProject","addProject","getProject","getProjectListing","deleteProject"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,0BAAlC;AACA,SAASC,OAAT,QAAwB,4BAAxB;AAEA,OAAO,MAAMC,cAAc,GACzBC,IAAI,IACJ,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAArB,KAAwC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,GAAG,CAAC,EAAE,GAAGL,OAAO,CAACU,WAAb;AAA0BR,MAAAA;AAA1B,KAAD,CAAH,CACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACA,UAAI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA;AAAnB,UAA4BH,QAAhC;;AACA,UAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC,CACpC;AACA;AACD,OAHD,MAGO;AACLL,QAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA;AAAjB,SAAD,CAAN,CAAN;AACD;AACF,KAVH,EAWGI,KAXH,CAWS,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAiB;AACtBJ,MAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAN,CAAN;AACD,KAbH;AAcD,GAfM,CAAP;AAgBD,CAnBI;AAqBP,OAAO,MAAMK,aAAa,GACxB,CAACC,EAAD,EAAKjB,IAAL,KACA,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAArB,KAAwC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,OAAO,CAACkB,aAAR,CAAsBE,QAAtB,GAAiC;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,OAAO,EAAEH;AAAtB,KAAjC;AACAd,IAAAA,GAAG,CAAC,EAAE,GAAGL,OAAO,CAACkB,aAAb;AAA4BhB,MAAAA;AAA5B,KAAD,CAAH,CACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACA,UAAI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBF,QAA1B;;AACA,UAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC,CACpC;AACA;AACD,OAHD,MAGO;AACLL,QAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA;AAAjB,SAAD,CAAN,CAAN;AACD;AACF,KAVH,EAWGI,KAXH,CAWS,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAiB;AACtBJ,MAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAN,CAAN;AACD,KAbH;AAcD,GAhBM,CAAP;AAiBD,CApBI;AAsBP,OAAO,MAAMU,aAAa,GACxBrB,IAAI,IACJ,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAArB,KAAwC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,GAAG,CAAC,EAAE,GAAGL,OAAO,CAACwB,UAAb;AAAyBtB,MAAAA;AAAzB,KAAD,CAAH,CACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACA,UAAI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA;AAAnB,UAA4BH,QAAhC;;AACA,UAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC,CACpC;AACA;AACD,OAHD,MAGO;AACLL,QAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA;AAAjB,SAAD,CAAN,CAAN;AACD;AACF,KAVH,EAWGI,KAXH,CAWS,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAiB;AACtBJ,MAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAN,CAAN;AACD,KAbH;AAcD,GAfM,CAAP;AAgBD,CAnBI,C,CAqBP;;AACA,OAAO,MAAMY,UAAU,GACrBN,EAAE,IACF,CAAChB,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAArB,KAAwC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,OAAO,CAACyB,UAAR,CAAmBL,QAAnB,GAA8B;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,OAAO,EAAEH;AAAtB,KAA9B;AAEAd,IAAAA,GAAG,CAAC,EAAE,GAAGL,OAAO,CAACyB;AAAb,KAAD,CAAH,CACGd,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACA,UAAI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA;AAAnB,UAA4BH,QAAhC;;AACA,UAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCX,QAAAA,QAAQ,CAAC;AACPa,UAAAA,IAAI,EAAEjB,iBAAiB,CAAC2B,iBADjB;AAEPJ,UAAAA,OAAO,EAAEP;AAFF,SAAD,CAAR,CADoC,CAKpC;AACD,OAND,MAMO;AACLN,QAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA;AAAjB,SAAD,CAAN,CAAN;AACD;AACF,KAbH,EAcGI,KAdH,CAcS,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAiB;AACtBJ,MAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAN,CAAN;AACD,KAhBH;AAiBD,GApBM,CAAP;AAqBD,CAxBI;AA0BP,OAAO,MAAMc,aAAa,GACxB,CAACR,EAAD,EAAKjB,IAAL,KACA,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAArB,KAAwC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,OAAO,CAAC2B,aAAR,CAAsBP,QAAtB,GAAiC;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,OAAO,EAAEH;AAAtB,KAAjC;AACAd,IAAAA,GAAG,CAAC,EAAE,GAAGL,OAAO,CAAC2B,aAAb;AAA4BzB,MAAAA;AAA5B,KAAD,CAAH,CACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACA,UAAI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBF,QAA1B;;AACA,UAAIE,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC,CACpC;AACA;AACD,OAHD,MAGO;AACLL,QAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,UAAAA,IAAI,EAAE,OAAR;AAAiBH,UAAAA;AAAjB,SAAD,CAAN,CAAN;AACD;AACF,KAVH,EAWGI,KAXH,CAWS,CAAC;AAAEJ,MAAAA;AAAF,KAAD,KAAiB;AACtBJ,MAAAA,MAAM,CAACH,KAAK,CAAC;AAAEU,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAN,CAAN;AACD,KAbH;AAcD,GAhBM,CAAP;AAiBD,CApBI","sourcesContent":["import { ProjectActionType } from \"redux/actions/actionType\";\r\nimport { project } from \"../../service/apiVariables\";\r\n\r\nexport const createActivity =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...project.addActivity, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //   Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const updateProject =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      project.updateProject.addQuery = { key: \"id\", payload: id };\r\n      api({ ...project.updateProject, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createProject =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...project.addProject, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getProject =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      project.getProject.addQuery = { key: \"id\", payload: id };\r\n\r\n      api({ ...project.getProject })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: ProjectActionType.getProjectListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deleteProject =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      project.deleteProject.addQuery = { key: \"id\", payload: id };\r\n      api({ ...project.deleteProject, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}