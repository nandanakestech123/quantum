{"ast":null,"code":"import { SaloonActionType } from 'redux/actions/actionType';\nimport { saloon } from '../../service/apiVariables'; // create saloon action\n\nexport const CreateSaloon = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...saloon.addSaloon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // update saloon action\n\nexport const updateSaloon = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    saloon.updateSaloon.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...saloon.updateSaloon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // delete saloon action\n\nexport const deleteSaloon = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    saloon.deleteSaloon.addQuery = {\n      key: 'id',\n      payload: id\n    };\n    api({ ...saloon.deleteSaloon,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: 'success',\n          message\n        });\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n}; // get saloon action\n\nexport const getSaloon = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    // if(id){\n    console.log(id, \"asdasdasdasg\");\n    saloon.getSaloon.addQuery = {\n      key: 'id',\n      payload: id\n    }; // }\n\n    api({ ...saloon.getSaloon\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: SaloonActionType.getSaloonDetail,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: 'error',\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: 'error',\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["E:/newfrontend/webfe/src/redux/actions/saloon.js"],"names":["SaloonActionType","saloon","CreateSaloon","body","dispatch","getState","api","Toast","Promise","resolve","reject","addSaloon","then","response","message","status","type","catch","updateSaloon","id","addQuery","key","payload","deleteSaloon","getSaloon","console","log","data","getSaloonDetail"],"mappings":"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","sourcesContent":["import { SaloonActionType } from 'redux/actions/actionType';\r\nimport { saloon } from '../../service/apiVariables';\r\n\r\n// create saloon action\r\nexport const CreateSaloon = body => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...saloon.addSaloon, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } =  response\r\n        if(status===200){\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// update saloon action\r\nexport const updateSaloon = (id, body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    saloon.updateSaloon.addQuery = { key: 'id', payload: id };\r\n    api({ ...saloon.updateSaloon, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } =  response\r\n        if(status===200){\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// delete saloon action\r\nexport const deleteSaloon = (id, body) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    saloon.deleteSaloon.addQuery = { key: 'id', payload: id };\r\n    api({ ...saloon.deleteSaloon, body })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status } =  response\r\n        if(status===200){\r\n          // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n          Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n// get saloon action\r\nexport const getSaloon = (id) => (dispatch, getState, { api, Toast }) => {\r\n  return new Promise((resolve, reject) => {\r\n    // if(id){\r\n      console.log(id, \"asdasdasdasg\")\r\n      saloon.getSaloon.addQuery = { key: 'id', payload: id };\r\n    // }\r\n    api({ ...saloon.getSaloon })\r\n      .then((response) => {\r\n        resolve(response)\r\n        let { message, status, data } =  response\r\n        if(status===200){\r\n          dispatch({ type: SaloonActionType.getSaloonDetail, payload: data });\r\n          // Toast({ type: 'success', message })\r\n        } else {\r\n          reject(Toast({ type: 'error', message }));\r\n        }\r\n      })\r\n      .catch(({ message }) => {\r\n        reject(Toast({ type: 'error', message }));\r\n      });\r\n  });\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}