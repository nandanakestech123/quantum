{"ast":null,"code":"import _objectSpread from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{Tcm}from\"service/apiVariables\";export var getTcmApi=function getTcmApi(id){return function(dispatch,getState,_ref){var api=_ref.api,Toast=_ref.Toast;return new Promise(function(resolve,reject){Tcm.getTcm.addQuery={key:\"id\",payload:id};api(_objectSpread({},Tcm.getTcm)).then(function(response){resolve(response);}).catch(function(_ref2){var message=_ref2.message;reject(Toast({type:\"error\",message:message}));});});};};export var tcmCreateApi=function tcmCreateApi(id,body){return function(dispatch,getState,_ref3){var api=_ref3.api,Toast=_ref3.Toast;return new Promise(function(resolve,reject){Tcm.postTCM.addQuery={key:\"id\",payload:id};api(_objectSpread(_objectSpread({},Tcm.postTCM),{},{body:body})).then(function(response){resolve(response);// let message = \"success\";\n// let { error, success } = response;\n// if (success === \"1\") {\n//   //  Toast({ type: 'success', message });\n// } else {\n//   reject(Toast({ type: \"error\", error }));\n// }\n}).catch(function(_ref4){var message=_ref4.message;reject(Toast({type:\"error\",message:message}));});});};};// universal update method\nexport var tcmUpdateApi=function tcmUpdateApi(id,body){return function(dispatch,getState,_ref5){var api=_ref5.api,Toast=_ref5.Toast;return new Promise(function(resolve,reject){Tcm.updateTCM.addQuery={key:\"id\",payload:id};api(_objectSpread(_objectSpread({},Tcm.updateTCM),{},{body:body})).then(function(response){resolve(response);var message=response.message,status=response.status,success=response.success;if(success===\"1\"){//  Toast({ type: 'success', message });\n}else{reject(Toast({type:\"error\",message:message}));}}).catch(function(_ref6){var message=_ref6.message;reject(Toast({type:\"error\",message:message}));});});};};// universal update method\nexport var tcmPatchApi=function tcmPatchApi(id,body){return function(dispatch,getState,_ref7){var api=_ref7.api,Toast=_ref7.Toast;return new Promise(function(resolve,reject){Tcm.patchTcm.addQuery={key:\"id\",payload:id};api(_objectSpread(_objectSpread({},Tcm.patchTcm),{},{body:body})).then(function(response){resolve(response);var message=response.message,status=response.status;if(status===200||status===201){//  Toast({ type: 'success', message });\n}else{reject(Toast({type:\"error\",message:message}));}}).catch(function(_ref8){var message=_ref8.message;reject(Toast({type:\"error\",message:message}));});});};};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/TCM.js"],"names":["Tcm","getTcmApi","id","dispatch","getState","api","Toast","Promise","resolve","reject","getTcm","addQuery","key","payload","then","response","catch","message","type","tcmCreateApi","body","postTCM","tcmUpdateApi","updateTCM","status","success","tcmPatchApi","patchTcm"],"mappings":"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","sourcesContent":["import { Tcm } from \"service/apiVariables\";\r\n\r\nexport const getTcmApi =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.getTcm.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.getTcm })\r\n        .then(response => {\r\n          resolve(response);\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\nexport const tcmCreateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.postTCM.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.postTCM, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          // let message = \"success\";\r\n          // let { error, success } = response;\r\n          // if (success === \"1\") {\r\n          //   //  Toast({ type: 'success', message });\r\n          // } else {\r\n          //   reject(Toast({ type: \"error\", error }));\r\n          // }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const tcmUpdateApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.updateTCM.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.updateTCM, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, success } = response;\r\n          if (success === \"1\") {\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// universal update method\r\nexport const tcmPatchApi =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      Tcm.patchTcm.addQuery = { key: \"id\", payload: id };\r\n      api({ ...Tcm.patchTcm, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}