{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\nvar TABLE_POSTFIX_CLASS = \"table\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\n\nvar FocusController = _uiGrid_core.default.ViewController.inherit(function () {\n  return {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._keyboardController = this.getController(\"keyboardNavigation\");\n      this.component._optionsByReference.focusedRowKey = true;\n    },\n    optionChanged: function (args) {\n      if (\"focusedRowIndex\" === args.name) {\n        var focusedRowKey = this.option(\"focusedRowKey\");\n\n        this._focusRowByIndex(args.value);\n\n        this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\n\n        args.handled = true;\n      } else {\n        if (\"focusedRowKey\" === args.name) {\n          var focusedRowIndex = this.option(\"focusedRowIndex\");\n\n          this._focusRowByKey(args.value);\n\n          this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\n\n          args.handled = true;\n        } else {\n          if (\"focusedColumnIndex\" === args.name) {\n            args.handled = true;\n          } else {\n            if (\"focusedRowEnabled\" === args.name) {\n              args.handled = true;\n            } else {\n              if (\"autoNavigateToFocusedRow\" === args.name) {\n                args.handled = true;\n              } else {\n                this.callBase(args);\n              }\n            }\n          }\n        }\n      }\n    },\n    _triggerFocusedRowChangedIfNeed: function (focusedRowKey, focusedRowIndex) {\n      var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\n\n      if (focusedRowIndex === focusedRowIndexByKey) {\n        var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n        if (rowIndex >= 0) {\n          var $rowElement = (0, _renderer.default)(this.getView(\"rowsView\").getRowElement(rowIndex));\n\n          this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex);\n        }\n      }\n    },\n    isAutoNavigateToFocusedRow: function () {\n      return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n    },\n    _focusRowByIndex: function (index) {\n      if (!this.option(\"focusedRowEnabled\")) {\n        return;\n      }\n\n      index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n\n      if (index < 0) {\n        if (this.isAutoNavigateToFocusedRow()) {\n          this._resetFocusedRow();\n        }\n      } else {\n        this._focusRowByIndexCore(index);\n      }\n    },\n    _focusRowByIndexCore: function (index) {\n      var _this = this;\n\n      var dataController = this.getController(\"data\");\n      var pageSize = dataController.pageSize();\n\n      var setKeyByIndex = function () {\n        if (_this._isValidFocusedRowIndex(index)) {\n          var visibleIndex = index - dataController.getRowIndexOffset();\n\n          var lastItemIndex = dataController._getLastItemIndex();\n\n          var rowIndex = Math.min(visibleIndex, lastItemIndex);\n          var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n          if ((0, _type.isDefined)(focusedRowKey) && !_this.isRowFocused(focusedRowKey)) {\n            _this.option(\"focusedRowKey\", focusedRowKey);\n          }\n        }\n      };\n\n      if (pageSize >= 0) {\n        if (!this._isLocalRowIndex(index)) {\n          var pageIndex = Math.floor(index / dataController.pageSize());\n          (0, _deferred.when)(dataController.pageIndex(pageIndex), dataController.waitReady()).done(function () {\n            setKeyByIndex();\n          });\n        } else {\n          setKeyByIndex();\n        }\n      }\n    },\n    _isLocalRowIndex: function (index) {\n      var dataController = this.getController(\"data\");\n\n      var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n\n      if (isVirtualScrolling) {\n        var pageIndex = Math.floor(index / dataController.pageSize());\n        var virtualItems = dataController.virtualItemsCount();\n        var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n        var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\n        var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n        return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n      }\n\n      return true;\n    },\n    _setFocusedRowKeyByIndex: function (index) {\n      var dataController = this.getController(\"data\");\n\n      if (this._isValidFocusedRowIndex(index)) {\n        var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\n        var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n        if ((0, _type.isDefined)(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    },\n    _focusRowByKey: function (key) {\n      if (!(0, _type.isDefined)(key)) {\n        this._resetFocusedRow();\n      } else {\n        this._navigateToRow(key, true);\n      }\n    },\n    _resetFocusedRow: function () {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var isFocusedRowKeyDefined = (0, _type.isDefined)(focusedRowKey);\n\n      if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\n        return;\n      }\n\n      var keyboardController = this.getController(\"keyboardNavigation\");\n\n      if (isFocusedRowKeyDefined) {\n        this.option(\"focusedRowKey\", void 0);\n      }\n\n      keyboardController.setFocusedRowIndex(-1);\n      this.option(\"focusedRowIndex\", -1);\n      this.getController(\"data\").updateItems({\n        changeType: \"updateFocusedRow\",\n        focusedRowKey: void 0\n      });\n\n      keyboardController._fireFocusedRowChanged(void 0, -1);\n    },\n    _isValidFocusedRowIndex: function (rowIndex) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.getVisibleRows()[rowIndex];\n      return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n    },\n    publicMethods: function () {\n      return [\"navigateToRow\", \"isRowFocused\"];\n    },\n    navigateToRow: function (key) {\n      if (!this.isAutoNavigateToFocusedRow()) {\n        this.option(\"focusedRowIndex\", -1);\n      }\n\n      this._navigateToRow(key);\n    },\n    _navigateToRow: function (key, needFocusRow) {\n      var that = this;\n      var dataController = that.getController(\"data\");\n      var isAutoNavigate = that.isAutoNavigateToFocusedRow();\n      var d = new _deferred.Deferred();\n\n      if (void 0 === key || !dataController.dataSource()) {\n        return d.reject().promise();\n      }\n\n      var rowIndexByKey = that.getFocusedRowIndexByKey(key);\n      var isPaginate = dataController.getDataSource().paginate();\n\n      if (!isAutoNavigate && needFocusRow || !isPaginate || rowIndexByKey >= 0) {\n        that._navigateTo(key, d, needFocusRow);\n      } else {\n        dataController.getPageIndexByKey(key).done(function (pageIndex) {\n          if (pageIndex < 0) {\n            d.resolve(-1);\n            return;\n          }\n\n          if (pageIndex === dataController.pageIndex()) {\n            dataController.reload().done(function () {\n              if (that.isRowFocused(key)) {\n                d.resolve(that.getFocusedRowIndexByKey(key));\n              } else {\n                that._navigateTo(key, d, needFocusRow);\n              }\n            }).fail(d.reject);\n          } else {\n            dataController.pageIndex(pageIndex).done(function () {\n              that._navigateTo(key, d, needFocusRow);\n            }).fail(d.reject);\n          }\n        }).fail(d.reject);\n      }\n\n      return d.promise();\n    },\n    _navigateTo: function (key, deferred, needFocusRow) {\n      var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\n      var isVirtualRowRenderingMode = \"virtual\" === this.option(\"scrolling.rowRenderingMode\");\n      var isAutoNavigate = this.isAutoNavigateToFocusedRow();\n\n      if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n        this._navigateToVirtualRow(key, deferred, needFocusRow);\n      } else {\n        this._navigateToVisibleRow(key, deferred, needFocusRow);\n      }\n    },\n    _navigateToVisibleRow: function (key, deferred, needFocusRow) {\n      if (needFocusRow) {\n        this._triggerUpdateFocusedRow(key, deferred);\n      } else {\n        this.getView(\"rowsView\").scrollToRowElement(key);\n      }\n    },\n    _navigateToVirtualRow: function (key, deferred, needFocusRow) {\n      var that = this;\n      var dataController = this.getController(\"data\");\n      var rowsScrollController = dataController._rowsScrollController;\n\n      var rowIndex = _uiGrid_core2.default.getIndexByKey(key, dataController.items(true));\n\n      var scrollable = that.getView(\"rowsView\").getScrollable();\n\n      if (rowsScrollController && scrollable && rowIndex >= 0) {\n        var focusedRowIndex = rowIndex + dataController.getRowIndexOffset() - dataController.getRowIndexDelta();\n        var offset = rowsScrollController.getItemOffset(focusedRowIndex);\n\n        if (needFocusRow) {\n          var triggerUpdateFocusedRow = function triggerUpdateFocusedRow() {\n            that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n\n            that._triggerUpdateFocusedRow(key, deferred);\n          };\n\n          that.component.on(\"contentReady\", triggerUpdateFocusedRow);\n        }\n\n        scrollable.scrollTo({\n          y: offset\n        });\n      }\n    },\n    _triggerUpdateFocusedRow: function (key, deferred) {\n      var dataController = this.getController(\"data\");\n      var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n\n      if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n        if (this.option(\"focusedRowEnabled\")) {\n          dataController.updateItems({\n            changeType: \"updateFocusedRow\",\n            focusedRowKey: key\n          });\n        } else {\n          this.getView(\"rowsView\").scrollToRowElement(key);\n        }\n\n        this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n        deferred && deferred.resolve(focusedRowIndex);\n      } else {\n        deferred && deferred.resolve(-1);\n      }\n    },\n    getFocusedRowIndexByKey: function (key) {\n      var dataController = this.getController(\"data\");\n      var rowIndex = dataController.getRowIndexByKey(key);\n      return rowIndex >= 0 ? rowIndex + dataController.getRowIndexOffset() : -1;\n    },\n    _focusRowByKeyOrIndex: function () {\n      var _this2 = this;\n\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      var dataController = this.getController(\"data\");\n\n      if ((0, _type.isDefined)(focusedRowKey)) {\n        var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n\n        if (visibleRowIndex >= 0) {\n          if (keyboardController._isVirtualScrolling()) {\n            currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n          }\n\n          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n\n          this._triggerUpdateFocusedRow(focusedRowKey);\n        } else {\n          this._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n              _this2._focusRowByIndex();\n            }\n          });\n        }\n      } else {\n        if (currentFocusedRowIndex >= 0) {\n          this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n        }\n      }\n    },\n    isRowFocused: function (key) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n\n      if ((0, _type.isDefined)(focusedRowKey)) {\n        return (0, _common.equalByValue)(key, this.option(\"focusedRowKey\"));\n      }\n    },\n    updateFocusedRow: function (change) {\n      var that = this;\n\n      var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\n\n      var rowsView = that.getView(\"rowsView\");\n      var $tableElement;\n      (0, _iterator.each)(rowsView.getTableElements(), function (index, element) {\n        var _change$items;\n\n        var isMainTable = 0 === index;\n        $tableElement = (0, _renderer.default)(element);\n\n        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n\n        that._prepareFocusedRow({\n          changedItem: null === change || void 0 === change ? void 0 : null === (_change$items = change.items) || void 0 === _change$items ? void 0 : _change$items[focusedRowIndex],\n          $tableElement: $tableElement,\n          focusedRowIndex: focusedRowIndex,\n          isMainTable: isMainTable\n        });\n      });\n    },\n    _clearPreviousFocusedRow: function ($tableElement, focusedRowIndex) {\n      var _this3 = this;\n\n      var isNotMasterDetailFocusedRow = function (_, focusedRow) {\n        var $focusedRowTable = (0, _renderer.default)(focusedRow).closest(\".\".concat(_this3.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\n        return $tableElement.is($focusedRowTable);\n      };\n\n      var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter(isNotMasterDetailFocusedRow);\n      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n\n      if (0 !== focusedRowIndex) {\n        var $firstRow = (0, _renderer.default)(this.getView(\"rowsView\").getRowElement(0));\n        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n    },\n    _prepareFocusedRow: function (options) {\n      var $row;\n      var changedItem = options.changedItem;\n\n      if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n        var focusedRowIndex = options.focusedRowIndex;\n        var $tableElement = options.$tableElement;\n        var isMainTable = options.isMainTable;\n        var tabIndex = this.option(\"tabindex\") || 0;\n        var rowsView = this.getView(\"rowsView\");\n        $row = (0, _renderer.default)(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n        $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n\n        if (isMainTable) {\n          rowsView.scrollToElementVertically($row);\n        }\n      }\n\n      return $row;\n    }\n  };\n}());\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      focusedRowEnabled: false,\n      autoNavigateToFocusedRow: true,\n      focusedRowKey: void 0,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function () {\n          var rowIndex = this.option(\"focusedRowIndex\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          this.createAction(\"onFocusedRowChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedRowChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n\n          if ((0, _type.isDefined)(rowIndex)) {\n            this._focusedCellPosition.rowIndex = this.option(\"focusedRowIndex\");\n          }\n\n          if ((0, _type.isDefined)(columnIndex)) {\n            this._focusedCellPosition.columnIndex = this.option(\"focusedColumnIndex\");\n          }\n        },\n        setFocusedRowIndex: function (rowIndex) {\n          var dataController = this.getController(\"data\");\n          this.callBase(rowIndex);\n          var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\n          var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\n\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function (columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function (eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function ($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\");\n          var prevColumnIndex = this.option(\"focusedColumnIndex\");\n          var position = this.callBase($cell, direction);\n\n          if (position && position.columnIndex >= 0) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function ($element, hideBorder) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n          var editingController = this.getController(\"editing\");\n\n          var isRowElement = \"row\" === keyboardController._getElementType($element);\n\n          var $cell;\n\n          if (!focusedRowEnabled || !keyboardController.isRowFocusType() || editingController.isEditing()) {\n            this.callBase($element, hideBorder);\n          } else {\n            if (focusedRowEnabled) {\n              if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n                $cell = keyboardController.getFirstValidCellInRow($element);\n                keyboardController.focus($cell);\n              }\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function (_, sortByKey) {\n          var _this4 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var dataSource = dataController._dataSource;\n          var store = dataController.store();\n          var key = store && store.key();\n          var remoteOperations = dataSource && dataSource.remoteOperations() || {};\n          var isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n            return !remoteOperations[operationName];\n          });\n\n          if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(function (key) {\n              return !_this4.columnOption(key, \"sortOrder\");\n            });\n\n            if (notSortedKeys.length) {\n              result = result || [];\n\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(function (notSortedKey) {\n                  return result.push({\n                    selector: notSortedKey,\n                    desc: false\n                  });\n                });\n              }\n            }\n          }\n\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function (change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function (e) {\n          this.callBase(e);\n\n          if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n\n            if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n              this._updatePageIndexes();\n\n              this.processUpdateFocusedRow(e);\n            } else {\n              if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n                this._updatePageIndexes();\n              }\n            }\n          }\n        },\n        _updatePageIndexes: function () {\n          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n          this._lastRenderingPageIndex = renderingPageIndex;\n          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n        },\n        isPagingByRendering: function () {\n          return this._isPagingByRendering;\n        },\n        processUpdateFocusedRow: function (e) {\n          var operationTypes = e.operationTypes || {};\n          var focusController = this.getController(\"focus\");\n          var reload = operationTypes.reload,\n              fullReload = operationTypes.fullReload;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isVirtualScrolling = keyboardController._isVirtualScrolling();\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\n\n          if (reload && !fullReload && (0, _type.isDefined)(focusedRowKey)) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex();\n              }\n            });\n          } else {\n            if (operationTypes.paging && !isVirtualScrolling) {\n              if (isAutoNavigate) {\n                var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n                var isValidRowIndexByKey = rowIndexByKey >= 0;\n                var focusedRowIndex = this.option(\"focusedRowIndex\");\n                var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\n\n                if (needFocusRowByIndex) {\n                  focusController._focusRowByIndex();\n                }\n              } else {\n                if (this.getRowIndexByKey(focusedRowKey) < 0) {\n                  this.option(\"focusedRowIndex\", -1);\n                }\n              }\n            } else {\n              if (operationTypes.fullReload) {\n                focusController._focusRowByKeyOrIndex();\n              }\n            }\n          }\n        },\n        getPageIndexByKey: function (key) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function (key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function (key, groupFilter, useGroup) {\n          var that = this;\n          var deferred = new _deferred.Deferred();\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key);\n\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function (filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return _uiGrid_core2.default.combineFilters([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function (selector, value, sortInfo) {\n          var result;\n\n          if (false === value) {\n            result = [selector, \"=\", sortInfo.desc ? true : null];\n          } else {\n            if (true === value ? !sortInfo.desc : sortInfo.desc) {\n              result = [selector, \"<>\", value];\n            }\n          }\n\n          return result;\n        },\n        _generateOperationFilterByKey: function (key, rowData, useGroup) {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key, \"<\");\n\n          var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\n\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\n\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var selector = sortInfo.selector;\n              var getter;\n\n              if (\"function\" === typeof selector) {\n                getter = selector;\n              } else {\n                getter = that._columnsController.columnOption(selector, \"selector\");\n              }\n\n              var value = getter ? getter(rowData) : rowData[selector];\n              filter = [[selector, \"=\", value], \"and\", filter];\n\n              if (null === value || (0, _type.isBoolean)(value)) {\n                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\n\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                var filterOperation = sortInfo.desc ? \">\" : \"<\";\n                var sortFilter = [selector, filterOperation, value];\n\n                if (!sortInfo.desc) {\n                  sortFilter = [sortFilter, \"or\", [selector, \"=\", null]];\n                }\n\n                filter = [sortFilter, \"or\", filter];\n              }\n            });\n          }\n\n          return filter;\n        },\n        _generateFilterByKey: function (key, operation) {\n          var dataSourceKey = this._dataSource.key();\n\n          var filter = [];\n\n          if (!operation) {\n            operation = \"=\";\n          }\n\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              var keyPart = key[dataSourceKey[i]];\n\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n\n          return filter;\n        },\n        _getLastItemIndex: function () {\n          return this.items(true).length - 1;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n\n          return $row;\n        },\n        _checkRowKeys: function (options) {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function (change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function ($cellElements, preventScroll) {\n          if (this.option(\"focusedRowEnabled\")) {\n            this._setFocusedRowElementTabIndex(preventScroll);\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function (preventScroll) {\n          var _this5 = this;\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var tabIndex = this.option(\"tabIndex\") || 0;\n          var dataController = this._dataController;\n          var columnsController = this._columnsController;\n          var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\n          var columnIndex = this.option(\"focusedColumnIndex\");\n\n          var $row = this._findRowElementForTabIndex();\n\n          if (!(0, _type.isDefined)(this._scrollToFocusOnResize)) {\n            this._scrollToFocusOnResize = function () {\n              _this5.scrollToElementVertically(_this5._findRowElementForTabIndex());\n\n              _this5.resizeCompleted.remove(_this5._scrollToFocusOnResize);\n            };\n          }\n\n          $row.attr(\"tabIndex\", tabIndex);\n\n          if (rowIndex >= 0 && !preventScroll) {\n            if (columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            rowIndex += dataController.getRowIndexOffset();\n            columnIndex += columnsController.getColumnIndexOffset();\n            this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n\n            if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\n              var dataSource = dataController.dataSource();\n              var operationTypes = dataSource && dataSource.operationTypes();\n\n              if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\n                this.resizeCompleted.remove(this._scrollToFocusOnResize);\n                this.resizeCompleted.add(this._scrollToFocusOnResize);\n              }\n            }\n          }\n        },\n        _findRowElementForTabIndex: function () {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n\n          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n          return (0, _renderer.default)(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n        },\n        scrollToRowElement: function (key) {\n          var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\n          var $row = (0, _renderer.default)(this.getRow(rowIndex));\n          this.scrollToElementVertically($row);\n        },\n        scrollToElementVertically: function ($row) {\n          var scrollable = this.getScrollable();\n\n          if (scrollable) {\n            var position = scrollable.getScrollElementPosition($row, \"vertical\");\n            scrollable.scrollTo({\n              top: position\n            });\n          }\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/grid_core/ui.grid_core.focus.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_uiGrid_core","_iterator","_uiGrid_core2","_common","_type","_deferred","obj","__esModule","ROW_FOCUSED_CLASS","FOCUSED_ROW_SELECTOR","TABLE_POSTFIX_CLASS","CELL_FOCUS_DISABLED_CLASS","FocusController","ViewController","inherit","init","_dataController","getController","_keyboardController","component","_optionsByReference","focusedRowKey","optionChanged","args","name","option","_focusRowByIndex","value","_triggerFocusedRowChangedIfNeed","handled","focusedRowIndex","_focusRowByKey","callBase","focusedRowIndexByKey","getFocusedRowIndexByKey","rowIndex","getRowIndexByKey","$rowElement","getView","getRowElement","_fireFocusedRowChanged","isAutoNavigateToFocusedRow","index","_resetFocusedRow","_focusRowByIndexCore","_this","dataController","pageSize","setKeyByIndex","_isValidFocusedRowIndex","visibleIndex","getRowIndexOffset","lastItemIndex","_getLastItemIndex","Math","min","getKeyByRowIndex","isDefined","isRowFocused","_isLocalRowIndex","pageIndex","floor","when","waitReady","done","isVirtualScrolling","_isVirtualScrolling","virtualItems","virtualItemsCount","virtualItemsBegin","begin","visibleRowsCount","getVisibleRows","length","visiblePagesCount","ceil","_setFocusedRowKeyByIndex","items","key","_navigateToRow","isFocusedRowKeyDefined","keyboardController","setFocusedRowIndex","updateItems","changeType","row","rowType","publicMethods","navigateToRow","needFocusRow","that","isAutoNavigate","d","Deferred","dataSource","reject","promise","rowIndexByKey","isPaginate","getDataSource","paginate","_navigateTo","getPageIndexByKey","resolve","reload","fail","deferred","visibleRowIndex","isVirtualRowRenderingMode","_navigateToVirtualRow","_navigateToVisibleRow","_triggerUpdateFocusedRow","scrollToRowElement","rowsScrollController","_rowsScrollController","getIndexByKey","scrollable","getScrollable","getRowIndexDelta","offset","getItemOffset","triggerUpdateFocusedRow","off","on","scrollTo","y","_focusRowByKeyOrIndex","_this2","currentFocusedRowIndex","equalByValue","updateFocusedRow","change","rowsView","$tableElement","each","getTableElements","element","_change$items","isMainTable","_clearPreviousFocusedRow","_prepareFocusedRow","changedItem","_this3","isNotMasterDetailFocusedRow","_","focusedRow","$focusedRowTable","closest","concat","addWidgetPrefix","is","$prevRowFocusedElement","find","filter","removeClass","removeAttr","children","$firstRow","options","$row","tabIndex","_getRowElements","eq","addClass","attr","scrollToElementVertically","_default","defaultOptions","focusedRowEnabled","autoNavigateToFocusedRow","focusedColumnIndex","controllers","focus","extenders","keyboardNavigation","columnIndex","createAction","excludeValidators","setRowFocusType","_focusedCellPosition","visibleRow","isNewRow","setFocusedColumnIndex","_escapeKeyHandler","eventArgs","isEditing","isCellFocusType","_focus","_getCellElementFromTarget","originalEvent","target","_updateFocusedCellPosition","$cell","direction","prevRowIndex","prevColumnIndex","position","_fireFocusedCellChanged","editorFactory","renderFocusOverlay","$element","hideBorder","editingController","isRowElement","_getElementType","isRowFocusType","hasClass","getFirstValidCellInRow","columns","getSortDataSourceParameters","sortByKey","_this4","result","apply","arguments","_dataSource","store","remoteOperations","isLocalOperations","Object","keys","every","operationName","Array","isArray","notSortedKeys","columnOption","push","selector","getDataIndexGetter","desc","forEach","notSortedKey","data","_applyChange","_fireChanged","e","isPartialUpdate","repaintChangesOnly","isPartialUpdateWithDeleting","changeTypes","indexOf","_updatePageIndexes","processUpdateFocusedRow","prevRenderingPageIndex","_lastRenderingPageIndex","renderingPageIndex","_isPagingByRendering","isPagingByRendering","operationTypes","focusController","fullReload","paging","isValidRowIndexByKey","needFocusRowByIndex","getGlobalRowIndexByKey","globalIndex","group","_calculateGlobalRowIndexByGroupedData","_calculateGlobalRowIndexByFlatData","groupFilter","useGroup","_generateFilterByKey","load","_concatWithCombinedFilter","skip","take","_generateOperationFilterByKey","requireTotalCount","extra","totalCount","combinedFilter","getCombinedFilter","combineFilters","_generateBooleanFilter","sortInfo","rowData","sort","_columnsController","filtering","getGroupDataSourceParameters","slice","reverse","getter","isBoolean","booleanFilter","filterOperation","sortFilter","operation","dataSourceKey","i","keyPart","views","_createRow","_checkRowKeys","fireError","_update","updateFocusElementTabIndex","$cellElements","preventScroll","_setFocusedRowElementTabIndex","_this5","columnsController","_findRowElementForTabIndex","_scrollToFocusOnResize","resizeCompleted","remove","getColumnIndexOffset","setFocusedCellPosition","add","getRow","getScrollElementPosition","top","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\r\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\r\nvar TABLE_POSTFIX_CLASS = \"table\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar FocusController = _uiGrid_core.default.ViewController.inherit(function() {\r\n    return {\r\n        init: function() {\r\n            this._dataController = this.getController(\"data\");\r\n            this._keyboardController = this.getController(\"keyboardNavigation\");\r\n            this.component._optionsByReference.focusedRowKey = true\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"focusedRowIndex\" === args.name) {\r\n                var focusedRowKey = this.option(\"focusedRowKey\");\r\n                this._focusRowByIndex(args.value);\r\n                this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\r\n                args.handled = true\r\n            } else {\r\n                if (\"focusedRowKey\" === args.name) {\r\n                    var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                    this._focusRowByKey(args.value);\r\n                    this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\r\n                    args.handled = true\r\n                } else {\r\n                    if (\"focusedColumnIndex\" === args.name) {\r\n                        args.handled = true\r\n                    } else {\r\n                        if (\"focusedRowEnabled\" === args.name) {\r\n                            args.handled = true\r\n                        } else {\r\n                            if (\"autoNavigateToFocusedRow\" === args.name) {\r\n                                args.handled = true\r\n                            } else {\r\n                                this.callBase(args)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _triggerFocusedRowChangedIfNeed: function(focusedRowKey, focusedRowIndex) {\r\n            var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\r\n            if (focusedRowIndex === focusedRowIndexByKey) {\r\n                var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                if (rowIndex >= 0) {\r\n                    var $rowElement = (0, _renderer.default)(this.getView(\"rowsView\").getRowElement(rowIndex));\r\n                    this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex)\r\n                }\r\n            }\r\n        },\r\n        isAutoNavigateToFocusedRow: function() {\r\n            return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\")\r\n        },\r\n        _focusRowByIndex: function(index) {\r\n            if (!this.option(\"focusedRowEnabled\")) {\r\n                return\r\n            }\r\n            index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\r\n            if (index < 0) {\r\n                if (this.isAutoNavigateToFocusedRow()) {\r\n                    this._resetFocusedRow()\r\n                }\r\n            } else {\r\n                this._focusRowByIndexCore(index)\r\n            }\r\n        },\r\n        _focusRowByIndexCore: function(index) {\r\n            var _this = this;\r\n            var dataController = this.getController(\"data\");\r\n            var pageSize = dataController.pageSize();\r\n            var setKeyByIndex = function() {\r\n                if (_this._isValidFocusedRowIndex(index)) {\r\n                    var visibleIndex = index - dataController.getRowIndexOffset();\r\n                    var lastItemIndex = dataController._getLastItemIndex();\r\n                    var rowIndex = Math.min(visibleIndex, lastItemIndex);\r\n                    var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                    if ((0, _type.isDefined)(focusedRowKey) && !_this.isRowFocused(focusedRowKey)) {\r\n                        _this.option(\"focusedRowKey\", focusedRowKey)\r\n                    }\r\n                }\r\n            };\r\n            if (pageSize >= 0) {\r\n                if (!this._isLocalRowIndex(index)) {\r\n                    var pageIndex = Math.floor(index / dataController.pageSize());\r\n                    (0, _deferred.when)(dataController.pageIndex(pageIndex), dataController.waitReady()).done(function() {\r\n                        setKeyByIndex()\r\n                    })\r\n                } else {\r\n                    setKeyByIndex()\r\n                }\r\n            }\r\n        },\r\n        _isLocalRowIndex: function(index) {\r\n            var dataController = this.getController(\"data\");\r\n            var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\r\n            if (isVirtualScrolling) {\r\n                var pageIndex = Math.floor(index / dataController.pageSize());\r\n                var virtualItems = dataController.virtualItemsCount();\r\n                var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\r\n                var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\r\n                var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\r\n                return virtualItemsBegin <= index && visiblePagesCount > pageIndex\r\n            }\r\n            return true\r\n        },\r\n        _setFocusedRowKeyByIndex: function(index) {\r\n            var dataController = this.getController(\"data\");\r\n            if (this._isValidFocusedRowIndex(index)) {\r\n                var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n                var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                if ((0, _type.isDefined)(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                    this.option(\"focusedRowKey\", focusedRowKey)\r\n                }\r\n            }\r\n        },\r\n        _focusRowByKey: function(key) {\r\n            if (!(0, _type.isDefined)(key)) {\r\n                this._resetFocusedRow()\r\n            } else {\r\n                this._navigateToRow(key, true)\r\n            }\r\n        },\r\n        _resetFocusedRow: function() {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var isFocusedRowKeyDefined = (0, _type.isDefined)(focusedRowKey);\r\n            if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\r\n                return\r\n            }\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            if (isFocusedRowKeyDefined) {\r\n                this.option(\"focusedRowKey\", void 0)\r\n            }\r\n            keyboardController.setFocusedRowIndex(-1);\r\n            this.option(\"focusedRowIndex\", -1);\r\n            this.getController(\"data\").updateItems({\r\n                changeType: \"updateFocusedRow\",\r\n                focusedRowKey: void 0\r\n            });\r\n            keyboardController._fireFocusedRowChanged(void 0, -1)\r\n        },\r\n        _isValidFocusedRowIndex: function(rowIndex) {\r\n            var dataController = this.getController(\"data\");\r\n            var row = dataController.getVisibleRows()[rowIndex];\r\n            return !row || \"data\" === row.rowType || \"group\" === row.rowType\r\n        },\r\n        publicMethods: function() {\r\n            return [\"navigateToRow\", \"isRowFocused\"]\r\n        },\r\n        navigateToRow: function(key) {\r\n            if (!this.isAutoNavigateToFocusedRow()) {\r\n                this.option(\"focusedRowIndex\", -1)\r\n            }\r\n            this._navigateToRow(key)\r\n        },\r\n        _navigateToRow: function(key, needFocusRow) {\r\n            var that = this;\r\n            var dataController = that.getController(\"data\");\r\n            var isAutoNavigate = that.isAutoNavigateToFocusedRow();\r\n            var d = new _deferred.Deferred;\r\n            if (void 0 === key || !dataController.dataSource()) {\r\n                return d.reject().promise()\r\n            }\r\n            var rowIndexByKey = that.getFocusedRowIndexByKey(key);\r\n            var isPaginate = dataController.getDataSource().paginate();\r\n            if (!isAutoNavigate && needFocusRow || !isPaginate || rowIndexByKey >= 0) {\r\n                that._navigateTo(key, d, needFocusRow)\r\n            } else {\r\n                dataController.getPageIndexByKey(key).done(function(pageIndex) {\r\n                    if (pageIndex < 0) {\r\n                        d.resolve(-1);\r\n                        return\r\n                    }\r\n                    if (pageIndex === dataController.pageIndex()) {\r\n                        dataController.reload().done(function() {\r\n                            if (that.isRowFocused(key)) {\r\n                                d.resolve(that.getFocusedRowIndexByKey(key))\r\n                            } else {\r\n                                that._navigateTo(key, d, needFocusRow)\r\n                            }\r\n                        }).fail(d.reject)\r\n                    } else {\r\n                        dataController.pageIndex(pageIndex).done(function() {\r\n                            that._navigateTo(key, d, needFocusRow)\r\n                        }).fail(d.reject)\r\n                    }\r\n                }).fail(d.reject)\r\n            }\r\n            return d.promise()\r\n        },\r\n        _navigateTo: function(key, deferred, needFocusRow) {\r\n            var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n            var isVirtualRowRenderingMode = \"virtual\" === this.option(\"scrolling.rowRenderingMode\");\r\n            var isAutoNavigate = this.isAutoNavigateToFocusedRow();\r\n            if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\r\n                this._navigateToVirtualRow(key, deferred, needFocusRow)\r\n            } else {\r\n                this._navigateToVisibleRow(key, deferred, needFocusRow)\r\n            }\r\n        },\r\n        _navigateToVisibleRow: function(key, deferred, needFocusRow) {\r\n            if (needFocusRow) {\r\n                this._triggerUpdateFocusedRow(key, deferred)\r\n            } else {\r\n                this.getView(\"rowsView\").scrollToRowElement(key)\r\n            }\r\n        },\r\n        _navigateToVirtualRow: function(key, deferred, needFocusRow) {\r\n            var that = this;\r\n            var dataController = this.getController(\"data\");\r\n            var rowsScrollController = dataController._rowsScrollController;\r\n            var rowIndex = _uiGrid_core2.default.getIndexByKey(key, dataController.items(true));\r\n            var scrollable = that.getView(\"rowsView\").getScrollable();\r\n            if (rowsScrollController && scrollable && rowIndex >= 0) {\r\n                var focusedRowIndex = rowIndex + dataController.getRowIndexOffset() - dataController.getRowIndexDelta();\r\n                var offset = rowsScrollController.getItemOffset(focusedRowIndex);\r\n                if (needFocusRow) {\r\n                    var triggerUpdateFocusedRow = function triggerUpdateFocusedRow() {\r\n                        that.component.off(\"contentReady\", triggerUpdateFocusedRow);\r\n                        that._triggerUpdateFocusedRow(key, deferred)\r\n                    };\r\n                    that.component.on(\"contentReady\", triggerUpdateFocusedRow)\r\n                }\r\n                scrollable.scrollTo({\r\n                    y: offset\r\n                })\r\n            }\r\n        },\r\n        _triggerUpdateFocusedRow: function(key, deferred) {\r\n            var dataController = this.getController(\"data\");\r\n            var focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n            if (this._isValidFocusedRowIndex(focusedRowIndex)) {\r\n                if (this.option(\"focusedRowEnabled\")) {\r\n                    dataController.updateItems({\r\n                        changeType: \"updateFocusedRow\",\r\n                        focusedRowKey: key\r\n                    })\r\n                } else {\r\n                    this.getView(\"rowsView\").scrollToRowElement(key)\r\n                }\r\n                this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\r\n                deferred && deferred.resolve(focusedRowIndex)\r\n            } else {\r\n                deferred && deferred.resolve(-1)\r\n            }\r\n        },\r\n        getFocusedRowIndexByKey: function(key) {\r\n            var dataController = this.getController(\"data\");\r\n            var rowIndex = dataController.getRowIndexByKey(key);\r\n            return rowIndex >= 0 ? rowIndex + dataController.getRowIndexOffset() : -1\r\n        },\r\n        _focusRowByKeyOrIndex: function() {\r\n            var _this2 = this;\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            var dataController = this.getController(\"data\");\r\n            if ((0, _type.isDefined)(focusedRowKey)) {\r\n                var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                if (visibleRowIndex >= 0) {\r\n                    if (keyboardController._isVirtualScrolling()) {\r\n                        currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset()\r\n                    }\r\n                    keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\r\n                    this._triggerUpdateFocusedRow(focusedRowKey)\r\n                } else {\r\n                    this._navigateToRow(focusedRowKey, true).done(function(focusedRowIndex) {\r\n                        if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\r\n                            _this2._focusRowByIndex()\r\n                        }\r\n                    })\r\n                }\r\n            } else {\r\n                if (currentFocusedRowIndex >= 0) {\r\n                    this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex)\r\n                }\r\n            }\r\n        },\r\n        isRowFocused: function(key) {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            if ((0, _type.isDefined)(focusedRowKey)) {\r\n                return (0, _common.equalByValue)(key, this.option(\"focusedRowKey\"))\r\n            }\r\n        },\r\n        updateFocusedRow: function(change) {\r\n            var that = this;\r\n            var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var $tableElement;\r\n            (0, _iterator.each)(rowsView.getTableElements(), function(index, element) {\r\n                var _change$items;\r\n                var isMainTable = 0 === index;\r\n                $tableElement = (0, _renderer.default)(element);\r\n                that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\r\n                that._prepareFocusedRow({\r\n                    changedItem: null === change || void 0 === change ? void 0 : null === (_change$items = change.items) || void 0 === _change$items ? void 0 : _change$items[focusedRowIndex],\r\n                    $tableElement: $tableElement,\r\n                    focusedRowIndex: focusedRowIndex,\r\n                    isMainTable: isMainTable\r\n                })\r\n            })\r\n        },\r\n        _clearPreviousFocusedRow: function($tableElement, focusedRowIndex) {\r\n            var _this3 = this;\r\n            var isNotMasterDetailFocusedRow = function(_, focusedRow) {\r\n                var $focusedRowTable = (0, _renderer.default)(focusedRow).closest(\".\".concat(_this3.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\r\n                return $tableElement.is($focusedRowTable)\r\n            };\r\n            var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter(isNotMasterDetailFocusedRow);\r\n            $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\r\n            $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\r\n            if (0 !== focusedRowIndex) {\r\n                var $firstRow = (0, _renderer.default)(this.getView(\"rowsView\").getRowElement(0));\r\n                $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\")\r\n            }\r\n        },\r\n        _prepareFocusedRow: function(options) {\r\n            var $row;\r\n            var changedItem = options.changedItem;\r\n            if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\r\n                var focusedRowIndex = options.focusedRowIndex;\r\n                var $tableElement = options.$tableElement;\r\n                var isMainTable = options.isMainTable;\r\n                var tabIndex = this.option(\"tabindex\") || 0;\r\n                var rowsView = this.getView(\"rowsView\");\r\n                $row = (0, _renderer.default)(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\r\n                $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\r\n                if (isMainTable) {\r\n                    rowsView.scrollToElementVertically($row)\r\n                }\r\n            }\r\n            return $row\r\n        }\r\n    }\r\n}());\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            focusedRowEnabled: false,\r\n            autoNavigateToFocusedRow: true,\r\n            focusedRowKey: void 0,\r\n            focusedRowIndex: -1,\r\n            focusedColumnIndex: -1\r\n        }\r\n    },\r\n    controllers: {\r\n        focus: FocusController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            keyboardNavigation: {\r\n                init: function() {\r\n                    var rowIndex = this.option(\"focusedRowIndex\");\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    this.createAction(\"onFocusedRowChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedRowChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.callBase();\r\n                    this.setRowFocusType();\r\n                    this._focusedCellPosition = {};\r\n                    if ((0, _type.isDefined)(rowIndex)) {\r\n                        this._focusedCellPosition.rowIndex = this.option(\"focusedRowIndex\")\r\n                    }\r\n                    if ((0, _type.isDefined)(columnIndex)) {\r\n                        this._focusedCellPosition.columnIndex = this.option(\"focusedColumnIndex\")\r\n                    }\r\n                },\r\n                setFocusedRowIndex: function(rowIndex) {\r\n                    var dataController = this.getController(\"data\");\r\n                    this.callBase(rowIndex);\r\n                    var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\r\n                    var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\r\n                    if (!visibleRow || !visibleRow.isNewRow) {\r\n                        this.option(\"focusedRowIndex\", rowIndex)\r\n                    }\r\n                },\r\n                setFocusedColumnIndex: function(columnIndex) {\r\n                    this.callBase(columnIndex);\r\n                    this.option(\"focusedColumnIndex\", columnIndex)\r\n                },\r\n                _escapeKeyHandler: function(eventArgs, isEditing) {\r\n                    if (isEditing || !this.option(\"focusedRowEnabled\")) {\r\n                        this.callBase(eventArgs, isEditing);\r\n                        return\r\n                    }\r\n                    if (this.isCellFocusType()) {\r\n                        this.setRowFocusType();\r\n                        this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true)\r\n                    }\r\n                },\r\n                _updateFocusedCellPosition: function($cell, direction) {\r\n                    var prevRowIndex = this.option(\"focusedRowIndex\");\r\n                    var prevColumnIndex = this.option(\"focusedColumnIndex\");\r\n                    var position = this.callBase($cell, direction);\r\n                    if (position && position.columnIndex >= 0) {\r\n                        this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex)\r\n                    }\r\n                }\r\n            },\r\n            editorFactory: {\r\n                renderFocusOverlay: function($element, hideBorder) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isRowElement = \"row\" === keyboardController._getElementType($element);\r\n                    var $cell;\r\n                    if (!focusedRowEnabled || !keyboardController.isRowFocusType() || editingController.isEditing()) {\r\n                        this.callBase($element, hideBorder)\r\n                    } else {\r\n                        if (focusedRowEnabled) {\r\n                            if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\r\n                                $cell = keyboardController.getFirstValidCellInRow($element);\r\n                                keyboardController.focus($cell)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            columns: {\r\n                getSortDataSourceParameters: function(_, sortByKey) {\r\n                    var _this4 = this;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var dataController = this.getController(\"data\");\r\n                    var dataSource = dataController._dataSource;\r\n                    var store = dataController.store();\r\n                    var key = store && store.key();\r\n                    var remoteOperations = dataSource && dataSource.remoteOperations() || {};\r\n                    var isLocalOperations = Object.keys(remoteOperations).every(function(operationName) {\r\n                        return !remoteOperations[operationName]\r\n                    });\r\n                    if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\r\n                        key = Array.isArray(key) ? key : [key];\r\n                        var notSortedKeys = key.filter(function(key) {\r\n                            return !_this4.columnOption(key, \"sortOrder\")\r\n                        });\r\n                        if (notSortedKeys.length) {\r\n                            result = result || [];\r\n                            if (isLocalOperations) {\r\n                                result.push({\r\n                                    selector: dataSource.getDataIndexGetter(),\r\n                                    desc: false\r\n                                })\r\n                            } else {\r\n                                notSortedKeys.forEach(function(notSortedKey) {\r\n                                    return result.push({\r\n                                        selector: notSortedKey,\r\n                                        desc: false\r\n                                    })\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            data: {\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateFocusedRow\" === change.changeType) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _fireChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (this.option(\"focusedRowEnabled\") && this._dataSource) {\r\n                        var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\r\n                        var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\r\n                        if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\r\n                            this._updatePageIndexes();\r\n                            this.processUpdateFocusedRow(e)\r\n                        } else {\r\n                            if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\r\n                                this._updatePageIndexes()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _updatePageIndexes: function() {\r\n                    var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\r\n                    var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\r\n                    this._lastRenderingPageIndex = renderingPageIndex;\r\n                    this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex\r\n                },\r\n                isPagingByRendering: function() {\r\n                    return this._isPagingByRendering\r\n                },\r\n                processUpdateFocusedRow: function(e) {\r\n                    var operationTypes = e.operationTypes || {};\r\n                    var focusController = this.getController(\"focus\");\r\n                    var reload = operationTypes.reload,\r\n                        fullReload = operationTypes.fullReload;\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var isVirtualScrolling = keyboardController._isVirtualScrolling();\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\r\n                    if (reload && !fullReload && (0, _type.isDefined)(focusedRowKey)) {\r\n                        focusController._navigateToRow(focusedRowKey, true).done(function(focusedRowIndex) {\r\n                            if (focusedRowIndex < 0) {\r\n                                focusController._focusRowByIndex()\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (operationTypes.paging && !isVirtualScrolling) {\r\n                            if (isAutoNavigate) {\r\n                                var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\r\n                                var isValidRowIndexByKey = rowIndexByKey >= 0;\r\n                                var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                                var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\r\n                                if (needFocusRowByIndex) {\r\n                                    focusController._focusRowByIndex()\r\n                                }\r\n                            } else {\r\n                                if (this.getRowIndexByKey(focusedRowKey) < 0) {\r\n                                    this.option(\"focusedRowIndex\", -1)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (operationTypes.fullReload) {\r\n                                focusController._focusRowByKeyOrIndex()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                getPageIndexByKey: function(key) {\r\n                    var that = this;\r\n                    var d = new _deferred.Deferred;\r\n                    that.getGlobalRowIndexByKey(key).done(function(globalIndex) {\r\n                        d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1)\r\n                    }).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                getGlobalRowIndexByKey: function(key) {\r\n                    if (this._dataSource.group()) {\r\n                        return this._calculateGlobalRowIndexByGroupedData(key)\r\n                    }\r\n                    return this._calculateGlobalRowIndexByFlatData(key)\r\n                },\r\n                _calculateGlobalRowIndexByFlatData: function(key, groupFilter, useGroup) {\r\n                    var that = this;\r\n                    var deferred = new _deferred.Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    var filter = that._generateFilterByKey(key);\r\n                    dataSource.load({\r\n                        filter: that._concatWithCombinedFilter(filter),\r\n                        skip: 0,\r\n                        take: 1\r\n                    }).done(function(data) {\r\n                        if (data.length > 0) {\r\n                            filter = that._generateOperationFilterByKey(key, data[0], useGroup);\r\n                            dataSource.load({\r\n                                filter: that._concatWithCombinedFilter(filter, groupFilter),\r\n                                skip: 0,\r\n                                take: 1,\r\n                                requireTotalCount: true\r\n                            }).done(function(_, extra) {\r\n                                deferred.resolve(extra.totalCount)\r\n                            })\r\n                        } else {\r\n                            deferred.resolve(-1)\r\n                        }\r\n                    });\r\n                    return deferred.promise()\r\n                },\r\n                _concatWithCombinedFilter: function(filter, groupFilter) {\r\n                    var combinedFilter = this.getCombinedFilter();\r\n                    return _uiGrid_core2.default.combineFilters([filter, combinedFilter, groupFilter])\r\n                },\r\n                _generateBooleanFilter: function(selector, value, sortInfo) {\r\n                    var result;\r\n                    if (false === value) {\r\n                        result = [selector, \"=\", sortInfo.desc ? true : null]\r\n                    } else {\r\n                        if (true === value ? !sortInfo.desc : sortInfo.desc) {\r\n                            result = [selector, \"<>\", value]\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _generateOperationFilterByKey: function(key, rowData, useGroup) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var filter = that._generateFilterByKey(key, \"<\");\r\n                    var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\r\n                    if (useGroup) {\r\n                        var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\r\n                        if (group) {\r\n                            sort = sort ? group.concat(sort) : group\r\n                        }\r\n                    }\r\n                    if (sort) {\r\n                        sort.slice().reverse().forEach(function(sortInfo) {\r\n                            var selector = sortInfo.selector;\r\n                            var getter;\r\n                            if (\"function\" === typeof selector) {\r\n                                getter = selector\r\n                            } else {\r\n                                getter = that._columnsController.columnOption(selector, \"selector\")\r\n                            }\r\n                            var value = getter ? getter(rowData) : rowData[selector];\r\n                            filter = [\r\n                                [selector, \"=\", value], \"and\", filter\r\n                            ];\r\n                            if (null === value || (0, _type.isBoolean)(value)) {\r\n                                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\r\n                                if (booleanFilter) {\r\n                                    filter = [booleanFilter, \"or\", filter]\r\n                                }\r\n                            } else {\r\n                                var filterOperation = sortInfo.desc ? \">\" : \"<\";\r\n                                var sortFilter = [selector, filterOperation, value];\r\n                                if (!sortInfo.desc) {\r\n                                    sortFilter = [sortFilter, \"or\", [selector, \"=\", null]]\r\n                                }\r\n                                filter = [sortFilter, \"or\", filter]\r\n                            }\r\n                        })\r\n                    }\r\n                    return filter\r\n                },\r\n                _generateFilterByKey: function(key, operation) {\r\n                    var dataSourceKey = this._dataSource.key();\r\n                    var filter = [];\r\n                    if (!operation) {\r\n                        operation = \"=\"\r\n                    }\r\n                    if (Array.isArray(dataSourceKey)) {\r\n                        for (var i = 0; i < dataSourceKey.length; ++i) {\r\n                            var keyPart = key[dataSourceKey[i]];\r\n                            if (keyPart) {\r\n                                if (filter.length > 0) {\r\n                                    filter.push(\"and\")\r\n                                }\r\n                                filter.push([dataSourceKey[i], operation, keyPart])\r\n                            }\r\n                        }\r\n                    } else {\r\n                        filter = [dataSourceKey, operation, key]\r\n                    }\r\n                    return filter\r\n                },\r\n                _getLastItemIndex: function() {\r\n                    return this.items(true).length - 1\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (this.option(\"focusedRowEnabled\") && row) {\r\n                        if (this.getController(\"focus\").isRowFocused(row.key)) {\r\n                            $row.addClass(ROW_FOCUSED_CLASS)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\r\n                        var store = this._dataController.store();\r\n                        if (store && !store.key()) {\r\n                            this._dataController.fireError(\"E1042\", \"Row focusing\")\r\n                        }\r\n                    }\r\n                },\r\n                _update: function(change) {\r\n                    if (\"updateFocusedRow\" === change.changeType) {\r\n                        if (this.option(\"focusedRowEnabled\")) {\r\n                            this.getController(\"focus\").updateFocusedRow(change)\r\n                        }\r\n                    } else {\r\n                        this.callBase(change)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex: function($cellElements, preventScroll) {\r\n                    if (this.option(\"focusedRowEnabled\")) {\r\n                        this._setFocusedRowElementTabIndex(preventScroll)\r\n                    } else {\r\n                        this.callBase($cellElements)\r\n                    }\r\n                },\r\n                _setFocusedRowElementTabIndex: function(preventScroll) {\r\n                    var _this5 = this;\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var tabIndex = this.option(\"tabIndex\") || 0;\r\n                    var dataController = this._dataController;\r\n                    var columnsController = this._columnsController;\r\n                    var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    var $row = this._findRowElementForTabIndex();\r\n                    if (!(0, _type.isDefined)(this._scrollToFocusOnResize)) {\r\n                        this._scrollToFocusOnResize = function() {\r\n                            _this5.scrollToElementVertically(_this5._findRowElementForTabIndex());\r\n                            _this5.resizeCompleted.remove(_this5._scrollToFocusOnResize)\r\n                        }\r\n                    }\r\n                    $row.attr(\"tabIndex\", tabIndex);\r\n                    if (rowIndex >= 0 && !preventScroll) {\r\n                        if (columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        rowIndex += dataController.getRowIndexOffset();\r\n                        columnIndex += columnsController.getColumnIndexOffset();\r\n                        this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\r\n                        if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\r\n                            var dataSource = dataController.dataSource();\r\n                            var operationTypes = dataSource && dataSource.operationTypes();\r\n                            if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\r\n                                this.resizeCompleted.remove(this._scrollToFocusOnResize);\r\n                                this.resizeCompleted.add(this._scrollToFocusOnResize)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _findRowElementForTabIndex: function() {\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                    return (0, _renderer.default)(this.getRowElement(rowIndex >= 0 ? rowIndex : 0))\r\n                },\r\n                scrollToRowElement: function(key) {\r\n                    var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n                    var $row = (0, _renderer.default)(this.getRow(rowIndex));\r\n                    this.scrollToElementVertically($row)\r\n                },\r\n                scrollToElementVertically: function($row) {\r\n                    var scrollable = this.getScrollable();\r\n                    if (scrollable) {\r\n                        var position = scrollable.getScrollElementPosition($row, \"vertical\");\r\n                        scrollable.scrollTo({\r\n                            top: position\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}