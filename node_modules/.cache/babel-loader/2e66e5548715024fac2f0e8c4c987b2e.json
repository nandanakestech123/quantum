{"ast":null,"code":"/**\r\n * DevExtreme (viz/gauges/circular_indicators.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.rangebar = exports.textcloud = exports.trianglemarker = exports.twocolorneedle = exports.triangleneedle = exports.rectangleneedle = exports._default = void 0;\n\nvar _base_indicators = require(\"./base_indicators\");\n\nvar _utils = require(\"../core/utils\");\n\nvar _Number = Number;\nvar _getCosAndSin = _utils.getCosAndSin;\nvar _convertAngleToRendererSpace = _utils.convertAngleToRendererSpace;\n\nvar SimpleIndicator = _base_indicators.BaseIndicator.inherit({\n  _move: function () {\n    var that = this;\n    var options = that._options;\n\n    var angle = _convertAngleToRendererSpace(that._actualPosition);\n\n    that._rootElement.rotate(angle, options.x, options.y);\n\n    that._trackerElement && that._trackerElement.rotate(angle, options.x, options.y);\n  },\n  _isEnabled: function () {\n    return this._options.width > 0;\n  },\n  _isVisible: function (layout) {\n    return layout.radius - _Number(this._options.indentFromCenter) > 0;\n  },\n  _getTrackerSettings: function () {\n    var options = this._options;\n\n    var radius = this._getRadius();\n\n    var indentFromCenter = this._getIndentFromCenter();\n\n    var x = options.x;\n    var y = options.y - (radius + indentFromCenter) / 2;\n    var width = options.width / 2;\n    var length = (radius - indentFromCenter) / 2;\n    width > 10 || (width = 10);\n    length > 10 || (length = 10);\n    return {\n      points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\n    };\n  },\n  _render: function () {\n    var that = this;\n\n    that._renderPointer();\n  },\n  _clearPointer: function () {\n    delete this._element;\n  },\n  _clear: function () {\n    this._clearPointer();\n  },\n  _getIndentFromCenter: function (radius) {\n    return Number(this._options.indentFromCenter) || 0;\n  },\n  _getRadius: function () {\n    return 0;\n  },\n  measure: function (layout) {\n    var result = {\n      max: layout.radius\n    };\n\n    if (this._options.indentFromCenter < 0) {\n      result.inverseHorizontalOffset = result.inverseVerticalOffset = -_Number(this._options.indentFromCenter);\n    }\n\n    return result;\n  },\n  getTooltipParameters: function () {\n    var options = this._options;\n\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var r = (this._getRadius() + this._getIndentFromCenter()) / 2;\n    return {\n      x: options.x + cosSin.cos * r,\n      y: options.y - cosSin.sin * r,\n      value: this._currentValue,\n      color: options.color,\n      offset: options.width / 2\n    };\n  }\n});\n\nvar NeedleIndicator = SimpleIndicator.inherit({\n  _isVisible: function (layout) {\n    var indentFromCenter = this._adjustOffset(Number(this._options.indentFromCenter), layout.radius);\n\n    var offset = this._adjustOffset(Number(this._options.offset), layout.radius);\n\n    return layout.radius - indentFromCenter - offset > 0;\n  },\n  getOffset: function () {\n    return 0;\n  },\n  _adjustOffset: function (value, radius) {\n    var minRadius = Number(this._options.beginAdaptingAtRadius);\n    var diff = radius / minRadius;\n\n    if (diff < 1) {\n      value = Math.floor(value * diff);\n    }\n\n    return value || 0;\n  },\n  _getIndentFromCenter: function (radius) {\n    return this._adjustOffset(Number(this._options.indentFromCenter), this._options.radius);\n  },\n  _getRadius: function () {\n    var options = this._options;\n    return options.radius - this._adjustOffset(Number(options.offset), options.radius);\n  },\n  _renderSpindle: function () {\n    var that = this;\n    var options = that._options;\n    var radius = options.radius;\n\n    var spindleSize = 2 * this._adjustOffset(_Number(options.spindleSize) / 2, radius);\n\n    var gapSize = 2 * this._adjustOffset(_Number(options.spindleGapSize) / 2, radius) || 0;\n\n    if (gapSize > 0) {\n      gapSize = gapSize <= spindleSize ? gapSize : spindleSize;\n    }\n\n    if (spindleSize > 0) {\n      that._spindleOuter = that._spindleOuter || that._renderer.circle().append(that._rootElement);\n      that._spindleInner = that._spindleInner || that._renderer.circle().append(that._rootElement);\n\n      that._spindleOuter.attr({\n        \"class\": \"dxg-spindle-border\",\n        cx: options.x,\n        cy: options.y,\n        r: spindleSize / 2\n      });\n\n      that._spindleInner.attr({\n        \"class\": \"dxg-spindle-hole\",\n        cx: options.x,\n        cy: options.y,\n        r: gapSize / 2,\n        fill: options.containerBackgroundColor\n      });\n    }\n  },\n  _render: function () {\n    var that = this;\n    that.callBase();\n\n    that._renderSpindle();\n  },\n  _clear: function () {\n    this.callBase();\n    delete this._spindleOuter;\n    delete this._spindleInner;\n  }\n});\nvar rectangleNeedle = NeedleIndicator.inherit({\n  _renderPointer: function () {\n    var that = this;\n    var options = that._options;\n\n    var y2 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var x1 = options.x - options.width / 2;\n\n    var x2 = x1 + _Number(options.width);\n\n    that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\n\n    that._element.attr({\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    });\n  }\n});\nexports.rectangleneedle = exports._default = rectangleNeedle;\nvar triangleNeedle = NeedleIndicator.inherit({\n  _renderPointer: function () {\n    var that = this;\n    var options = that._options;\n\n    var y2 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var x1 = options.x - options.width / 2;\n    var x2 = options.x + options.width / 2;\n    that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\n\n    that._element.attr({\n      points: [x1, y1, options.x, y2, x2, y1]\n    });\n  }\n});\nexports.triangleneedle = triangleNeedle;\nvar twoColorNeedle = NeedleIndicator.inherit({\n  _renderPointer: function () {\n    var that = this;\n    var options = that._options;\n    var x1 = options.x - options.width / 2;\n    var x2 = options.x + options.width / 2;\n\n    var y4 = options.y - this._getRadius();\n\n    var y1 = options.y - this._getIndentFromCenter();\n\n    var fraction = _Number(options.secondFraction) || 0;\n    var y2;\n    var y3;\n\n    if (fraction >= 1) {\n      y2 = y3 = y1;\n    } else {\n      if (fraction <= 0) {\n        y2 = y3 = y4;\n      } else {\n        y3 = y4 + (y1 - y4) * fraction;\n        y2 = y3 + _Number(options.space);\n      }\n    }\n\n    that._firstElement = that._firstElement || that._renderer.path([], \"area\").append(that._rootElement);\n    that._spaceElement = that._spaceElement || that._renderer.path([], \"area\").append(that._rootElement);\n    that._secondElement = that._secondElement || that._renderer.path([], \"area\").append(that._rootElement);\n\n    that._firstElement.attr({\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    });\n\n    that._spaceElement.attr({\n      points: [x1, y2, x1, y3, x2, y3, x2, y2],\n      \"class\": \"dxg-hole\",\n      fill: options.containerBackgroundColor\n    });\n\n    that._secondElement.attr({\n      points: [x1, y3, x1, y4, x2, y4, x2, y3],\n      \"class\": \"dxg-part\",\n      fill: options.secondColor\n    });\n  },\n  _clearPointer: function () {\n    delete this._firstElement;\n    delete this._secondElement;\n    delete this._spaceElement;\n  }\n});\nexports.twocolorneedle = twoColorNeedle;\nvar triangleMarker = SimpleIndicator.inherit({\n  _isEnabled: function () {\n    return this._options.length > 0 && this._options.width > 0;\n  },\n  _isVisible: function (layout) {\n    return layout.radius > 0;\n  },\n  _render: function () {\n    var that = this;\n    var options = that._options;\n    var x = options.x;\n    var y1 = options.y - options.radius;\n    var dx = options.width / 2 || 0;\n\n    var y2 = y1 - _Number(options.length);\n\n    that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\n    var settings = {\n      points: [x, y1, x - dx, y2, x + dx, y2],\n      stroke: \"none\",\n      \"stroke-width\": 0,\n      \"stroke-linecap\": \"square\"\n    };\n\n    if (options.space > 0) {\n      settings[\"stroke-width\"] = Math.min(options.space, options.width / 4) || 0;\n      settings.stroke = settings[\"stroke-width\"] > 0 ? options.containerBackgroundColor || \"none\" : \"none\";\n    }\n\n    that._element.attr(settings).sharp();\n  },\n  _clear: function () {\n    delete this._element;\n  },\n  _getTrackerSettings: function () {\n    var options = this._options;\n    var x = options.x;\n    var y = options.y - options.radius - options.length / 2;\n    var width = options.width / 2;\n    var length = options.length / 2;\n    width > 10 || (width = 10);\n    length > 10 || (length = 10);\n    return {\n      points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\n    };\n  },\n  measure: function (layout) {\n    return {\n      min: layout.radius,\n      max: layout.radius + _Number(this._options.length)\n    };\n  },\n  getTooltipParameters: function () {\n    var options = this._options;\n\n    var cosSin = _getCosAndSin(this._actualPosition);\n\n    var r = options.radius + options.length / 2;\n    var parameters = this.callBase();\n    parameters.x = options.x + cosSin.cos * r;\n    parameters.y = options.y - cosSin.sin * r;\n    parameters.offset = options.length / 2;\n    return parameters;\n  }\n});\nexports.trianglemarker = triangleMarker;\n\nvar textCloud = _base_indicators.BaseTextCloudMarker.inherit({\n  _isEnabled: function () {\n    return true;\n  },\n  _isVisible: function (layout) {\n    return layout.radius > 0;\n  },\n  _getTextCloudOptions: function () {\n    var that = this;\n\n    var cosSin = _getCosAndSin(that._actualPosition);\n\n    var nAngle = (0, _utils.normalizeAngle)(that._actualPosition);\n    return {\n      x: that._options.x + cosSin.cos * that._options.radius,\n      y: that._options.y - cosSin.sin * that._options.radius,\n      type: nAngle > 270 ? \"left-top\" : nAngle > 180 ? \"top-right\" : nAngle > 90 ? \"right-bottom\" : \"bottom-left\"\n    };\n  },\n  measure: function (layout) {\n    var that = this;\n    var arrowLength = _Number(that._options.arrowLength) || 0;\n\n    that._measureText();\n\n    var verticalOffset = that._textFullHeight + arrowLength;\n    var horizontalOffset = that._textFullWidth + arrowLength;\n    return {\n      min: layout.radius,\n      max: layout.radius,\n      horizontalOffset: horizontalOffset,\n      verticalOffset: verticalOffset,\n      inverseHorizontalOffset: horizontalOffset,\n      inverseVerticalOffset: verticalOffset\n    };\n  }\n});\n\nexports.textcloud = textCloud;\n\nvar rangeBar = _base_indicators.BaseRangeBar.inherit({\n  _isEnabled: function () {\n    return this._options.size > 0;\n  },\n  _isVisible: function (layout) {\n    return layout.radius - _Number(this._options.size) > 0;\n  },\n  _createBarItem: function () {\n    return this._renderer.arc().attr({\n      \"stroke-linejoin\": \"round\"\n    }).append(this._rootElement);\n  },\n  _createTracker: function () {\n    return this._renderer.arc().attr({\n      \"stroke-linejoin\": \"round\"\n    });\n  },\n  _setBarSides: function () {\n    var that = this;\n    that._maxSide = that._options.radius;\n    that._minSide = that._maxSide - _Number(that._options.size);\n  },\n  _getSpace: function () {\n    var options = this._options;\n    return options.space > 0 ? 180 * options.space / options.radius / Math.PI : 0;\n  },\n  _isTextVisible: function () {\n    var options = this._options.text || {};\n    return options.indent > 0;\n  },\n  _setTextItemsSides: function () {\n    var that = this;\n    var options = that._options;\n\n    var indent = _Number(options.text.indent);\n\n    that._lineFrom = options.y - options.radius;\n    that._lineTo = that._lineFrom - indent;\n    that._textRadius = options.radius + indent;\n  },\n  _getPositions: function () {\n    var that = this;\n    var basePosition = that._basePosition;\n    var actualPosition = that._actualPosition;\n    var mainPosition1;\n    var mainPosition2;\n\n    if (basePosition >= actualPosition) {\n      mainPosition1 = basePosition;\n      mainPosition2 = actualPosition;\n    } else {\n      mainPosition1 = actualPosition;\n      mainPosition2 = basePosition;\n    }\n\n    return {\n      start: that._startPosition,\n      end: that._endPosition,\n      main1: mainPosition1,\n      main2: mainPosition2,\n      back1: Math.min(mainPosition1 + that._space, that._startPosition),\n      back2: Math.max(mainPosition2 - that._space, that._endPosition)\n    };\n  },\n  _buildItemSettings: function (from, to) {\n    var that = this;\n    return {\n      x: that._options.x,\n      y: that._options.y,\n      innerRadius: that._minSide,\n      outerRadius: that._maxSide,\n      startAngle: to,\n      endAngle: from\n    };\n  },\n  _updateTextPosition: function () {\n    var that = this;\n\n    var cosSin = _getCosAndSin(that._actualPosition);\n\n    var x = that._options.x + that._textRadius * cosSin.cos;\n    var y = that._options.y - that._textRadius * cosSin.sin;\n    x += cosSin.cos * that._textWidth * .6;\n    y -= cosSin.sin * that._textHeight * .6;\n\n    that._text.attr({\n      x: x,\n      y: y + that._textVerticalOffset\n    });\n  },\n  _updateLinePosition: function () {\n    var that = this;\n    var x = that._options.x;\n    var x1;\n    var x2;\n\n    if (that._basePosition > that._actualPosition) {\n      x1 = x - 2;\n      x2 = x;\n    } else {\n      if (that._basePosition < that._actualPosition) {\n        x1 = x;\n        x2 = x + 2;\n      } else {\n        x1 = x - 1;\n        x2 = x + 1;\n      }\n    }\n\n    that._line.attr({\n      points: [x1, that._lineFrom, x1, that._lineTo, x2, that._lineTo, x2, that._lineFrom]\n    }).rotate(_convertAngleToRendererSpace(that._actualPosition), x, that._options.y).sharp();\n  },\n  _getTooltipPosition: function () {\n    var that = this;\n\n    var cosSin = _getCosAndSin((that._basePosition + that._actualPosition) / 2);\n\n    var r = (that._minSide + that._maxSide) / 2;\n    return {\n      x: that._options.x + cosSin.cos * r,\n      y: that._options.y - cosSin.sin * r\n    };\n  },\n  measure: function (layout) {\n    var that = this;\n    var result = {\n      min: layout.radius - _Number(that._options.size),\n      max: layout.radius\n    };\n\n    that._measureText();\n\n    if (that._hasText) {\n      result.max += _Number(that._options.text.indent);\n      result.horizontalOffset = that._textWidth;\n      result.verticalOffset = that._textHeight;\n    }\n\n    return result;\n  }\n});\n\nexports.rangebar = rangeBar;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/gauges/circular_indicators.js"],"names":["exports","rangebar","textcloud","trianglemarker","twocolorneedle","triangleneedle","rectangleneedle","_default","_base_indicators","require","_utils","_Number","Number","_getCosAndSin","getCosAndSin","_convertAngleToRendererSpace","convertAngleToRendererSpace","SimpleIndicator","BaseIndicator","inherit","_move","that","options","_options","angle","_actualPosition","_rootElement","rotate","x","y","_trackerElement","_isEnabled","width","_isVisible","layout","radius","indentFromCenter","_getTrackerSettings","_getRadius","_getIndentFromCenter","length","points","_render","_renderPointer","_clearPointer","_element","_clear","measure","result","max","inverseHorizontalOffset","inverseVerticalOffset","getTooltipParameters","cosSin","r","cos","sin","value","_currentValue","color","offset","NeedleIndicator","_adjustOffset","getOffset","minRadius","beginAdaptingAtRadius","diff","Math","floor","_renderSpindle","spindleSize","gapSize","spindleGapSize","_spindleOuter","_renderer","circle","append","_spindleInner","attr","cx","cy","fill","containerBackgroundColor","callBase","rectangleNeedle","y2","y1","x1","x2","path","triangleNeedle","twoColorNeedle","y4","fraction","secondFraction","y3","space","_firstElement","_spaceElement","_secondElement","secondColor","triangleMarker","dx","settings","stroke","min","sharp","parameters","textCloud","BaseTextCloudMarker","_getTextCloudOptions","nAngle","normalizeAngle","type","arrowLength","_measureText","verticalOffset","_textFullHeight","horizontalOffset","_textFullWidth","rangeBar","BaseRangeBar","size","_createBarItem","arc","_createTracker","_setBarSides","_maxSide","_minSide","_getSpace","PI","_isTextVisible","text","indent","_setTextItemsSides","_lineFrom","_lineTo","_textRadius","_getPositions","basePosition","_basePosition","actualPosition","mainPosition1","mainPosition2","start","_startPosition","end","_endPosition","main1","main2","back1","_space","back2","_buildItemSettings","from","to","innerRadius","outerRadius","startAngle","endAngle","_updateTextPosition","_textWidth","_textHeight","_text","_textVerticalOffset","_updateLinePosition","_line","_getTooltipPosition","_hasText"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/gauges/circular_indicators.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.rangebar = exports.textcloud = exports.trianglemarker = exports.twocolorneedle = exports.triangleneedle = exports.rectangleneedle = exports._default = void 0;\r\nvar _base_indicators = require(\"./base_indicators\");\r\nvar _utils = require(\"../core/utils\");\r\nvar _Number = Number;\r\nvar _getCosAndSin = _utils.getCosAndSin;\r\nvar _convertAngleToRendererSpace = _utils.convertAngleToRendererSpace;\r\nvar SimpleIndicator = _base_indicators.BaseIndicator.inherit({\r\n    _move: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var angle = _convertAngleToRendererSpace(that._actualPosition);\r\n        that._rootElement.rotate(angle, options.x, options.y);\r\n        that._trackerElement && that._trackerElement.rotate(angle, options.x, options.y)\r\n    },\r\n    _isEnabled: function() {\r\n        return this._options.width > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius - _Number(this._options.indentFromCenter) > 0\r\n    },\r\n    _getTrackerSettings: function() {\r\n        var options = this._options;\r\n        var radius = this._getRadius();\r\n        var indentFromCenter = this._getIndentFromCenter();\r\n        var x = options.x;\r\n        var y = options.y - (radius + indentFromCenter) / 2;\r\n        var width = options.width / 2;\r\n        var length = (radius - indentFromCenter) / 2;\r\n        width > 10 || (width = 10);\r\n        length > 10 || (length = 10);\r\n        return {\r\n            points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\r\n        }\r\n    },\r\n    _render: function() {\r\n        var that = this;\r\n        that._renderPointer()\r\n    },\r\n    _clearPointer: function() {\r\n        delete this._element\r\n    },\r\n    _clear: function() {\r\n        this._clearPointer()\r\n    },\r\n    _getIndentFromCenter: function(radius) {\r\n        return Number(this._options.indentFromCenter) || 0\r\n    },\r\n    _getRadius: function() {\r\n        return 0\r\n    },\r\n    measure: function(layout) {\r\n        var result = {\r\n            max: layout.radius\r\n        };\r\n        if (this._options.indentFromCenter < 0) {\r\n            result.inverseHorizontalOffset = result.inverseVerticalOffset = -_Number(this._options.indentFromCenter)\r\n        }\r\n        return result\r\n    },\r\n    getTooltipParameters: function() {\r\n        var options = this._options;\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var r = (this._getRadius() + this._getIndentFromCenter()) / 2;\r\n        return {\r\n            x: options.x + cosSin.cos * r,\r\n            y: options.y - cosSin.sin * r,\r\n            value: this._currentValue,\r\n            color: options.color,\r\n            offset: options.width / 2\r\n        }\r\n    }\r\n});\r\nvar NeedleIndicator = SimpleIndicator.inherit({\r\n    _isVisible: function(layout) {\r\n        var indentFromCenter = this._adjustOffset(Number(this._options.indentFromCenter), layout.radius);\r\n        var offset = this._adjustOffset(Number(this._options.offset), layout.radius);\r\n        return layout.radius - indentFromCenter - offset > 0\r\n    },\r\n    getOffset: function() {\r\n        return 0\r\n    },\r\n    _adjustOffset: function(value, radius) {\r\n        var minRadius = Number(this._options.beginAdaptingAtRadius);\r\n        var diff = radius / minRadius;\r\n        if (diff < 1) {\r\n            value = Math.floor(value * diff)\r\n        }\r\n        return value || 0\r\n    },\r\n    _getIndentFromCenter: function(radius) {\r\n        return this._adjustOffset(Number(this._options.indentFromCenter), this._options.radius)\r\n    },\r\n    _getRadius: function() {\r\n        var options = this._options;\r\n        return options.radius - this._adjustOffset(Number(options.offset), options.radius)\r\n    },\r\n    _renderSpindle: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var radius = options.radius;\r\n        var spindleSize = 2 * this._adjustOffset(_Number(options.spindleSize) / 2, radius);\r\n        var gapSize = 2 * this._adjustOffset(_Number(options.spindleGapSize) / 2, radius) || 0;\r\n        if (gapSize > 0) {\r\n            gapSize = gapSize <= spindleSize ? gapSize : spindleSize\r\n        }\r\n        if (spindleSize > 0) {\r\n            that._spindleOuter = that._spindleOuter || that._renderer.circle().append(that._rootElement);\r\n            that._spindleInner = that._spindleInner || that._renderer.circle().append(that._rootElement);\r\n            that._spindleOuter.attr({\r\n                \"class\": \"dxg-spindle-border\",\r\n                cx: options.x,\r\n                cy: options.y,\r\n                r: spindleSize / 2\r\n            });\r\n            that._spindleInner.attr({\r\n                \"class\": \"dxg-spindle-hole\",\r\n                cx: options.x,\r\n                cy: options.y,\r\n                r: gapSize / 2,\r\n                fill: options.containerBackgroundColor\r\n            })\r\n        }\r\n    },\r\n    _render: function() {\r\n        var that = this;\r\n        that.callBase();\r\n        that._renderSpindle()\r\n    },\r\n    _clear: function() {\r\n        this.callBase();\r\n        delete this._spindleOuter;\r\n        delete this._spindleInner\r\n    }\r\n});\r\nvar rectangleNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var y2 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = x1 + _Number(options.width);\r\n        that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\r\n        that._element.attr({\r\n            points: [x1, y1, x1, y2, x2, y2, x2, y1]\r\n        })\r\n    }\r\n});\r\nexports.rectangleneedle = exports._default = rectangleNeedle;\r\nvar triangleNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var y2 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = options.x + options.width / 2;\r\n        that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\r\n        that._element.attr({\r\n            points: [x1, y1, options.x, y2, x2, y1]\r\n        })\r\n    }\r\n});\r\nexports.triangleneedle = triangleNeedle;\r\nvar twoColorNeedle = NeedleIndicator.inherit({\r\n    _renderPointer: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var x1 = options.x - options.width / 2;\r\n        var x2 = options.x + options.width / 2;\r\n        var y4 = options.y - this._getRadius();\r\n        var y1 = options.y - this._getIndentFromCenter();\r\n        var fraction = _Number(options.secondFraction) || 0;\r\n        var y2;\r\n        var y3;\r\n        if (fraction >= 1) {\r\n            y2 = y3 = y1\r\n        } else {\r\n            if (fraction <= 0) {\r\n                y2 = y3 = y4\r\n            } else {\r\n                y3 = y4 + (y1 - y4) * fraction;\r\n                y2 = y3 + _Number(options.space)\r\n            }\r\n        }\r\n        that._firstElement = that._firstElement || that._renderer.path([], \"area\").append(that._rootElement);\r\n        that._spaceElement = that._spaceElement || that._renderer.path([], \"area\").append(that._rootElement);\r\n        that._secondElement = that._secondElement || that._renderer.path([], \"area\").append(that._rootElement);\r\n        that._firstElement.attr({\r\n            points: [x1, y1, x1, y2, x2, y2, x2, y1]\r\n        });\r\n        that._spaceElement.attr({\r\n            points: [x1, y2, x1, y3, x2, y3, x2, y2],\r\n            \"class\": \"dxg-hole\",\r\n            fill: options.containerBackgroundColor\r\n        });\r\n        that._secondElement.attr({\r\n            points: [x1, y3, x1, y4, x2, y4, x2, y3],\r\n            \"class\": \"dxg-part\",\r\n            fill: options.secondColor\r\n        })\r\n    },\r\n    _clearPointer: function() {\r\n        delete this._firstElement;\r\n        delete this._secondElement;\r\n        delete this._spaceElement\r\n    }\r\n});\r\nexports.twocolorneedle = twoColorNeedle;\r\nvar triangleMarker = SimpleIndicator.inherit({\r\n    _isEnabled: function() {\r\n        return this._options.length > 0 && this._options.width > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius > 0\r\n    },\r\n    _render: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var x = options.x;\r\n        var y1 = options.y - options.radius;\r\n        var dx = options.width / 2 || 0;\r\n        var y2 = y1 - _Number(options.length);\r\n        that._element = that._element || that._renderer.path([], \"area\").append(that._rootElement);\r\n        var settings = {\r\n            points: [x, y1, x - dx, y2, x + dx, y2],\r\n            stroke: \"none\",\r\n            \"stroke-width\": 0,\r\n            \"stroke-linecap\": \"square\"\r\n        };\r\n        if (options.space > 0) {\r\n            settings[\"stroke-width\"] = Math.min(options.space, options.width / 4) || 0;\r\n            settings.stroke = settings[\"stroke-width\"] > 0 ? options.containerBackgroundColor || \"none\" : \"none\"\r\n        }\r\n        that._element.attr(settings).sharp()\r\n    },\r\n    _clear: function() {\r\n        delete this._element\r\n    },\r\n    _getTrackerSettings: function() {\r\n        var options = this._options;\r\n        var x = options.x;\r\n        var y = options.y - options.radius - options.length / 2;\r\n        var width = options.width / 2;\r\n        var length = options.length / 2;\r\n        width > 10 || (width = 10);\r\n        length > 10 || (length = 10);\r\n        return {\r\n            points: [x - width, y - length, x - width, y + length, x + width, y + length, x + width, y - length]\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        return {\r\n            min: layout.radius,\r\n            max: layout.radius + _Number(this._options.length)\r\n        }\r\n    },\r\n    getTooltipParameters: function() {\r\n        var options = this._options;\r\n        var cosSin = _getCosAndSin(this._actualPosition);\r\n        var r = options.radius + options.length / 2;\r\n        var parameters = this.callBase();\r\n        parameters.x = options.x + cosSin.cos * r;\r\n        parameters.y = options.y - cosSin.sin * r;\r\n        parameters.offset = options.length / 2;\r\n        return parameters\r\n    }\r\n});\r\nexports.trianglemarker = triangleMarker;\r\nvar textCloud = _base_indicators.BaseTextCloudMarker.inherit({\r\n    _isEnabled: function() {\r\n        return true\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius > 0\r\n    },\r\n    _getTextCloudOptions: function() {\r\n        var that = this;\r\n        var cosSin = _getCosAndSin(that._actualPosition);\r\n        var nAngle = (0, _utils.normalizeAngle)(that._actualPosition);\r\n        return {\r\n            x: that._options.x + cosSin.cos * that._options.radius,\r\n            y: that._options.y - cosSin.sin * that._options.radius,\r\n            type: nAngle > 270 ? \"left-top\" : nAngle > 180 ? \"top-right\" : nAngle > 90 ? \"right-bottom\" : \"bottom-left\"\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        var that = this;\r\n        var arrowLength = _Number(that._options.arrowLength) || 0;\r\n        that._measureText();\r\n        var verticalOffset = that._textFullHeight + arrowLength;\r\n        var horizontalOffset = that._textFullWidth + arrowLength;\r\n        return {\r\n            min: layout.radius,\r\n            max: layout.radius,\r\n            horizontalOffset: horizontalOffset,\r\n            verticalOffset: verticalOffset,\r\n            inverseHorizontalOffset: horizontalOffset,\r\n            inverseVerticalOffset: verticalOffset\r\n        }\r\n    }\r\n});\r\nexports.textcloud = textCloud;\r\nvar rangeBar = _base_indicators.BaseRangeBar.inherit({\r\n    _isEnabled: function() {\r\n        return this._options.size > 0\r\n    },\r\n    _isVisible: function(layout) {\r\n        return layout.radius - _Number(this._options.size) > 0\r\n    },\r\n    _createBarItem: function() {\r\n        return this._renderer.arc().attr({\r\n            \"stroke-linejoin\": \"round\"\r\n        }).append(this._rootElement)\r\n    },\r\n    _createTracker: function() {\r\n        return this._renderer.arc().attr({\r\n            \"stroke-linejoin\": \"round\"\r\n        })\r\n    },\r\n    _setBarSides: function() {\r\n        var that = this;\r\n        that._maxSide = that._options.radius;\r\n        that._minSide = that._maxSide - _Number(that._options.size)\r\n    },\r\n    _getSpace: function() {\r\n        var options = this._options;\r\n        return options.space > 0 ? 180 * options.space / options.radius / Math.PI : 0\r\n    },\r\n    _isTextVisible: function() {\r\n        var options = this._options.text || {};\r\n        return options.indent > 0\r\n    },\r\n    _setTextItemsSides: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var indent = _Number(options.text.indent);\r\n        that._lineFrom = options.y - options.radius;\r\n        that._lineTo = that._lineFrom - indent;\r\n        that._textRadius = options.radius + indent\r\n    },\r\n    _getPositions: function() {\r\n        var that = this;\r\n        var basePosition = that._basePosition;\r\n        var actualPosition = that._actualPosition;\r\n        var mainPosition1;\r\n        var mainPosition2;\r\n        if (basePosition >= actualPosition) {\r\n            mainPosition1 = basePosition;\r\n            mainPosition2 = actualPosition\r\n        } else {\r\n            mainPosition1 = actualPosition;\r\n            mainPosition2 = basePosition\r\n        }\r\n        return {\r\n            start: that._startPosition,\r\n            end: that._endPosition,\r\n            main1: mainPosition1,\r\n            main2: mainPosition2,\r\n            back1: Math.min(mainPosition1 + that._space, that._startPosition),\r\n            back2: Math.max(mainPosition2 - that._space, that._endPosition)\r\n        }\r\n    },\r\n    _buildItemSettings: function(from, to) {\r\n        var that = this;\r\n        return {\r\n            x: that._options.x,\r\n            y: that._options.y,\r\n            innerRadius: that._minSide,\r\n            outerRadius: that._maxSide,\r\n            startAngle: to,\r\n            endAngle: from\r\n        }\r\n    },\r\n    _updateTextPosition: function() {\r\n        var that = this;\r\n        var cosSin = _getCosAndSin(that._actualPosition);\r\n        var x = that._options.x + that._textRadius * cosSin.cos;\r\n        var y = that._options.y - that._textRadius * cosSin.sin;\r\n        x += cosSin.cos * that._textWidth * .6;\r\n        y -= cosSin.sin * that._textHeight * .6;\r\n        that._text.attr({\r\n            x: x,\r\n            y: y + that._textVerticalOffset\r\n        })\r\n    },\r\n    _updateLinePosition: function() {\r\n        var that = this;\r\n        var x = that._options.x;\r\n        var x1;\r\n        var x2;\r\n        if (that._basePosition > that._actualPosition) {\r\n            x1 = x - 2;\r\n            x2 = x\r\n        } else {\r\n            if (that._basePosition < that._actualPosition) {\r\n                x1 = x;\r\n                x2 = x + 2\r\n            } else {\r\n                x1 = x - 1;\r\n                x2 = x + 1\r\n            }\r\n        }\r\n        that._line.attr({\r\n            points: [x1, that._lineFrom, x1, that._lineTo, x2, that._lineTo, x2, that._lineFrom]\r\n        }).rotate(_convertAngleToRendererSpace(that._actualPosition), x, that._options.y).sharp()\r\n    },\r\n    _getTooltipPosition: function() {\r\n        var that = this;\r\n        var cosSin = _getCosAndSin((that._basePosition + that._actualPosition) / 2);\r\n        var r = (that._minSide + that._maxSide) / 2;\r\n        return {\r\n            x: that._options.x + cosSin.cos * r,\r\n            y: that._options.y - cosSin.sin * r\r\n        }\r\n    },\r\n    measure: function(layout) {\r\n        var that = this;\r\n        var result = {\r\n            min: layout.radius - _Number(that._options.size),\r\n            max: layout.radius\r\n        };\r\n        that._measureText();\r\n        if (that._hasText) {\r\n            result.max += _Number(that._options.text.indent);\r\n            result.horizontalOffset = that._textWidth;\r\n            result.verticalOffset = that._textHeight\r\n        }\r\n        return result\r\n    }\r\n});\r\nexports.rangebar = rangeBar;\r\n"]},"metadata":{},"sourceType":"script"}