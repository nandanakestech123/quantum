{"ast":null,"code":"import { ManualInvoiceActionType } from \"redux/actions/actionType\";\nimport { manualinvoice } from \"../../service/apiVariables\";\nexport const updateManualinvoice = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    manualinvoice.updatemanualinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...manualinvoice.updatemanualinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createManualinvoice = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...manualinvoice.addmanualinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getManualinvoice = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    manualinvoice.getmanualinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...manualinvoice.getmanualinvoice\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        dispatch({\n          type: ManualInvoiceActionType.getProjectListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteManualinvoice = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    manualinvoice.deletemanualinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...manualinvoice.deletemanualinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200) {\n        // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        Toast({\n          type: \"success\",\n          message\n        });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/manualinvoice.js"],"names":["ManualInvoiceActionType","manualinvoice","updateManualinvoice","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","updatemanualinvoice","addQuery","key","payload","then","response","message","status","type","catch","createManualinvoice","addmanualinvoice","data","getManualinvoice","getmanualinvoice","getProjectListing","deleteManualinvoice","deletemanualinvoice"],"mappings":"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","sourcesContent":["import { ManualInvoiceActionType } from \"redux/actions/actionType\";\r\nimport { manualinvoice } from \"../../service/apiVariables\";\r\n\r\nexport const updateManualinvoice =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      manualinvoice.updatemanualinvoice.addQuery = { key: \"id\", payload: id };\r\n      api({ ...manualinvoice.updatemanualinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createManualinvoice =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...manualinvoice.addmanualinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getManualinvoice =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      manualinvoice.getmanualinvoice.addQuery = { key: \"id\", payload: id };\r\n\r\n      api({ ...manualinvoice.getmanualinvoice })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200) {\r\n            dispatch({\r\n              type: ManualInvoiceActionType.getProjectListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deleteManualinvoice =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      manualinvoice.deletemanualinvoice.addQuery = { key: \"id\", payload: id };\r\n      api({ ...manualinvoice.deletemanualinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            Toast({ type: \"success\", message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}