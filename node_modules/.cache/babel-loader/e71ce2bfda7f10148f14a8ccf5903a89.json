{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\n\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\n\nvar _number_box = require(\"./number_box.caret\");\n\nvar _number2 = require(\"../../localization/ldml/number\");\n\nvar _number_box2 = _interopRequireDefault(require(\"./number_box.base\"));\n\nvar _index = require(\"../../events/utils/index\");\n\nvar _common = require(\"../../core/utils/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\nvar MOVE_FORWARD = 1;\nvar MOVE_BACKWARD = -1;\nvar MINUS = \"-\";\nvar MINUS_KEY = \"minus\";\nvar NUMPUD_MINUS_KEY_IE = \"Subtract\";\nvar INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = _browser.default.msie ? 300 : 0;\n\nvar NumberBoxMask = _number_box2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function (key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n\n    var that = this;\n    return (0, _extend.extend)(this.callBase(), {\n      minus: that._revertSign.bind(that),\n      del: that._removeHandler.bind(that),\n      backspace: that._removeHandler.bind(that),\n      leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\n      rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\n      home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\n      enter: that._updateFormattedValue.bind(that),\n      end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\n    });\n  },\n  _focusInHandler: function (e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this.clearCaretTimeout();\n      this._caretTimeout = setTimeout(function () {\n        this._caretTimeout = null;\n\n        var caret = this._caret();\n\n        if (caret.start === caret.end && this._useMaskBehavior()) {\n          var text = this._getInputVal();\n\n          var decimalSeparator = _number.default.getDecimalSeparator();\n\n          var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n          if (decimalSeparatorIndex >= 0) {\n            this._caret({\n              start: decimalSeparatorIndex,\n              end: decimalSeparatorIndex\n            });\n          } else {\n            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n          }\n        }\n      }.bind(this), CARET_TIMEOUT_DURATION);\n    }\n\n    this.callBase(e);\n  },\n  _focusOutHandler: function (e) {\n    var shouldHandleEvent = !this._preventNestedFocusEvent(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = true;\n\n      if (this._useMaskBehavior()) {\n        this._updateFormattedValue();\n      }\n    }\n\n    this.callBase(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = false;\n    }\n  },\n  _hasValueBeenChanged: function (inputValue) {\n    var format = this._getFormatPattern();\n\n    var value = this.option(\"value\");\n    var formatted = this._format(value, format) || \"\";\n    return formatted !== inputValue;\n  },\n  _updateFormattedValue: function () {\n    var inputValue = this._getInputVal();\n\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._updateParsedValue();\n\n      this._adjustParsedValue();\n\n      this._setTextByParsedValue();\n\n      if (this._parsedValue !== this.option(\"value\")) {\n        _events_engine.default.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function (step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var text = this._getInputVal();\n\n    var format = this._getFormatPattern();\n\n    var nextCaret = (0, _number_box.getCaretWithOffset)(this._caret(), step);\n\n    if (!(0, _number_box.isCaretInBoundaries)(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n\n      this._caret((0, _number_box.getCaretInBoundaries)(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function (direction) {\n    var boundaries = (0, _number_box.getCaretBoundaries)(this._getInputVal(), this._getFormatPattern());\n    var newCaret = (0, _number_box.getCaretWithOffset)(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function (direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n\n    this._moveCaretToBoundary(direction);\n\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function (text, caret) {\n    var decimalSeparator = _number.default.getDecimalSeparator();\n\n    var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\n    var isZeroNext = \"0\" === text.charAt(caret.end);\n    var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext;\n    var zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\n    return moveToFloat || zeroToZeroReplace;\n  },\n  _getInputVal: function () {\n    return _number.default.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function (e) {\n    this.clearCaretTimeout();\n    this._lastKey = _number.default.convertDigits((0, _index.getChar)(e), true);\n    this._lastKeyName = (0, _index.normalizeKeyName)(e);\n\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\n\n    var newValue = this._tryParse(normalizedText, caret, enteredChar);\n\n    if (this._shouldMoveCaret(normalizedText, caret)) {\n      this._moveCaret(1);\n\n      e.originalEvent.preventDefault();\n    }\n\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n\n    return this.callBase(e);\n  },\n  _keyPressHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function (e) {\n    var caret = this._caret();\n\n    var text = this._getInputVal();\n\n    var start = caret.start;\n    var end = caret.end;\n    this._lastKey = (0, _index.getChar)(e);\n    this._lastKeyName = (0, _index.normalizeKeyName)(e);\n\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n\n    var isBackspaceKey = !isDeleteKey;\n\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n\n    var char = text.slice(start, end);\n\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\n        this._revertSign(e);\n\n        this._setTextByParsedValue();\n      }\n\n      e.preventDefault();\n      return;\n    }\n\n    var decimalSeparator = _number.default.getDecimalSeparator();\n\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n        start: start,\n        end: end\n      }, \"\");\n\n      var noDigits = editedText.search(/[0-9]/) < 0;\n\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\n        return;\n      }\n    }\n\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function () {\n    var format = this._getFormatPattern();\n\n    var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n    return noEscapedFormat.indexOf(\"%\") !== -1;\n  },\n  _parse: function (text, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomParser = (0, _type.isFunction)(formatOption.parser);\n    var parser = isCustomParser ? formatOption.parser : _number.default.parse;\n\n    if (!isCustomParser) {\n      var formatPointIndex = format.indexOf(\".\");\n      var textPointIndex = text.indexOf(_number.default.getDecimalSeparator());\n      var formatIntegerPartLength = formatPointIndex !== -1 ? formatPointIndex : format.length;\n      var textIntegerPartLength = textPointIndex !== -1 ? textPointIndex : text.length;\n\n      if (textIntegerPartLength > formatIntegerPartLength && format.indexOf(\"#\") === -1) {\n        text = text.substr(textIntegerPartLength - formatIntegerPartLength);\n      }\n    }\n\n    return parser(text, format);\n  },\n  _format: function (value, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomFormatter = (0, _type.isFunction)(null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter);\n    var formatter = isCustomFormatter ? formatOption.formatter : _number.default.format;\n    return formatter(value, format);\n  },\n  _getFormatPattern: function () {\n    if (!this._currentFormat) {\n      this._updateFormat();\n    }\n\n    return this._currentFormat;\n  },\n  _updateFormat: function () {\n    var _this = this;\n\n    var format = this.option(\"format\");\n    var isCustomParser = (0, _type.isFunction)(null === format || void 0 === format ? void 0 : format.parser);\n    var isLDMLPattern = (0, _type.isString)(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n    this._currentFormat = isCustomParser || isLDMLPattern ? format : (0, _number2.getFormat)(function (value) {\n      var text = _this._format(value, format);\n\n      return _number.default.convertDigits(text, true);\n    });\n  },\n  _getFormatForSign: function (text) {\n    var format = this._getFormatPattern();\n\n    if ((0, _type.isString)(format)) {\n      var signParts = format.split(\";\");\n\n      var sign = _number.default.getSign(text, format);\n\n      signParts[1] = signParts[1] || \"-\" + signParts[0];\n      return sign < 0 ? signParts[1] : signParts[0];\n    } else {\n      var _sign = _number.default.getSign(text);\n\n      return _sign < 0 ? \"-\" : \"\";\n    }\n  },\n  _removeStubs: function (text, excludeComma) {\n    var format = this._getFormatForSign(text);\n\n    var thousandsSeparator = _number.default.getThousandsSeparator();\n\n    var stubs = this._getStubs(format);\n\n    var result = text;\n\n    if (stubs.length) {\n      var prefixStubs = stubs[0];\n      var postfixRegex = new RegExp(\"(\" + (0, _common.escapeRegExp)(stubs[1] || \"\") + \")$\", \"g\");\n      var decoratorsRegex = new RegExp(\"[-\" + (0, _common.escapeRegExp)(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\n      result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\");\n    }\n\n    return result;\n  },\n  _getStubs: function (format) {\n    var regExpResult = /[^']([#0.,]+)/g.exec(format);\n    var pattern = regExpResult && regExpResult[0].trim();\n    return format.split(pattern).map(function (stub) {\n      return stub.replace(/'/g, \"\");\n    });\n  },\n  _truncateToPrecision: function (value, maxPrecision) {\n    if ((0, _type.isDefined)(value)) {\n      var strValue = value.toString();\n      var decimalSeparatorIndex = strValue.indexOf(\".\");\n\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n\n    return value;\n  },\n  _tryParse: function (text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char);\n\n    var format = this._getFormatPattern();\n\n    var isTextSelected = selection.start !== selection.end;\n\n    var parsedValue = this._getParsedValue(editedText, format);\n\n    var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\n\n    var isValueChanged = parsedValue !== this._parsedValue;\n\n    var decimalSeparator = _number.default.getDecimalSeparator();\n\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\n\n    var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n\n    if (\"\" === this._removeStubs(editedText)) {\n      parsedValue = Math.abs(0 * this._parsedValue);\n    }\n\n    if (isNaN(parsedValue)) {\n      return;\n    }\n\n    var value = null === parsedValue ? this._parsedValue : parsedValue;\n    parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\n    return !format.parser && this._isPercentFormat() ? parsedValue && parsedValue / 100 : parsedValue;\n  },\n  _getParsedValue: function (text, format) {\n    var sign = _number.default.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\n\n    var textWithoutStubs = this._removeStubs(text, true);\n\n    var parsedValue = this._parse(textWithoutStubs, format);\n\n    var parsedValueSign = parsedValue < 0 ? -1 : 1;\n    var parsedValueWithSign = (0, _type.isNumeric)(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\n    return parsedValueWithSign;\n  },\n  _isValueIncomplete: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    var caret = this._caret();\n\n    var point = _number.default.getDecimalSeparator();\n\n    var pointIndex = text.indexOf(point);\n    var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\n\n    var textParts = this._removeStubs(text, true).split(point);\n\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n\n    var floatLength = textParts[1].length;\n\n    var format = this._getFormatPattern();\n\n    var isCustomParser = !!format.parser;\n\n    var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\n\n    var isPrecisionInRange = isCustomParser ? true : (0, _math.inRange)(floatLength, precision.min, precision.max);\n    var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function (value) {\n    var min = (0, _common.ensureDefined)(this.option(\"min\"), -(1 / 0));\n    var max = (0, _common.ensureDefined)(this.option(\"max\"), 1 / 0);\n    return (0, _math.inRange)(value, min, max);\n  },\n  _setInputText: function (text) {\n    var normalizedText = _number.default.convertDigits(text, true);\n\n    var newCaret = (0, _number_box.getCaretAfterFormat)(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n\n    this._formattedValue = text;\n\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function () {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function () {\n    var isNumberType = \"number\" === this.option(\"mode\");\n\n    var isDesktop = \"desktop\" === _devices.default.real().deviceType;\n\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function (str) {\n    return (0, _type.isString)(str) && 1 === str.length;\n  },\n  _moveCaret: function (offset) {\n    if (!offset) {\n      return;\n    }\n\n    var newCaret = (0, _number_box.getCaretWithOffset)(this._caret(), offset);\n    var adjustedCaret = (0, _number_box.getCaretInBoundaries)(newCaret, this._getInputVal(), this._getFormatPattern());\n\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function (e) {\n    var keyName = (0, _index.normalizeKeyName)(e);\n    var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName);\n    var isMinusKey = keyName === MINUS_KEY;\n\n    var useMaskBehavior = this._useMaskBehavior();\n\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function () {\n    this.callBase();\n\n    this._renderFormatter();\n  },\n  _renderFormatter: function () {\n    this._clearCache();\n\n    this._detachFormatterEvents();\n\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function () {\n    _events_engine.default.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _isInputFromPaste: function (e) {\n    var inputType = e.originalEvent && e.originalEvent.inputType;\n\n    if ((0, _type.isDefined)(inputType)) {\n      return \"insertFromPaste\" === inputType;\n    } else {\n      return this._isValuePasted;\n    }\n  },\n  _attachFormatterEvents: function () {\n    var $input = this._input();\n\n    _events_engine.default.on($input, (0, _index.addNamespace)(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function (e) {\n      this._formatValue(e);\n\n      this._isValuePasted = false;\n    }.bind(this));\n\n    if (_browser.default.msie && _browser.default.version < 12) {\n      _events_engine.default.on($input, (0, _index.addNamespace)(\"paste\", NUMBER_FORMATTER_NAMESPACE), function () {\n        this._isValuePasted = true;\n      }.bind(this));\n    }\n\n    _events_engine.default.on($input, (0, _index.addNamespace)(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caret((0, _number_box.getCaretInBoundaries)(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n\n    _events_engine.default.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function () {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = null;\n  },\n  _forceRefreshInputValue: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function (index, text) {\n    text = (text || this._getInputVal()).slice(index);\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function (str, isString) {\n    var escapedDecimalSeparator = (0, _common.escapeRegExp)(_number.default.getDecimalSeparator());\n    var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\n    var stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function (text) {\n    var currentFormat = this._getFormatForSign(text);\n\n    var floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\");\n    var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\n    var maxPrecision = floatPart.length;\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function (e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    if (caret.start !== caret.end) {\n      if ((0, _index.normalizeKeyName)(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n\n        return;\n      } else {\n        this._caret((0, _number_box.getCaretInBoundaries)(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function (e, caret, preserveSelectedText) {\n    var newValue = -1 * (0, _common.ensureDefined)(this._parsedValue, null);\n\n    if (this._isValueInRange(newValue)) {\n      this._parsedValue = newValue;\n\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern();\n\n        var previousText = this._getInputVal();\n\n        this._setTextByParsedValue();\n\n        e.preventDefault();\n\n        var currentText = this._getInputVal();\n\n        var offset = (0, _number_box.getCaretOffset)(previousText, currentText, format);\n        caret = (0, _number_box.getCaretWithOffset)(caret, offset);\n        var caretInBoundaries = (0, _number_box.getCaretInBoundaries)(caret, currentText, format);\n\n        if (_browser.default.msie) {\n          clearTimeout(this._caretTimeout);\n          this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries));\n        } else {\n          this._caret(caretInBoundaries);\n        }\n      }\n\n      if (e.key === NUMPUD_MINUS_KEY_IE) {\n        _events_engine.default.trigger(this._input(), INPUT_EVENT);\n      }\n    }\n  },\n  _removeMinusFromText: function (text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function () {\n    var format = this._getFormatPattern();\n\n    var parsed = this._parseValue();\n\n    var formatted = this._format(parsed, format) || \"\";\n\n    this._setInputText(formatted);\n  },\n  _formatValue: function (e) {\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\n\n    var wasMinusRemoved = textWithoutMinus !== normalizedText;\n    normalizedText = textWithoutMinus;\n\n    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n\n      return;\n    }\n\n    var textWasChanged = _number.default.convertDigits(this._formattedValue, true) !== normalizedText;\n\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n\n      if ((0, _type.isDefined)(value)) {\n        this._parsedValue = value;\n      }\n    }\n\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function () {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function () {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n\n      this._setTextByParsedValue();\n    }\n\n    return this.callBase();\n  },\n  _updateParsedValue: function () {\n    var inputValue = this._getInputVal();\n\n    this._parsedValue = this._tryParse(inputValue, this._caret());\n  },\n  _adjustParsedValue: function () {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var clearedText = this._removeStubs(this._getInputVal());\n\n    var parsedValue = clearedText ? this._parseValue() : null;\n\n    if (!(0, _type.isNumeric)(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n\n    this._parsedValue = (0, _math.fitIntoRange)(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n\n    var caret = this._caret();\n\n    this._saveValueChangeEvent(e);\n\n    this._lastKey = null;\n    this._lastKeyName = null;\n\n    this._updateParsedValue();\n\n    this._adjustParsedValue();\n\n    this.option(\"value\", this._parsedValue);\n\n    if (caret) {\n      this._caret(caret);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._updateFormat();\n\n        this._renderFormatter();\n\n        this._renderValue();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearCache: function () {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function () {\n    this._clearCache();\n\n    this.callBase();\n  }\n});\n\nvar _default = NumberBoxMask;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["F:/webfe/node_modules/devextreme/ui/number_box/number_box.mask.js"],"names":["exports","default","_events_engine","_interopRequireDefault","require","_extend","_type","_browser","_devices","_math","_number","_number_box","_number2","_number_box2","_index","_common","obj","__esModule","NUMBER_FORMATTER_NAMESPACE","MOVE_FORWARD","MOVE_BACKWARD","MINUS","MINUS_KEY","NUMPUD_MINUS_KEY_IE","INPUT_EVENT","CARET_TIMEOUT_DURATION","msie","NumberBoxMask","inherit","_getDefaultOptions","extend","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","that","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundaryEventHandler","enter","_updateFormattedValue","end","_focusInHandler","e","_preventNestedFocusEvent","clearCaretTimeout","_caretTimeout","setTimeout","caret","_caret","start","text","_getInputVal","decimalSeparator","getDecimalSeparator","decimalSeparatorIndex","indexOf","_focusOutHandler","shouldHandleEvent","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","value","option","formatted","_format","_updateParsedValue","_adjustParsedValue","_setTextByParsedValue","_parsedValue","trigger","_input","step","nextCaret","getCaretWithOffset","isCaretInBoundaries","preventDefault","getCaretInBoundaries","_moveCaretToBoundary","direction","boundaries","getCaretBoundaries","newCaret","shiftKey","_shouldMoveCaret","isDecimalSeparatorNext","charAt","isZeroNext","moveToFloat","_lastKey","zeroToZeroReplace","convertDigits","val","_keyboardHandler","getChar","_lastKeyName","normalizeKeyName","_shouldHandleKey","originalEvent","normalizedText","enteredChar","newValue","_tryParse","_moveCaret","_keyPressHandler","isDeleteKey","isBackspaceKey","caretPosition","canDelete","length","char","slice","_isStub","_isNonStubAfter","editedText","_replaceSelectedText","noDigits","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","noEscapedFormat","replace","_parse","formatOption","isCustomParser","isFunction","parser","parse","formatPointIndex","textPointIndex","formatIntegerPartLength","textIntegerPartLength","substr","isCustomFormatter","formatter","_currentFormat","_updateFormat","_this","isLDMLPattern","isString","getFormat","_getFormatForSign","signParts","split","sign","getSign","_sign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","_getStubs","result","prefixStubs","postfixRegex","RegExp","escapeRegExp","decoratorsRegex","regExpResult","exec","pattern","trim","map","stub","_truncateToPrecision","maxPrecision","isDefined","strValue","toString","parsedValue","parseFloat","isNaN","selection","isTextSelected","_getParsedValue","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","Math","abs","textWithoutStubs","parsedValueSign","parsedValueWithSign","isNumeric","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","inRange","min","endsWithZero","ensureDefined","_setInputText","getCaretAfterFormat","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isDesktop","real","deviceType","_setInputType","_isSupportInputMode","_isChar","str","offset","adjustedCaret","keyName","isSpecialChar","ctrlKey","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","_isInputFromPaste","inputType","_isValuePasted","$input","on","addNamespace","_formatValue","version","clearTimeout","_forceRefreshInputValue","index","escapedDecimalSeparator","regExpString","stubRegExp","test","_parseValue","currentFormat","floatPart","minPrecision","_applyRevertedSign","preserveSelectedText","previousText","currentText","getCaretOffset","caretInBoundaries","_removeMinusFromText","isMinusPressed","parsed","textWithoutMinus","wasMinusRemoved","textWasChanged","_renderDisplayText","apply","arguments","_renderValue","clearedText","fitIntoRange","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_clean","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\r\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\r\nvar _math = require(\"../../core/utils/math\");\r\nvar _number = _interopRequireDefault(require(\"../../localization/number\"));\r\nvar _number_box = require(\"./number_box.caret\");\r\nvar _number2 = require(\"../../localization/ldml/number\");\r\nvar _number_box2 = _interopRequireDefault(require(\"./number_box.base\"));\r\nvar _index = require(\"../../events/utils/index\");\r\nvar _common = require(\"../../core/utils/common\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\r\nvar MOVE_FORWARD = 1;\r\nvar MOVE_BACKWARD = -1;\r\nvar MINUS = \"-\";\r\nvar MINUS_KEY = \"minus\";\r\nvar NUMPUD_MINUS_KEY_IE = \"Subtract\";\r\nvar INPUT_EVENT = \"input\";\r\nvar CARET_TIMEOUT_DURATION = _browser.default.msie ? 300 : 0;\r\nvar NumberBoxMask = _number_box2.default.inherit({\r\n    _getDefaultOptions: function() {\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        if (!this._preventNestedFocusEvent(e)) {\r\n            this.clearCaretTimeout();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caretTimeout = null;\r\n                var caret = this._caret();\r\n                if (caret.start === caret.end && this._useMaskBehavior()) {\r\n                    var text = this._getInputVal();\r\n                    var decimalSeparator = _number.default.getDecimalSeparator();\r\n                    var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n                    if (decimalSeparatorIndex >= 0) {\r\n                        this._caret({\r\n                            start: decimalSeparatorIndex,\r\n                            end: decimalSeparatorIndex\r\n                        })\r\n                    } else {\r\n                        this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e)\r\n                    }\r\n                }\r\n            }.bind(this), CARET_TIMEOUT_DURATION)\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        var shouldHandleEvent = !this._preventNestedFocusEvent(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = true;\r\n            if (this._useMaskBehavior()) {\r\n                this._updateFormattedValue()\r\n            }\r\n        }\r\n        this.callBase(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = false\r\n        }\r\n    },\r\n    _hasValueBeenChanged: function(inputValue) {\r\n        var format = this._getFormatPattern();\r\n        var value = this.option(\"value\");\r\n        var formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._updateParsedValue();\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                _events_engine.default.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal();\r\n        var format = this._getFormatPattern();\r\n        var nextCaret = (0, _number_box.getCaretWithOffset)(this._caret(), step);\r\n        if (!(0, _number_box.isCaretInBoundaries)(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret((0, _number_box.getCaretInBoundaries)(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction) {\r\n        var boundaries = (0, _number_box.getCaretBoundaries)(this._getInputVal(), this._getFormatPattern());\r\n        var newCaret = (0, _number_box.getCaretWithOffset)(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret)\r\n    },\r\n    _moveCaretToBoundaryEventHandler: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e && e.shiftKey) {\r\n            return\r\n        }\r\n        this._moveCaretToBoundary(direction);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = _number.default.getDecimalSeparator();\r\n        var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\r\n        var isZeroNext = \"0\" === text.charAt(caret.end);\r\n        var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext;\r\n        var zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return _number.default.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this.clearCaretTimeout();\r\n        this._lastKey = _number.default.convertDigits((0, _index.getChar)(e), true);\r\n        this._lastKeyName = (0, _index.normalizeKeyName)(e);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\r\n        var newValue = this._tryParse(normalizedText, caret, enteredChar);\r\n        if (this._shouldMoveCaret(normalizedText, caret)) {\r\n            this._moveCaret(1);\r\n            e.originalEvent.preventDefault()\r\n        }\r\n        if (void 0 === newValue) {\r\n            if (this._lastKeyName !== MINUS_KEY) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret();\r\n        var text = this._getInputVal();\r\n        var start = caret.start;\r\n        var end = caret.end;\r\n        this._lastKey = (0, _index.getChar)(e);\r\n        this._lastKeyName = (0, _index.normalizeKeyName)(e);\r\n        var isDeleteKey = this._isDeleteKey(this._lastKeyName);\r\n        var isBackspaceKey = !isDeleteKey;\r\n        if (start === end) {\r\n            var caretPosition = start;\r\n            var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\r\n            if (canDelete) {\r\n                isDeleteKey && end++;\r\n                isBackspaceKey && start--\r\n            } else {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(isDeleteKey ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = _number.default.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(isDeleteKey ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                start: start,\r\n                end: end\r\n            }, \"\");\r\n            var noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern();\r\n        var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomParser = (0, _type.isFunction)(formatOption.parser);\r\n        var parser = isCustomParser ? formatOption.parser : _number.default.parse;\r\n        if (!isCustomParser) {\r\n            var formatPointIndex = format.indexOf(\".\");\r\n            var textPointIndex = text.indexOf(_number.default.getDecimalSeparator());\r\n            var formatIntegerPartLength = formatPointIndex !== -1 ? formatPointIndex : format.length;\r\n            var textIntegerPartLength = textPointIndex !== -1 ? textPointIndex : text.length;\r\n            if (textIntegerPartLength > formatIntegerPartLength && format.indexOf(\"#\") === -1) {\r\n                text = text.substr(textIntegerPartLength - formatIntegerPartLength)\r\n            }\r\n        }\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomFormatter = (0, _type.isFunction)(null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter);\r\n        var formatter = isCustomFormatter ? formatOption.formatter : _number.default.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        if (!this._currentFormat) {\r\n            this._updateFormat()\r\n        }\r\n        return this._currentFormat\r\n    },\r\n    _updateFormat: function() {\r\n        var _this = this;\r\n        var format = this.option(\"format\");\r\n        var isCustomParser = (0, _type.isFunction)(null === format || void 0 === format ? void 0 : format.parser);\r\n        var isLDMLPattern = (0, _type.isString)(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        this._currentFormat = isCustomParser || isLDMLPattern ? format : (0, _number2.getFormat)(function(value) {\r\n            var text = _this._format(value, format);\r\n            return _number.default.convertDigits(text, true)\r\n        })\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern();\r\n        if ((0, _type.isString)(format)) {\r\n            var signParts = format.split(\";\");\r\n            var sign = _number.default.getSign(text, format);\r\n            signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n            return sign < 0 ? signParts[1] : signParts[0]\r\n        } else {\r\n            var _sign = _number.default.getSign(text);\r\n            return _sign < 0 ? \"-\" : \"\"\r\n        }\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text);\r\n        var thousandsSeparator = _number.default.getThousandsSeparator();\r\n        var stubs = this._getStubs(format);\r\n        var result = text;\r\n        if (stubs.length) {\r\n            var prefixStubs = stubs[0];\r\n            var postfixRegex = new RegExp(\"(\" + (0, _common.escapeRegExp)(stubs[1] || \"\") + \")$\", \"g\");\r\n            var decoratorsRegex = new RegExp(\"[-\" + (0, _common.escapeRegExp)(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\r\n            result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\")\r\n        }\r\n        return result\r\n    },\r\n    _getStubs: function(format) {\r\n        var regExpResult = /[^']([#0.,]+)/g.exec(format);\r\n        var pattern = regExpResult && regExpResult[0].trim();\r\n        return format.split(pattern).map(function(stub) {\r\n            return stub.replace(/'/g, \"\")\r\n        })\r\n    },\r\n    _truncateToPrecision: function(value, maxPrecision) {\r\n        if ((0, _type.isDefined)(value)) {\r\n            var strValue = value.toString();\r\n            var decimalSeparatorIndex = strValue.indexOf(\".\");\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char);\r\n        var format = this._getFormatPattern();\r\n        var isTextSelected = selection.start !== selection.end;\r\n        var parsedValue = this._getParsedValue(editedText, format);\r\n        var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\r\n        var isValueChanged = parsedValue !== this._parsedValue;\r\n        var decimalSeparator = _number.default.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\r\n        var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === this._removeStubs(editedText)) {\r\n            parsedValue = Math.abs(0 * this._parsedValue)\r\n        }\r\n        if (isNaN(parsedValue)) {\r\n            return\r\n        }\r\n        var value = null === parsedValue ? this._parsedValue : parsedValue;\r\n        parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\r\n        return !format.parser && this._isPercentFormat() ? parsedValue && parsedValue / 100 : parsedValue\r\n    },\r\n    _getParsedValue: function(text, format) {\r\n        var sign = _number.default.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\r\n        var textWithoutStubs = this._removeStubs(text, true);\r\n        var parsedValue = this._parse(textWithoutStubs, format);\r\n        var parsedValueSign = parsedValue < 0 ? -1 : 1;\r\n        var parsedValueWithSign = (0, _type.isNumeric)(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\r\n        return parsedValueWithSign\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret();\r\n        var point = _number.default.getDecimalSeparator();\r\n        var pointIndex = text.indexOf(point);\r\n        var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\r\n        var textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length;\r\n        var format = this._getFormatPattern();\r\n        var isCustomParser = !!format.parser;\r\n        var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\r\n        var isPrecisionInRange = isCustomParser ? true : (0, _math.inRange)(floatLength, precision.min, precision.max);\r\n        var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = (0, _common.ensureDefined)(this.option(\"min\"), -(1 / 0));\r\n        var max = (0, _common.ensureDefined)(this.option(\"max\"), 1 / 0);\r\n        return (0, _math.inRange)(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var normalizedText = _number.default.convertDigits(text, true);\r\n        var newCaret = (0, _number_box.getCaretAfterFormat)(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        var isDesktop = \"desktop\" === _devices.default.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return (0, _type.isString)(str) && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = (0, _number_box.getCaretWithOffset)(this._caret(), offset);\r\n        var adjustedCaret = (0, _number_box.getCaretInBoundaries)(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var keyName = (0, _index.normalizeKeyName)(e);\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName);\r\n        var isMinusKey = keyName === MINUS_KEY;\r\n        var useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        _events_engine.default.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _isInputFromPaste: function(e) {\r\n        var inputType = e.originalEvent && e.originalEvent.inputType;\r\n        if ((0, _type.isDefined)(inputType)) {\r\n            return \"insertFromPaste\" === inputType\r\n        } else {\r\n            return this._isValuePasted\r\n        }\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        _events_engine.default.on($input, (0, _index.addNamespace)(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function(e) {\r\n            this._formatValue(e);\r\n            this._isValuePasted = false\r\n        }.bind(this));\r\n        if (_browser.default.msie && _browser.default.version < 12) {\r\n            _events_engine.default.on($input, (0, _index.addNamespace)(\"paste\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n                this._isValuePasted = true\r\n            }.bind(this))\r\n        }\r\n        _events_engine.default.on($input, (0, _index.addNamespace)(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            if (!this._caretTimeout) {\r\n                this._caretTimeout = setTimeout(function() {\r\n                    this._caret((0, _number_box.getCaretInBoundaries)(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n                }.bind(this), CARET_TIMEOUT_DURATION)\r\n            }\r\n        }.bind(this));\r\n        _events_engine.default.on($input, \"dxdblclick\", function() {\r\n            this.clearCaretTimeout()\r\n        }.bind(this))\r\n    },\r\n    clearCaretTimeout: function() {\r\n        clearTimeout(this._caretTimeout);\r\n        this._caretTimeout = null\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = (0, _common.escapeRegExp)(_number.default.getDecimalSeparator());\r\n        var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\r\n        var stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text);\r\n        var floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\");\r\n        var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\r\n        var maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if ((0, _index.normalizeKeyName)(e) === MINUS_KEY) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret((0, _number_box.getCaretInBoundaries)(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * (0, _common.ensureDefined)(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern();\r\n                var previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal();\r\n                var offset = (0, _number_box.getCaretOffset)(previousText, currentText, format);\r\n                caret = (0, _number_box.getCaretWithOffset)(caret, offset);\r\n                var caretInBoundaries = (0, _number_box.getCaretInBoundaries)(caret, currentText, format);\r\n                if (_browser.default.msie) {\r\n                    clearTimeout(this._caretTimeout);\r\n                    this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                _events_engine.default.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern();\r\n        var parsed = this._parseValue();\r\n        var formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function(e) {\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\r\n        var wasMinusRemoved = textWithoutMinus !== normalizedText;\r\n        normalizedText = textWithoutMinus;\r\n        if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = normalizedText;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = _number.default.convertDigits(this._formattedValue, true) !== normalizedText;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(normalizedText, caret, \"\");\r\n            if ((0, _type.isDefined)(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _updateParsedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        this._parsedValue = this._tryParse(inputValue, this._caret())\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal());\r\n        var parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!(0, _type.isNumeric)(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = (0, _math.fitIntoRange)(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        var caret = this._caret();\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._lastKeyName = null;\r\n        this._updateParsedValue();\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue);\r\n        if (caret) {\r\n            this._caret(caret)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._updateFormat();\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._lastKeyName;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._caretTimeout);\r\n        delete this._caretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nvar _default = NumberBoxMask;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}