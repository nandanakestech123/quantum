{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _index = require(\"../../events/utils/index\");\n\nvar _click = require(\"../../events/click\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\n\nvar _guid = _interopRequireDefault(require(\"../../core/guid\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _form = _interopRequireDefault(require(\"../form\"));\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _themes = require(\"../themes\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nvar ROWS_VIEW = \"rowsView\";\nvar FOOTER_VIEW = \"footerView\";\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\n\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\n\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\n\nfunction adaptiveCellTemplate(container, options) {\n  var $adaptiveColumnButton;\n  var $container = (0, _renderer.default)(container);\n  var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = (0, _renderer.default)(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\n\n    _events_engine.default.on($adaptiveColumnButton, (0, _index.addNamespace)(_click.name, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function () {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    _uiGrid_core2.default.setEmptyText($container);\n  }\n}\n\nvar AdaptiveColumnsController = _uiGrid_core.default.ViewController.inherit({\n  _isRowEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_ROW;\n  },\n  _isItemModified: function (item, cellOptions) {\n    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n\n    var row = this._dataController.items()[rowIndex + 1];\n\n    return row && row.modifiedValues && (0, _type.isDefined)(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate: function (item, cellOptions, $container) {\n    var that = this;\n    var column = item.column;\n    var focusAction = that.createAction(function () {\n      _events_engine.default.trigger($container, _click.name);\n    });\n    var value = column.calculateCellValue(cellOptions.data);\n\n    var displayValue = _uiGrid_core2.default.getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);\n\n    var text = _uiGrid_core2.default.formatValue(displayValue, column);\n\n    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n\n    var rowsView = that._rowsView;\n\n    if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\n\n      if (isCellOrBatchEditMode) {\n        _events_engine.default.off($container, \"focus\", focusAction);\n\n        _events_engine.default.on($container, \"focus\", focusAction);\n      }\n    }\n\n    if (column.cellTemplate) {\n      var templateOptions = (0, _extend.extend)({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      var isDomElement = !!$container.closest((0, _window.getWindow)().document).length;\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(function () {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      var container = $container.get(0);\n\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n\n      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\n\n      if (!(0, _type.isDefined)(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n\n      if (!that._isRowEditMode()) {\n        if (that._isItemModified(item, cellOptions)) {\n          $container.addClass(FORM_ITEM_MODIFIED);\n        }\n      }\n\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate: function (item, cellOptions) {\n    var that = this;\n    var column = item.column;\n    var editingController = this.getController(\"editing\");\n    return function (options, container) {\n      var $container = (0, _renderer.default)(container);\n\n      var columnIndex = that._columnsController.getVisibleIndex(column.visibleIndex);\n\n      var templateOptions = (0, _extend.extend)({}, cellOptions);\n\n      var renderFormTemplate = function () {\n        var isItemEdited = that._isItemEdited(item);\n\n        templateOptions.value = cellOptions.row.values[columnIndex];\n\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditTemplate(templateOptions, item, options.component, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(function () {\n        return {\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        };\n      }, function () {\n        $container.contents().remove();\n        $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid: function (visibleColumns) {\n    var getCommandColumnsCount = function () {\n      var result = 0;\n\n      for (var j = 0; j < visibleColumns.length; j++) {\n        var visibleColumn = visibleColumns[j];\n\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n\n      return result;\n    };\n\n    if (visibleColumns < 2) {\n      return false;\n    }\n\n    if (visibleColumns.length - getCommandColumnsCount() <= 1) {\n      return false;\n    }\n\n    return true;\n  },\n  _calculatePercentWidths: function (widths, visibleColumns) {\n    var that = this;\n    var percentWidths = 0;\n    visibleColumns.forEach(function (item, index) {\n      if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: function (width) {\n    return (0, _type.isString)(width) && \"%\" === width.slice(-1);\n  },\n  _isColumnHidden: function (column) {\n    return this._hiddenColumns.filter(function (hiddenColumn) {\n      return hiddenColumn.index === column.index;\n    }).length > 0;\n  },\n  _getAverageColumnsWidth: function (containerWidth, columns, columnsCanFit) {\n    var that = this;\n    var fixedColumnsWidth = 0;\n    var columnsWithoutFixedWidthCount = 0;\n    columns.forEach(function (column) {\n      if (!that._isColumnHidden(column)) {\n        var width = column.width;\n\n        if ((0, _type.isDefined)(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    var columnsCount = contentColumns.length;\n    var colWidth;\n\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return widthOption;\n      }\n    } else {\n      var columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n\n    return colWidth;\n  },\n  _calculatePercentWidth: function (options) {\n    var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n\n    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth: function (item) {\n    var result = 0;\n\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n\n    return result;\n  },\n  _getCommandColumnsWidth: function () {\n    var that = this;\n\n    var columns = that._columnsController.getVisibleColumns();\n\n    var colWidth = 0;\n    (0, _iterator.each)(columns, function (index, column) {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited: function (item) {\n    if (this.isFormEditMode()) {\n      return false;\n    }\n\n    if (this._isRowEditMode()) {\n      var editRowKey = this.option(\"editing.editRowKey\");\n\n      if ((0, _common.equalByValue)(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n\n      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns: function (hiddenColumns) {\n    var items = [];\n    (0, _iterator.each)(hiddenColumns, function (_, column) {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex: function (visibleColumns) {\n    for (var i = 0; i < visibleColumns.length; i++) {\n      var column = visibleColumns[i];\n\n      if (column.command === ADAPTIVE_COLUMN_NAME) {\n        return i;\n      }\n    }\n  },\n  _hideAdaptiveColumn: function (resultWidths, visibleColumns) {\n    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n\n    if ((0, _type.isDefined)(visibleIndex)) {\n      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView: function (_ref) {\n    var $cells = _ref.$cells,\n        isCommandColumn = _ref.isCommandColumn;\n    var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cells.removeClass(cssClassNameToRemove);\n  },\n  _showHiddenColumns: function () {\n    for (var i = 0; i < COLUMN_VIEWS.length; i++) {\n      var view = this.getView(COLUMN_VIEWS[i]);\n\n      if (view && view.isVisible() && view.element()) {\n        var viewName = view.name;\n        var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n\n        var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: function ($cell) {\n    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS);\n  },\n  _hideVisibleColumn: function (_ref2) {\n    var isCommandColumn = _ref2.isCommandColumn,\n        visibleIndex = _ref2.visibleIndex;\n    var that = this;\n    COLUMN_VIEWS.forEach(function (viewName) {\n      var view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView: function (_ref3) {\n    var view = _ref3.view,\n        isCommandColumn = _ref3.isCommandColumn,\n        visibleIndex = _ref3.visibleIndex;\n    var viewName = view.name;\n    var $cellElement;\n\n    var column = this._columnsController.getVisibleColumns()[visibleIndex];\n\n    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n\n    if (view && view.isVisible() && column) {\n      var rowsCount = view.getRowsCount();\n\n      var $rowElements = view._getRowElements();\n\n      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n\n        if (!cancelClassAdding) {\n          var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n\n          if (currentVisibleIndex >= 0) {\n            var $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n  _findCellElementInRow: function ($rowElement, visibleColumnIndex) {\n    var $rowCells = $rowElement.children();\n    var visibleIndex = visibleColumnIndex;\n    var cellIsInsideGroup = false;\n\n    if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\n      var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\n      var colSpan = $groupCell.attr(\"colspan\");\n\n      if ($groupCell.length && (0, _type.isDefined)(colSpan)) {\n        var groupCellLength = parseInt(colSpan);\n        var endGroupIndex = $groupCell.index() + groupCellLength - 1;\n\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n\n    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n  _hideVisibleCellInView: function (_ref4) {\n    var $cell = _ref4.$cell,\n        isCommandColumn = _ref4.isCommandColumn;\n    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cell.addClass(cssClassNameToAdd);\n  },\n  _getEditMode: function () {\n    return this._editingController.getEditMode();\n  },\n  isFormEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP;\n  },\n  hideRedundantColumns: function (resultWidths, visibleColumns, hiddenQueue) {\n    var that = this;\n    this._hiddenColumns = [];\n\n    if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      var totalWidth = 0;\n      var $rootElement = that.component.$element();\n\n      var rootElementWidth = $rootElement.width() - that._getCommandColumnsWidth();\n\n      var getVisibleContentColumns = function () {\n        var _this = this;\n\n        return visibleColumns.filter(function (item) {\n          return !item.command && 0 === _this._hiddenColumns.filter(function (i) {\n            return i.index === item.index;\n          }).length;\n        });\n      }.bind(this);\n\n      var visibleContentColumns = getVisibleContentColumns();\n      var contentColumnsCount = visibleContentColumns.length;\n      var i;\n      var hasHiddenColumns;\n      var needHideColumn;\n\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n\n        var percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\n\n        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n\n        for (i = 0; i < visibleColumns.length; i++) {\n          var visibleColumn = visibleColumns[i];\n\n          var columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          var columnId = getColumnId(that, visibleColumn);\n\n          var widthOption = that._columnsController.columnOption(columnId, \"width\");\n\n          var minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\n\n          var columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\n            hasHiddenColumns = true;\n            continue;\n          }\n\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n\n          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n\n        needHideColumn = needHideColumn || totalWidth > $rootElement.width();\n\n        if (needHideColumn) {\n          var column = hiddenQueue.pop();\n\n          var visibleIndex = that._columnsController.getVisibleIndex(column.index);\n\n          rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          that._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n\n          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n          this._hiddenColumns.push(column);\n\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n\n      if (contentColumnsCount === visibleContentColumns.length) {\n        that._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      that._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getItemContentByColumnIndex: function (visibleColumnIndex) {\n    var $itemContent;\n\n    for (var i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      var item = $itemContent.data(\"dx-form-item\");\n\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n    if (!(this.isFormEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns: function (container, options) {\n    var that = this;\n    var $container = (0, _renderer.default)(container);\n    var userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new _guid.default()\n    };\n    var defaultFormOptions = (0, _themes.isMaterial)() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent((0, _renderer.default)(\"<div>\").appendTo($container), _form.default, (0, _extend.extend)(defaultFormOptions, userFormOptions, {\n      customizeItem: function (item) {\n        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady: function (e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS);\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded: function () {\n    return (0, _type.isDefined)(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm: function (hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && (0, _type.isDefined)(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue: function (columns) {\n    var that = this;\n    var hideableColumns = columns.filter(function (column) {\n      return column.visible && !column.type && !column.fixed && !((0, _type.isDefined)(column.groupIndex) && column.groupIndex >= 0);\n    });\n    var columnsHasHidingPriority;\n    var i;\n    that._hidingColumnsQueue = [];\n\n    if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\n      return that._hidingColumnsQueue;\n    }\n\n    for (i = 0; i < hideableColumns.length; i++) {\n      if ((0, _type.isDefined)(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n\n    if (columnsHasHidingPriority) {\n      that._hidingColumnsQueue.reverse();\n    } else {\n      if (that.option(\"columnHidingEnabled\")) {\n        for (i = 0; i < hideableColumns.length; i++) {\n          var visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\n\n          that._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n        }\n      }\n    }\n\n    that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\n    return that._hidingColumnsQueue;\n  },\n  getHiddenColumns: function () {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns: function () {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue: function () {\n    return this._hidingColumnsQueue;\n  },\n  init: function () {\n    var that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n\n    that._columnsController.addCommandColumn({\n      type: ADAPTIVE_COLUMN_NAME,\n      command: ADAPTIVE_COLUMN_NAME,\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n\n    that._columnsController.columnsChanged.add(function () {\n      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged: function (args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n\n    this.callBase(args);\n  },\n  publicMethods: function () {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  },\n  isAdaptiveDetailRowExpanded: function (key) {\n    return this._dataController.adaptiveExpandedKey() && (0, _common.equalByValue)(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow: function (key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow: function () {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  }\n});\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      columnHidingEnabled: false,\n      onAdaptiveDetailRowPreparing: null\n    };\n  },\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns((0, _renderer.default)(container), options);\n            };\n          }\n\n          return that.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);\n          }\n\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase($row, options);\n\n          var hidingColumnsQueueLength = this._adaptiveColumnsController.getHidingColumnsQueue().length;\n\n          var hiddenColumnsLength = this._adaptiveColumnsController.getHiddenColumns().length;\n\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);\n          }\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          } else {\n            return this.callBase($element);\n          }\n        },\n        _cellPrepared: function ($cell, options) {\n          this.callBase.apply(this, arguments);\n\n          if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n          }\n        },\n        _getCellElement: function (rowIndex, columnIdentifier) {\n          var item = this._dataController.items()[rowIndex];\n\n          if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          } else {\n            return this.callBase(rowIndex, columnIdentifier);\n          }\n        },\n        getContextMenuItems: function (options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            var view = this.component.getView(\"columnHeadersView\");\n            var formItem = (0, _renderer.default)(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement: function ($target) {\n          var isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      \"export\": {\n        _updateColumnWidth: function (column, width) {\n          this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated: function (point, cellsLength, columns) {\n          var result = this.callBase(point, cellsLength, columns);\n          var currentColumn = columns[point.columnIndex] || {};\n\n          var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n\n          var nextColumn = columns[nextColumnIndex] || {};\n          var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex: function (currentColumnIndex) {\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var index = this.callBase(currentColumnIndex);\n\n          while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            index++;\n          }\n\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated: function (point, columns, location, sourceColumn) {\n          var result = this.callBase(point, columns, location, sourceColumn);\n          var column = columns[point.columnIndex - 1] || {};\n          var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _getFormEditItemTemplate: function (cellOptions, column) {\n          if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem: function ($targetElement) {\n          var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n          var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n\n          var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems: function (rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            var items = this._dataController.items();\n\n            var item = items[rowIndex];\n\n            var oldExpandRowIndex = _uiGrid_core2.default.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n\n            rowIndices.push(rowIndex + 1);\n\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow: function (options) {\n          this.callBase(options);\n\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(options.key, this.isRowEditMode());\n\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow: function () {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow: function () {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData: function () {\n          var _this2 = this;\n\n          this.callBase.apply(this, arguments);\n          var deferred = new _deferred.Deferred();\n\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            (0, _deferred.when)(this.getController(\"validating\").validate(true)).done(function (isValid) {\n              if (isValid) {\n                _this2._cancelEditAdaptiveDetailRow();\n              }\n\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n\n          return deferred.promise();\n        },\n        _beforeCancelEditData: function () {\n          this.callBase();\n\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating: function (row) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode: function (rowIndices) {\n          var expandedKey = this._dataController._adaptiveExpandedKey;\n\n          if (expandedKey) {\n            var rowIndex = _uiGrid_core2.default.getIndexByKey(expandedKey, this._dataController.items());\n\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow: function (rowIndex) {\n          if (this._adaptiveController.isFormEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        deleteRow: function (rowIndex) {\n          var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit: function () {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _updateScrollableForIE: function () {\n          var that = this;\n\n          if (_browser.default.msie && parseInt(_browser.default.version) <= 11) {\n            this._updateScrollableTimeoutID = setTimeout(function () {\n              that.getView(\"rowsView\")._updateScrollable();\n            });\n          }\n        },\n        _correctColumnWidths: function (resultWidths, visibleColumns) {\n          var adaptiveController = this._adaptiveColumnsController;\n          var columnAutoWidth = this.option(\"columnAutoWidth\");\n          var oldHiddenColumns = adaptiveController.getHiddenColumns();\n          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          var hiddenColumns = adaptiveController.getHiddenColumns();\n\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n\n          if (columnAutoWidth && hidingColumnsQueue.length && !hiddenColumns.length) {\n            this._updateScrollableForIE();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch: function () {\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init: function () {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems: function (items, change) {\n          var that = this;\n          var changeType = change.changeType;\n          items = that.callBase.apply(that, arguments);\n\n          if (\"loadingAll\" === changeType || !(0, _type.isDefined)(that._adaptiveExpandedKey)) {\n            return items;\n          }\n\n          var expandRowIndex = _uiGrid_core2.default.getIndexByKey(that._adaptiveExpandedKey, items);\n\n          if (expandRowIndex >= 0) {\n            var item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: ADAPTIVE_ROW_TYPE,\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else {\n            if (\"refresh\" === changeType) {\n              that._adaptiveExpandedKey = void 0;\n            }\n          }\n\n          return items;\n        },\n        _getRowIndicesForExpand: function (key) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            var lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        adaptiveExpandedKey: function (value) {\n          if ((0, _type.isDefined)(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n          var that = this;\n\n          var oldExpandLoadedRowIndex = _uiGrid_core2.default.getIndexByKey(that._adaptiveExpandedKey, that._items);\n\n          var newExpandLoadedRowIndex = _uiGrid_core2.default.getIndexByKey(key, that._items);\n\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n\n          that._adaptiveExpandedKey = key;\n\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          that.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _getFocusCellSelector: function () {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getTooltipsSelector: function () {\n          return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n        }\n      },\n      columns: {\n        _isColumnVisible: function (column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid: function ($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n        },\n        _processNextCellInMasterDetail: function ($nextCell) {\n          this.callBase($nextCell);\n\n          var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n\n          if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\n            var focusHandler = function focusHandler() {\n              _events_engine.default.off($nextCell, \"focus\", focusHandler);\n\n              _events_engine.default.trigger($nextCell, \"dxclick\");\n            };\n\n            _events_engine.default.on($nextCell, \"focus\", focusHandler);\n          }\n        },\n        _handleTabKeyOnMasterDetailCell: function (eventTarget, direction) {\n          var result = this.callBase(eventTarget, direction);\n\n          var $currentCell = this._getFocusedCell();\n\n          var $row = $currentCell && $currentCell.parent();\n\n          if (!result && $row && $row.length) {\n            var $dataCells = getDataCellElements($row);\n            var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\n            var rowIndex = $row.get(0).rowIndex;\n            var adaptiveController = this._adaptiveController;\n\n            var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\n\n            var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\n            return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals;\n          }\n\n          return result;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/grid_core/ui.grid_core.adaptivity.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_events_engine","_index","_click","_type","_browser","_guid","_uiGrid_core","_form","_uiGrid_core2","_themes","_window","_common","_iterator","_extend","_deferred","obj","__esModule","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","addNamespace","name","createAction","toggleExpandAdaptiveDetailRow","key","appendTo","setEmptyText","AdaptiveColumnsController","ViewController","inherit","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","_dataController","getRowIndexByKey","row","items","modifiedValues","isDefined","_renderFormViewTemplate","focusAction","trigger","value","calculateCellValue","data","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","_editingController","rowsView","_rowsView","allowEditing","isKeyboardEnabled","attr","option","off","cellTemplate","templateOptions","extend","isDomElement","closest","getWindow","document","length","renderTemplate","done","_cellPrepared","get","encodeHtml","textContent","innerHTML","html","_getTemplate","editingController","visibleIndex","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditTemplate","watch","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","getCommandColumnsCount","result","j","visibleColumn","command","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","width","isString","slice","_isColumnHidden","_hiddenColumns","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","columnOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","each","isFormEditMode","editRowKey","equalByValue","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","_showHiddenColumns","view","getView","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","concat","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","_this","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getItemContentByColumnIndex","$itemContent","_$itemContents","alwaysExpanded","isEditing","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","isMaterial","colCount","executeAction","formOptions","_createComponent","customizeItem","label","caption","template","updateForm","call","onContentReady","e","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","updateHidingQueue","hideableColumns","visible","type","groupIndex","columnsHasHidingPriority","_hidingColumnsQueue","hidingPriority","reverse","Object","getHiddenColumns","getHidingColumnsQueue","init","addCommandColumn","adaptiveHidden","cssClass","alignment","fixedPosition","columnsChanged","add","isAdaptiveVisible","getColumns","callBase","optionChanged","args","publicMethods","isAdaptiveDetailRowExpanded","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","_default","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","_getCellTemplate","_adaptiveColumnsController","_createRow","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","formItem","first","apply","arguments","visibleWidth","_getCellElement","columnIdentifier","getContextMenuItems","targetElement","next","isClickableElement","$target","isClickable","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","_adaptiveController","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","_this2","deferred","Deferred","when","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","resizing","_needBestFit","_updateScrollableForIE","msie","version","_updateScrollableTimeoutID","setTimeout","_updateScrollable","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","dispose","clearTimeout","_processItems","change","changeType","expandRowIndex","splice","node","isNewRow","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_getFocusCellSelector","_getTooltipsSelector","_isColumnVisible","keyboardNavigation","_processNextCellInMasterDetail","$nextCell","isCellOrBatchMode","_isInsideEditForm","focusHandler","_handleTabKeyOnMasterDetailCell","eventTarget","direction","$currentCell","_getFocusedCell","parent","$dataCells","$targetCell","isCellElementsEquals","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _index = require(\"../../events/utils/index\");\r\nvar _click = require(\"../../events/click\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\r\nvar _guid = _interopRequireDefault(require(\"../../core/guid\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _form = _interopRequireDefault(require(\"../form\"));\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _themes = require(\"../themes\");\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nvar ROWS_VIEW = \"rowsView\";\r\nvar FOOTER_VIEW = \"footerView\";\r\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\r\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    var $adaptiveColumnButton;\r\n    var $container = (0, _renderer.default)(container);\r\n    var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = (0, _renderer.default)(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\r\n        _events_engine.default.on($adaptiveColumnButton, (0, _index.addNamespace)(_click.name, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function() {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        }));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        _uiGrid_core2.default.setEmptyText($container)\r\n    }\r\n}\r\nvar AdaptiveColumnsController = _uiGrid_core.default.ViewController.inherit({\r\n    _isRowEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_ROW\r\n    },\r\n    _isItemModified: function(item, cellOptions) {\r\n        var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        var row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && (0, _type.isDefined)(row.modifiedValues[columnIndex])\r\n    },\r\n    _renderFormViewTemplate: function(item, cellOptions, $container) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var focusAction = that.createAction(function() {\r\n            _events_engine.default.trigger($container, _click.name)\r\n        });\r\n        var value = column.calculateCellValue(cellOptions.data);\r\n        var displayValue = _uiGrid_core2.default.getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);\r\n        var text = _uiGrid_core2.default.formatValue(displayValue, column);\r\n        var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        var rowsView = that._rowsView;\r\n        if (column.allowEditing && that.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", that.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                _events_engine.default.off($container, \"focus\", focusAction);\r\n                _events_engine.default.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            var templateOptions = (0, _extend.extend)({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            var isDomElement = !!$container.closest((0, _window.getWindow)().document).length;\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(function() {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            })\r\n        } else {\r\n            var container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n            if (!(0, _type.isDefined)(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!that._isRowEditMode()) {\r\n                if (that._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(FORM_ITEM_MODIFIED)\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    },\r\n    _getTemplate: function(item, cellOptions) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var editingController = this.getController(\"editing\");\r\n        return function(options, container) {\r\n            var $container = (0, _renderer.default)(container);\r\n            var columnIndex = that._columnsController.getVisibleIndex(column.visibleIndex);\r\n            var templateOptions = (0, _extend.extend)({}, cellOptions);\r\n            var renderFormTemplate = function() {\r\n                var isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditTemplate(templateOptions, item, options.component, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            templateOptions.watch && templateOptions.watch(function() {\r\n                return {\r\n                    isItemEdited: that._isItemEdited(item),\r\n                    value: cellOptions.row.values[columnIndex]\r\n                }\r\n            }, function() {\r\n                $container.contents().remove();\r\n                $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n                renderFormTemplate()\r\n            })\r\n        }\r\n    },\r\n    _isVisibleColumnsValid: function(visibleColumns) {\r\n        var getCommandColumnsCount = function() {\r\n            var result = 0;\r\n            for (var j = 0; j < visibleColumns.length; j++) {\r\n                var visibleColumn = visibleColumns[j];\r\n                if (visibleColumn.command) {\r\n                    result++\r\n                }\r\n            }\r\n            return result\r\n        };\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - getCommandColumnsCount() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _calculatePercentWidths: function(widths, visibleColumns) {\r\n        var that = this;\r\n        var percentWidths = 0;\r\n        visibleColumns.forEach(function(item, index) {\r\n            if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        });\r\n        return percentWidths\r\n    },\r\n    _isPercentWidth: function(width) {\r\n        return (0, _type.isString)(width) && \"%\" === width.slice(-1)\r\n    },\r\n    _isColumnHidden: function(column) {\r\n        return this._hiddenColumns.filter(function(hiddenColumn) {\r\n            return hiddenColumn.index === column.index\r\n        }).length > 0\r\n    },\r\n    _getAverageColumnsWidth: function(containerWidth, columns, columnsCanFit) {\r\n        var that = this;\r\n        var fixedColumnsWidth = 0;\r\n        var columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach(function(column) {\r\n            if (!that._isColumnHidden(column)) {\r\n                var width = column.width;\r\n                if ((0, _type.isDefined)(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        });\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    },\r\n    _calculateColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        var columnsCount = contentColumns.length;\r\n        var colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return widthOption\r\n            }\r\n        } else {\r\n            var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    },\r\n    _calculatePercentWidth: function(options) {\r\n        var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    },\r\n    _getNotTruncatedColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    },\r\n    _getItemPercentWidth: function(item) {\r\n        var result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    },\r\n    _getCommandColumnsWidth: function() {\r\n        var that = this;\r\n        var columns = that._columnsController.getVisibleColumns();\r\n        var colWidth = 0;\r\n        (0, _iterator.each)(columns, function(index, column) {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        });\r\n        return colWidth\r\n    },\r\n    _isItemEdited: function(item) {\r\n        if (this.isFormEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            var editRowKey = this.option(\"editing.editRowKey\");\r\n            if ((0, _common.equalByValue)(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n    },\r\n    _getFormItemsByHiddenColumns: function(hiddenColumns) {\r\n        var items = [];\r\n        (0, _iterator.each)(hiddenColumns, function(_, column) {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        });\r\n        return items\r\n    },\r\n    _getAdaptiveColumnVisibleIndex: function(visibleColumns) {\r\n        for (var i = 0; i < visibleColumns.length; i++) {\r\n            var column = visibleColumns[i];\r\n            if (column.command === ADAPTIVE_COLUMN_NAME) {\r\n                return i\r\n            }\r\n        }\r\n    },\r\n    _hideAdaptiveColumn: function(resultWidths, visibleColumns) {\r\n        var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if ((0, _type.isDefined)(visibleIndex)) {\r\n            resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    },\r\n    _showHiddenCellsInView: function(_ref) {\r\n        var $cells = _ref.$cells,\r\n            isCommandColumn = _ref.isCommandColumn;\r\n        var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cells.removeClass(cssClassNameToRemove)\r\n    },\r\n    _showHiddenColumns: function() {\r\n        for (var i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            var view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                var viewName = view.name;\r\n                var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _isCellValid: function($cell) {\r\n        return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS)\r\n    },\r\n    _hideVisibleColumn: function(_ref2) {\r\n        var isCommandColumn = _ref2.isCommandColumn,\r\n            visibleIndex = _ref2.visibleIndex;\r\n        var that = this;\r\n        COLUMN_VIEWS.forEach(function(viewName) {\r\n            var view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        })\r\n    },\r\n    _hideVisibleColumnInView: function(_ref3) {\r\n        var view = _ref3.view,\r\n            isCommandColumn = _ref3.isCommandColumn,\r\n            visibleIndex = _ref3.visibleIndex;\r\n        var viewName = view.name;\r\n        var $cellElement;\r\n        var column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            var rowsCount = view.getRowsCount();\r\n            var $rowElements = view._getRowElements();\r\n            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        var $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _findCellElementInRow: function($rowElement, visibleColumnIndex) {\r\n        var $rowCells = $rowElement.children();\r\n        var visibleIndex = visibleColumnIndex;\r\n        var cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\r\n            var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\r\n            var colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && (0, _type.isDefined)(colSpan)) {\r\n                var groupCellLength = parseInt(colSpan);\r\n                var endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    },\r\n    _hideVisibleCellInView: function(_ref4) {\r\n        var $cell = _ref4.$cell,\r\n            isCommandColumn = _ref4.isCommandColumn;\r\n        var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cell.addClass(cssClassNameToAdd)\r\n    },\r\n    _getEditMode: function() {\r\n        return this._editingController.getEditMode()\r\n    },\r\n    isFormEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP\r\n    },\r\n    hideRedundantColumns: function(resultWidths, visibleColumns, hiddenQueue) {\r\n        var that = this;\r\n        this._hiddenColumns = [];\r\n        if (that._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            var totalWidth = 0;\r\n            var $rootElement = that.component.$element();\r\n            var rootElementWidth = $rootElement.width() - that._getCommandColumnsWidth();\r\n            var getVisibleContentColumns = function() {\r\n                var _this = this;\r\n                return visibleColumns.filter(function(item) {\r\n                    return !item.command && 0 === _this._hiddenColumns.filter(function(i) {\r\n                        return i.index === item.index\r\n                    }).length\r\n                })\r\n            }.bind(this);\r\n            var visibleContentColumns = getVisibleContentColumns();\r\n            var contentColumnsCount = visibleContentColumns.length;\r\n            var i;\r\n            var hasHiddenColumns;\r\n            var needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                var percentWidths = that._calculatePercentWidths(resultWidths, visibleColumns);\r\n                var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    var visibleColumn = visibleColumns[i];\r\n                    var columnWidth = that._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    var columnId = getColumnId(that, visibleColumn);\r\n                    var widthOption = that._columnsController.columnOption(columnId, \"width\");\r\n                    var minWidth = that._columnsController.columnOption(columnId, \"minWidth\");\r\n                    var columnBestFitWidth = that._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > $rootElement.width();\r\n                if (needHideColumn) {\r\n                    var column = hiddenQueue.pop();\r\n                    var visibleIndex = that._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += that._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    that._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            that._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    },\r\n    getItemContentByColumnIndex: function(visibleColumnIndex) {\r\n        var $itemContent;\r\n        for (var i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            var item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    },\r\n    toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n        if (!(this.isFormEditMode() && this._editingController.isEditing())) {\r\n            this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    },\r\n    createFormByHiddenColumns: function(container, options) {\r\n        var that = this;\r\n        var $container = (0, _renderer.default)(container);\r\n        var userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: \"dx-\" + new _guid.default\r\n        };\r\n        var defaultFormOptions = (0, _themes.isMaterial)() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent((0, _renderer.default)(\"<div>\").appendTo($container), _form.default, (0, _extend.extend)(defaultFormOptions, userFormOptions, {\r\n            customizeItem: function(item) {\r\n                var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady: function(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS)\r\n            }\r\n        }))\r\n    },\r\n    hasAdaptiveDetailRowExpanded: function() {\r\n        return (0, _type.isDefined)(this._dataController.adaptiveExpandedKey())\r\n    },\r\n    updateForm: function(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && (0, _type.isDefined)(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateHidingQueue: function(columns) {\r\n        var that = this;\r\n        var hideableColumns = columns.filter(function(column) {\r\n            return column.visible && !column.type && !column.fixed && !((0, _type.isDefined)(column.groupIndex) && column.groupIndex >= 0)\r\n        });\r\n        var columnsHasHidingPriority;\r\n        var i;\r\n        that._hidingColumnsQueue = [];\r\n        if (that.option(\"allowColumnResizing\") && \"widget\" === that.option(\"columnResizingMode\")) {\r\n            return that._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if ((0, _type.isDefined)(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                that._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            that._hidingColumnsQueue.reverse()\r\n        } else {\r\n            if (that.option(\"columnHidingEnabled\")) {\r\n                for (i = 0; i < hideableColumns.length; i++) {\r\n                    var visibleIndex = that._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                    that._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n                }\r\n            }\r\n        }\r\n        that._hidingColumnsQueue = that._hidingColumnsQueue.filter(Object);\r\n        return that._hidingColumnsQueue\r\n    },\r\n    getHiddenColumns: function() {\r\n        return this._hiddenColumns\r\n    },\r\n    hasHiddenColumns: function() {\r\n        return this._hiddenColumns.length > 0\r\n    },\r\n    getHidingColumnsQueue: function() {\r\n        return this._hidingColumnsQueue\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._dataController = that.getController(\"data\");\r\n        that._rowsView = that.getView(\"rowsView\");\r\n        that._columnsController.addCommandColumn({\r\n            type: ADAPTIVE_COLUMN_NAME,\r\n            command: ADAPTIVE_COLUMN_NAME,\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        that._columnsController.columnsChanged.add(function() {\r\n            var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\r\n            that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        });\r\n        that._editingController = that.getController(\"editing\");\r\n        that._hidingColumnsQueue = [];\r\n        that._hiddenColumns = [];\r\n        that.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        that.callBase()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"]\r\n    },\r\n    isAdaptiveDetailRowExpanded: function(key) {\r\n        return this._dataController.adaptiveExpandedKey() && (0, _common.equalByValue)(this._dataController.adaptiveExpandedKey(), key)\r\n    },\r\n    expandAdaptiveDetailRow: function(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    },\r\n    collapseAdaptiveDetailRow: function() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    }\r\n});\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnHidingEnabled: false,\r\n            onAdaptiveDetailRowPreparing: null\r\n        }\r\n    },\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\r\n                        return function(container, options) {\r\n                            that._adaptiveColumnsController.createFormByHiddenColumns((0, _renderer.default)(container), options)\r\n                        }\r\n                    }\r\n                    return that.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\r\n                        $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS)\r\n                    }\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase($row, options);\r\n                    var hidingColumnsQueueLength = this._adaptiveColumnsController.getHidingColumnsQueue().length;\r\n                    var hiddenColumnsLength = this._adaptiveColumnsController.getHiddenColumns().length;\r\n                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n                        getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS)\r\n                    }\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n                        var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n                    } else {\r\n                        return this.callBase($element)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                    }\r\n                },\r\n                _getCellElement: function(rowIndex, columnIdentifier) {\r\n                    var item = this._dataController.items()[rowIndex];\r\n                    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\r\n                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n                    } else {\r\n                        return this.callBase(rowIndex, columnIdentifier)\r\n                    }\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n                        var view = this.component.getView(\"columnHeadersView\");\r\n                        var formItem = (0, _renderer.default)(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n                        options.column = formItem ? formItem.column : options.column;\r\n                        return view.getContextMenuItems && view.getContextMenuItems(options)\r\n                    }\r\n                    return this.callBase && this.callBase(options)\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isClickable = this.callBase ? this.callBase($target) : false;\r\n                    return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            \"export\": {\r\n                _updateColumnWidth: function(column, width) {\r\n                    this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width)\r\n                }\r\n            },\r\n            columnsResizer: {\r\n                _pointCreated: function(point, cellsLength, columns) {\r\n                    var result = this.callBase(point, cellsLength, columns);\r\n                    var currentColumn = columns[point.columnIndex] || {};\r\n                    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n                    var nextColumn = columns[nextColumnIndex] || {};\r\n                    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n                    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                },\r\n                _getNextColumnIndex: function(currentColumnIndex) {\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var index = this.callBase(currentColumnIndex);\r\n                    while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        index++\r\n                    }\r\n                    return index\r\n                }\r\n            },\r\n            draggingHeader: {\r\n                _pointCreated: function(point, columns, location, sourceColumn) {\r\n                    var result = this.callBase(point, columns, location, sourceColumn);\r\n                    var column = columns[point.columnIndex - 1] || {};\r\n                    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                }\r\n            },\r\n            editing: {\r\n                _isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _getFormEditItemTemplate: function(cellOptions, column) {\r\n                    if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\r\n                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n                        return this.getColumnTemplate(cellOptions)\r\n                    }\r\n                    return this.callBase(cellOptions, column)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n                    var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n                    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n                    if (!this.isEditCell(rowIndex, columnIndex)) {\r\n                        this.callBase($targetElement)\r\n                    }\r\n                },\r\n                _beforeUpdateItems: function(rowIndices, rowIndex) {\r\n                    if (!this._adaptiveController.isFormEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        var items = this._dataController.items();\r\n                        var item = items[rowIndex];\r\n                        var oldExpandRowIndex = _uiGrid_core2.default.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\r\n                        if (oldExpandRowIndex >= 0) {\r\n                            rowIndices.push(oldExpandRowIndex + 1)\r\n                        }\r\n                        rowIndices.push(rowIndex + 1);\r\n                        this._dataController.adaptiveExpandedKey(item.key)\r\n                    }\r\n                },\r\n                _afterInsertRow: function(options) {\r\n                    this.callBase(options);\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._adaptiveController.toggleExpandAdaptiveDetailRow(options.key, this.isRowEditMode());\r\n                        this._isForceRowAdaptiveExpand = true\r\n                    }\r\n                },\r\n                _collapseAdaptiveDetailRow: function() {\r\n                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow();\r\n                        this._isForceRowAdaptiveExpand = false\r\n                    }\r\n                },\r\n                _cancelEditAdaptiveDetailRow: function() {\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._collapseAdaptiveDetailRow()\r\n                    }\r\n                },\r\n                _afterSaveEditData: function() {\r\n                    var _this2 = this;\r\n                    this.callBase.apply(this, arguments);\r\n                    var deferred = new _deferred.Deferred;\r\n                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        (0, _deferred.when)(this.getController(\"validating\").validate(true)).done(function(isValid) {\r\n                            if (isValid) {\r\n                                _this2._cancelEditAdaptiveDetailRow()\r\n                            }\r\n                            deferred.resolve()\r\n                        })\r\n                    } else {\r\n                        deferred.resolve()\r\n                    }\r\n                    return deferred.promise()\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    this.callBase();\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                },\r\n                _getRowIndicesForCascadeUpdating: function(row) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\r\n                        rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _beforeCloseEditCellInBatchMode: function(rowIndices) {\r\n                    var expandedKey = this._dataController._adaptiveExpandedKey;\r\n                    if (expandedKey) {\r\n                        var rowIndex = _uiGrid_core2.default.getIndexByKey(expandedKey, this._dataController.items());\r\n                        if (rowIndex > -1) {\r\n                            rowIndices.unshift(rowIndex)\r\n                        }\r\n                    }\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    if (this._adaptiveController.isFormEditMode()) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                    if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            },\r\n            resizing: {\r\n                _needBestFit: function() {\r\n                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n                },\r\n                _updateScrollableForIE: function() {\r\n                    var that = this;\r\n                    if (_browser.default.msie && parseInt(_browser.default.version) <= 11) {\r\n                        this._updateScrollableTimeoutID = setTimeout(function() {\r\n                            that.getView(\"rowsView\")._updateScrollable()\r\n                        })\r\n                    }\r\n                },\r\n                _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n                    var adaptiveController = this._adaptiveColumnsController;\r\n                    var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n                    var oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n                    var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n                    var hiddenColumns = adaptiveController.getHiddenColumns();\r\n                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n                        if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                            adaptiveController.updateForm(hiddenColumns)\r\n                        }\r\n                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n                    if (columnAutoWidth && hidingColumnsQueue.length && !hiddenColumns.length) {\r\n                        this._updateScrollableForIE()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n                    this.callBase(isBestFit)\r\n                },\r\n                _needStretch: function() {\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n                },\r\n                init: function() {\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    this.callBase()\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._updateScrollableTimeoutID)\r\n                }\r\n            },\r\n            data: {\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var changeType = change.changeType;\r\n                    items = that.callBase.apply(that, arguments);\r\n                    if (\"loadingAll\" === changeType || !(0, _type.isDefined)(that._adaptiveExpandedKey)) {\r\n                        return items\r\n                    }\r\n                    var expandRowIndex = _uiGrid_core2.default.getIndexByKey(that._adaptiveExpandedKey, items);\r\n                    if (expandRowIndex >= 0) {\r\n                        var item = items[expandRowIndex];\r\n                        items.splice(expandRowIndex + 1, 0, {\r\n                            visible: true,\r\n                            rowType: ADAPTIVE_ROW_TYPE,\r\n                            key: item.key,\r\n                            data: item.data,\r\n                            node: item.node,\r\n                            modifiedValues: item.modifiedValues,\r\n                            isNewRow: item.isNewRow,\r\n                            values: item.values\r\n                        })\r\n                    } else {\r\n                        if (\"refresh\" === changeType) {\r\n                            that._adaptiveExpandedKey = void 0\r\n                        }\r\n                    }\r\n                    return items\r\n                },\r\n                _getRowIndicesForExpand: function(key) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\r\n                        var lastRowIndex = rowIndices[rowIndices.length - 1];\r\n                        rowIndices.push(lastRowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                adaptiveExpandedKey: function(value) {\r\n                    if ((0, _type.isDefined)(value)) {\r\n                        this._adaptiveExpandedKey = value\r\n                    } else {\r\n                        return this._adaptiveExpandedKey\r\n                    }\r\n                },\r\n                toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n                    var that = this;\r\n                    var oldExpandLoadedRowIndex = _uiGrid_core2.default.getIndexByKey(that._adaptiveExpandedKey, that._items);\r\n                    var newExpandLoadedRowIndex = _uiGrid_core2.default.getIndexByKey(key, that._items);\r\n                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n                        key = void 0;\r\n                        newExpandLoadedRowIndex = -1\r\n                    }\r\n                    that._adaptiveExpandedKey = key;\r\n                    if (oldExpandLoadedRowIndex >= 0) {\r\n                        oldExpandLoadedRowIndex++\r\n                    }\r\n                    if (newExpandLoadedRowIndex >= 0) {\r\n                        newExpandLoadedRowIndex++\r\n                    }\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    that.updateItems({\r\n                        allowInvisibleRowIndices: true,\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n                    })\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveExpandedKey = void 0\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _getFocusCellSelector: function() {\r\n                    return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\"\r\n                },\r\n                _getTooltipsSelector: function() {\r\n                    return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)\r\n                }\r\n            },\r\n            columns: {\r\n                _isColumnVisible: function(column) {\r\n                    return this.callBase(column) && !column.adaptiveHidden\r\n                }\r\n            },\r\n            keyboardNavigation: {\r\n                _isCellValid: function($cell) {\r\n                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                },\r\n                _processNextCellInMasterDetail: function($nextCell) {\r\n                    this.callBase($nextCell);\r\n                    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n                    if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\r\n                        var focusHandler = function focusHandler() {\r\n                            _events_engine.default.off($nextCell, \"focus\", focusHandler);\r\n                            _events_engine.default.trigger($nextCell, \"dxclick\")\r\n                        };\r\n                        _events_engine.default.on($nextCell, \"focus\", focusHandler)\r\n                    }\r\n                },\r\n                _handleTabKeyOnMasterDetailCell: function(eventTarget, direction) {\r\n                    var result = this.callBase(eventTarget, direction);\r\n                    var $currentCell = this._getFocusedCell();\r\n                    var $row = $currentCell && $currentCell.parent();\r\n                    if (!result && $row && $row.length) {\r\n                        var $dataCells = getDataCellElements($row);\r\n                        var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\r\n                        var rowIndex = $row.get(0).rowIndex;\r\n                        var adaptiveController = this._adaptiveController;\r\n                        var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\r\n                        var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\r\n                        return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals\r\n                    }\r\n                    return result\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}