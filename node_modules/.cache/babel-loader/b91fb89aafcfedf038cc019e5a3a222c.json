{"ast":null,"code":"var _jsxFileName = \"E:\\\\newfrontend\\\\webfe\\\\src\\\\component\\\\Admin\\\\Cart\\\\cart\\\\payment.js\";\nimport React, { Component } from \"react\";\nimport { NormalInput, NormalButton, NormalSelect, NormalModal } from \"component/common\";\nimport { getPayment, createPayment } from \"redux/actions/payment\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { history } from \"helpers\";\nimport { getCommonApi } from \"redux/actions/common\";\nimport { dateFormat } from \"service/helperFunctions\";\nimport \"./style.scss\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport Label from \"reactstrap/lib/Label\";\nimport closeIcon from \"assets/images/close.png\";\nimport deleteIcon from \"assets/images/delete.jpg\";\nimport helpers from \"../../../../service/Helper\";\n\nconst moment = require(\"moment\");\n\nexport class MakePaymentClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formFields: {\n        name: \"\",\n        contact: \"\",\n        address: \"\",\n        searchStaff: \"\",\n        payTableDropDownValue: \"\"\n      },\n      responseData: {},\n      premisesOption: [],\n      selectedCards: [],\n      selectedCardsPayAmount: 0,\n      cardOption: [],\n      ewalletoptions: [],\n      ewalletField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true\n      },\n      cardField: {\n        pay_typeid: null,\n        pay_amt: \"\",\n        credit_debit: true,\n        pay_rem1: \"\",\n        pay_rem2: \"\",\n        pay_rem3: \"\",\n        pay_rem4: \"\"\n      },\n      balance: 0,\n      errorMessage: \"123\",\n      prepaidCustomerData: [],\n      voucherCustomerData: [],\n      creditNoteCustomerData: [],\n      accountHeader: [],\n      isMakePaymentButtonClicked: \"false\",\n      isTreatmentDoneButton: true,\n      itemProductAmount: 0,\n      itemServiceAmount: 0,\n      itemProductServiceVoucherAmount: 0,\n      displayTablePrepaid: [],\n      displayTableCreditNote: [],\n      displayTableVoucher: [],\n      paytableData: [],\n      paytableFullData: [],\n      payGroupData: [],\n      selectPaymentGroup: \"\",\n      selectPaymentGroupId: \"\",\n      isSelectedPaymentType: \"\",\n      displayModelPaymentType: \"\",\n      txtUserPayAmount: 0,\n      isOpenSubPayment: false\n    };\n\n    this.componentWillMount = () => {\n      this.validator = new SimpleReactValidator({\n        element: message => /*#__PURE__*/React.createElement(\"span\", {\n          className: \"error-message text-danger validNo fs14\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }\n        }, message),\n        autoForceUpdate: this\n      });\n    };\n\n    this.getPayment = () => {\n      let {\n        id,\n        cartId,\n        cartData\n      } = this.props; //id = 82318;\n      //cartId = \"ICMD100226\";\n      //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\n\n      if (id) {\n        this.props.getPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`).then(res => {\n          this.setState({\n            responseData: res.data,\n            balance: Number(res.data.billable_amount),\n            txtUserPayAmount: Number(res.data.billable_amount)\n          });\n        });\n      } else {// history.push(\"/admin/cart\");\n      } //let {cartData} = this.props;\n\n\n      let stringifiedCartData = cartData.data;\n      let {\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      } = this.state;\n\n      if (stringifiedCartData) {\n        stringifiedCartData.map(item => {\n          //alert(JSON.stringify(item));\n          if (item.recorddetail === \"Product\") {\n            itemProductAmount += parseFloat(item.total_price);\n          }\n\n          if (item.recorddetail === \"Service\") {\n            itemServiceAmount += parseFloat(item.total_price);\n          }\n\n          if (item.recorddetail === \"Product\" || item.recorddetail === \"Service\" || item.recorddetail === \"Voucher\") {\n            itemProductServiceVoucherAmount += parseFloat(item.total_price);\n          }\n        });\n      }\n\n      this.setState({\n        itemProductAmount,\n        itemServiceAmount,\n        itemProductServiceVoucherAmount\n      });\n    };\n\n    this.getPrepaidData = () => {\n      this.getPrepaidAccountData(\"\");\n    };\n\n    this.getVoucherData = api => {\n      this.props.getCommonApi(`voucher/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          voucherCustomerData\n        } = this.state;\n        voucherCustomerData = data;\n        console.log(\"voucherCustomerData\", data); // accountHeader = header_data;\n\n        this.setState({\n          voucherCustomerData\n        }, () => {\n          console.log(\"test\");\n          this.HideVoucherTableData();\n        });\n      });\n    };\n\n    this.getPrepaidAccountData = api => {\n      this.props.getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          prepaidCustomerData\n        } = this.state;\n        prepaidCustomerData = data;\n        console.log(\"prepaidCustomerData\", data); // accountHeader = header_data;\n\n        this.setState({\n          prepaidCustomerData\n        }, () => {\n          this.HidePrepaidTableData();\n        });\n      });\n    };\n\n    this.getCreditNoteAccountData = api => {\n      this.props.getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`).then(key => {\n        let {\n          data\n        } = key;\n        let {\n          creditNoteCustomerData\n        } = this.state;\n        creditNoteCustomerData = data; // accountHeader = header_data;\n\n        this.setState({\n          creditNoteCustomerData\n        }, () => {\n          this.HideCreditNoteTableData();\n        });\n      });\n    };\n\n    this.getPayGroup = () => {\n      this.props.getCommonApi(`paygroup/`).then(res => {\n        let {\n          payGroupData\n        } = this.state;\n\n        for (let key of res.data) {\n          payGroupData.push({\n            label: key.pay_group_code,\n            value: key.id,\n            picturelocation: key.picturelocation\n          });\n        }\n\n        this.setState({\n          payGroupData\n        });\n      });\n    };\n\n    this.getFullPayTable = () => {\n      this.props.getCommonApi(`paytablenew/`).then(res => {\n        let {\n          paytableFullData\n        } = this.state;\n        paytableFullData = res.data;\n        this.setState({\n          paytableFullData\n        });\n      });\n    };\n\n    this.getPayTableNameBasedOnId = payTableId => {\n      let {\n        paytableFullData\n      } = this.state;\n      const test = paytableFullData.filter(res => res.id == payTableId);\n      return test[0].pay_description;\n    };\n\n    this.handleChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let formFields = Object.assign({}, this.state.formFields);\n      formFields[name] = value;\n      this.setState({\n        formFields\n      });\n      let {\n        balance,\n        selectedCards,\n        txtUserPayAmount,\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      selectedCards.push({\n        pay_typeid: value,\n        pay_amt: parseFloat(txtUserPayAmount),\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false\n      });\n      balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n      txtUserPayAmount = balance;\n      this.setState({\n        txtUserPayAmount,\n        balance,\n        isOpenSubPayment\n      });\n    };\n\n    this.handleCreditChange = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      this.setState({\n        cardField\n      });\n    };\n\n    this.handleTreatmentDone = () => {\n      let {\n        selectedCards\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: 2,\n        pay_amt: 0,\n        credit_debit: false,\n        pay_premise: true,\n        prepaid: false\n      });\n      let data = selectedCards;\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`, data).then(res => {\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n    };\n\n    this.handleSubmit = () => {\n      let {\n        selectedCards\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"true\"\n      });\n      let data = selectedCards;\n      console.log(\"SubmitData\", data);\n      let {\n        id,\n        cartId\n      } = this.props;\n      this.props.createPayment(`?cart_date=${dateFormat(new Date(), \"yyyy-mm-dd\")}&cust_noid=${id}&cart_id=${cartId}`, data).then(res => {\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\n      });\n    };\n\n    this.addCreditCard = async () => {\n      if (!this.validator.fieldValid(\"cardFieldType\")) {\n        this.validator.showMessageFor(\"cardFieldType\");\n        return;\n      }\n\n      let {\n        cardField,\n        selectedCards,\n        balance,\n        responseData,\n        txtUserPayAmount\n      } = this.state;\n      let userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (parseFloat(this.state.responseData.billable_amount) > 0) {\n        if (userPayAmount == 0) {\n          return;\n        }\n      }\n\n      if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\n        alert(this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\");\n        return;\n      } else {\n        selectedCards.push({\n          pay_typeid: cardField.pay_typeid,\n          pay_amt: userPayAmount,\n          credit_debit: true,\n          pay_premise: false,\n          pay_rem1: cardField.pay_rem1,\n          pay_rem2: cardField.pay_rem2,\n          pay_rem3: cardField.pay_rem3,\n          pay_rem4: cardField.pay_rem4,\n          prepaid: false\n        });\n      }\n\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addPrepaid = selectedPrepaid => {\n      const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\"YYYY-MM-DD\");\n      const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n      const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\n      let userPayAmount = 0;\n      let {\n        itemServiceAmount,\n        itemProductAmount,\n        itemProductServiceVoucherAmount,\n        txtUserPayAmount\n      } = this.state;\n      userPayAmount = parseFloat(txtUserPayAmount);\n\n      if (isValid) {\n        alert(\"Check Expiry Date\");\n        return;\n      }\n\n      if (userPayAmount <= 0) {\n        // alert(\"hi\");\n        return;\n      }\n\n      const selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\n\n      if (selectedRemainingPrepaidAmount < userPayAmount) {//return\n      }\n      /*\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n        this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n        return;\r\n      }\r\n      */\n\n\n      if (selectedPrepaid.conditiontype1 === \"Service Only\") {\n        //For Service\n        if (parseFloat(itemServiceAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemServiceAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n        }\n\n        itemServiceAmount = itemServiceAmount - userPayAmount;\n        this.setState({\n          itemServiceAmount\n        });\n      } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\n        //For Product\n        if (parseFloat(itemProductAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n        }\n\n        itemProductAmount = itemProductAmount - userPayAmount;\n        this.setState({\n          itemProductAmount\n        });\n      } else {\n        if (parseFloat(itemProductServiceVoucherAmount) == 0) {\n          return;\n        }\n\n        if (parseFloat(itemProductServiceVoucherAmount) <= selectedRemainingPrepaidAmount) {\n          userPayAmount = parseFloat(txtUserPayAmount) < parseFloat(itemProductServiceVoucherAmount) ? parseFloat(txtUserPayAmount) : parseFloat(itemProductServiceVoucherAmount);\n        } else {\n          userPayAmount = selectedRemainingPrepaidAmount;\n        }\n\n        itemProductServiceVoucherAmount = itemProductServiceVoucherAmount - userPayAmount;\n        this.setState({\n          itemProductServiceVoucherAmount\n        });\n      }\n\n      if (userPayAmount == 0) {\n        return;\n      }\n\n      const payTypeId = 23;\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        selectedCards,\n        isOpenSubPayment\n      } = this.state;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: true,\n        pay_amt: userPayAmount,\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedPrepaid.pp_no + \" - \" + selectedPrepaid.line_no + \" - \" + selectedPrepaid.pp_desc,\n        pay_rem2: selectedPrepaid.id,\n        prepaid_ct: selectedPrepaid.conditiontype1\n      });\n      console.log(\"BeforeAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      let setdisplayTablePrepaid = this.state.displayTablePrepaid;\n      setdisplayTablePrepaid.push(selectedPrepaid.id);\n      this.setState({\n        displayTablePrepaid: setdisplayTablePrepaid\n      });\n      console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\n      this.HidePrepaidTableData();\n      balance = parseFloat(balance - userPayAmount).toFixed(2);\n      this.setBalanceToAllTextBoxes(balance);\n      this.setState({\n        isOpenSubPayment: false\n      });\n    };\n\n    this.addVoucher = selectedVoucher => {\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        isOpenSubPayment,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        return;\n      }\n\n      const selectedVoucherAmount = parseFloat(selectedVoucher.value);\n      let pay_amt_setup = 0;\n\n      if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedVoucherAmount;\n      } else {\n        alert(\"Partial Amount is not applicable in voucher\");\n        return;\n      }\n\n      const payTypeId = 9;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedVoucher.voucher_no,\n        pay_rem2: selectedVoucher.voucher_no\n      });\n      console.log(\"BeforeAdd-displayTableVoucher\", this.state.displayTableVoucher);\n      let setdisplayTableVoucher = this.state.displayTableVoucher;\n      setdisplayTableVoucher.push(selectedVoucher.voucher_no);\n      this.setState({\n        displayTableVoucher: setdisplayTableVoucher\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableVoucher);\n      this.HideVoucherTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addCreditNote = selectedCreditNote => {\n      let {\n        cardField,\n        ewalletField,\n        balance,\n        txtUserPayAmount,\n        selectedCards\n      } = this.state;\n\n      if (txtUserPayAmount == 0) {\n        return;\n      }\n\n      const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\n      let pay_amt_setup = 0;\n\n      if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\n        pay_amt_setup = selectedCreditNoteAmount;\n      } else {\n        pay_amt_setup = txtUserPayAmount;\n      }\n\n      const payTypeId = 17;\n      selectedCards.push({\n        pay_typeid: payTypeId,\n        prepaid: false,\n        pay_amt: parseFloat(pay_amt_setup),\n        credit_debit: false,\n        pay_premise: false,\n        pay_rem1: selectedCreditNote.credit_code,\n        pay_rem2: selectedCreditNote.transaction\n      });\n      console.log(\"BeforeAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      let setdisplayTableCreditNote = this.state.displayTableCreditNote;\n      setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\n      this.setState({\n        displayTableCreditNote: setdisplayTableCreditNote\n      });\n      console.log(\"AfterAdd-displayTableCreditNote\", this.state.displayTableCreditNote);\n      this.HideCreditNoteTableData();\n      balance = parseFloat(balance - pay_amt_setup).toFixed(2);\n      this.setState({\n        isOpenSubPayment: false\n      });\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.removeCards = idx => () => {\n      let {\n        selectedCards,\n        balance,\n        cardField,\n        ewalletField,\n        itemProductServiceVoucherAmount,\n        itemProductAmount,\n        itemServiceAmount\n      } = this.state;\n      this.setState({\n        isMakePaymentButtonClicked: \"false\"\n      });\n      balance = parseFloat(balance) + parseFloat(idx.pay_amt);\n      var array = [...selectedCards]; // make a separate copy of the array\n\n      var index = array.indexOf(idx);\n\n      if (idx.pay_typeid == 23) {\n        if (idx.prepaid_ct == \"Product Only\") {\n          itemProductAmount = itemProductAmount + idx.pay_amt;\n        } else if (idx.prepaid_ct == \"Service Only\") {\n          itemServiceAmount = itemServiceAmount + idx.pay_amt;\n        } else {\n          itemProductServiceVoucherAmount = itemProductServiceVoucherAmount + idx.pay_amt;\n        }\n\n        this.setState({\n          itemProductServiceVoucherAmount,\n          itemProductAmount,\n          itemServiceAmount\n        });\n      }\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        this.setState({\n          selectedCards: array,\n          balance\n        });\n      } //console.log(\"idx\", idx);\n\n\n      var removedTerm = idx.pay_typeid; //console.log(\"removedTerm\", removedTerm);\n      //console.log(\"idx.pay_rem2\", idx.pay_rem2);\n\n      if (removedTerm == \"23\") {\n        const items = this.state.displayTablePrepaid;\n        console.log(\"BeforeRemove-displayTablePrepaid\", items);\n        const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTablePrepaid: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTablePrepaid\", this.state.displayTablePrepaid);\n        });\n        this.getPrepaidAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"17\") {\n        const items = this.state.displayTableCreditNote;\n        console.log(\"BeforeRemove-displayTableCreditNote\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableCreditNote: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableCreditNote\", this.state.displayTableCreditNote);\n        });\n        this.getCreditNoteAccountData(\"\"); // this.HidePrepaidTableData();\n      }\n\n      if (removedTerm == \"9\") {\n        const items = this.state.displayTableVoucher;\n        console.log(\"BeforeRemove-displayTableVoucher\", items);\n        const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\n\n        console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\n        const filteredItems = items.filter(item => item !== valueToRemove);\n        this.setState({\n          displayTableVoucher: filteredItems\n        }, () => {\n          console.log(\"AfterRemove-displayTableVoucher\", this.state.displayTableVoucher);\n        });\n        this.getVoucherData(\"\");\n      }\n\n      cardField[\"pay_amt\"] = balance;\n      ewalletField[\"pay_amt\"] = balance;\n      this.setBalanceToAllTextBoxes(balance);\n    };\n\n    this.addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      if (!this.validator.fieldValid(\"Amount\")) {\n        this.validator.showMessageFor(\"Amount\");\n        return;\n      }\n\n      this.props.getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`).then(res => {\n        this.setState({\n          paytableData: []\n        });\n        let {\n          paytableData,\n          isSelectedPaymentType,\n          displayModelPaymentType\n        } = this.state;\n        isSelectedPaymentType = selPayTypeName.trim();\n        displayModelPaymentType = selPayTypeName.trim();\n\n        for (let key of res.data) {\n          paytableData.push({\n            label: key.pay_description,\n            value: key.id\n          });\n        }\n\n        this.setState({\n          paytableData\n        }, () => {\n          let {\n            isOpenSubPayment\n          } = this.state;\n\n          if (paytableData.length == 0) {\n            alert(\"Pay Table Not Exists\");\n            return;\n          } else if (selPayTypeName.trim() === \"VOUCHER\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"PREPAID\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"Credit\") {\n            isOpenSubPayment = true;\n          } else if (selPayTypeName.trim() === \"CARD\") {\n            isOpenSubPayment = true;\n          } else if (paytableData.length == 1) {\n            isOpenSubPayment = false;\n            let payTypeId = paytableData[0].value;\n            let {\n              balance,\n              selectedCards,\n              txtUserPayAmount\n            } = this.state;\n\n            if (parseFloat(this.state.responseData.billable_amount) > 0) {\n              if (parseFloat(txtUserPayAmount) == 0) {\n                return;\n              }\n            }\n\n            if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\n              alert(this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"); //alert(\"Already Exists\");\n\n              return;\n            } else {\n              selectedCards.push({\n                pay_typeid: payTypeId,\n                pay_amt: parseFloat(txtUserPayAmount),\n                credit_debit: false,\n                pay_premise: true,\n                prepaid: false\n              });\n              balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\n              txtUserPayAmount = balance;\n              this.setState({\n                txtUserPayAmount,\n                balance\n              });\n              return;\n            }\n          } else if (paytableData.length >= 1) {\n            isOpenSubPayment = true;\n            isSelectedPaymentType = \"Multiple\";\n          }\n\n          this.setState({\n            isOpenSubPayment,\n            isSelectedPaymentType,\n            displayModelPaymentType\n          });\n        });\n      });\n    };\n\n    this.handleDialog = async () => {\n      let {\n        isOpenSubPayment\n      } = this.state;\n      isOpenSubPayment = false;\n      await this.setState({\n        isOpenSubPayment\n      });\n    };\n\n    this.handleChangeCard = async ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      let cardField = Object.assign({}, this.state.cardField);\n      cardField[name] = value;\n      await this.setState({\n        cardField\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getPayment();\n    this.getPayGroup();\n    this.getFullPayTable();\n    this.getPrepaidData();\n    this.getCreditNoteAccountData(\"\");\n    this.getVoucherData(\"\");\n  }\n\n  handleChangeTextBox(event) {\n    this.setState({\n      txtUserPayAmount: event.target.value\n    });\n  }\n\n  checkPayTypeIdAlreadyExists(val) {\n    return this.state.selectedCards.some(item => val === item.pay_typeid);\n  }\n\n  HidePrepaidTableData() {\n    let {\n      prepaidCustomerData,\n      displayTablePrepaid\n    } = this.state;\n    displayTablePrepaid.map(item => {\n      var selectedPrepaid = prepaidCustomerData.filter(prepaid => prepaid.id != item);\n      this.setState({\n        prepaidCustomerData: selectedPrepaid\n      });\n    });\n  }\n\n  HideCreditNoteTableData() {\n    let {\n      creditNoteCustomerData,\n      displayTableCreditNote\n    } = this.state;\n    displayTableCreditNote.map(item => {\n      var selectedCreditNote = creditNoteCustomerData.filter(creditNote => creditNote.credit_code != item);\n      this.setState({\n        creditNoteCustomerData: selectedCreditNote\n      });\n    });\n  }\n\n  HideVoucherTableData() {\n    let {\n      voucherCustomerData,\n      displayTableVoucher\n    } = this.state;\n    displayTableVoucher.map(item => {\n      var selectedVoucher = voucherCustomerData.filter(voucher => voucher.voucher_no != item);\n      this.setState({\n        voucherCustomerData: selectedVoucher\n      });\n    });\n  }\n\n  setBalanceToAllTextBoxes(balance) {\n    this.setState({\n      balance: balance,\n      txtUserPayAmount: balance\n    });\n  }\n\n  checkTypeOfCartItemContainsDeposit(cartData) {\n    let stringifiedCartData = cartData.data;\n\n    if (stringifiedCartData) {\n      stringifiedCartData.map(item => {\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\n          this.state.isTreatmentDoneButton = false;\n        }\n      });\n    }\n  } // Function New code from 17/March/2020\n\n\n  render() {\n    let {\n      responseData,\n      balance,\n      isTreatmentDoneButton,\n      payGroupData,\n      paytableData,\n      isOpenSubPayment,\n      isSelectedPaymentType,\n      displayModelPaymentType,\n      cardField\n    } = this.state;\n    let {\n      payTableDropDownValue\n    } = this.state.formFields;\n    let insideRadioButtonData;\n\n    if (isSelectedPaymentType == \"VOUCHER\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-bordered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 15\n        }\n      }, \"Vocucher No\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 15\n        }\n      }, \"Value\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 15\n        }\n      }, \"Exp.Date\")), this.state.voucherCustomerData.map((selectedVoucher, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addVoucher.bind(this, selectedVoucher),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 17\n        }\n      }, selectedVoucher.voucher_no), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 17\n        }\n      }, selectedVoucher.value), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 17\n        }\n      }, selectedVoucher.issued_expiry_date)))));\n    } else if (isSelectedPaymentType == \"PREPAID\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 15\n        }\n      }, \"Category\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 15\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 15\n        }\n      }, \"Remaining\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 15\n        }\n      }, \"InvoiceNo\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 15\n        }\n      }, \"ExpDate\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 15\n        }\n      }, \"ConditionType\")), this.state.prepaidCustomerData.map((selectedPrepaid, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addPrepaid.bind(this, selectedPrepaid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_desc), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.pp_total), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.remain), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.prepaid), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.exp_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 17\n        }\n      }, selectedPrepaid.conditiontype1)))));\n    } else if (isSelectedPaymentType == \"Credit\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 9\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 15\n        }\n      }, \"Credit #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 15\n        }\n      }, \"Date\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 15\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 15\n        }\n      }, \"Balance\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 15\n        }\n      }, \"Status\")), this.state.creditNoteCustomerData.map((creditNote, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: this.addCreditNote.bind(this, creditNote),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 17\n        }\n      }, creditNote.credit_code), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 17\n        }\n      }, creditNote.sa_date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 17\n        }\n      }, creditNote.amount), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 17\n        }\n      }, creditNote.balance), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 17\n        }\n      }, creditNote.status)))));\n    } else if (isSelectedPaymentType == \"CARD\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 15\n        }\n      }, \"Select Card\", /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: cardField.pay_typeid,\n        name: \"pay_typeid\",\n        onChange: this.handleCreditChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 17\n        }\n      })), this.validator.message(\"cardFieldType\", cardField.pay_typeid, \"required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 15\n        }\n      }, \"Card No\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem1,\n        name: \"pay_rem1\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 15\n        }\n      }, \"Name\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem2,\n        name: \"pay_rem2\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 15\n        }\n      }, \"Exp Month\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem3,\n        name: \"pay_rem3\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 15\n        }\n      }, \"Exp Year\", /*#__PURE__*/React.createElement(NormalInput, {\n        value: cardField.pay_rem4,\n        name: \"pay_rem4\",\n        onChange: this.handleChangeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        mainbg: true,\n        className: \"col-12 mt-4 ml-2\",\n        label: \"CONFIRM\",\n        onClick: () => this.addCreditCard(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NormalButton, {\n        mainbg: true,\n        className: \"col-12 mt-4 ml-2\",\n        label: \"CANCEL\",\n        onClick: () => this.setState({\n          isOpenSubPayment: false\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 17\n        }\n      })))));\n    } else if (isSelectedPaymentType == \"Multiple\") {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 990,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        className: \"col-12 fs-15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 17\n        }\n      }, \"Choose Option\"), /*#__PURE__*/React.createElement(NormalSelect, {\n        placeholder: \"Search type...\",\n        options: paytableData,\n        value: payTableDropDownValue,\n        name: \"payTableDropDownValue\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 17\n        }\n      })))));\n    } else {\n      insideRadioButtonData = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 31\n        }\n      });\n    }\n\n    let payGroupDataContent = [];\n    payGroupData.forEach((item, i) => {\n      payGroupDataContent.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-1\",\n        style: {\n          width: \"100px\",\n          margin: \"50px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: helpers.getUrl() + \"media/\" + item.picturelocation,\n        label: item.label,\n        onClick: () => this.addNewPaymentData(item.value, item.label),\n        style: {\n          cursor: 'pointer'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1020,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          width: \"100px\",\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 13\n        }\n      }, item.label))));\n    });\n    let {\n      cartData,\n      tokenDetails\n    } = this.props;\n    this.checkTypeOfCartItemContainsDeposit(cartData);\n    let userAddedPayTableData = /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-bordered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 7\n      }\n    }, this.state.selectedCards.map((selectedCards, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 13\n      }\n    }, this.getPayTableNameBasedOnId(selectedCards.pay_typeid)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"fs-18\",\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 13\n      }\n    }, selectedCards.pay_amt.toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.removeCards(selectedCards),\n      width: \"30px\",\n      height: \"30px\",\n      src: deleteIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 15\n      }\n    })))));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NormalModal, {\n      className: \"payment-modal\",\n      style: {\n        minWidth: \"800px\"\n      },\n      modal: isOpenSubPayment,\n      handleModal: this.handleDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: this.handleDialog,\n      className: \"close cursor-pointer\",\n      src: closeIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"fs-18 f-600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 21\n      }\n    }, displayModelPaymentType)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 86\n      }\n    }), insideRadioButtonData), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      className: \"col-2 fs-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 15\n      }\n    }, \"Enter Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NormalInput, {\n      value: this.state.txtUserPayAmount,\n      onChange: this.handleChangeTextBox.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 17\n      }\n    }), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|min:0,num\"), this.validator.message(\"Amount\", this.state.txtUserPayAmount, \"required|numeric|max:\" + this.state.balance + \",num\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 13\n      }\n    }, \"Select Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-12 paymentGroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 11\n      }\n    }, payGroupDataContent)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment-section mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row pl-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-8 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-2 ml-1 payment fs-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 17\n      }\n    }, userAddedPayTableData)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-2 ml-1 payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 19\n      }\n    }, \"List of selection's\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row fs-14\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 21\n      }\n    }, \"Subtotal\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.subtotal), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 21\n      }\n    }, \"Discount (\", tokenDetails.currency, \")\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.discount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 21\n      }\n    }, \"Transac amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.trans_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 21\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.deposit_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 21\n      }\n    }, responseData.tax_lable), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.tax_amt), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 21\n      }\n    }, \"Billing Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 fs-22 f-700 text-center text-orenge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 21\n      }\n    }, tokenDetails.currency, \" \", responseData.billable_amount), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 f-600 text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 21\n      }\n    }, \"Balance Amount: \", Number(balance).toFixed(2))))))), isTreatmentDoneButton ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"TREATMENT DONE\",\n      onClick: () => this.handleTreatmentDone(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 15\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"make-payment mt-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 11\n      }\n    }, this.state.isMakePaymentButtonClicked == \"true\" ? /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"Make payment\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(NormalButton, {\n      mainbg: true,\n      className: \"col-12 fs-15 \",\n      label: \"Make payment \",\n      onClick: () => this.handleSubmit(),\n      disabled: this.state.selectedCards.length <= 0 || balance > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  appointmentDetail: state.appointment.appointmentDetail,\n  selected_cstomer: state.common.selected_cstomer,\n  tokenDetails: state.authStore.tokenDetails\n});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getPayment,\n    getCommonApi,\n    createPayment\n  }, dispatch);\n};\n\nexport const Payment = connect(mapStateToProps, mapDispatchToProps)(MakePaymentClass);","map":{"version":3,"sources":["E:/newfrontend/webfe/src/component/Admin/Cart/cart/payment.js"],"names":["React","Component","NormalInput","NormalButton","NormalSelect","NormalModal","getPayment","createPayment","connect","bindActionCreators","history","getCommonApi","dateFormat","SimpleReactValidator","Label","closeIcon","deleteIcon","helpers","moment","require","MakePaymentClass","state","formFields","name","contact","address","searchStaff","payTableDropDownValue","responseData","premisesOption","selectedCards","selectedCardsPayAmount","cardOption","ewalletoptions","ewalletField","pay_typeid","pay_amt","credit_debit","cardField","pay_rem1","pay_rem2","pay_rem3","pay_rem4","balance","errorMessage","prepaidCustomerData","voucherCustomerData","creditNoteCustomerData","accountHeader","isMakePaymentButtonClicked","isTreatmentDoneButton","itemProductAmount","itemServiceAmount","itemProductServiceVoucherAmount","displayTablePrepaid","displayTableCreditNote","displayTableVoucher","paytableData","paytableFullData","payGroupData","selectPaymentGroup","selectPaymentGroupId","isSelectedPaymentType","displayModelPaymentType","txtUserPayAmount","isOpenSubPayment","componentWillMount","validator","element","message","autoForceUpdate","id","cartId","cartData","props","Date","then","res","setState","data","Number","billable_amount","stringifiedCartData","map","item","recorddetail","parseFloat","total_price","getPrepaidData","getPrepaidAccountData","getVoucherData","api","key","console","log","HideVoucherTableData","HidePrepaidTableData","getCreditNoteAccountData","HideCreditNoteTableData","getPayGroup","push","label","pay_group_code","value","picturelocation","getFullPayTable","getPayTableNameBasedOnId","payTableId","test","filter","pay_description","handleChange","target","Object","assign","pay_premise","prepaid","toFixed","handleCreditChange","handleTreatmentDone","sa_transacno","handleSubmit","addCreditCard","fieldValid","showMessageFor","userPayAmount","checkPayTypeIdAlreadyExists","alert","setBalanceToAllTextBoxes","addPrepaid","selectedPrepaid","prepaidExpDate","exp_date","format","todaysDate","isValid","isSameOrAfter","selectedRemainingPrepaidAmount","remain","conditiontype1","payTypeId","pp_no","line_no","pp_desc","prepaid_ct","setdisplayTablePrepaid","addVoucher","selectedVoucher","selectedVoucherAmount","pay_amt_setup","voucher_no","setdisplayTableVoucher","addCreditNote","selectedCreditNote","selectedCreditNoteAmount","credit_code","transaction","setdisplayTableCreditNote","removeCards","idx","array","index","indexOf","splice","removedTerm","items","valueToRemove","filteredItems","addNewPaymentData","selPayTypeId","selPayTypeName","trim","length","handleDialog","handleChangeCard","componentDidMount","handleChangeTextBox","event","val","some","creditNote","voucher","checkTypeOfCartItemContainsDeposit","type","render","insideRadioButtonData","cursor","bind","issued_expiry_date","pp_total","sa_date","amount","status","payGroupDataContent","forEach","i","width","margin","getUrl","textAlign","tokenDetails","userAddedPayTableData","minWidth","currency","subtotal","discount","trans_amt","deposit_amt","tax_lable","tax_amt","mapStateToProps","appointmentDetail","appointment","selected_cstomer","common","authStore","mapDispatchToProps","dispatch","Payment"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  NormalInput,\r\n  NormalButton,\r\n  NormalSelect,\r\n  NormalModal,\r\n} from \"component/common\";\r\nimport { getPayment, createPayment } from \"redux/actions/payment\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { history } from \"helpers\";\r\nimport { getCommonApi } from \"redux/actions/common\";\r\nimport { dateFormat } from \"service/helperFunctions\";\r\nimport \"./style.scss\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport Label from \"reactstrap/lib/Label\";\r\nimport closeIcon from \"assets/images/close.png\";\r\nimport deleteIcon from \"assets/images/delete.jpg\";\r\nimport helpers from \"../../../../service/Helper\";\r\nconst moment = require(\"moment\");\r\nexport class MakePaymentClass extends Component {\r\n  state = {\r\n    formFields: {\r\n      name: \"\",\r\n      contact: \"\",\r\n      address: \"\",\r\n      searchStaff: \"\",\r\n      payTableDropDownValue: \"\",\r\n    },\r\n    responseData: {},\r\n\r\n    premisesOption: [],\r\n    selectedCards: [],\r\n    selectedCardsPayAmount: 0,\r\n    cardOption: [],\r\n    ewalletoptions: [],\r\n\r\n    ewalletField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n    },\r\n    cardField: {\r\n      pay_typeid: null,\r\n      pay_amt: \"\",\r\n      credit_debit: true,\r\n      pay_rem1: \"\",\r\n      pay_rem2: \"\",\r\n      pay_rem3: \"\",\r\n      pay_rem4: \"\",\r\n    },\r\n    balance: 0,\r\n    errorMessage: \"123\",\r\n    prepaidCustomerData: [],\r\n    voucherCustomerData: [],\r\n    creditNoteCustomerData: [],\r\n    accountHeader: [],\r\n    isMakePaymentButtonClicked: \"false\",\r\n    isTreatmentDoneButton: true,\r\n    itemProductAmount: 0,\r\n    itemServiceAmount: 0,\r\n    itemProductServiceVoucherAmount: 0,\r\n    displayTablePrepaid: [],\r\n    displayTableCreditNote: [],\r\n    displayTableVoucher: [],\r\n    paytableData: [],\r\n    paytableFullData: [],\r\n    payGroupData: [],\r\n    selectPaymentGroup: \"\",\r\n    selectPaymentGroupId: \"\",\r\n    isSelectedPaymentType: \"\",\r\n    displayModelPaymentType:\"\",\r\n    txtUserPayAmount: 0,\r\n    isOpenSubPayment: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getPayment();\r\n    this.getPayGroup();\r\n    this.getFullPayTable();\r\n    this.getPrepaidData();\r\n    this.getCreditNoteAccountData(\"\");\r\n    this.getVoucherData(\"\");\r\n  }\r\n  componentWillMount = () => {\r\n    this.validator = new SimpleReactValidator({\r\n      element: (message) => (\r\n        <span className=\"error-message text-danger validNo fs14\">\r\n          {message}\r\n        </span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  };\r\n  // get method for payment detail against appointment\r\n  getPayment = () => {\r\n    let { id, cartId, cartData } = this.props;\r\n    //id = 82318;\r\n    //cartId = \"ICMD100226\";\r\n    //cartData={\"status\":200,\"message\":\"Listed Succesfully\",\"error\":false,\"data\":[{\"id\":57500,\"cust_noid\":82318,\"customer\":\"test17011\",\"customercode\":\"021427HQ\",\"cart_id\":\"ICHQ100234\",\"cart_date\":\"2021-03-14\",\"cart_status\":\"Inprogress\",\"lineno\":1,\"check\":\"New\",\"itemcodeid\":10067,\"itemdesc\":\"Short - Chin Length(Before Shoulder) 128\",\"quantity\":1,\"price\":\"128.00\",\"total_price\":\"128.00\",\"sitecodeid\":31,\"sitecode_name\":\"HQ OFFICE (DEMO)\",\"sitecode\":\"HQ\",\"discount\":\"0.00\",\"discount_amt\":0,\"discount_price\":\"128.00\",\"additional_discount\":0,\"additional_discountamt\":0,\"deposit\":\"128.00\",\"trans_amt\":\"128.00\",\"tax\":0,\"itemstatus\":null,\"ratio\":\"100.000000000000000\",\"helper_name\":null,\"done_sessions\":null,\"type\":\"Deposit\",\"treatment_account\":null,\"treatment\":null,\"deposit_account\":null,\"prepaid_account\":null,\"item_uom\":null,\"recorddetail\":\"Service\",\"itemtype\":\"SINGLE\",\"item_class\":\"HERBAL TREATMENT\",\"sales_staff\":\"SEQ ADMIN\",\"service_staff\":\"\",\"total_disc\":\"0.00\",\"treatment_name\":\"Short - Chin Length(Before Shoulder) 128  (1)\",\"item_name\":\"Short - Chin Length(Before Shoulder) 128\"}],\"subtotal\":\"128.00\",\"discount\":\"0.00\",\"trans_amt\":\"128.00\",\"deposit_amt\":\"128.00\",\"billable_amount\":\"128.00\"}\r\n    if (id) {\r\n      this.props\r\n        .getPayment(\r\n          `?cart_date=${dateFormat(\r\n            new Date(),\r\n            \"yyyy-mm-dd\"\r\n          )}&cust_noid=${id}&cart_id=${cartId}`\r\n        )\r\n        .then((res) => {\r\n          this.setState({\r\n            responseData: res.data,\r\n            balance: Number(res.data.billable_amount),\r\n            txtUserPayAmount: Number(res.data.billable_amount),\r\n          });\r\n        });\r\n    } else {\r\n      // history.push(\"/admin/cart\");\r\n    }\r\n\r\n    //let {cartData} = this.props;\r\n    let stringifiedCartData = cartData.data;\r\n    let {\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    } = this.state;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map((item) => {\r\n        //alert(JSON.stringify(item));\r\n        if (item.recorddetail === \"Product\") {\r\n          itemProductAmount += parseFloat(item.total_price);\r\n        }\r\n        if (item.recorddetail === \"Service\") {\r\n          itemServiceAmount += parseFloat(item.total_price);\r\n        }\r\n        if (\r\n          item.recorddetail === \"Product\" ||\r\n          item.recorddetail === \"Service\" ||\r\n          item.recorddetail === \"Voucher\"\r\n        ) {\r\n          itemProductServiceVoucherAmount += parseFloat(item.total_price);\r\n        }\r\n      });\r\n    }\r\n    this.setState({\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n      itemProductServiceVoucherAmount,\r\n    });\r\n  };\r\n  getPrepaidData = () => {\r\n    this.getPrepaidAccountData(\"\");\r\n  };\r\n\r\n  getVoucherData = (api) => {\r\n    this.props\r\n      .getCommonApi(`voucher/?cust_id=${this.props.id}${api}`)\r\n      .then((key) => {\r\n        let { data } = key;\r\n        let { voucherCustomerData } = this.state;\r\n        voucherCustomerData = data;\r\n        console.log(\"voucherCustomerData\", data);\r\n        // accountHeader = header_data;\r\n        this.setState({ voucherCustomerData }, () => {\r\n          console.log(\"test\");\r\n          this.HideVoucherTableData();\r\n        });\r\n      });\r\n  };\r\n  getPrepaidAccountData = (api) => {\r\n    this.props\r\n      .getCommonApi(`prepaidacclist/?cust_id=${this.props.id}${api}`)\r\n      .then((key) => {\r\n        let { data } = key;\r\n        let { prepaidCustomerData } = this.state;\r\n        prepaidCustomerData = data;\r\n        console.log(\"prepaidCustomerData\", data);\r\n        // accountHeader = header_data;\r\n        this.setState({ prepaidCustomerData }, () => {\r\n          this.HidePrepaidTableData();\r\n        });\r\n      });\r\n  };\r\n  getCreditNoteAccountData = (api) => {\r\n    this.props\r\n      .getCommonApi(`creditnotelist/?cust_id=${this.props.id}${api}`)\r\n      .then((key) => {\r\n        let { data } = key;\r\n        let { creditNoteCustomerData } = this.state;\r\n        creditNoteCustomerData = data;\r\n        // accountHeader = header_data;\r\n        this.setState({ creditNoteCustomerData }, () => {\r\n          this.HideCreditNoteTableData();\r\n        });\r\n      });\r\n  };\r\n\r\n  getPayGroup = () => {\r\n    this.props.getCommonApi(`paygroup/`).then((res) => {\r\n      let { payGroupData } = this.state;\r\n      for (let key of res.data) {\r\n        payGroupData.push({\r\n          label: key.pay_group_code,\r\n          value: key.id,\r\n          picturelocation: key.picturelocation,\r\n        });\r\n      }\r\n      this.setState({\r\n        payGroupData,\r\n      });\r\n    });\r\n  };\r\n  getFullPayTable = () => {\r\n    this.props.getCommonApi(`paytablenew/`).then((res) => {\r\n      let { paytableFullData } = this.state;\r\n      paytableFullData = res.data;\r\n      this.setState({\r\n        paytableFullData,\r\n      });\r\n    });\r\n  };\r\n\r\n  getPayTableNameBasedOnId = (payTableId) => {\r\n    let { paytableFullData } = this.state;\r\n    const test = paytableFullData.filter((res) => res.id == payTableId);\r\n    return test[0].pay_description;\r\n  };\r\n\r\n  handleChangeTextBox(event) {\r\n    this.setState({\r\n      txtUserPayAmount: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleChange = ({ target: { value, name } }) => {\r\n    let formFields = Object.assign({}, this.state.formFields);\r\n\r\n    formFields[name] = value;\r\n    this.setState({\r\n      formFields,\r\n    });\r\n    let {\r\n      balance,\r\n      selectedCards,\r\n      txtUserPayAmount,\r\n      isOpenSubPayment,\r\n    } = this.state;\r\n    isOpenSubPayment = false;\r\n    selectedCards.push({\r\n      pay_typeid: value,\r\n      pay_amt: parseFloat(txtUserPayAmount),\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n    });\r\n    balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n    txtUserPayAmount = balance;\r\n    this.setState({ txtUserPayAmount, balance, isOpenSubPayment });\r\n  };\r\n  handleCreditChange = ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n    this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  handleTreatmentDone = () => {\r\n    let { selectedCards } = this.state;\r\n    selectedCards.push({\r\n      pay_typeid: 2,\r\n      pay_amt: 0,\r\n      credit_debit: false,\r\n      pay_premise: true,\r\n      prepaid: false,\r\n    });\r\n    let data = selectedCards;\r\n    let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}`,\r\n        data\r\n      )\r\n      .then((res) => {\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n  };\r\n  // create payment detail\r\n  handleSubmit = () => {\r\n    let { selectedCards } = this.state;\r\n\r\n    this.setState({ isMakePaymentButtonClicked: \"true\" });\r\n    let data = selectedCards;\r\n    console.log(\"SubmitData\", data);\r\n      let { id, cartId } = this.props;\r\n    this.props\r\n      .createPayment(\r\n        `?cart_date=${dateFormat(\r\n          new Date(),\r\n          \"yyyy-mm-dd\"\r\n        )}&cust_noid=${id}&cart_id=${cartId}`,\r\n        data\r\n      )\r\n      .then((res) => {\r\n        history.push(`/admin/billing/print/bill/${res.data.sa_transacno}`);\r\n      });\r\n  };\r\n\r\n  checkPayTypeIdAlreadyExists(val) {\r\n    return this.state.selectedCards.some((item) => val === item.pay_typeid);\r\n  }\r\n  addCreditCard = async () => {\r\n    if (!this.validator.fieldValid(\"cardFieldType\")) {\r\n      this.validator.showMessageFor(\"cardFieldType\");\r\n      return;\r\n    }\r\n\r\n    let {\r\n      cardField,\r\n      selectedCards,\r\n      balance,\r\n      responseData,\r\n      txtUserPayAmount,\r\n    } = this.state;\r\n    let userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n      if (userPayAmount == 0) {\r\n        return;\r\n      }\r\n    }\r\n    if (this.checkPayTypeIdAlreadyExists(cardField.pay_typeid)) {\r\n      alert(\r\n        this.getPayTableNameBasedOnId(cardField.pay_typeid) + \" already exists\"\r\n      );\r\n      return;\r\n    } else {\r\n      selectedCards.push({\r\n        pay_typeid: cardField.pay_typeid,\r\n        pay_amt: userPayAmount,\r\n        credit_debit: true,\r\n        pay_premise: false,\r\n        pay_rem1: cardField.pay_rem1,\r\n        pay_rem2: cardField.pay_rem2,\r\n        pay_rem3: cardField.pay_rem3,\r\n        pay_rem4: cardField.pay_rem4,\r\n        prepaid: false,\r\n      });\r\n    }\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n\r\n  addPrepaid = (selectedPrepaid) => {\r\n    const prepaidExpDate = moment(selectedPrepaid.exp_date).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    const isValid = moment(todaysDate).isSameOrAfter(prepaidExpDate);\r\n    let userPayAmount = 0;\r\n    let {\r\n      itemServiceAmount,\r\n      itemProductAmount,\r\n      itemProductServiceVoucherAmount,\r\n      txtUserPayAmount,\r\n    } = this.state;\r\n    userPayAmount = parseFloat(txtUserPayAmount);\r\n    if (isValid) {\r\n      alert(\"Check Expiry Date\");\r\n      return;\r\n    }\r\n    if (userPayAmount <= 0) {\r\n      // alert(\"hi\");\r\n      return;\r\n    }\r\n\r\n    const selectedRemainingPrepaidAmount = parseFloat(selectedPrepaid.remain);\r\n    if (selectedRemainingPrepaidAmount < userPayAmount) {\r\n      //return\r\n    }\r\n    /*\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"PrepaidBalanceAmount\")) {\r\n      this.validator.showMessageFor(\"PrepaidBalanceAmount\");\r\n      return;\r\n    }\r\n*/\r\n    if (selectedPrepaid.conditiontype1 === \"Service Only\") {\r\n      //For Service\r\n      if (parseFloat(itemServiceAmount) == 0) {\r\n        return;\r\n      }\r\n      if (parseFloat(itemServiceAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemServiceAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemServiceAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n      }\r\n      itemServiceAmount = itemServiceAmount - userPayAmount;\r\n      this.setState({ itemServiceAmount });\r\n    } else if (selectedPrepaid.conditiontype1 === \"Product Only\") {\r\n      //For Product\r\n      if (parseFloat(itemProductAmount) == 0) {\r\n        return;\r\n      }\r\n      if (parseFloat(itemProductAmount) <= selectedRemainingPrepaidAmount) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) < parseFloat(itemProductAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n      }\r\n      itemProductAmount = itemProductAmount - userPayAmount;\r\n      this.setState({ itemProductAmount });\r\n    } else {\r\n      if (parseFloat(itemProductServiceVoucherAmount) == 0) {\r\n        return;\r\n      }\r\n      if (\r\n        parseFloat(itemProductServiceVoucherAmount) <=\r\n        selectedRemainingPrepaidAmount\r\n      ) {\r\n        userPayAmount =\r\n          parseFloat(txtUserPayAmount) <\r\n          parseFloat(itemProductServiceVoucherAmount)\r\n            ? parseFloat(txtUserPayAmount)\r\n            : parseFloat(itemProductServiceVoucherAmount);\r\n      } else {\r\n        userPayAmount = selectedRemainingPrepaidAmount;\r\n      }\r\n      itemProductServiceVoucherAmount =\r\n        itemProductServiceVoucherAmount - userPayAmount;\r\n      this.setState({ itemProductServiceVoucherAmount });\r\n    }\r\n    if (userPayAmount == 0) {\r\n      return;\r\n    }\r\n    const payTypeId = 23;\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      selectedCards,\r\n      isOpenSubPayment,\r\n    } = this.state;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: true,\r\n      pay_amt: userPayAmount,\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1:\r\n        selectedPrepaid.pp_no +\r\n        \" - \" +\r\n        selectedPrepaid.line_no +\r\n        \" - \" +\r\n        selectedPrepaid.pp_desc,\r\n      pay_rem2: selectedPrepaid.id,\r\n      prepaid_ct: selectedPrepaid.conditiontype1,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTablePrepaid\",\r\n      this.state.displayTablePrepaid\r\n    );\r\n    let setdisplayTablePrepaid = this.state.displayTablePrepaid;\r\n    setdisplayTablePrepaid.push(selectedPrepaid.id);\r\n    this.setState({ displayTablePrepaid: setdisplayTablePrepaid });\r\n    console.log(\"AfterAdd-displayTablePrepaid\", this.state.displayTablePrepaid);\r\n    this.HidePrepaidTableData();\r\n\r\n    balance = parseFloat(balance - userPayAmount).toFixed(2);\r\n    this.setBalanceToAllTextBoxes(balance);\r\n    this.setState({ isOpenSubPayment: false });\r\n  };\r\n  HidePrepaidTableData() {\r\n    let { prepaidCustomerData, displayTablePrepaid } = this.state;\r\n    displayTablePrepaid.map((item) => {\r\n      var selectedPrepaid = prepaidCustomerData.filter(\r\n        (prepaid) => prepaid.id != item\r\n      );\r\n      this.setState({ prepaidCustomerData: selectedPrepaid });\r\n    });\r\n  }\r\n  HideCreditNoteTableData() {\r\n    let { creditNoteCustomerData, displayTableCreditNote } = this.state;\r\n    displayTableCreditNote.map((item) => {\r\n      var selectedCreditNote = creditNoteCustomerData.filter(\r\n        (creditNote) => creditNote.credit_code != item\r\n      );\r\n      this.setState({ creditNoteCustomerData: selectedCreditNote });\r\n    });\r\n  }\r\n  HideVoucherTableData() {\r\n    let { voucherCustomerData, displayTableVoucher } = this.state;\r\n    displayTableVoucher.map((item) => {\r\n      var selectedVoucher = voucherCustomerData.filter(\r\n        (voucher) => voucher.voucher_no != item\r\n      );\r\n      this.setState({ voucherCustomerData: selectedVoucher });\r\n    });\r\n  }\r\n  addVoucher = (selectedVoucher) => {\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      txtUserPayAmount,\r\n      isOpenSubPayment,\r\n      selectedCards,\r\n    } = this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      return;\r\n    }\r\n    const selectedVoucherAmount = parseFloat(selectedVoucher.value);\r\n    let pay_amt_setup = 0;\r\n    if (selectedVoucherAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedVoucherAmount;\r\n    } else {\r\n      alert(\"Partial Amount is not applicable in voucher\");\r\n      return;\r\n    }\r\n    const payTypeId = 9;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedVoucher.voucher_no,\r\n      pay_rem2: selectedVoucher.voucher_no,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableVoucher\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    let setdisplayTableVoucher = this.state.displayTableVoucher;\r\n    setdisplayTableVoucher.push(selectedVoucher.voucher_no);\r\n    this.setState({ displayTableVoucher: setdisplayTableVoucher });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableVoucher\r\n    );\r\n    this.HideVoucherTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  addCreditNote = (selectedCreditNote) => {\r\n    let {\r\n      cardField,\r\n      ewalletField,\r\n      balance,\r\n      txtUserPayAmount,\r\n      selectedCards,\r\n    } = this.state;\r\n    if (txtUserPayAmount == 0) {\r\n      return;\r\n    }\r\n    const selectedCreditNoteAmount = parseFloat(selectedCreditNote.balance);\r\n    let pay_amt_setup = 0;\r\n    if (selectedCreditNoteAmount <= parseFloat(txtUserPayAmount)) {\r\n      pay_amt_setup = selectedCreditNoteAmount;\r\n    } else {\r\n      pay_amt_setup = txtUserPayAmount;\r\n    }\r\n    const payTypeId = 17;\r\n\r\n    selectedCards.push({\r\n      pay_typeid: payTypeId,\r\n      prepaid: false,\r\n      pay_amt: parseFloat(pay_amt_setup),\r\n      credit_debit: false,\r\n      pay_premise: false,\r\n      pay_rem1: selectedCreditNote.credit_code,\r\n      pay_rem2: selectedCreditNote.transaction,\r\n    });\r\n    console.log(\r\n      \"BeforeAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    let setdisplayTableCreditNote = this.state.displayTableCreditNote;\r\n    setdisplayTableCreditNote.push(selectedCreditNote.credit_code);\r\n    this.setState({ displayTableCreditNote: setdisplayTableCreditNote });\r\n    console.log(\r\n      \"AfterAdd-displayTableCreditNote\",\r\n      this.state.displayTableCreditNote\r\n    );\r\n    this.HideCreditNoteTableData();\r\n\r\n    balance = parseFloat(balance - pay_amt_setup).toFixed(2);\r\n    this.setState({ isOpenSubPayment: false });\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n\r\n  setBalanceToAllTextBoxes(balance) {\r\n    this.setState({\r\n      balance: balance,\r\n      txtUserPayAmount: balance,\r\n    });\r\n  }\r\n\r\n  removeCards = (idx) => () => {\r\n    let {\r\n      selectedCards,\r\n      balance,\r\n      cardField,\r\n      ewalletField,\r\n      itemProductServiceVoucherAmount,\r\n      itemProductAmount,\r\n      itemServiceAmount,\r\n    } = this.state;\r\n    this.setState({ isMakePaymentButtonClicked: \"false\" });\r\n    balance = parseFloat(balance) + parseFloat(idx.pay_amt);\r\n    var array = [...selectedCards]; // make a separate copy of the array\r\n    var index = array.indexOf(idx);\r\n    if (idx.pay_typeid == 23) {\r\n      if (idx.prepaid_ct == \"Product Only\") {\r\n        itemProductAmount = itemProductAmount + idx.pay_amt;\r\n      } else if (idx.prepaid_ct == \"Service Only\") {\r\n        itemServiceAmount = itemServiceAmount + idx.pay_amt;\r\n      } else {\r\n        itemProductServiceVoucherAmount =\r\n          itemProductServiceVoucherAmount + idx.pay_amt;\r\n      }\r\n      this.setState({\r\n        itemProductServiceVoucherAmount,\r\n        itemProductAmount,\r\n        itemServiceAmount,\r\n      });\r\n    }\r\n    if (index !== -1) {\r\n      array.splice(index, 1);\r\n      this.setState({ selectedCards: array, balance });\r\n    }\r\n    //console.log(\"idx\", idx);\r\n    var removedTerm = idx.pay_typeid;\r\n    //console.log(\"removedTerm\", removedTerm);\r\n    //console.log(\"idx.pay_rem2\", idx.pay_rem2);\r\n    if (removedTerm == \"23\") {\r\n      const items = this.state.displayTablePrepaid;\r\n      console.log(\"BeforeRemove-displayTablePrepaid\", items);\r\n      const valueToRemove = idx.pay_rem2; //For Prepaid Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter((item) => item !== valueToRemove);\r\n      this.setState({ displayTablePrepaid: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTablePrepaid\",\r\n          this.state.displayTablePrepaid\r\n        );\r\n      });\r\n      this.getPrepaidAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n    if (removedTerm == \"17\") {\r\n      const items = this.state.displayTableCreditNote;\r\n      console.log(\"BeforeRemove-displayTableCreditNote\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter((item) => item !== valueToRemove);\r\n      this.setState({ displayTableCreditNote: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableCreditNote\",\r\n          this.state.displayTableCreditNote\r\n        );\r\n      });\r\n      this.getCreditNoteAccountData(\"\");\r\n      // this.HidePrepaidTableData();\r\n    }\r\n\r\n    if (removedTerm == \"9\") {\r\n      const items = this.state.displayTableVoucher;\r\n      console.log(\"BeforeRemove-displayTableVoucher\", items);\r\n      const valueToRemove = idx.pay_rem1; //For Credit Note Ony we have added unique id here\r\n      console.log(\"BeforeRemove-valueToRemove\", valueToRemove);\r\n      const filteredItems = items.filter((item) => item !== valueToRemove);\r\n      this.setState({ displayTableVoucher: filteredItems }, () => {\r\n        console.log(\r\n          \"AfterRemove-displayTableVoucher\",\r\n          this.state.displayTableVoucher\r\n        );\r\n      });\r\n      this.getVoucherData(\"\");\r\n    }\r\n    cardField[\"pay_amt\"] = balance;\r\n    ewalletField[\"pay_amt\"] = balance;\r\n    this.setBalanceToAllTextBoxes(balance);\r\n  };\r\n  checkTypeOfCartItemContainsDeposit(cartData) {\r\n    let stringifiedCartData = cartData.data;\r\n    if (stringifiedCartData) {\r\n      stringifiedCartData.map((item) => {\r\n        if (item.type === \"Deposit\" || item.type === \"Top Up\") {\r\n          this.state.isTreatmentDoneButton = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // Function New code from 17/March/2020\r\n  addNewPaymentData = async (selPayTypeId, selPayTypeName) => {\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n    if (!this.validator.fieldValid(\"Amount\")) {\r\n      this.validator.showMessageFor(\"Amount\");\r\n      return;\r\n    }\r\n\r\n    this.props\r\n      .getCommonApi(`paytablenew/?paygroupid=${selPayTypeId}`)\r\n      .then((res) => {\r\n        this.setState({\r\n          paytableData: [],\r\n        });\r\n        let { paytableData, isSelectedPaymentType,displayModelPaymentType } = this.state;\r\n        isSelectedPaymentType = selPayTypeName.trim();\r\n        displayModelPaymentType=selPayTypeName.trim();\r\n        for (let key of res.data) {\r\n          paytableData.push({ label: key.pay_description, value: key.id });\r\n        }\r\n        this.setState(\r\n          {\r\n            paytableData,\r\n          },\r\n          () => {\r\n            let { isOpenSubPayment } = this.state;\r\n            if (paytableData.length == 0) {\r\n              alert(\"Pay Table Not Exists\");\r\n              return;\r\n            } else if (selPayTypeName.trim() === \"VOUCHER\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"PREPAID\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"Credit\") {\r\n              isOpenSubPayment = true;\r\n            } else if (selPayTypeName.trim() === \"CARD\") {\r\n              isOpenSubPayment = true;\r\n            } else if (paytableData.length == 1) {\r\n              isOpenSubPayment = false;\r\n              let payTypeId = paytableData[0].value;\r\n              let { balance, selectedCards, txtUserPayAmount } = this.state;\r\n              if (parseFloat(this.state.responseData.billable_amount) > 0) {\r\n                if (parseFloat(txtUserPayAmount) == 0) {\r\n                  return;\r\n                }\r\n              }\r\n              if (this.checkPayTypeIdAlreadyExists(payTypeId)) {\r\n                alert(\r\n                  this.getPayTableNameBasedOnId(payTypeId) + \" already exists\"\r\n                );\r\n                //alert(\"Already Exists\");\r\n                return;\r\n              } else {\r\n                selectedCards.push({\r\n                  pay_typeid: payTypeId,\r\n                  pay_amt: parseFloat(txtUserPayAmount),\r\n                  credit_debit: false,\r\n                  pay_premise: true,\r\n                  prepaid: false,\r\n                });\r\n                balance = parseFloat(balance - txtUserPayAmount).toFixed(2);\r\n                txtUserPayAmount = balance;\r\n                this.setState({ txtUserPayAmount, balance });\r\n                return;\r\n              }\r\n            } else if (paytableData.length >= 1) {\r\n              isOpenSubPayment = true;\r\n              isSelectedPaymentType = \"Multiple\";\r\n            }\r\n            this.setState({ isOpenSubPayment, isSelectedPaymentType,displayModelPaymentType });\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  handleDialog = async () => {\r\n    let { isOpenSubPayment } = this.state;\r\n    isOpenSubPayment = false;\r\n    await this.setState({\r\n      isOpenSubPayment,\r\n    });\r\n  };\r\n\r\n  handleChangeCard = async ({ target: { value, name } }) => {\r\n    let cardField = Object.assign({}, this.state.cardField);\r\n\r\n    cardField[name] = value;\r\n\r\n    await this.setState({\r\n      cardField,\r\n    });\r\n  };\r\n  render() {\r\n    let {\r\n      responseData,\r\n      balance,\r\n      isTreatmentDoneButton,\r\n      payGroupData,\r\n      paytableData,\r\n      isOpenSubPayment,\r\n      isSelectedPaymentType,\r\n      displayModelPaymentType,\r\n      cardField,\r\n    } = this.state;\r\n    let { payTableDropDownValue } = this.state.formFields;\r\n    let insideRadioButtonData;\r\n\r\n    if (isSelectedPaymentType == \"VOUCHER\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tr>\r\n              <td>Vocucher No</td>\r\n              <td>Value</td>\r\n              <td>Exp.Date</td>\r\n            </tr>\r\n            {this.state.voucherCustomerData.map((selectedVoucher, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addVoucher.bind(this, selectedVoucher)}\r\n              >\r\n                <td>{selectedVoucher.voucher_no}</td>\r\n                <td>{selectedVoucher.value}</td>\r\n                <td>{selectedVoucher.issued_expiry_date}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"PREPAID\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>Category</td>\r\n              <td>Amount</td>\r\n              <td>Remaining</td>\r\n              <td>InvoiceNo</td>\r\n              <td>ExpDate</td>\r\n              <td>ConditionType</td>\r\n            </tr>\r\n            {this.state.prepaidCustomerData.map((selectedPrepaid, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addPrepaid.bind(this, selectedPrepaid)}\r\n              >\r\n                <td>{selectedPrepaid.pp_desc}</td>\r\n                <td>{selectedPrepaid.pp_total}</td>\r\n                <td>{selectedPrepaid.remain}</td>\r\n                <td>{selectedPrepaid.prepaid}</td>\r\n                <td>{selectedPrepaid.exp_date}</td>\r\n                <td>{selectedPrepaid.conditiontype1}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Credit\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          {\" \"}\r\n          <table className=\"table table-striped\">\r\n            <tr>\r\n              <td>Credit #</td>\r\n              <td>Date</td>\r\n              <td>Amount</td>\r\n              <td>Balance</td>\r\n              <td>Status</td>\r\n            </tr>\r\n            {this.state.creditNoteCustomerData.map((creditNote, index) => (\r\n              <tr\r\n                key={index}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={this.addCreditNote.bind(this, creditNote)}\r\n              >\r\n                <td>{creditNote.credit_code}</td>\r\n                <td>{creditNote.sa_date}</td>\r\n                <td>{creditNote.amount}</td>\r\n                <td>{creditNote.balance}</td>\r\n                <td>{creditNote.status}</td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"CARD\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Select Card\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={cardField.pay_typeid}\r\n                  name=\"pay_typeid\"\r\n                  onChange={this.handleCreditChange}\r\n                />\r\n              </div>\r\n              {this.validator.message(\r\n                \"cardFieldType\",\r\n                cardField.pay_typeid,\r\n                \"required\"\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Card No\r\n                <NormalInput\r\n                  value={cardField.pay_rem1}\r\n                  name=\"pay_rem1\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Name\r\n                <NormalInput\r\n                  value={cardField.pay_rem2}\r\n                  name=\"pay_rem2\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Exp Month\r\n                <NormalInput\r\n                  value={cardField.pay_rem3}\r\n                  name=\"pay_rem3\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                Exp Year\r\n                <NormalInput\r\n                  value={cardField.pay_rem4}\r\n                  name=\"pay_rem4\"\r\n                  onChange={this.handleChangeCard}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={true}\r\n                  className=\"col-12 mt-4 ml-2\"\r\n                  label=\"CONFIRM\"\r\n                  onClick={() => this.addCreditCard()}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-2\">\r\n              <div className=\"input-group\">\r\n                <NormalButton\r\n                  mainbg={true}\r\n                  className=\"col-12 mt-4 ml-2\"\r\n                  label=\"CANCEL\"\r\n                  onClick={() => this.setState({ isOpenSubPayment: false })}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (isSelectedPaymentType == \"Multiple\") {\r\n      insideRadioButtonData = (\r\n        <div>\r\n          <div className=\"row\">\r\n            <div className=\"col-5\">\r\n              <div className=\"input-group\">\r\n                <Label className=\"col-12 fs-15\">Choose Option</Label>\r\n                <NormalSelect\r\n                  placeholder=\"Search type...\"\r\n                  options={paytableData}\r\n                  value={payTableDropDownValue}\r\n                  name=\"payTableDropDownValue\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      insideRadioButtonData = <div></div>;\r\n    }\r\n    let payGroupDataContent = [];\r\n    payGroupData.forEach((item, i) => {\r\n      payGroupDataContent.push(\r\n        <div className=\"col-md-1\" style={{ width: \"100px\", margin: \"50px\" }}>\r\n          <img\r\n            src={helpers.getUrl() + \"media/\" + item.picturelocation}\r\n            label={item.label}\r\n            onClick={() => this.addNewPaymentData(item.value, item.label)}\r\n            style={{cursor:'pointer'}}\r\n          />\r\n          <br />\r\n          <center>\r\n            <p\r\n              style={{ width: \"100px\",textAlign: 'center'}}\r\n            >\r\n              {item.label}\r\n            </p>\r\n          </center>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let { cartData, tokenDetails } = this.props;\r\n    this.checkTypeOfCartItemContainsDeposit(cartData);\r\n\r\n    let userAddedPayTableData = (\r\n      <table className=\"table table-bordered\">\r\n        {this.state.selectedCards.map((selectedCards, index) => (\r\n          <tr key={index}>\r\n            <td className=\"fs-18\">\r\n              {this.getPayTableNameBasedOnId(selectedCards.pay_typeid)}\r\n            </td>\r\n            <td className=\"fs-18\" style={{ textAlign: \"right\" }}>\r\n              {selectedCards.pay_amt.toFixed(2)}\r\n            </td>\r\n            <td>\r\n              <img\r\n                onClick={this.removeCards(selectedCards)}\r\n                width=\"30px\"\r\n                height=\"30px\"\r\n                src={deleteIcon}\r\n                alt=\"\"\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <div className=\"row\">\r\n          <NormalModal\r\n            className={\"payment-modal\"}\r\n            style={{ minWidth: \"800px\" }}\r\n            modal={isOpenSubPayment}\r\n            handleModal={this.handleDialog}\r\n          >\r\n            <img\r\n              onClick={this.handleDialog}\r\n              className=\"close cursor-pointer\"\r\n              src={closeIcon}\r\n              alt=\"\"\r\n            />\r\n            <center><p className=\"fs-18 f-600\">{displayModelPaymentType}</p></center><br/>\r\n            {insideRadioButtonData}\r\n          </NormalModal>\r\n          <div className=\"col-12 \">\r\n            <div className=\"row \">\r\n              <Label className=\"col-2 fs-18\">Enter Amount</Label>\r\n              <div className=\"col-2\">\r\n                <NormalInput\r\n                  value={this.state.txtUserPayAmount}\r\n                  onChange={this.handleChangeTextBox.bind(this)}\r\n                />\r\n\r\n                {this.validator.message(\r\n                  \"Amount\",\r\n                  this.state.txtUserPayAmount,\r\n                  \"required|numeric|min:0,num\"\r\n                )}\r\n                {this.validator.message(\r\n                  \"Amount\",\r\n                  this.state.txtUserPayAmount,\r\n                  \"required|numeric|max:\" + this.state.balance + \",num\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12 \">\r\n            <h4>Select Payment Method</h4>\r\n          </div>\r\n          <div className=\"row col-12 paymentGroup\">{payGroupDataContent}</div>\r\n        </div>\r\n        <div className=\"make-payment-section mb-4\">\r\n          <div className=\"row pl-3\">\r\n            {/* <div className=\"text-right f-600\">Balance: {Number(balance).toFixed(2)}</div> */}\r\n            <div className=\"row \">\r\n              <div className=\"col-8 \">\r\n                <div className=\"p-2 ml-1 payment fs-12\">\r\n                  {userAddedPayTableData}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-4 \">\r\n                <div className=\"p-2 ml-1 payment\">\r\n                  <p>List of selection's</p>\r\n\r\n                  <div className=\"row fs-14\">\r\n                    <div className=\"col-7\">Subtotal</div>\r\n                    <div className=\"col-5\">\r\n                      {tokenDetails.currency} {responseData.subtotal}\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                      Discount ({tokenDetails.currency})\r\n                    </div>\r\n                    <div className=\"col-5\">\r\n                      {tokenDetails.currency} {responseData.discount}\r\n                    </div>\r\n                    <div className=\"col-7\">Transac amount</div>\r\n                    <div className=\"col-5\">\r\n                      {tokenDetails.currency} {responseData.trans_amt}\r\n                    </div>\r\n                    <div className=\"col-7\">Deposit</div>\r\n                    <div className=\"col-5\">\r\n                      {tokenDetails.currency} {responseData.deposit_amt}\r\n                    </div>\r\n                    <div className=\"col-7\">{responseData.tax_lable}</div>\r\n                    <div className=\"col-5\">\r\n                      {tokenDetails.currency} {responseData.tax_amt}\r\n                    </div>\r\n                    <div className=\"col-12 fs-22 text-center mt-5\">\r\n                      Billing Amount\r\n                    </div>\r\n                    <div className=\"col-12 fs-22 f-700 text-center text-orenge\">\r\n                      {tokenDetails.currency} {responseData.billable_amount}\r\n                    </div>\r\n                    <div className=\"col-12 f-600 text-center mt-5\">\r\n                      Balance Amount: {Number(balance).toFixed(2)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {isTreatmentDoneButton ? (\r\n            <div className=\"make-payment mt-3 text-center\">\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"TREATMENT DONE\"\r\n                onClick={() => this.handleTreatmentDone()}\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <div className=\"make-payment mt-3 text-center\">\r\n            {this.state.isMakePaymentButtonClicked == \"true\" ? (\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"Make payment\"\r\n                disabled={true}\r\n              />\r\n            ) : (\r\n              <NormalButton\r\n                mainbg={true}\r\n                className=\"col-12 fs-15 \"\r\n                label=\"Make payment \"\r\n                onClick={() => this.handleSubmit()}\r\n                disabled={this.state.selectedCards.length <= 0 || balance > 0}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  appointmentDetail: state.appointment.appointmentDetail,\r\n  selected_cstomer: state.common.selected_cstomer,\r\n  tokenDetails: state.authStore.tokenDetails,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      getPayment,\r\n      getCommonApi,\r\n      createPayment,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const Payment = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MakePaymentClass);\r\n"]},"metadata":{},"sourceType":"module"}