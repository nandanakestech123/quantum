{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\routes\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { Route, Router, Redirect } from \"react-router-dom\";\nimport { history } from \"../helpers\";\nimport { connect } from \"react-redux\";\nimport Routers from \"./routes\";\nimport * as Layout from \"../layout\";\nimport * as Pages from \"../pages\"; // import { getTokenDetails } from 'redux/actions/auth'\n\nimport { NotificationContainer } from \"react-notifications\";\nexport class RoutesClass extends Component {\n  constructor(props) {\n    super(props);\n\n    this.routerGuard = () => {// let currentPath = history.location.pathname.split(\"/\")[1];\n      // if (currentPath === \"auth\") {\n      // history.push(\"/admin/dashboard\");\n      // console.log(\"asdfgadffgdfgdfgdfgdfg\")\n      // getTokenDetails()\n    };\n\n    this.state = {\n      renderRoute: false,\n      pathname: null,\n      loading: true\n    };\n  }\n\n  componentDidMount() {// if (\n    //   history.location.pathname == \"/auth\" ||\n    //   history.location.pathname == \"/auth/\"\n    // ) {\n    //   history.push(\"/auth/login\");\n    // }\n  } // componentDidMount() { }\n  // componentWillReceiveProps({ userPermissionDetails }) { }\n\n\n  // {navLinks.map(({ to, label, role, imgno }, index) =>\n  //               //role.includes(\"THERAPIST\") ? (\n  //               role.includes(tokenDetail.role_code) ? (\n  render() {\n    let {\n      tokenDetails\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Router, {\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, Routers.map(({\n      component,\n      redirect,\n      path,\n      exact = false,\n      // auth = true,\n      childrens = [],\n      role\n    }) => {\n      if (childrens.length > 0) {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: path,\n          exact: exact,\n          key: path,\n          render: props => {\n            if (redirect) {\n              if (props.location.pathname === path) {\n                props.history.push(redirect);\n              }\n            }\n\n            const LayoutComponent = Layout[component];\n\n            if (component === \"MainLayout\") {\n              return /*#__PURE__*/React.createElement(LayoutComponent, Object.assign({}, props, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 25\n                }\n              }), childrens.map(({\n                component: ChildrenComponent,\n                path: childrenPath,\n                exact = false,\n                auth = true,\n                role\n              }) => {\n                this.routerGuard();\n                return /*#__PURE__*/React.createElement(Route, {\n                  path: path + childrenPath,\n                  exact: exact,\n                  key: path + childrenPath,\n                  render: props => {\n                    if (role && role.includes(tokenDetails.role_code)) {\n                      let PageComponent = Pages[ChildrenComponent];\n                      return /*#__PURE__*/React.createElement(PageComponent, Object.assign({}, props, {\n                        __self: this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 103,\n                          columnNumber: 46\n                        }\n                      }));\n                    } else {\n                      return /*#__PURE__*/React.createElement(\"div\", {\n                        className: \"d-flex justify-content-center p-5\",\n                        __self: this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 106,\n                          columnNumber: 41\n                        }\n                      });\n                    }\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 33\n                  }\n                });\n              }));\n            } else {\n              return /*#__PURE__*/React.createElement(LayoutComponent, Object.assign({}, props, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 25\n                }\n              }), childrens.map(({\n                component: ChildrenComponent,\n                path: childrenPath,\n                exact = false,\n                auth = true,\n                role\n              }) => {\n                this.routerGuard();\n                return /*#__PURE__*/React.createElement(Route, {\n                  path: path + childrenPath,\n                  exact: exact,\n                  key: path + childrenPath,\n                  render: props => {\n                    let PageComponent = Pages[ChildrenComponent];\n                    return /*#__PURE__*/React.createElement(PageComponent, Object.assign({}, props, {\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 137,\n                        columnNumber: 44\n                      }\n                    }));\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 33\n                  }\n                });\n              }));\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }\n        });\n      }\n\n      if (component === \"MainLayout\") {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: path,\n          exact: exact,\n          key: component,\n          render: props => {\n            if (role && role.includes(tokenDetails.role_code)) {\n              if (component) {\n                let PageComponent = Pages[component];\n                return /*#__PURE__*/React.createElement(PageComponent, Object.assign({}, props, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 32\n                  }\n                }));\n              }\n\n              if (redirect) {\n                return /*#__PURE__*/React.createElement(Redirect, {\n                  to: redirect,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 32\n                  }\n                });\n              }\n\n              return /*#__PURE__*/React.createElement(\"div\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 30\n                }\n              });\n            } else {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: \"d-flex justify-content-center p-5\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 25\n                }\n              });\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(Route, {\n          path: path,\n          exact: exact,\n          key: component,\n          render: props => {\n            if (component) {\n              let PageComponent = Pages[component];\n              return /*#__PURE__*/React.createElement(PageComponent, Object.assign({}, props, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 30\n                }\n              }));\n            }\n\n            if (redirect) {\n              return /*#__PURE__*/React.createElement(Redirect, {\n                to: redirect,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 30\n                }\n              });\n            }\n\n            return /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 28\n              }\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }\n        });\n      }\n    }), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  tokenDetails: state.authStore.tokenDetails\n});\n\nlet component = RoutesClass;\nexport const Routes = connect(mapStateToProps, null)(component);","map":{"version":3,"sources":["F:/webfe/src/routes/index.js"],"names":["React","Component","Route","Router","Redirect","history","connect","Routers","Layout","Pages","NotificationContainer","RoutesClass","constructor","props","routerGuard","state","renderRoute","pathname","loading","componentDidMount","render","tokenDetails","map","component","redirect","path","exact","childrens","role","length","location","push","LayoutComponent","ChildrenComponent","childrenPath","auth","includes","role_code","PageComponent","mapStateToProps","authStore","Routes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Route, Router, Redirect } from \"react-router-dom\";\r\nimport { history } from \"../helpers\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Routers from \"./routes\";\r\n\r\nimport * as Layout from \"../layout\";\r\nimport * as Pages from \"../pages\";\r\n\r\n// import { getTokenDetails } from 'redux/actions/auth'\r\n\r\nimport { NotificationContainer } from \"react-notifications\";\r\n\r\nexport class RoutesClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      renderRoute: false,\r\n      pathname: null,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // if (\r\n    //   history.location.pathname == \"/auth\" ||\r\n    //   history.location.pathname == \"/auth/\"\r\n    // ) {\r\n    //   history.push(\"/auth/login\");\r\n    // }\r\n  }\r\n\r\n  // componentDidMount() { }\r\n\r\n  // componentWillReceiveProps({ userPermissionDetails }) { }\r\n\r\n  routerGuard = () => {\r\n    // let currentPath = history.location.pathname.split(\"/\")[1];\r\n    // if (currentPath === \"auth\") {\r\n    // history.push(\"/admin/dashboard\");\r\n    // console.log(\"asdfgadffgdfgdfgdfgdfg\")\r\n    // getTokenDetails()\r\n  };\r\n\r\n  // {navLinks.map(({ to, label, role, imgno }, index) =>\r\n  //               //role.includes(\"THERAPIST\") ? (\r\n  //               role.includes(tokenDetail.role_code) ? (\r\n\r\n  render() {\r\n    let { tokenDetails } = this.props;\r\n    return (\r\n      <Router history={history}>\r\n        {Routers.map(\r\n          ({\r\n            component,\r\n            redirect,\r\n            path,\r\n            exact = false,\r\n            // auth = true,\r\n            childrens = [],\r\n            role,\r\n          }) => {\r\n            if (childrens.length > 0) {\r\n              return (\r\n                <Route\r\n                  path={path}\r\n                  exact={exact}\r\n                  key={path}\r\n                  render={props => {\r\n                    if (redirect) {\r\n                      if (props.location.pathname === path) {\r\n                        props.history.push(redirect);\r\n                      }\r\n                    }\r\n\r\n                    const LayoutComponent = Layout[component];\r\n                    if (component === \"MainLayout\") {\r\n                      return (\r\n                        <LayoutComponent {...props}>\r\n                          {childrens.map(\r\n                            ({\r\n                              component: ChildrenComponent,\r\n                              path: childrenPath,\r\n                              exact = false,\r\n                              auth = true,\r\n                              role,\r\n                            }) => {\r\n                              this.routerGuard();\r\n                              return (\r\n                                <Route\r\n                                  path={path + childrenPath}\r\n                                  exact={exact}\r\n                                  key={path + childrenPath}\r\n                                  render={props => {\r\n                                    if (\r\n                                      role &&\r\n                                      role.includes(tokenDetails.role_code)\r\n                                    ) {\r\n                                      let PageComponent =\r\n                                        Pages[ChildrenComponent];\r\n\r\n                                      return <PageComponent {...props} />;\r\n                                    } else {\r\n                                      return (\r\n                                        <div className=\"d-flex justify-content-center p-5\"></div>\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              );\r\n                            }\r\n                          )}\r\n                        </LayoutComponent>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <LayoutComponent {...props}>\r\n                          {childrens.map(\r\n                            ({\r\n                              component: ChildrenComponent,\r\n                              path: childrenPath,\r\n                              exact = false,\r\n                              auth = true,\r\n                              role,\r\n                            }) => {\r\n                              this.routerGuard();\r\n                              return (\r\n                                <Route\r\n                                  path={path + childrenPath}\r\n                                  exact={exact}\r\n                                  key={path + childrenPath}\r\n                                  render={props => {\r\n                                    let PageComponent =\r\n                                      Pages[ChildrenComponent];\r\n\r\n                                    return <PageComponent {...props} />;\r\n                                  }}\r\n                                />\r\n                              );\r\n                            }\r\n                          )}\r\n                        </LayoutComponent>\r\n                      );\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n            if (component === \"MainLayout\") {\r\n              return (\r\n                <Route\r\n                  path={path}\r\n                  exact={exact}\r\n                  key={component}\r\n                  render={props => {\r\n                    if (role && role.includes(tokenDetails.role_code)) {\r\n                      if (component) {\r\n                        let PageComponent = Pages[component];\r\n                        return <PageComponent {...props} />;\r\n                      }\r\n                      if (redirect) {\r\n                        return <Redirect to={redirect} />;\r\n                      }\r\n                      return <div></div>;\r\n                    } else {\r\n                      return (\r\n                        <div className=\"d-flex justify-content-center p-5\"></div>\r\n                      );\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            } else {\r\n              return (\r\n                <Route\r\n                  path={path}\r\n                  exact={exact}\r\n                  key={component}\r\n                  render={props => {\r\n                    if (component) {\r\n                      let PageComponent = Pages[component];\r\n                      return <PageComponent {...props} />;\r\n                    }\r\n                    if (redirect) {\r\n                      return <Redirect to={redirect} />;\r\n                    }\r\n                    return <div></div>;\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n          }\r\n        )}\r\n\r\n        <NotificationContainer />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  tokenDetails: state.authStore.tokenDetails,\r\n});\r\n\r\nlet component = RoutesClass;\r\n\r\nexport const Routes = connect(mapStateToProps, null)(component);\r\n"]},"metadata":{},"sourceType":"module"}