{"ast":null,"code":"import { DeliveryOrderActionType } from \"redux/actions/actionType\";\nimport { deliveryorder } from \"../../service/apiVariables\";\nexport const updatedeliveryorder = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    deliveryorder.updatedeliveryorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...deliveryorder.updatedeliveryorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createdeliveryorder = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  console.log(\"inside createdeliveryorder inside action file\", { ...deliveryorder.adddeliveryorder\n  });\n  return new Promise((resolve, reject) => {\n    api({ ...deliveryorder.adddeliveryorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getdeliveryorder = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    deliveryorder.getdeliveryorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...deliveryorder.getdeliveryorderinvoice\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: DeliveryOrderActionType.getProjectListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deletedeliveryorder = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    deliveryorder.deletedeliveryorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...deliveryorder.deletedeliveryorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/deliveryorder.js"],"names":["DeliveryOrderActionType","deliveryorder","updatedeliveryorder","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","updatedeliveryorderinvoice","addQuery","key","payload","then","response","message","status","type","catch","createdeliveryorder","console","log","adddeliveryorder","adddeliveryorderinvoice","data","getdeliveryorder","getdeliveryorderinvoice","getProjectListing","deletedeliveryorder","deletedeliveryorderinvoice"],"mappings":"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","sourcesContent":["import { DeliveryOrderActionType } from \"redux/actions/actionType\";\r\nimport { deliveryorder } from \"../../service/apiVariables\";\r\n\r\nexport const updatedeliveryorder =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      deliveryorder.updatedeliveryorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...deliveryorder.updatedeliveryorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createdeliveryorder =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n      console.log(\"inside createdeliveryorder inside action file\",{ ...deliveryorder.adddeliveryorder })\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...deliveryorder.adddeliveryorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getdeliveryorder =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      deliveryorder.getdeliveryorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n\r\n      api({ ...deliveryorder.getdeliveryorderinvoice })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: DeliveryOrderActionType.getProjectListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deletedeliveryorder =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      deliveryorder.deletedeliveryorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...deliveryorder.deletedeliveryorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}