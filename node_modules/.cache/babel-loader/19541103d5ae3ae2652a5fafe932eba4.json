{"ast":null,"code":"/**\r\n * DevExtreme (ui/pivot_grid/xmla_store/xmla_store.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.XmlaStore = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../../core/renderer\"));\n\nvar _window = require(\"../../../core/utils/window\");\n\nvar _class = _interopRequireDefault(require(\"../../../core/class\"));\n\nvar _string = require(\"../../../core/utils/string\");\n\nvar _errors = _interopRequireDefault(require(\"../../../data/errors\"));\n\nvar _common = require(\"../../../core/utils/common\");\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nvar _type = require(\"../../../core/utils/type\");\n\nvar _iterator = require(\"../../../core/utils/iterator\");\n\nvar _array = require(\"../../../core/utils/array\");\n\nvar _uiPivot_grid = require(\"../ui.pivot_grid.utils\");\n\nvar _deferred = require(\"../../../core/utils/deferred\");\n\nvar _language_codes = require(\"../../../localization/language_codes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar errors = _errors.default.errors;\nvar window = (0, _window.getWindow)();\n\nvar XmlaStore = _class.default.inherit(function () {\n  var discover = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><RequestType>{2}</RequestType><Restrictions><RestrictionList><CATALOG_NAME>{0}</CATALOG_NAME><CUBE_NAME>{1}</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>{0}</Catalog>{3}</PropertyList></Properties></Discover></Body></Envelope>';\n  var execute = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>{0}</Statement></Command><Properties><PropertyList><Catalog>{1}</Catalog><ShowHiddenCubes>True</ShowHiddenCubes><SspropInitAppName>Microsoft SQL Server Management Studio</SspropInitAppName><Timeout>3600</Timeout>{2}</PropertyList></Properties></Execute></Body></Envelope>';\n  var mdx = \"SELECT {2} FROM {0} {1} CELL PROPERTIES VALUE, FORMAT_STRING, LANGUAGE, BACK_COLOR, FORE_COLOR, FONT_FLAGS\";\n  var mdxFilterSelect = \"(SELECT {0} FROM {1})\";\n  var mdxSubset = \"Subset({0}, {1}, {2})\";\n  var mdxOrder = \"Order({0}, {1}, {2})\";\n  var mdxWith = \"{0} {1} as {2}\";\n  var mdxSlice = \"WHERE ({0})\";\n  var mdxNonEmpty = \"NonEmpty({0}, {1})\";\n  var mdxAxis = \"{0} DIMENSION PROPERTIES PARENT_UNIQUE_NAME,HIERARCHY_UNIQUE_NAME, MEMBER_VALUE ON {1}\";\n  var mdxCrossJoin = \"CrossJoin({0})\";\n  var mdxSet = \"{{0}}\";\n  var MEASURE_DEMENSION_KEY = \"DX_MEASURES\";\n  var MD_DIMTYPE_MEASURE = \"2\";\n\n  function execXMLA(requestOptions, data) {\n    var deferred = new _deferred.Deferred();\n    var beforeSend = requestOptions.beforeSend;\n    var ajaxSettings = {\n      url: requestOptions.url,\n      dataType: \"text\",\n      data: data,\n      headers: {\n        \"Content-Type\": \"text/xml\"\n      },\n      xhrFields: {},\n      method: \"POST\"\n    };\n\n    if ((0, _type.isFunction)(beforeSend)) {\n      beforeSend(ajaxSettings);\n    }\n\n    (0, _uiPivot_grid.sendRequest)(ajaxSettings).fail(function () {\n      deferred.reject(arguments);\n    }).done(function (text) {\n      var parser = new window.DOMParser();\n      var xml;\n\n      try {\n        try {\n          xml = parser.parseFromString(text, \"text/xml\");\n        } catch (e) {\n          xml = void 0;\n        }\n\n        if (!xml || xml.getElementsByTagName(\"parsererror\").length || 0 === xml.childNodes.length) {\n          throw new errors.Error(\"E4023\", text);\n        }\n      } catch (e) {\n        deferred.reject({\n          statusText: e.message,\n          stack: e.stack,\n          responseText: text\n        });\n      }\n\n      deferred.resolve(xml);\n    });\n    return deferred;\n  }\n\n  function getLocaleIdProperty() {\n    var languageId = (0, _language_codes.getLanguageId)();\n\n    if (void 0 !== languageId) {\n      return (0, _string.format)(\"<LocaleIdentifier>{0}</LocaleIdentifier>\", languageId);\n    }\n\n    return \"\";\n  }\n\n  function mdxDescendants(level, levelMember, nextLevel) {\n    var memberExpression = levelMember ? levelMember : level;\n    return \"Descendants({\" + memberExpression + \"}, \" + nextLevel + \", SELF_AND_BEFORE)\";\n  }\n\n  function getAllMember(dimension) {\n    return (dimension.hierarchyName || dimension.dataField) + \".[All]\";\n  }\n\n  function getAllMembers(field) {\n    var result = field.dataField + \".allMembers\";\n    var searchValue = field.searchValue;\n\n    if (searchValue) {\n      searchValue = searchValue.replace(/'/g, \"''\");\n      result = \"Filter(\" + result + \", instr(\" + field.dataField + \".currentmember.member_caption,'\" + searchValue + \"') > 0)\";\n    }\n\n    return result;\n  }\n\n  function crossJoinElements(elements) {\n    var elementsString = elements.join(\",\");\n    return elements.length > 1 ? (0, _string.format)(mdxCrossJoin, elementsString) : elementsString;\n  }\n\n  function union(elements) {\n    var elementsString = elements.join(\",\");\n    return elements.length > 1 ? \"Union(\" + elementsString + \")\" : elementsString;\n  }\n\n  function generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take) {\n    var crossJoinArgs = [];\n    var dimensions = options[axisName];\n    var fields = [];\n    var arg;\n    var prevDimension;\n    var member;\n\n    for (var i = expandIndex; i <= expandLevel; i++) {\n      var field = dimensions[i];\n      var dataField = field.dataField;\n      var prevHierarchyName = dimensions[i - 1] && dimensions[i - 1].hierarchyName;\n      var hierarchyName = field.hierarchyName;\n      var isLastDimensionInGroup = !hierarchyName || !dimensions[i + 1] || dimensions[i + 1].hierarchyName !== hierarchyName;\n      var expandAllIndex = path.length + expandAllCount + expandIndex;\n      arg = null;\n      fields.push(field);\n\n      if (i < path.length) {\n        if (isLastDimensionInGroup) {\n          arg = \"(\" + dataField + \".\" + preparePathValue(path[i], dataField) + \")\";\n        }\n      } else {\n        if (i <= expandAllIndex) {\n          if (0 === i && 0 === expandAllCount) {\n            var allMember = getAllMember(dimensions[expandIndex]);\n\n            if (!hierarchyName) {\n              arg = getAllMembers(dimensions[expandIndex]);\n            } else {\n              arg = allMember + \",\" + dimensions[expandIndex].dataField;\n            }\n          } else {\n            if (hierarchyName) {\n              member = preparePathValue(slicePath[slicePath.length - 1]);\n\n              if (isLastDimensionInGroup || i === expandAllIndex) {\n                if (prevHierarchyName === hierarchyName) {\n                  if (slicePath.length) {\n                    prevDimension = dimensions[slicePath.length - 1];\n                  }\n\n                  if (!prevDimension || prevDimension.hierarchyName !== hierarchyName) {\n                    prevDimension = dimensions[i - 1];\n                    member = \"\";\n                  }\n\n                  arg = mdxDescendants(prevDimension.dataField, member, dataField);\n                } else {\n                  arg = getAllMembers(field);\n                }\n              }\n            } else {\n              arg = getAllMembers(field);\n            }\n          }\n        } else {\n          var isFirstDimensionInGroup = !hierarchyName || prevHierarchyName !== hierarchyName;\n\n          if (isFirstDimensionInGroup) {\n            arg = \"(\" + getAllMember(field) + \")\";\n          }\n        }\n      }\n\n      if (arg) {\n        arg = (0, _string.format)(mdxSet, arg);\n\n        if (take) {\n          var sortBy = (field.hierarchyName || field.dataField) + (\"displayText\" === field.sortBy ? \".MEMBER_CAPTION\" : \".MEMBER_VALUE\");\n          arg = (0, _string.format)(mdxOrder, arg, sortBy, \"desc\" === field.sortOrder ? \"DESC\" : \"ASC\");\n        }\n\n        crossJoinArgs.push(arg);\n      }\n    }\n\n    return crossJoinElements(crossJoinArgs);\n  }\n\n  function fillCrossJoins(crossJoins, path, expandLevel, expandIndex, slicePath, options, axisName, cellsString, take, totalsOnly) {\n    var expandAllCount = -1;\n    var dimensions = options[axisName];\n    var dimensionIndex;\n\n    do {\n      expandAllCount++;\n      dimensionIndex = path.length + expandAllCount + expandIndex;\n      var crossJoin = generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take);\n\n      if (!take && !totalsOnly) {\n        crossJoin = (0, _string.format)(mdxNonEmpty, crossJoin, cellsString);\n      }\n\n      crossJoins.push(crossJoin);\n    } while (dimensions[dimensionIndex] && dimensions[dimensionIndex + 1] && dimensions[dimensionIndex].expanded);\n  }\n\n  function declare(expression, withArray, name, type) {\n    name = name || \"[DX_Set_\" + withArray.length + \"]\";\n    type = type || \"set\";\n    withArray.push((0, _string.format)(mdxWith, type, name, expression));\n    return name;\n  }\n\n  function generateAxisMdx(options, axisName, cells, withArray, parseOptions) {\n    var dimensions = options[axisName];\n    var crossJoins = [];\n    var path = [];\n    var expandedPaths = [];\n    var expandIndex = 0;\n    var expandLevel = 0;\n    var result = [];\n    var cellsString = (0, _string.format)(mdxSet, cells.join(\",\"));\n\n    if (dimensions && dimensions.length) {\n      if (options.headerName === axisName) {\n        path = options.path;\n        expandIndex = path.length;\n      } else {\n        if (options.headerName && options.oppositePath) {\n          path = options.oppositePath;\n          expandIndex = path.length;\n        } else {\n          expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || expandedPaths;\n        }\n      }\n\n      expandLevel = (0, _uiPivot_grid.getExpandedLevel)(options, axisName);\n      fillCrossJoins(crossJoins, [], expandLevel, expandIndex, path, options, axisName, cellsString, \"rows\" === axisName ? options.rowTake : options.columnTake, options.totalsOnly);\n      (0, _iterator.each)(expandedPaths, function (_, expandedPath) {\n        fillCrossJoins(crossJoins, expandedPath, expandLevel, expandIndex, expandedPath, options, axisName, cellsString);\n      });\n\n      for (var i = expandLevel; i >= path.length; i--) {\n        if (dimensions[i].hierarchyName) {\n          parseOptions.visibleLevels[dimensions[i].hierarchyName] = parseOptions.visibleLevels[dimensions[i].hierarchyName] || [];\n          parseOptions.visibleLevels[dimensions[i].hierarchyName].push(dimensions[i].dataField);\n        }\n      }\n    }\n\n    if (crossJoins.length) {\n      var expression = union(crossJoins);\n\n      if (\"rows\" === axisName && options.rowTake) {\n        expression = (0, _string.format)(mdxSubset, expression, options.rowSkip > 0 ? options.rowSkip + 1 : 0, options.rowSkip > 0 ? options.rowTake : options.rowTake + 1);\n      }\n\n      if (\"columns\" === axisName && options.columnTake) {\n        expression = (0, _string.format)(mdxSubset, expression, options.columnSkip > 0 ? options.columnSkip + 1 : 0, options.columnSkip > 0 ? options.columnTake : options.columnTake + 1);\n      }\n\n      var axisSet = \"[DX_\".concat(axisName, \"]\");\n      result.push(declare(expression, withArray, axisSet));\n\n      if (options.totalsOnly) {\n        result.push(declare(\"COUNT(\".concat(axisSet, \")\"), withArray, \"[DX_\".concat(axisName, \"_count]\"), \"member\"));\n      }\n    }\n\n    if (\"columns\" === axisName && cells.length && !options.skipValues) {\n      result.push(cellsString);\n    }\n\n    return (0, _string.format)(mdxAxis, crossJoinElements(result), axisName);\n  }\n\n  function generateAxisFieldsFilter(fields) {\n    var filterMembers = [];\n    (0, _iterator.each)(fields, function (_, field) {\n      var dataField = field.dataField;\n      var filterExpression = [];\n      var filterValues = field.filterValues || [];\n      var filterStringExpression;\n\n      if (field.hierarchyName && (0, _type.isNumeric)(field.groupIndex)) {\n        return;\n      }\n\n      (0, _iterator.each)(filterValues, function (_, filterValue) {\n        var filterMdx = dataField + \".\" + preparePathValue(Array.isArray(filterValue) ? filterValue[filterValue.length - 1] : filterValue, dataField);\n\n        if (\"exclude\" === field.filterType) {\n          filterExpression.push(filterMdx + \".parent\");\n          filterMdx = \"Descendants(\" + filterMdx + \")\";\n        }\n\n        filterExpression.push(filterMdx);\n      });\n\n      if (filterValues.length) {\n        filterStringExpression = (0, _string.format)(mdxSet, filterExpression.join(\",\"));\n\n        if (\"exclude\" === field.filterType) {\n          filterStringExpression = \"Except(\" + getAllMembers(field) + \",\" + filterStringExpression + \")\";\n        }\n\n        filterMembers.push(filterStringExpression);\n      }\n    });\n    return filterMembers.length ? crossJoinElements(filterMembers) : \"\";\n  }\n\n  function generateFrom(columnsFilter, rowsFilter, filter, cubeName) {\n    var from = \"[\" + cubeName + \"]\";\n    (0, _iterator.each)([columnsFilter, rowsFilter, filter], function (_, filter) {\n      if (filter) {\n        from = (0, _string.format)(mdxFilterSelect, filter + \"on 0\", from);\n      }\n    });\n    return from;\n  }\n\n  function generateMdxCore(axisStrings, withArray, columns, rows, filters, slice, cubeName) {\n    var options = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {};\n    var mdxString = \"\";\n    var withString = (withArray.length ? \"with \" + withArray.join(\" \") : \"\") + \" \";\n\n    if (axisStrings.length) {\n      var select;\n\n      if (options.totalsOnly) {\n        var countMembers = [];\n\n        if (rows.length) {\n          countMembers.push(\"[DX_rows_count]\");\n        }\n\n        if (columns.length) {\n          countMembers.push(\"[DX_columns_count]\");\n        }\n\n        select = \"{\".concat(countMembers.join(\",\"), \"} on columns\");\n      } else {\n        select = axisStrings.join(\",\");\n      }\n\n      mdxString = withString + (0, _string.format)(mdx, generateFrom(generateAxisFieldsFilter(columns), generateAxisFieldsFilter(rows), generateAxisFieldsFilter(filters || []), cubeName), slice.length ? (0, _string.format)(mdxSlice, slice.join(\",\")) : \"\", select);\n    }\n\n    return mdxString;\n  }\n\n  function prepareDataFields(withArray, valueFields) {\n    return (0, _iterator.map)(valueFields, function (cell) {\n      if ((0, _type.isString)(cell.expression)) {\n        declare(cell.expression, withArray, cell.dataField, \"member\");\n      }\n\n      return cell.dataField;\n    });\n  }\n\n  function addSlices(slices, options, headerName, path) {\n    (0, _iterator.each)(path, function (index, value) {\n      var dimension = options[headerName][index];\n\n      if (!dimension.hierarchyName || dimension.hierarchyName !== options[headerName][index + 1].hierarchyName) {\n        slices.push(dimension.dataField + \".\" + preparePathValue(value, dimension.dataField));\n      }\n    });\n  }\n\n  function generateMDX(options, cubeName, parseOptions) {\n    var columns = options.columns || [];\n    var rows = options.rows || [];\n    var values = options.values && options.values.length ? options.values : [{\n      dataField: \"[Measures]\"\n    }];\n    var slice = [];\n    var withArray = [];\n    var axisStrings = [];\n    var dataFields = prepareDataFields(withArray, values);\n    parseOptions.measureCount = options.skipValues ? 1 : values.length;\n    parseOptions.visibleLevels = {};\n\n    if (options.headerName && options.path) {\n      addSlices(slice, options, options.headerName, options.path);\n    }\n\n    if (options.headerName && options.oppositePath) {\n      addSlices(slice, options, \"rows\" === options.headerName ? \"columns\" : \"rows\", options.oppositePath);\n    }\n\n    if (columns.length || dataFields.length) {\n      axisStrings.push(generateAxisMdx(options, \"columns\", dataFields, withArray, parseOptions));\n    }\n\n    if (rows.length) {\n      axisStrings.push(generateAxisMdx(options, \"rows\", dataFields, withArray, parseOptions));\n    }\n\n    return generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName, options);\n  }\n\n  function createDrillDownAxisSlice(slice, fields, path) {\n    (0, _iterator.each)(path, function (index, value) {\n      var field = fields[index];\n\n      if (field.hierarchyName && (fields[index + 1] || {}).hierarchyName === field.hierarchyName) {\n        return;\n      }\n\n      slice.push(field.dataField + \".\" + preparePathValue(value, field.dataField));\n    });\n  }\n\n  function generateDrillDownMDX(options, cubeName, params) {\n    var columns = options.columns || [];\n    var rows = options.rows || [];\n    var values = options.values && options.values.length ? options.values : [{\n      dataField: \"[Measures]\"\n    }];\n    var slice = [];\n    var withArray = [];\n    var axisStrings = [];\n    var dataFields = prepareDataFields(withArray, values);\n    var maxRowCount = params.maxRowCount;\n    var customColumns = params.customColumns || [];\n    var customColumnsString = customColumns.length > 0 ? \" return \" + customColumns.join(\",\") : \"\";\n    createDrillDownAxisSlice(slice, columns, params.columnPath || []);\n    createDrillDownAxisSlice(slice, rows, params.rowPath || []);\n\n    if (columns.length || columns.length || dataFields.length) {\n      axisStrings.push([(dataFields[params.dataIndex] || dataFields[0]) + \" on 0\"]);\n    }\n\n    var coreMDX = generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName);\n    return coreMDX ? \"drillthrough\" + (maxRowCount > 0 ? \" maxrows \" + maxRowCount : \"\") + coreMDX + customColumnsString : coreMDX;\n  }\n\n  function getNumber(str) {\n    return parseInt(str, 10);\n  }\n\n  function parseValue(valueText) {\n    return (0, _type.isNumeric)(valueText) ? parseFloat(valueText) : valueText;\n  }\n\n  function getFirstChild(node, tagName) {\n    return (node.getElementsByTagName(tagName) || [])[0];\n  }\n\n  function getFirstChildText(node, childTagName) {\n    return getNodeText(getFirstChild(node, childTagName));\n  }\n\n  function parseAxes(xml, skipValues) {\n    var axes = [];\n    (0, _iterator.each)(xml.getElementsByTagName(\"Axis\"), function (_, axisElement) {\n      var name = axisElement.getAttribute(\"name\");\n      var axis = [];\n      var index = 0;\n\n      if (0 === name.indexOf(\"Axis\") && (0, _type.isNumeric)(getNumber(name.substr(4)))) {\n        axes.push(axis);\n        (0, _iterator.each)(axisElement.getElementsByTagName(\"Tuple\"), function (_, tupleElement) {\n          var tupleMembers = tupleElement.childNodes;\n          var levelSum = 0;\n          var members = [];\n          var membersCount = skipValues ? tupleMembers.length : tupleMembers.length - 1;\n          var isAxisWithMeasure = 1 === axes.length;\n\n          if (isAxisWithMeasure) {\n            membersCount--;\n          }\n\n          axis.push(members);\n\n          for (var i = membersCount; i >= 0; i--) {\n            var tuple = tupleMembers[i];\n            var level = getNumber(getFirstChildText(tuple, \"LNum\"));\n            members[i] = {\n              caption: getFirstChildText(tuple, \"Caption\"),\n              value: parseValue(getFirstChildText(tuple, \"MEMBER_VALUE\")),\n              level: level,\n              index: index++,\n              hasValue: !levelSum && (!!level || 0 === i),\n              name: getFirstChildText(tuple, \"UName\"),\n              hierarchyName: tupleMembers[i].getAttribute(\"Hierarchy\"),\n              parentName: getFirstChildText(tuple, \"PARENT_UNIQUE_NAME\"),\n              levelName: getFirstChildText(tuple, \"LName\")\n            };\n            levelSum += level;\n          }\n        });\n      }\n    });\n\n    while (axes.length < 2) {\n      axes.push([[{\n        level: 0\n      }]]);\n    }\n\n    return axes;\n  }\n\n  function getNodeText(node) {\n    return node && node && (node.textContent || node.text || node.innerHTML) || \"\";\n  }\n\n  function parseCells(xml, axes, measureCount) {\n    var cells = [];\n    var cell = [];\n    var index = 0;\n    var cellsOriginal = [];\n    var cellElements = xml.getElementsByTagName(\"Cell\");\n    var errorDictionary = {};\n\n    for (var i = 0; i < cellElements.length; i++) {\n      var xmlCell = cellElements[i];\n      var valueElement = xmlCell.getElementsByTagName(\"Value\")[0];\n      var errorElements = valueElement && valueElement.getElementsByTagName(\"Error\") || [];\n      var text = 0 === errorElements.length ? getNodeText(valueElement) : \"#N/A\";\n      var value = parseFloat(text);\n\n      var _isNumeric = text - value + 1 > 0;\n\n      var cellOrdinal = getNumber(xmlCell.getAttribute(\"CellOrdinal\"));\n\n      if (errorElements.length) {\n        errorDictionary[getNodeText(errorElements[0].getElementsByTagName(\"ErrorCode\")[0])] = getNodeText(errorElements[0].getElementsByTagName(\"Description\")[0]);\n      }\n\n      cellsOriginal[cellOrdinal] = {\n        value: _isNumeric ? value : text || null\n      };\n    }\n\n    (0, _iterator.each)(axes[1], function () {\n      var row = [];\n      cells.push(row);\n      (0, _iterator.each)(axes[0], function () {\n        var measureIndex = index % measureCount;\n\n        if (0 === measureIndex) {\n          cell = [];\n          row.push(cell);\n        }\n\n        cell.push(cellsOriginal[index] ? cellsOriginal[index].value : null);\n        index++;\n      });\n    });\n    Object.keys(errorDictionary).forEach(function (key) {\n      errors.log(\"W4002\", errorDictionary[key]);\n    });\n    return cells;\n  }\n\n  function preparePathValue(pathValue, dataField) {\n    if (pathValue) {\n      pathValue = (0, _type.isString)(pathValue) && pathValue.indexOf(\"&\") !== -1 ? pathValue : \"[\" + pathValue + \"]\";\n\n      if (dataField && 0 === pathValue.indexOf(dataField + \".\")) {\n        pathValue = pathValue.slice(dataField.length + 1, pathValue.length);\n      }\n    }\n\n    return pathValue;\n  }\n\n  function getItem(hash, name, member, index) {\n    var item = hash[name];\n\n    if (!item) {\n      item = {};\n      hash[name] = item;\n    }\n\n    if (!(0, _type.isDefined)(item.value) && member) {\n      item.text = member.caption;\n      item.value = member.value;\n      item.key = name ? name : \"\";\n      item.levelName = member.levelName;\n      item.hierarchyName = member.hierarchyName;\n      item.parentName = member.parentName;\n      item.index = index;\n      item.level = member.level;\n    }\n\n    return item;\n  }\n\n  function getVisibleChildren(item, visibleLevels) {\n    var result = [];\n    var children = item.children && (item.children.length ? item.children : Object.keys(item.children.grandTotalHash || {}).reduce(function (result, name) {\n      return result.concat(item.children.grandTotalHash[name].children);\n    }, []));\n    var firstChild = children && children[0];\n\n    if (firstChild && (visibleLevels[firstChild.hierarchyName] && (0, _array.inArray)(firstChild.levelName, visibleLevels[firstChild.hierarchyName]) !== -1 || !visibleLevels[firstChild.hierarchyName] || 0 === firstChild.level)) {\n      var newChildren = children.filter(function (child) {\n        return child.hierarchyName === firstChild.hierarchyName;\n      });\n      newChildren.grandTotalHash = children.grandTotalHash;\n      return newChildren;\n    } else {\n      if (firstChild) {\n        for (var i = 0; i < children.length; i++) {\n          if (children[i].hierarchyName === firstChild.hierarchyName) {\n            result.push.apply(result, getVisibleChildren(children[i], visibleLevels));\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function processMember(dataIndex, member, parentItem) {\n    var children = parentItem.children = parentItem.children || [];\n    var hash = children.hash = children.hash || {};\n    var grandTotalHash = children.grandTotalHash = children.grandTotalHash || {};\n\n    if (member.parentName) {\n      parentItem = getItem(hash, member.parentName);\n      children = parentItem.children = parentItem.children || [];\n    }\n\n    var currentItem = getItem(hash, member.name, member, dataIndex);\n\n    if (member.hasValue && !currentItem.added) {\n      currentItem.index = dataIndex;\n      currentItem.added = true;\n      children.push(currentItem);\n    }\n\n    if ((!parentItem.value || !parentItem.parentName) && member.parentName) {\n      grandTotalHash[member.parentName] = parentItem;\n    } else {\n      if (grandTotalHash[parentItem.name]) {\n        delete grandTotalHash[member.parentName];\n      }\n    }\n\n    return currentItem;\n  }\n\n  function getGrandTotalIndex(parentItem, visibleLevels) {\n    var grandTotalIndex;\n\n    if (1 === parentItem.children.length && \"\" === parentItem.children[0].parentName) {\n      grandTotalIndex = parentItem.children[0].index;\n      var grandTotalHash = parentItem.children.grandTotalHash;\n      parentItem.children = parentItem.children[0].children || [];\n      parentItem.children.grandTotalHash = grandTotalHash;\n      parentItem.children = getVisibleChildren(parentItem, visibleLevels);\n    } else {\n      if (0 === parentItem.children.length) {\n        grandTotalIndex = 0;\n      }\n    }\n\n    return grandTotalIndex;\n  }\n\n  function fillDataSourceAxes(dataSourceAxis, axisTuples, measureCount, visibleLevels) {\n    var result = [];\n    (0, _iterator.each)(axisTuples, function (tupleIndex, members) {\n      var parentItem = {\n        children: result\n      };\n      var dataIndex = (0, _type.isDefined)(measureCount) ? Math.floor(tupleIndex / measureCount) : tupleIndex;\n      (0, _iterator.each)(members, function (_, member) {\n        parentItem = processMember(dataIndex, member, parentItem);\n      });\n    });\n    var parentItem = {\n      children: result\n    };\n    parentItem.children = getVisibleChildren(parentItem, visibleLevels);\n    var grandTotalIndex = getGrandTotalIndex(parentItem, visibleLevels);\n    (0, _uiPivot_grid.foreachTree)(parentItem.children, function (items) {\n      var item = items[0];\n      var children = getVisibleChildren(item, visibleLevels);\n\n      if (children.length) {\n        item.children = children;\n      } else {\n        delete item.children;\n      }\n\n      delete item.levelName;\n      delete item.hierarchyName;\n      delete item.added;\n      delete item.parentName;\n      delete item.level;\n    }, true);\n    (0, _iterator.each)(parentItem.children || [], function (_, e) {\n      dataSourceAxis.push(e);\n    });\n    return grandTotalIndex;\n  }\n\n  function checkError(xml) {\n    var faultElementNS = xml.getElementsByTagName(\"soap:Fault\");\n    var faultElement = xml.getElementsByTagName(\"Fault\");\n    var errorElement = (0, _renderer.default)([].slice.call(faultElement.length ? faultElement : faultElementNS)).find(\"Error\");\n\n    if (errorElement.length) {\n      var description = errorElement.attr(\"Description\");\n      var error = new errors.Error(\"E4000\", description);\n      errors.log(\"E4000\", description);\n      return error;\n    }\n\n    return null;\n  }\n\n  function parseResult(xml, parseOptions) {\n    var dataSource = {\n      columns: [],\n      rows: []\n    };\n    var measureCount = parseOptions.measureCount;\n    var axes = parseAxes(xml, parseOptions.skipValues);\n    dataSource.grandTotalColumnIndex = fillDataSourceAxes(dataSource.columns, axes[0], measureCount, parseOptions.visibleLevels);\n    dataSource.grandTotalRowIndex = fillDataSourceAxes(dataSource.rows, axes[1], void 0, parseOptions.visibleLevels);\n    dataSource.values = parseCells(xml, axes, measureCount);\n    return dataSource;\n  }\n\n  function parseDiscoverRowSet(xml, schema, dimensions, translatedDisplayFolders) {\n    var result = [];\n    var isMeasure = \"MEASURE\" === schema;\n    var displayFolderField = isMeasure ? \"MEASUREGROUP_NAME\" : schema + \"_DISPLAY_FOLDER\";\n    (0, _iterator.each)(xml.getElementsByTagName(\"row\"), function (_, row) {\n      var hierarchyName = \"LEVEL\" === schema ? getFirstChildText(row, \"HIERARCHY_UNIQUE_NAME\") : void 0;\n      var levelNumber = getFirstChildText(row, \"LEVEL_NUMBER\");\n      var displayFolder = getFirstChildText(row, displayFolderField);\n\n      if (isMeasure) {\n        displayFolder = translatedDisplayFolders[displayFolder] || displayFolder;\n      }\n\n      if ((\"0\" !== levelNumber || \"true\" !== getFirstChildText(row, schema + \"_IS_VISIBLE\")) && getFirstChildText(row, \"DIMENSION_TYPE\") !== MD_DIMTYPE_MEASURE) {\n        var dimension = isMeasure ? MEASURE_DEMENSION_KEY : getFirstChildText(row, \"DIMENSION_UNIQUE_NAME\");\n        var dataField = getFirstChildText(row, schema + \"_UNIQUE_NAME\");\n        result.push({\n          dimension: dimensions.names[dimension] || dimension,\n          groupIndex: levelNumber ? getNumber(levelNumber) - 1 : void 0,\n          dataField: dataField,\n          caption: getFirstChildText(row, schema + \"_CAPTION\"),\n          hierarchyName: hierarchyName,\n          groupName: hierarchyName,\n          displayFolder: displayFolder,\n          isMeasure: isMeasure,\n          isDefault: !!dimensions.defaultHierarchies[dataField]\n        });\n      }\n    });\n    return result;\n  }\n\n  function parseMeasureGroupDiscoverRowSet(xml) {\n    var measureGroups = {};\n    (0, _iterator.each)(xml.getElementsByTagName(\"row\"), function (_, row) {\n      measureGroups[getFirstChildText(row, \"MEASUREGROUP_NAME\")] = getFirstChildText(row, \"MEASUREGROUP_CAPTION\");\n    });\n    return measureGroups;\n  }\n\n  function parseDimensionsDiscoverRowSet(xml) {\n    var result = {\n      names: {},\n      defaultHierarchies: {}\n    };\n    (0, _iterator.each)((0, _renderer.default)(xml).find(\"row\"), function () {\n      var $row = (0, _renderer.default)(this);\n      var type = $row.children(\"DIMENSION_TYPE\").text();\n      var dimensionName = type === MD_DIMTYPE_MEASURE ? MEASURE_DEMENSION_KEY : $row.children(\"DIMENSION_UNIQUE_NAME\").text();\n      result.names[dimensionName] = $row.children(\"DIMENSION_CAPTION\").text();\n      result.defaultHierarchies[$row.children(\"DEFAULT_HIERARCHY\").text()] = true;\n    });\n    return result;\n  }\n\n  function parseStringWithUnicodeSymbols(str) {\n    str = str.replace(/_x(....)_/g, function (whole, group1) {\n      return String.fromCharCode(parseInt(group1, 16));\n    });\n    var stringArray = str.match(/\\[.+?\\]/gi);\n\n    if (stringArray && stringArray.length) {\n      str = stringArray[stringArray.length - 1];\n    }\n\n    return str.replace(/\\[/gi, \"\").replace(/\\]/gi, \"\").replace(/\\$/gi, \"\").replace(/\\./gi, \" \");\n  }\n\n  function parseDrillDownRowSet(xml) {\n    var rows = xml.getElementsByTagName(\"row\");\n    var result = [];\n    var columnNames = {};\n\n    for (var i = 0; i < rows.length; i++) {\n      var children = rows[i].childNodes;\n      var item = {};\n\n      for (var j = 0; j < children.length; j++) {\n        var tagName = children[j].tagName;\n        var name = columnNames[tagName] = columnNames[tagName] || parseStringWithUnicodeSymbols(tagName);\n        item[name] = getNodeText(children[j]);\n      }\n\n      result.push(item);\n    }\n\n    return result;\n  }\n\n  function sendQuery(storeOptions, mdxString) {\n    mdxString = (0, _renderer.default)(\"<div>\").text(mdxString).html();\n    return execXMLA(storeOptions, (0, _string.format)(execute, mdxString, storeOptions.catalog, getLocaleIdProperty()));\n  }\n\n  function processTotalCount(data, options, totalCountXml) {\n    var axes = [];\n    var columnOptions = options.columns || [];\n    var rowOptions = options.rows || [];\n\n    if (columnOptions.length) {\n      axes.push({});\n    }\n\n    if (rowOptions.length) {\n      axes.push({});\n    }\n\n    var cells = parseCells(totalCountXml, [[{}], [{}, {}]], 1);\n\n    if (!columnOptions.length && rowOptions.length) {\n      data.rowCount = Math.max(cells[0][0][0] - 1, 0);\n    }\n\n    if (!rowOptions.length && columnOptions.length) {\n      data.columnCount = Math.max(cells[0][0][0] - 1, 0);\n    }\n\n    if (rowOptions.length && columnOptions.length) {\n      data.rowCount = Math.max(cells[0][0][0] - 1, 0);\n      data.columnCount = Math.max(cells[1][0][0] - 1, 0);\n    }\n\n    if (void 0 !== data.rowCount && options.rowTake) {\n      data.rows = _toConsumableArray(Array(options.rowSkip)).concat(data.rows);\n      data.rows.length = data.rowCount;\n\n      for (var i = 0; i < data.rows.length; i++) {\n        data.rows[i] = data.rows[i] || {};\n      }\n    }\n\n    if (void 0 !== data.columnCount && options.columnTake) {\n      data.columns = _toConsumableArray(Array(options.columnSkip)).concat(data.columns);\n      data.columns.length = data.columnCount;\n\n      for (var _i = 0; _i < data.columns.length; _i++) {\n        data.columns[_i] = data.columns[_i] || {};\n      }\n    }\n  }\n\n  return {\n    ctor: function ctor(options) {\n      this._options = options;\n    },\n    getFields: function getFields() {\n      var options = this._options;\n      var catalog = options.catalog;\n      var cube = options.cube;\n      var localeIdProperty = getLocaleIdProperty();\n      var dimensionsRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_DIMENSIONS\", localeIdProperty));\n      var measuresRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_MEASURES\", localeIdProperty));\n      var hierarchiesRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_HIERARCHIES\", localeIdProperty));\n      var levelsRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_LEVELS\", localeIdProperty));\n      var result = new _deferred.Deferred();\n      (0, _deferred.when)(dimensionsRequest, measuresRequest, hierarchiesRequest, levelsRequest).then(function (dimensionsResponse, measuresResponse, hierarchiesResponse, levelsResponse) {\n        execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_MEASUREGROUPS\", localeIdProperty)).done(function (measureGroupsResponse) {\n          var dimensions = parseDimensionsDiscoverRowSet(dimensionsResponse);\n          var hierarchies = parseDiscoverRowSet(hierarchiesResponse, \"HIERARCHY\", dimensions);\n          var levels = parseDiscoverRowSet(levelsResponse, \"LEVEL\", dimensions);\n          var measureGroups = parseMeasureGroupDiscoverRowSet(measureGroupsResponse);\n          var fields = parseDiscoverRowSet(measuresResponse, \"MEASURE\", dimensions, measureGroups).concat(hierarchies);\n          var levelsByHierarchy = {};\n          (0, _iterator.each)(levels, function (_, level) {\n            levelsByHierarchy[level.hierarchyName] = levelsByHierarchy[level.hierarchyName] || [];\n            levelsByHierarchy[level.hierarchyName].push(level);\n          });\n          (0, _iterator.each)(hierarchies, function (_, hierarchy) {\n            if (levelsByHierarchy[hierarchy.dataField] && levelsByHierarchy[hierarchy.dataField].length > 1) {\n              hierarchy.groupName = hierarchy.hierarchyName = hierarchy.dataField;\n              fields.push.apply(fields, levelsByHierarchy[hierarchy.hierarchyName]);\n            }\n          });\n          result.resolve(fields);\n        }).fail(result.reject);\n      }).fail(result.reject);\n      return result;\n    },\n    load: function load(options) {\n      var result = new _deferred.Deferred();\n      var storeOptions = this._options;\n      var parseOptions = {\n        skipValues: options.skipValues\n      };\n      var mdxString = generateMDX(options, storeOptions.cube, parseOptions);\n      var rowCountMdx;\n\n      if (options.rowSkip || options.rowTake || options.columnTake || options.columnSkip) {\n        rowCountMdx = generateMDX((0, _extend.extend)({}, options, {\n          totalsOnly: true,\n          rowSkip: null,\n          rowTake: null,\n          columnSkip: null,\n          columnTake: null\n        }), storeOptions.cube, {});\n      }\n\n      var load = function load() {\n        if (mdxString) {\n          (0, _deferred.when)(sendQuery(storeOptions, mdxString), rowCountMdx && sendQuery(storeOptions, rowCountMdx)).done(function (executeXml, rowCountXml) {\n            var error = checkError(executeXml) || rowCountXml && checkError(rowCountXml);\n\n            if (!error) {\n              var response = parseResult(executeXml, parseOptions);\n\n              if (rowCountXml) {\n                processTotalCount(response, options, rowCountXml);\n              }\n\n              result.resolve(response);\n            } else {\n              result.reject(error);\n            }\n          }).fail(result.reject);\n        } else {\n          result.resolve({\n            columns: [],\n            rows: [],\n            values: [],\n            grandTotalColumnIndex: 0,\n            grandTotalRowIndex: 0\n          });\n        }\n      };\n\n      if (options.delay) {\n        setTimeout(load, options.delay);\n      } else {\n        load();\n      }\n\n      return result;\n    },\n    supportPaging: function supportPaging() {\n      return true;\n    },\n    getDrillDownItems: function getDrillDownItems(options, params) {\n      var result = new _deferred.Deferred();\n      var storeOptions = this._options;\n      var mdxString = generateDrillDownMDX(options, storeOptions.cube, params);\n\n      if (mdxString) {\n        (0, _deferred.when)(sendQuery(storeOptions, mdxString)).done(function (executeXml) {\n          var error = checkError(executeXml);\n\n          if (!error) {\n            result.resolve(parseDrillDownRowSet(executeXml));\n          } else {\n            result.reject(error);\n          }\n        }).fail(result.reject);\n      } else {\n        result.resolve([]);\n      }\n\n      return result;\n    },\n    key: _common.noop,\n    filter: _common.noop\n  };\n}()).include(_uiPivot_grid.storeDrillDownMixin);\n\nexports.XmlaStore = XmlaStore;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/pivot_grid/xmla_store/xmla_store.js"],"names":["exports","XmlaStore","_renderer","_interopRequireDefault","require","_window","_class","_string","_errors","_common","_extend","_type","_iterator","_array","_uiPivot_grid","_deferred","_language_codes","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","errors","default","window","getWindow","inherit","discover","execute","mdx","mdxFilterSelect","mdxSubset","mdxOrder","mdxWith","mdxSlice","mdxNonEmpty","mdxAxis","mdxCrossJoin","mdxSet","MEASURE_DEMENSION_KEY","MD_DIMTYPE_MEASURE","execXMLA","requestOptions","data","deferred","Deferred","beforeSend","ajaxSettings","url","dataType","headers","xhrFields","method","isFunction","sendRequest","fail","reject","arguments","done","text","parser","DOMParser","xml","parseFromString","e","getElementsByTagName","childNodes","Error","statusText","message","stack","responseText","resolve","getLocaleIdProperty","languageId","getLanguageId","format","mdxDescendants","level","levelMember","nextLevel","memberExpression","getAllMember","dimension","hierarchyName","dataField","getAllMembers","field","result","searchValue","replace","crossJoinElements","elements","elementsString","join","union","generateCrossJoin","path","expandLevel","expandAllCount","expandIndex","slicePath","options","axisName","take","crossJoinArgs","dimensions","fields","arg","prevDimension","member","prevHierarchyName","isLastDimensionInGroup","expandAllIndex","push","preparePathValue","allMember","isFirstDimensionInGroup","sortBy","sortOrder","fillCrossJoins","crossJoins","cellsString","totalsOnly","dimensionIndex","crossJoin","expanded","declare","expression","withArray","type","generateAxisMdx","cells","parseOptions","expandedPaths","headerName","oppositePath","columnExpandedPaths","rowExpandedPaths","getExpandedLevel","rowTake","columnTake","each","_","expandedPath","visibleLevels","rowSkip","columnSkip","axisSet","concat","skipValues","generateAxisFieldsFilter","filterMembers","filterExpression","filterValues","filterStringExpression","isNumeric","groupIndex","filterValue","filterMdx","filterType","generateFrom","columnsFilter","rowsFilter","filter","cubeName","generateMdxCore","axisStrings","columns","rows","filters","mdxString","withString","select","countMembers","prepareDataFields","valueFields","map","cell","isString","addSlices","slices","index","value","generateMDX","values","dataFields","measureCount","createDrillDownAxisSlice","generateDrillDownMDX","params","maxRowCount","customColumns","customColumnsString","columnPath","rowPath","dataIndex","coreMDX","getNumber","str","parseInt","parseValue","valueText","parseFloat","getFirstChild","node","tagName","getFirstChildText","childTagName","getNodeText","parseAxes","axes","axisElement","getAttribute","axis","indexOf","substr","tupleElement","tupleMembers","levelSum","members","membersCount","isAxisWithMeasure","tuple","caption","hasValue","parentName","levelName","textContent","innerHTML","parseCells","cellsOriginal","cellElements","errorDictionary","xmlCell","valueElement","errorElements","_isNumeric","cellOrdinal","row","measureIndex","keys","forEach","key","log","pathValue","getItem","hash","item","isDefined","getVisibleChildren","children","grandTotalHash","reduce","firstChild","inArray","newChildren","child","apply","processMember","parentItem","currentItem","added","getGrandTotalIndex","grandTotalIndex","fillDataSourceAxes","dataSourceAxis","axisTuples","tupleIndex","Math","floor","foreachTree","items","checkError","faultElementNS","faultElement","errorElement","find","description","attr","error","parseResult","dataSource","grandTotalColumnIndex","grandTotalRowIndex","parseDiscoverRowSet","schema","translatedDisplayFolders","isMeasure","displayFolderField","levelNumber","displayFolder","names","groupName","isDefault","defaultHierarchies","parseMeasureGroupDiscoverRowSet","measureGroups","parseDimensionsDiscoverRowSet","$row","dimensionName","parseStringWithUnicodeSymbols","whole","group1","String","fromCharCode","stringArray","match","parseDrillDownRowSet","columnNames","j","sendQuery","storeOptions","html","catalog","processTotalCount","totalCountXml","columnOptions","rowOptions","rowCount","max","columnCount","_i","ctor","_options","getFields","cube","localeIdProperty","dimensionsRequest","measuresRequest","hierarchiesRequest","levelsRequest","when","then","dimensionsResponse","measuresResponse","hierarchiesResponse","levelsResponse","measureGroupsResponse","hierarchies","levels","levelsByHierarchy","hierarchy","load","rowCountMdx","extend","executeXml","rowCountXml","response","delay","setTimeout","supportPaging","getDrillDownItems","noop","include","storeDrillDownMixin"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/pivot_grid/xmla_store/xmla_store.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.XmlaStore = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../../core/renderer\"));\r\nvar _window = require(\"../../../core/utils/window\");\r\nvar _class = _interopRequireDefault(require(\"../../../core/class\"));\r\nvar _string = require(\"../../../core/utils/string\");\r\nvar _errors = _interopRequireDefault(require(\"../../../data/errors\"));\r\nvar _common = require(\"../../../core/utils/common\");\r\nvar _extend = require(\"../../../core/utils/extend\");\r\nvar _type = require(\"../../../core/utils/type\");\r\nvar _iterator = require(\"../../../core/utils/iterator\");\r\nvar _array = require(\"../../../core/utils/array\");\r\nvar _uiPivot_grid = require(\"../ui.pivot_grid.utils\");\r\nvar _deferred = require(\"../../../core/utils/deferred\");\r\nvar _language_codes = require(\"../../../localization/language_codes\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(o)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n    if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\r\n        return Array.from(iter)\r\n    }\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return _arrayLikeToArray(arr)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\nvar errors = _errors.default.errors;\r\nvar window = (0, _window.getWindow)();\r\nvar XmlaStore = _class.default.inherit(function() {\r\n    var discover = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><RequestType>{2}</RequestType><Restrictions><RestrictionList><CATALOG_NAME>{0}</CATALOG_NAME><CUBE_NAME>{1}</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>{0}</Catalog>{3}</PropertyList></Properties></Discover></Body></Envelope>';\r\n    var execute = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>{0}</Statement></Command><Properties><PropertyList><Catalog>{1}</Catalog><ShowHiddenCubes>True</ShowHiddenCubes><SspropInitAppName>Microsoft SQL Server Management Studio</SspropInitAppName><Timeout>3600</Timeout>{2}</PropertyList></Properties></Execute></Body></Envelope>';\r\n    var mdx = \"SELECT {2} FROM {0} {1} CELL PROPERTIES VALUE, FORMAT_STRING, LANGUAGE, BACK_COLOR, FORE_COLOR, FONT_FLAGS\";\r\n    var mdxFilterSelect = \"(SELECT {0} FROM {1})\";\r\n    var mdxSubset = \"Subset({0}, {1}, {2})\";\r\n    var mdxOrder = \"Order({0}, {1}, {2})\";\r\n    var mdxWith = \"{0} {1} as {2}\";\r\n    var mdxSlice = \"WHERE ({0})\";\r\n    var mdxNonEmpty = \"NonEmpty({0}, {1})\";\r\n    var mdxAxis = \"{0} DIMENSION PROPERTIES PARENT_UNIQUE_NAME,HIERARCHY_UNIQUE_NAME, MEMBER_VALUE ON {1}\";\r\n    var mdxCrossJoin = \"CrossJoin({0})\";\r\n    var mdxSet = \"{{0}}\";\r\n    var MEASURE_DEMENSION_KEY = \"DX_MEASURES\";\r\n    var MD_DIMTYPE_MEASURE = \"2\";\r\n\r\n    function execXMLA(requestOptions, data) {\r\n        var deferred = new _deferred.Deferred;\r\n        var beforeSend = requestOptions.beforeSend;\r\n        var ajaxSettings = {\r\n            url: requestOptions.url,\r\n            dataType: \"text\",\r\n            data: data,\r\n            headers: {\r\n                \"Content-Type\": \"text/xml\"\r\n            },\r\n            xhrFields: {},\r\n            method: \"POST\"\r\n        };\r\n        if ((0, _type.isFunction)(beforeSend)) {\r\n            beforeSend(ajaxSettings)\r\n        }(0, _uiPivot_grid.sendRequest)(ajaxSettings).fail(function() {\r\n            deferred.reject(arguments)\r\n        }).done(function(text) {\r\n            var parser = new window.DOMParser;\r\n            var xml;\r\n            try {\r\n                try {\r\n                    xml = parser.parseFromString(text, \"text/xml\")\r\n                } catch (e) {\r\n                    xml = void 0\r\n                }\r\n                if (!xml || xml.getElementsByTagName(\"parsererror\").length || 0 === xml.childNodes.length) {\r\n                    throw new errors.Error(\"E4023\", text)\r\n                }\r\n            } catch (e) {\r\n                deferred.reject({\r\n                    statusText: e.message,\r\n                    stack: e.stack,\r\n                    responseText: text\r\n                })\r\n            }\r\n            deferred.resolve(xml)\r\n        });\r\n        return deferred\r\n    }\r\n\r\n    function getLocaleIdProperty() {\r\n        var languageId = (0, _language_codes.getLanguageId)();\r\n        if (void 0 !== languageId) {\r\n            return (0, _string.format)(\"<LocaleIdentifier>{0}</LocaleIdentifier>\", languageId)\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    function mdxDescendants(level, levelMember, nextLevel) {\r\n        var memberExpression = levelMember ? levelMember : level;\r\n        return \"Descendants({\" + memberExpression + \"}, \" + nextLevel + \", SELF_AND_BEFORE)\"\r\n    }\r\n\r\n    function getAllMember(dimension) {\r\n        return (dimension.hierarchyName || dimension.dataField) + \".[All]\"\r\n    }\r\n\r\n    function getAllMembers(field) {\r\n        var result = field.dataField + \".allMembers\";\r\n        var searchValue = field.searchValue;\r\n        if (searchValue) {\r\n            searchValue = searchValue.replace(/'/g, \"''\");\r\n            result = \"Filter(\" + result + \", instr(\" + field.dataField + \".currentmember.member_caption,'\" + searchValue + \"') > 0)\"\r\n        }\r\n        return result\r\n    }\r\n\r\n    function crossJoinElements(elements) {\r\n        var elementsString = elements.join(\",\");\r\n        return elements.length > 1 ? (0, _string.format)(mdxCrossJoin, elementsString) : elementsString\r\n    }\r\n\r\n    function union(elements) {\r\n        var elementsString = elements.join(\",\");\r\n        return elements.length > 1 ? \"Union(\" + elementsString + \")\" : elementsString\r\n    }\r\n\r\n    function generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take) {\r\n        var crossJoinArgs = [];\r\n        var dimensions = options[axisName];\r\n        var fields = [];\r\n        var arg;\r\n        var prevDimension;\r\n        var member;\r\n        for (var i = expandIndex; i <= expandLevel; i++) {\r\n            var field = dimensions[i];\r\n            var dataField = field.dataField;\r\n            var prevHierarchyName = dimensions[i - 1] && dimensions[i - 1].hierarchyName;\r\n            var hierarchyName = field.hierarchyName;\r\n            var isLastDimensionInGroup = !hierarchyName || !dimensions[i + 1] || dimensions[i + 1].hierarchyName !== hierarchyName;\r\n            var expandAllIndex = path.length + expandAllCount + expandIndex;\r\n            arg = null;\r\n            fields.push(field);\r\n            if (i < path.length) {\r\n                if (isLastDimensionInGroup) {\r\n                    arg = \"(\" + dataField + \".\" + preparePathValue(path[i], dataField) + \")\"\r\n                }\r\n            } else {\r\n                if (i <= expandAllIndex) {\r\n                    if (0 === i && 0 === expandAllCount) {\r\n                        var allMember = getAllMember(dimensions[expandIndex]);\r\n                        if (!hierarchyName) {\r\n                            arg = getAllMembers(dimensions[expandIndex])\r\n                        } else {\r\n                            arg = allMember + \",\" + dimensions[expandIndex].dataField\r\n                        }\r\n                    } else {\r\n                        if (hierarchyName) {\r\n                            member = preparePathValue(slicePath[slicePath.length - 1]);\r\n                            if (isLastDimensionInGroup || i === expandAllIndex) {\r\n                                if (prevHierarchyName === hierarchyName) {\r\n                                    if (slicePath.length) {\r\n                                        prevDimension = dimensions[slicePath.length - 1]\r\n                                    }\r\n                                    if (!prevDimension || prevDimension.hierarchyName !== hierarchyName) {\r\n                                        prevDimension = dimensions[i - 1];\r\n                                        member = \"\"\r\n                                    }\r\n                                    arg = mdxDescendants(prevDimension.dataField, member, dataField)\r\n                                } else {\r\n                                    arg = getAllMembers(field)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            arg = getAllMembers(field)\r\n                        }\r\n                    }\r\n                } else {\r\n                    var isFirstDimensionInGroup = !hierarchyName || prevHierarchyName !== hierarchyName;\r\n                    if (isFirstDimensionInGroup) {\r\n                        arg = \"(\" + getAllMember(field) + \")\"\r\n                    }\r\n                }\r\n            }\r\n            if (arg) {\r\n                arg = (0, _string.format)(mdxSet, arg);\r\n                if (take) {\r\n                    var sortBy = (field.hierarchyName || field.dataField) + (\"displayText\" === field.sortBy ? \".MEMBER_CAPTION\" : \".MEMBER_VALUE\");\r\n                    arg = (0, _string.format)(mdxOrder, arg, sortBy, \"desc\" === field.sortOrder ? \"DESC\" : \"ASC\")\r\n                }\r\n                crossJoinArgs.push(arg)\r\n            }\r\n        }\r\n        return crossJoinElements(crossJoinArgs)\r\n    }\r\n\r\n    function fillCrossJoins(crossJoins, path, expandLevel, expandIndex, slicePath, options, axisName, cellsString, take, totalsOnly) {\r\n        var expandAllCount = -1;\r\n        var dimensions = options[axisName];\r\n        var dimensionIndex;\r\n        do {\r\n            expandAllCount++;\r\n            dimensionIndex = path.length + expandAllCount + expandIndex;\r\n            var crossJoin = generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take);\r\n            if (!take && !totalsOnly) {\r\n                crossJoin = (0, _string.format)(mdxNonEmpty, crossJoin, cellsString)\r\n            }\r\n            crossJoins.push(crossJoin)\r\n        } while (dimensions[dimensionIndex] && dimensions[dimensionIndex + 1] && dimensions[dimensionIndex].expanded)\r\n    }\r\n\r\n    function declare(expression, withArray, name, type) {\r\n        name = name || \"[DX_Set_\" + withArray.length + \"]\";\r\n        type = type || \"set\";\r\n        withArray.push((0, _string.format)(mdxWith, type, name, expression));\r\n        return name\r\n    }\r\n\r\n    function generateAxisMdx(options, axisName, cells, withArray, parseOptions) {\r\n        var dimensions = options[axisName];\r\n        var crossJoins = [];\r\n        var path = [];\r\n        var expandedPaths = [];\r\n        var expandIndex = 0;\r\n        var expandLevel = 0;\r\n        var result = [];\r\n        var cellsString = (0, _string.format)(mdxSet, cells.join(\",\"));\r\n        if (dimensions && dimensions.length) {\r\n            if (options.headerName === axisName) {\r\n                path = options.path;\r\n                expandIndex = path.length\r\n            } else {\r\n                if (options.headerName && options.oppositePath) {\r\n                    path = options.oppositePath;\r\n                    expandIndex = path.length\r\n                } else {\r\n                    expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || expandedPaths\r\n                }\r\n            }\r\n            expandLevel = (0, _uiPivot_grid.getExpandedLevel)(options, axisName);\r\n            fillCrossJoins(crossJoins, [], expandLevel, expandIndex, path, options, axisName, cellsString, \"rows\" === axisName ? options.rowTake : options.columnTake, options.totalsOnly);\r\n            (0, _iterator.each)(expandedPaths, function(_, expandedPath) {\r\n                fillCrossJoins(crossJoins, expandedPath, expandLevel, expandIndex, expandedPath, options, axisName, cellsString)\r\n            });\r\n            for (var i = expandLevel; i >= path.length; i--) {\r\n                if (dimensions[i].hierarchyName) {\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName] = parseOptions.visibleLevels[dimensions[i].hierarchyName] || [];\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName].push(dimensions[i].dataField)\r\n                }\r\n            }\r\n        }\r\n        if (crossJoins.length) {\r\n            var expression = union(crossJoins);\r\n            if (\"rows\" === axisName && options.rowTake) {\r\n                expression = (0, _string.format)(mdxSubset, expression, options.rowSkip > 0 ? options.rowSkip + 1 : 0, options.rowSkip > 0 ? options.rowTake : options.rowTake + 1)\r\n            }\r\n            if (\"columns\" === axisName && options.columnTake) {\r\n                expression = (0, _string.format)(mdxSubset, expression, options.columnSkip > 0 ? options.columnSkip + 1 : 0, options.columnSkip > 0 ? options.columnTake : options.columnTake + 1)\r\n            }\r\n            var axisSet = \"[DX_\".concat(axisName, \"]\");\r\n            result.push(declare(expression, withArray, axisSet));\r\n            if (options.totalsOnly) {\r\n                result.push(declare(\"COUNT(\".concat(axisSet, \")\"), withArray, \"[DX_\".concat(axisName, \"_count]\"), \"member\"))\r\n            }\r\n        }\r\n        if (\"columns\" === axisName && cells.length && !options.skipValues) {\r\n            result.push(cellsString)\r\n        }\r\n        return (0, _string.format)(mdxAxis, crossJoinElements(result), axisName)\r\n    }\r\n\r\n    function generateAxisFieldsFilter(fields) {\r\n        var filterMembers = [];\r\n        (0, _iterator.each)(fields, function(_, field) {\r\n            var dataField = field.dataField;\r\n            var filterExpression = [];\r\n            var filterValues = field.filterValues || [];\r\n            var filterStringExpression;\r\n            if (field.hierarchyName && (0, _type.isNumeric)(field.groupIndex)) {\r\n                return\r\n            }(0, _iterator.each)(filterValues, function(_, filterValue) {\r\n                var filterMdx = dataField + \".\" + preparePathValue(Array.isArray(filterValue) ? filterValue[filterValue.length - 1] : filterValue, dataField);\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterExpression.push(filterMdx + \".parent\");\r\n                    filterMdx = \"Descendants(\" + filterMdx + \")\"\r\n                }\r\n                filterExpression.push(filterMdx)\r\n            });\r\n            if (filterValues.length) {\r\n                filterStringExpression = (0, _string.format)(mdxSet, filterExpression.join(\",\"));\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterStringExpression = \"Except(\" + getAllMembers(field) + \",\" + filterStringExpression + \")\"\r\n                }\r\n                filterMembers.push(filterStringExpression)\r\n            }\r\n        });\r\n        return filterMembers.length ? crossJoinElements(filterMembers) : \"\"\r\n    }\r\n\r\n    function generateFrom(columnsFilter, rowsFilter, filter, cubeName) {\r\n        var from = \"[\" + cubeName + \"]\";\r\n        (0, _iterator.each)([columnsFilter, rowsFilter, filter], function(_, filter) {\r\n            if (filter) {\r\n                from = (0, _string.format)(mdxFilterSelect, filter + \"on 0\", from)\r\n            }\r\n        });\r\n        return from\r\n    }\r\n\r\n    function generateMdxCore(axisStrings, withArray, columns, rows, filters, slice, cubeName) {\r\n        var options = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {};\r\n        var mdxString = \"\";\r\n        var withString = (withArray.length ? \"with \" + withArray.join(\" \") : \"\") + \" \";\r\n        if (axisStrings.length) {\r\n            var select;\r\n            if (options.totalsOnly) {\r\n                var countMembers = [];\r\n                if (rows.length) {\r\n                    countMembers.push(\"[DX_rows_count]\")\r\n                }\r\n                if (columns.length) {\r\n                    countMembers.push(\"[DX_columns_count]\")\r\n                }\r\n                select = \"{\".concat(countMembers.join(\",\"), \"} on columns\")\r\n            } else {\r\n                select = axisStrings.join(\",\")\r\n            }\r\n            mdxString = withString + (0, _string.format)(mdx, generateFrom(generateAxisFieldsFilter(columns), generateAxisFieldsFilter(rows), generateAxisFieldsFilter(filters || []), cubeName), slice.length ? (0, _string.format)(mdxSlice, slice.join(\",\")) : \"\", select)\r\n        }\r\n        return mdxString\r\n    }\r\n\r\n    function prepareDataFields(withArray, valueFields) {\r\n        return (0, _iterator.map)(valueFields, function(cell) {\r\n            if ((0, _type.isString)(cell.expression)) {\r\n                declare(cell.expression, withArray, cell.dataField, \"member\")\r\n            }\r\n            return cell.dataField\r\n        })\r\n    }\r\n\r\n    function addSlices(slices, options, headerName, path) {\r\n        (0, _iterator.each)(path, function(index, value) {\r\n            var dimension = options[headerName][index];\r\n            if (!dimension.hierarchyName || dimension.hierarchyName !== options[headerName][index + 1].hierarchyName) {\r\n                slices.push(dimension.dataField + \".\" + preparePathValue(value, dimension.dataField))\r\n            }\r\n        })\r\n    }\r\n\r\n    function generateMDX(options, cubeName, parseOptions) {\r\n        var columns = options.columns || [];\r\n        var rows = options.rows || [];\r\n        var values = options.values && options.values.length ? options.values : [{\r\n            dataField: \"[Measures]\"\r\n        }];\r\n        var slice = [];\r\n        var withArray = [];\r\n        var axisStrings = [];\r\n        var dataFields = prepareDataFields(withArray, values);\r\n        parseOptions.measureCount = options.skipValues ? 1 : values.length;\r\n        parseOptions.visibleLevels = {};\r\n        if (options.headerName && options.path) {\r\n            addSlices(slice, options, options.headerName, options.path)\r\n        }\r\n        if (options.headerName && options.oppositePath) {\r\n            addSlices(slice, options, \"rows\" === options.headerName ? \"columns\" : \"rows\", options.oppositePath)\r\n        }\r\n        if (columns.length || dataFields.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"columns\", dataFields, withArray, parseOptions))\r\n        }\r\n        if (rows.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"rows\", dataFields, withArray, parseOptions))\r\n        }\r\n        return generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName, options)\r\n    }\r\n\r\n    function createDrillDownAxisSlice(slice, fields, path) {\r\n        (0, _iterator.each)(path, function(index, value) {\r\n            var field = fields[index];\r\n            if (field.hierarchyName && (fields[index + 1] || {}).hierarchyName === field.hierarchyName) {\r\n                return\r\n            }\r\n            slice.push(field.dataField + \".\" + preparePathValue(value, field.dataField))\r\n        })\r\n    }\r\n\r\n    function generateDrillDownMDX(options, cubeName, params) {\r\n        var columns = options.columns || [];\r\n        var rows = options.rows || [];\r\n        var values = options.values && options.values.length ? options.values : [{\r\n            dataField: \"[Measures]\"\r\n        }];\r\n        var slice = [];\r\n        var withArray = [];\r\n        var axisStrings = [];\r\n        var dataFields = prepareDataFields(withArray, values);\r\n        var maxRowCount = params.maxRowCount;\r\n        var customColumns = params.customColumns || [];\r\n        var customColumnsString = customColumns.length > 0 ? \" return \" + customColumns.join(\",\") : \"\";\r\n        createDrillDownAxisSlice(slice, columns, params.columnPath || []);\r\n        createDrillDownAxisSlice(slice, rows, params.rowPath || []);\r\n        if (columns.length || columns.length || dataFields.length) {\r\n            axisStrings.push([(dataFields[params.dataIndex] || dataFields[0]) + \" on 0\"])\r\n        }\r\n        var coreMDX = generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName);\r\n        return coreMDX ? \"drillthrough\" + (maxRowCount > 0 ? \" maxrows \" + maxRowCount : \"\") + coreMDX + customColumnsString : coreMDX\r\n    }\r\n\r\n    function getNumber(str) {\r\n        return parseInt(str, 10)\r\n    }\r\n\r\n    function parseValue(valueText) {\r\n        return (0, _type.isNumeric)(valueText) ? parseFloat(valueText) : valueText\r\n    }\r\n\r\n    function getFirstChild(node, tagName) {\r\n        return (node.getElementsByTagName(tagName) || [])[0]\r\n    }\r\n\r\n    function getFirstChildText(node, childTagName) {\r\n        return getNodeText(getFirstChild(node, childTagName))\r\n    }\r\n\r\n    function parseAxes(xml, skipValues) {\r\n        var axes = [];\r\n        (0, _iterator.each)(xml.getElementsByTagName(\"Axis\"), function(_, axisElement) {\r\n            var name = axisElement.getAttribute(\"name\");\r\n            var axis = [];\r\n            var index = 0;\r\n            if (0 === name.indexOf(\"Axis\") && (0, _type.isNumeric)(getNumber(name.substr(4)))) {\r\n                axes.push(axis);\r\n                (0, _iterator.each)(axisElement.getElementsByTagName(\"Tuple\"), function(_, tupleElement) {\r\n                    var tupleMembers = tupleElement.childNodes;\r\n                    var levelSum = 0;\r\n                    var members = [];\r\n                    var membersCount = skipValues ? tupleMembers.length : tupleMembers.length - 1;\r\n                    var isAxisWithMeasure = 1 === axes.length;\r\n                    if (isAxisWithMeasure) {\r\n                        membersCount--\r\n                    }\r\n                    axis.push(members);\r\n                    for (var i = membersCount; i >= 0; i--) {\r\n                        var tuple = tupleMembers[i];\r\n                        var level = getNumber(getFirstChildText(tuple, \"LNum\"));\r\n                        members[i] = {\r\n                            caption: getFirstChildText(tuple, \"Caption\"),\r\n                            value: parseValue(getFirstChildText(tuple, \"MEMBER_VALUE\")),\r\n                            level: level,\r\n                            index: index++,\r\n                            hasValue: !levelSum && (!!level || 0 === i),\r\n                            name: getFirstChildText(tuple, \"UName\"),\r\n                            hierarchyName: tupleMembers[i].getAttribute(\"Hierarchy\"),\r\n                            parentName: getFirstChildText(tuple, \"PARENT_UNIQUE_NAME\"),\r\n                            levelName: getFirstChildText(tuple, \"LName\")\r\n                        };\r\n                        levelSum += level\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        while (axes.length < 2) {\r\n            axes.push([\r\n                [{\r\n                    level: 0\r\n                }]\r\n            ])\r\n        }\r\n        return axes\r\n    }\r\n\r\n    function getNodeText(node) {\r\n        return node && node && (node.textContent || node.text || node.innerHTML) || \"\"\r\n    }\r\n\r\n    function parseCells(xml, axes, measureCount) {\r\n        var cells = [];\r\n        var cell = [];\r\n        var index = 0;\r\n        var cellsOriginal = [];\r\n        var cellElements = xml.getElementsByTagName(\"Cell\");\r\n        var errorDictionary = {};\r\n        for (var i = 0; i < cellElements.length; i++) {\r\n            var xmlCell = cellElements[i];\r\n            var valueElement = xmlCell.getElementsByTagName(\"Value\")[0];\r\n            var errorElements = valueElement && valueElement.getElementsByTagName(\"Error\") || [];\r\n            var text = 0 === errorElements.length ? getNodeText(valueElement) : \"#N/A\";\r\n            var value = parseFloat(text);\r\n            var _isNumeric = text - value + 1 > 0;\r\n            var cellOrdinal = getNumber(xmlCell.getAttribute(\"CellOrdinal\"));\r\n            if (errorElements.length) {\r\n                errorDictionary[getNodeText(errorElements[0].getElementsByTagName(\"ErrorCode\")[0])] = getNodeText(errorElements[0].getElementsByTagName(\"Description\")[0])\r\n            }\r\n            cellsOriginal[cellOrdinal] = {\r\n                value: _isNumeric ? value : text || null\r\n            }\r\n        }(0, _iterator.each)(axes[1], function() {\r\n            var row = [];\r\n            cells.push(row);\r\n            (0, _iterator.each)(axes[0], function() {\r\n                var measureIndex = index % measureCount;\r\n                if (0 === measureIndex) {\r\n                    cell = [];\r\n                    row.push(cell)\r\n                }\r\n                cell.push(cellsOriginal[index] ? cellsOriginal[index].value : null);\r\n                index++\r\n            })\r\n        });\r\n        Object.keys(errorDictionary).forEach(function(key) {\r\n            errors.log(\"W4002\", errorDictionary[key])\r\n        });\r\n        return cells\r\n    }\r\n\r\n    function preparePathValue(pathValue, dataField) {\r\n        if (pathValue) {\r\n            pathValue = (0, _type.isString)(pathValue) && pathValue.indexOf(\"&\") !== -1 ? pathValue : \"[\" + pathValue + \"]\";\r\n            if (dataField && 0 === pathValue.indexOf(dataField + \".\")) {\r\n                pathValue = pathValue.slice(dataField.length + 1, pathValue.length)\r\n            }\r\n        }\r\n        return pathValue\r\n    }\r\n\r\n    function getItem(hash, name, member, index) {\r\n        var item = hash[name];\r\n        if (!item) {\r\n            item = {};\r\n            hash[name] = item\r\n        }\r\n        if (!(0, _type.isDefined)(item.value) && member) {\r\n            item.text = member.caption;\r\n            item.value = member.value;\r\n            item.key = name ? name : \"\";\r\n            item.levelName = member.levelName;\r\n            item.hierarchyName = member.hierarchyName;\r\n            item.parentName = member.parentName;\r\n            item.index = index;\r\n            item.level = member.level\r\n        }\r\n        return item\r\n    }\r\n\r\n    function getVisibleChildren(item, visibleLevels) {\r\n        var result = [];\r\n        var children = item.children && (item.children.length ? item.children : Object.keys(item.children.grandTotalHash || {}).reduce(function(result, name) {\r\n            return result.concat(item.children.grandTotalHash[name].children)\r\n        }, []));\r\n        var firstChild = children && children[0];\r\n        if (firstChild && (visibleLevels[firstChild.hierarchyName] && (0, _array.inArray)(firstChild.levelName, visibleLevels[firstChild.hierarchyName]) !== -1 || !visibleLevels[firstChild.hierarchyName] || 0 === firstChild.level)) {\r\n            var newChildren = children.filter(function(child) {\r\n                return child.hierarchyName === firstChild.hierarchyName\r\n            });\r\n            newChildren.grandTotalHash = children.grandTotalHash;\r\n            return newChildren\r\n        } else {\r\n            if (firstChild) {\r\n                for (var i = 0; i < children.length; i++) {\r\n                    if (children[i].hierarchyName === firstChild.hierarchyName) {\r\n                        result.push.apply(result, getVisibleChildren(children[i], visibleLevels))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    function processMember(dataIndex, member, parentItem) {\r\n        var children = parentItem.children = parentItem.children || [];\r\n        var hash = children.hash = children.hash || {};\r\n        var grandTotalHash = children.grandTotalHash = children.grandTotalHash || {};\r\n        if (member.parentName) {\r\n            parentItem = getItem(hash, member.parentName);\r\n            children = parentItem.children = parentItem.children || []\r\n        }\r\n        var currentItem = getItem(hash, member.name, member, dataIndex);\r\n        if (member.hasValue && !currentItem.added) {\r\n            currentItem.index = dataIndex;\r\n            currentItem.added = true;\r\n            children.push(currentItem)\r\n        }\r\n        if ((!parentItem.value || !parentItem.parentName) && member.parentName) {\r\n            grandTotalHash[member.parentName] = parentItem\r\n        } else {\r\n            if (grandTotalHash[parentItem.name]) {\r\n                delete grandTotalHash[member.parentName]\r\n            }\r\n        }\r\n        return currentItem\r\n    }\r\n\r\n    function getGrandTotalIndex(parentItem, visibleLevels) {\r\n        var grandTotalIndex;\r\n        if (1 === parentItem.children.length && \"\" === parentItem.children[0].parentName) {\r\n            grandTotalIndex = parentItem.children[0].index;\r\n            var grandTotalHash = parentItem.children.grandTotalHash;\r\n            parentItem.children = parentItem.children[0].children || [];\r\n            parentItem.children.grandTotalHash = grandTotalHash;\r\n            parentItem.children = getVisibleChildren(parentItem, visibleLevels)\r\n        } else {\r\n            if (0 === parentItem.children.length) {\r\n                grandTotalIndex = 0\r\n            }\r\n        }\r\n        return grandTotalIndex\r\n    }\r\n\r\n    function fillDataSourceAxes(dataSourceAxis, axisTuples, measureCount, visibleLevels) {\r\n        var result = [];\r\n        (0, _iterator.each)(axisTuples, function(tupleIndex, members) {\r\n            var parentItem = {\r\n                children: result\r\n            };\r\n            var dataIndex = (0, _type.isDefined)(measureCount) ? Math.floor(tupleIndex / measureCount) : tupleIndex;\r\n            (0, _iterator.each)(members, function(_, member) {\r\n                parentItem = processMember(dataIndex, member, parentItem)\r\n            })\r\n        });\r\n        var parentItem = {\r\n            children: result\r\n        };\r\n        parentItem.children = getVisibleChildren(parentItem, visibleLevels);\r\n        var grandTotalIndex = getGrandTotalIndex(parentItem, visibleLevels);\r\n        (0, _uiPivot_grid.foreachTree)(parentItem.children, function(items) {\r\n            var item = items[0];\r\n            var children = getVisibleChildren(item, visibleLevels);\r\n            if (children.length) {\r\n                item.children = children\r\n            } else {\r\n                delete item.children\r\n            }\r\n            delete item.levelName;\r\n            delete item.hierarchyName;\r\n            delete item.added;\r\n            delete item.parentName;\r\n            delete item.level\r\n        }, true);\r\n        (0, _iterator.each)(parentItem.children || [], function(_, e) {\r\n            dataSourceAxis.push(e)\r\n        });\r\n        return grandTotalIndex\r\n    }\r\n\r\n    function checkError(xml) {\r\n        var faultElementNS = xml.getElementsByTagName(\"soap:Fault\");\r\n        var faultElement = xml.getElementsByTagName(\"Fault\");\r\n        var errorElement = (0, _renderer.default)([].slice.call(faultElement.length ? faultElement : faultElementNS)).find(\"Error\");\r\n        if (errorElement.length) {\r\n            var description = errorElement.attr(\"Description\");\r\n            var error = new errors.Error(\"E4000\", description);\r\n            errors.log(\"E4000\", description);\r\n            return error\r\n        }\r\n        return null\r\n    }\r\n\r\n    function parseResult(xml, parseOptions) {\r\n        var dataSource = {\r\n            columns: [],\r\n            rows: []\r\n        };\r\n        var measureCount = parseOptions.measureCount;\r\n        var axes = parseAxes(xml, parseOptions.skipValues);\r\n        dataSource.grandTotalColumnIndex = fillDataSourceAxes(dataSource.columns, axes[0], measureCount, parseOptions.visibleLevels);\r\n        dataSource.grandTotalRowIndex = fillDataSourceAxes(dataSource.rows, axes[1], void 0, parseOptions.visibleLevels);\r\n        dataSource.values = parseCells(xml, axes, measureCount);\r\n        return dataSource\r\n    }\r\n\r\n    function parseDiscoverRowSet(xml, schema, dimensions, translatedDisplayFolders) {\r\n        var result = [];\r\n        var isMeasure = \"MEASURE\" === schema;\r\n        var displayFolderField = isMeasure ? \"MEASUREGROUP_NAME\" : schema + \"_DISPLAY_FOLDER\";\r\n        (0, _iterator.each)(xml.getElementsByTagName(\"row\"), function(_, row) {\r\n            var hierarchyName = \"LEVEL\" === schema ? getFirstChildText(row, \"HIERARCHY_UNIQUE_NAME\") : void 0;\r\n            var levelNumber = getFirstChildText(row, \"LEVEL_NUMBER\");\r\n            var displayFolder = getFirstChildText(row, displayFolderField);\r\n            if (isMeasure) {\r\n                displayFolder = translatedDisplayFolders[displayFolder] || displayFolder\r\n            }\r\n            if ((\"0\" !== levelNumber || \"true\" !== getFirstChildText(row, schema + \"_IS_VISIBLE\")) && getFirstChildText(row, \"DIMENSION_TYPE\") !== MD_DIMTYPE_MEASURE) {\r\n                var dimension = isMeasure ? MEASURE_DEMENSION_KEY : getFirstChildText(row, \"DIMENSION_UNIQUE_NAME\");\r\n                var dataField = getFirstChildText(row, schema + \"_UNIQUE_NAME\");\r\n                result.push({\r\n                    dimension: dimensions.names[dimension] || dimension,\r\n                    groupIndex: levelNumber ? getNumber(levelNumber) - 1 : void 0,\r\n                    dataField: dataField,\r\n                    caption: getFirstChildText(row, schema + \"_CAPTION\"),\r\n                    hierarchyName: hierarchyName,\r\n                    groupName: hierarchyName,\r\n                    displayFolder: displayFolder,\r\n                    isMeasure: isMeasure,\r\n                    isDefault: !!dimensions.defaultHierarchies[dataField]\r\n                })\r\n            }\r\n        });\r\n        return result\r\n    }\r\n\r\n    function parseMeasureGroupDiscoverRowSet(xml) {\r\n        var measureGroups = {};\r\n        (0, _iterator.each)(xml.getElementsByTagName(\"row\"), function(_, row) {\r\n            measureGroups[getFirstChildText(row, \"MEASUREGROUP_NAME\")] = getFirstChildText(row, \"MEASUREGROUP_CAPTION\")\r\n        });\r\n        return measureGroups\r\n    }\r\n\r\n    function parseDimensionsDiscoverRowSet(xml) {\r\n        var result = {\r\n            names: {},\r\n            defaultHierarchies: {}\r\n        };\r\n        (0, _iterator.each)((0, _renderer.default)(xml).find(\"row\"), function() {\r\n            var $row = (0, _renderer.default)(this);\r\n            var type = $row.children(\"DIMENSION_TYPE\").text();\r\n            var dimensionName = type === MD_DIMTYPE_MEASURE ? MEASURE_DEMENSION_KEY : $row.children(\"DIMENSION_UNIQUE_NAME\").text();\r\n            result.names[dimensionName] = $row.children(\"DIMENSION_CAPTION\").text();\r\n            result.defaultHierarchies[$row.children(\"DEFAULT_HIERARCHY\").text()] = true\r\n        });\r\n        return result\r\n    }\r\n\r\n    function parseStringWithUnicodeSymbols(str) {\r\n        str = str.replace(/_x(....)_/g, function(whole, group1) {\r\n            return String.fromCharCode(parseInt(group1, 16))\r\n        });\r\n        var stringArray = str.match(/\\[.+?\\]/gi);\r\n        if (stringArray && stringArray.length) {\r\n            str = stringArray[stringArray.length - 1]\r\n        }\r\n        return str.replace(/\\[/gi, \"\").replace(/\\]/gi, \"\").replace(/\\$/gi, \"\").replace(/\\./gi, \" \")\r\n    }\r\n\r\n    function parseDrillDownRowSet(xml) {\r\n        var rows = xml.getElementsByTagName(\"row\");\r\n        var result = [];\r\n        var columnNames = {};\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var children = rows[i].childNodes;\r\n            var item = {};\r\n            for (var j = 0; j < children.length; j++) {\r\n                var tagName = children[j].tagName;\r\n                var name = columnNames[tagName] = columnNames[tagName] || parseStringWithUnicodeSymbols(tagName);\r\n                item[name] = getNodeText(children[j])\r\n            }\r\n            result.push(item)\r\n        }\r\n        return result\r\n    }\r\n\r\n    function sendQuery(storeOptions, mdxString) {\r\n        mdxString = (0, _renderer.default)(\"<div>\").text(mdxString).html();\r\n        return execXMLA(storeOptions, (0, _string.format)(execute, mdxString, storeOptions.catalog, getLocaleIdProperty()))\r\n    }\r\n\r\n    function processTotalCount(data, options, totalCountXml) {\r\n        var axes = [];\r\n        var columnOptions = options.columns || [];\r\n        var rowOptions = options.rows || [];\r\n        if (columnOptions.length) {\r\n            axes.push({})\r\n        }\r\n        if (rowOptions.length) {\r\n            axes.push({})\r\n        }\r\n        var cells = parseCells(totalCountXml, [\r\n            [{}],\r\n            [{}, {}]\r\n        ], 1);\r\n        if (!columnOptions.length && rowOptions.length) {\r\n            data.rowCount = Math.max(cells[0][0][0] - 1, 0)\r\n        }\r\n        if (!rowOptions.length && columnOptions.length) {\r\n            data.columnCount = Math.max(cells[0][0][0] - 1, 0)\r\n        }\r\n        if (rowOptions.length && columnOptions.length) {\r\n            data.rowCount = Math.max(cells[0][0][0] - 1, 0);\r\n            data.columnCount = Math.max(cells[1][0][0] - 1, 0)\r\n        }\r\n        if (void 0 !== data.rowCount && options.rowTake) {\r\n            data.rows = _toConsumableArray(Array(options.rowSkip)).concat(data.rows);\r\n            data.rows.length = data.rowCount;\r\n            for (var i = 0; i < data.rows.length; i++) {\r\n                data.rows[i] = data.rows[i] || {}\r\n            }\r\n        }\r\n        if (void 0 !== data.columnCount && options.columnTake) {\r\n            data.columns = _toConsumableArray(Array(options.columnSkip)).concat(data.columns);\r\n            data.columns.length = data.columnCount;\r\n            for (var _i = 0; _i < data.columns.length; _i++) {\r\n                data.columns[_i] = data.columns[_i] || {}\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        ctor: function(options) {\r\n            this._options = options\r\n        },\r\n        getFields: function() {\r\n            var options = this._options;\r\n            var catalog = options.catalog;\r\n            var cube = options.cube;\r\n            var localeIdProperty = getLocaleIdProperty();\r\n            var dimensionsRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_DIMENSIONS\", localeIdProperty));\r\n            var measuresRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_MEASURES\", localeIdProperty));\r\n            var hierarchiesRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_HIERARCHIES\", localeIdProperty));\r\n            var levelsRequest = execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_LEVELS\", localeIdProperty));\r\n            var result = new _deferred.Deferred;\r\n            (0, _deferred.when)(dimensionsRequest, measuresRequest, hierarchiesRequest, levelsRequest).then(function(dimensionsResponse, measuresResponse, hierarchiesResponse, levelsResponse) {\r\n                execXMLA(options, (0, _string.format)(discover, catalog, cube, \"MDSCHEMA_MEASUREGROUPS\", localeIdProperty)).done(function(measureGroupsResponse) {\r\n                    var dimensions = parseDimensionsDiscoverRowSet(dimensionsResponse);\r\n                    var hierarchies = parseDiscoverRowSet(hierarchiesResponse, \"HIERARCHY\", dimensions);\r\n                    var levels = parseDiscoverRowSet(levelsResponse, \"LEVEL\", dimensions);\r\n                    var measureGroups = parseMeasureGroupDiscoverRowSet(measureGroupsResponse);\r\n                    var fields = parseDiscoverRowSet(measuresResponse, \"MEASURE\", dimensions, measureGroups).concat(hierarchies);\r\n                    var levelsByHierarchy = {};\r\n                    (0, _iterator.each)(levels, function(_, level) {\r\n                        levelsByHierarchy[level.hierarchyName] = levelsByHierarchy[level.hierarchyName] || [];\r\n                        levelsByHierarchy[level.hierarchyName].push(level)\r\n                    });\r\n                    (0, _iterator.each)(hierarchies, function(_, hierarchy) {\r\n                        if (levelsByHierarchy[hierarchy.dataField] && levelsByHierarchy[hierarchy.dataField].length > 1) {\r\n                            hierarchy.groupName = hierarchy.hierarchyName = hierarchy.dataField;\r\n                            fields.push.apply(fields, levelsByHierarchy[hierarchy.hierarchyName])\r\n                        }\r\n                    });\r\n                    result.resolve(fields)\r\n                }).fail(result.reject)\r\n            }).fail(result.reject);\r\n            return result\r\n        },\r\n        load: function load(options) {\r\n            var result = new _deferred.Deferred;\r\n            var storeOptions = this._options;\r\n            var parseOptions = {\r\n                skipValues: options.skipValues\r\n            };\r\n            var mdxString = generateMDX(options, storeOptions.cube, parseOptions);\r\n            var rowCountMdx;\r\n            if (options.rowSkip || options.rowTake || options.columnTake || options.columnSkip) {\r\n                rowCountMdx = generateMDX((0, _extend.extend)({}, options, {\r\n                    totalsOnly: true,\r\n                    rowSkip: null,\r\n                    rowTake: null,\r\n                    columnSkip: null,\r\n                    columnTake: null\r\n                }), storeOptions.cube, {})\r\n            }\r\n            var load = function() {\r\n                if (mdxString) {\r\n                    (0, _deferred.when)(sendQuery(storeOptions, mdxString), rowCountMdx && sendQuery(storeOptions, rowCountMdx)).done(function(executeXml, rowCountXml) {\r\n                        var error = checkError(executeXml) || rowCountXml && checkError(rowCountXml);\r\n                        if (!error) {\r\n                            var response = parseResult(executeXml, parseOptions);\r\n                            if (rowCountXml) {\r\n                                processTotalCount(response, options, rowCountXml)\r\n                            }\r\n                            result.resolve(response)\r\n                        } else {\r\n                            result.reject(error)\r\n                        }\r\n                    }).fail(result.reject)\r\n                } else {\r\n                    result.resolve({\r\n                        columns: [],\r\n                        rows: [],\r\n                        values: [],\r\n                        grandTotalColumnIndex: 0,\r\n                        grandTotalRowIndex: 0\r\n                    })\r\n                }\r\n            };\r\n            if (options.delay) {\r\n                setTimeout(load, options.delay)\r\n            } else {\r\n                load()\r\n            }\r\n            return result\r\n        },\r\n        supportPaging: function() {\r\n            return true\r\n        },\r\n        getDrillDownItems: function(options, params) {\r\n            var result = new _deferred.Deferred;\r\n            var storeOptions = this._options;\r\n            var mdxString = generateDrillDownMDX(options, storeOptions.cube, params);\r\n            if (mdxString) {\r\n                (0, _deferred.when)(sendQuery(storeOptions, mdxString)).done(function(executeXml) {\r\n                    var error = checkError(executeXml);\r\n                    if (!error) {\r\n                        result.resolve(parseDrillDownRowSet(executeXml))\r\n                    } else {\r\n                        result.reject(error)\r\n                    }\r\n                }).fail(result.reject)\r\n            } else {\r\n                result.resolve([])\r\n            }\r\n            return result\r\n        },\r\n        key: _common.noop,\r\n        filter: _common.noop\r\n    }\r\n}()).include(_uiPivot_grid.storeDrillDownMixin);\r\nexports.XmlaStore = XmlaStore;\r\n"]},"metadata":{},"sourceType":"script"}