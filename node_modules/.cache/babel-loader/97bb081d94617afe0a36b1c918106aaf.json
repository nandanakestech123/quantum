{"ast":null,"code":"import { AuthActionType } from \"redux/actions/actionType\";\nimport { authApi } from \"service/apiVariables\";\nimport { addQuery } from \"service/helperFunctions\";\nimport { history } from \"../../helpers\";\nimport { saloon, staff, customer, services, Products } from \"../../service/apiVariables\";\nimport { api } from \"../../service/api\";\nimport { Toast } from \"../../service/toast\";\nimport { NotificationManager } from \"react-notifications\"; // login action\n\nexport const login = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.login,\n      body\n    }).then(response => {\n      // console.log(message,Token,'123')\n      resolve(response);\n      let {\n        status,\n        data\n      } = response;\n      let {\n        message,\n        token\n      } = data;\n\n      if (status === 200 || status === 201) {\n        localStorage.setItem(\"AuthToken\", token); // localStorage.setItem('AuthTypeId', data.typeId);\n        // reject(Toast({ type: 'error', message }));\n      } // Toast({ type: 'success', message, time: 5000 })\n      // dispatch({ type: AuthActionType.getUserLoginDetails, payload: Token });\n      // if (data.typeId == 1) {\n      //   history.push('/admin/adminManagement');\n      // } else if (data.typeId == 2) {\n      //   history.push('/admin/manageDriver');\n      // }\n\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const getLoginSaloon = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.getSaloon\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // Getting user details for header\n\nexport const getTokenDetails = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.getTokenDetails\n    }).then(({\n      data\n    }) => {\n      resolve(true);\n      localStorage.setItem(\"AuthTypeId\", data.typeId);\n      dispatch({\n        type: AuthActionType.getTokenDetails,\n        payload: data\n      });\n    }).catch(({\n      message\n    }) => {\n      localStorage.clear();\n      history.push(\"/\"); // window.location.reload(true)\n\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const addStaff = body => {\n  return new Promise((resolve, reject) => {\n    api({ ...staff.addStaff,\n      body\n    }).then(res => {\n      let message = res.Message; // Toast({ type: 'error', message: JSON.stringify(message) })\n\n      if (res.status == 200 || res.status == 201) {\n        resolve(res);\n        return;\n      }\n\n      resolve(true);\n    }).catch(({\n      message\n    }) => {\n      Toast({\n        type: \"error\",\n        message: message\n      });\n      reject(true);\n    });\n  });\n};\nexport const addCustomer = body => {\n  return new Promise((resolve, reject) => {\n    api({ ...customer.addCustomer,\n      body\n    }).then(res => {\n      let message = res.Message; // Toast({ type: 'error', message: JSON.stringify(message) })\n\n      if (res.status == 200 || res.status == 201) {\n        resolve(res);\n        return;\n      }\n\n      resolve(true);\n    }).catch(({\n      message\n    }) => {\n      Toast({\n        type: \"error\",\n        message: message\n      });\n      reject(true);\n    });\n  });\n};\nexport const addService = body => {\n  return new Promise((resolve, reject) => {\n    api({ ...services.addService,\n      body\n    }).then(res => {\n      let message = res.Message; // Toast({ type: 'error', message: JSON.stringify(message) })\n\n      if (res.status == 200 || res.status == 201) {\n        resolve(res);\n        return;\n      }\n\n      resolve(true);\n    }).catch(({\n      message\n    }) => {\n      Toast({\n        type: \"error\",\n        message: message\n      });\n      reject(true);\n    });\n  });\n};\nexport const addProduct = body => {\n  return new Promise((resolve, reject) => {\n    api({ ...Products.addProduct,\n      body\n    }).then(res => {\n      let message = res.Message; // Toast({ type: 'error', message: JSON.stringify(message) })\n\n      if (res.status == 200 || res.status == 201) {\n        resolve(res);\n        return;\n      }\n\n      resolve(true);\n    }).catch(({\n      message\n    }) => {\n      Toast({\n        type: \"error\",\n        message: message\n      });\n      reject(true);\n    });\n  });\n}; // Forgot password common\n\nexport const forgotPassword = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.forgotPassword,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message\n      } = response; //  Toast({ type: \"success\", message });\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // Forgot password common\n\nexport const verifyOtp = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  authApi.verifyOtp.addQuery = {\n    key: \"id\",\n    payload: id\n  };\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.verifyOtp,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message\n      } = response; // Toast({ type: \"success\", message });\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // Forgot password common\n\nexport const resetPassword = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    authApi.resetPassword.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...authApi.resetPassword,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message\n      } = response; // Toast({ type: \"success\", message });\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get method for token verification\n\nexport const getTokenVerify = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.getTokenVerify,\n      body\n    }).then(({\n      data,\n      message\n    }) => {\n      resolve(true); //resolve(Toast({ type: \"success\", message }));\n\n      localStorage.setItem(\"AuthToken\", data.jwtToken);\n    }).catch(({\n      message\n    }) => {\n      history.push(\"/\");\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // Change Password after forgot password\n\nexport const changePassword = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.changePassword,\n      body\n    }).then(({\n      message\n    }) => {\n      resolve(true); // resolve(Toast({ type: \"success\", message }));\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // Logout using loged user\n\nexport const Logout = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    api({ ...authApi.logout,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message\n      } = response; //Toast({ type: \"success\", message });\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["F:/webfe/src/redux/actions/auth.js"],"names":["AuthActionType","authApi","addQuery","history","saloon","staff","customer","services","Products","api","Toast","NotificationManager","login","body","dispatch","getState","Promise","resolve","reject","then","response","status","data","message","token","localStorage","setItem","catch","type","getLoginSaloon","id","getSaloon","getTokenDetails","typeId","payload","clear","push","addStaff","res","Message","addCustomer","addService","addProduct","forgotPassword","verifyOtp","key","resetPassword","getTokenVerify","jwtToken","changePassword","Logout","logout"],"mappings":"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","sourcesContent":["import { AuthActionType } from \"redux/actions/actionType\";\r\nimport { authApi } from \"service/apiVariables\";\r\nimport { addQuery } from \"service/helperFunctions\";\r\nimport { history } from \"../../helpers\";\r\nimport {\r\n  saloon,\r\n  staff,\r\n  customer,\r\n  services,\r\n  Products,\r\n} from \"../../service/apiVariables\";\r\nimport { api } from \"../../service/api\";\r\nimport { Toast } from \"../../service/toast\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\n// login action\r\nexport const login =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.login, body })\r\n        .then(response => {\r\n          // console.log(message,Token,'123')\r\n          resolve(response);\r\n          let { status, data } = response;\r\n          let { message, token } = data;\r\n          if (status === 200 || status === 201) {\r\n            localStorage.setItem(\"AuthToken\", token);\r\n            // localStorage.setItem('AuthTypeId', data.typeId);\r\n            // reject(Toast({ type: 'error', message }));\r\n          }\r\n          // Toast({ type: 'success', message, time: 5000 })\r\n\r\n          // dispatch({ type: AuthActionType.getUserLoginDetails, payload: Token });\r\n\r\n          // if (data.typeId == 1) {\r\n          //   history.push('/admin/adminManagement');\r\n          // } else if (data.typeId == 2) {\r\n          //   history.push('/admin/manageDriver');\r\n          // }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const getLoginSaloon =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.getSaloon })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// Getting user details for header\r\nexport const getTokenDetails =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.getTokenDetails })\r\n        .then(({ data }) => {\r\n          resolve(true);\r\n          localStorage.setItem(\"AuthTypeId\", data.typeId);\r\n          dispatch({ type: AuthActionType.getTokenDetails, payload: data });\r\n        })\r\n        .catch(({ message }) => {\r\n          localStorage.clear();\r\n          history.push(\"/\");\r\n          // window.location.reload(true)\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const addStaff = body => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...staff.addStaff, body })\r\n      .then(res => {\r\n        let message = res.Message;\r\n        // Toast({ type: 'error', message: JSON.stringify(message) })\r\n        if (res.status == 200 || res.status == 201) {\r\n          resolve(res);\r\n          return;\r\n        }\r\n        resolve(true);\r\n      })\r\n      .catch(({ message }) => {\r\n        Toast({ type: \"error\", message: message });\r\n        reject(true);\r\n      });\r\n  });\r\n};\r\n\r\nexport const addCustomer = body => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...customer.addCustomer, body })\r\n      .then(res => {\r\n        let message = res.Message;\r\n        // Toast({ type: 'error', message: JSON.stringify(message) })\r\n        if (res.status == 200 || res.status == 201) {\r\n          resolve(res);\r\n          return;\r\n        }\r\n        resolve(true);\r\n      })\r\n      .catch(({ message }) => {\r\n        Toast({ type: \"error\", message: message });\r\n        reject(true);\r\n      });\r\n  });\r\n};\r\n\r\nexport const addService = body => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...services.addService, body })\r\n      .then(res => {\r\n        let message = res.Message;\r\n        // Toast({ type: 'error', message: JSON.stringify(message) })\r\n        if (res.status == 200 || res.status == 201) {\r\n          resolve(res);\r\n          return;\r\n        }\r\n        resolve(true);\r\n      })\r\n      .catch(({ message }) => {\r\n        Toast({ type: \"error\", message: message });\r\n        reject(true);\r\n      });\r\n  });\r\n};\r\n\r\nexport const addProduct = body => {\r\n  return new Promise((resolve, reject) => {\r\n    api({ ...Products.addProduct, body })\r\n      .then(res => {\r\n        let message = res.Message;\r\n        // Toast({ type: 'error', message: JSON.stringify(message) })\r\n        if (res.status == 200 || res.status == 201) {\r\n          resolve(res);\r\n          return;\r\n        }\r\n        resolve(true);\r\n      })\r\n      .catch(({ message }) => {\r\n        Toast({ type: \"error\", message: message });\r\n        reject(true);\r\n      });\r\n  });\r\n};\r\n\r\n// Forgot password common\r\nexport const forgotPassword =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.forgotPassword, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message } = response;\r\n          //  Toast({ type: \"success\", message });\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// Forgot password common\r\nexport const verifyOtp =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    authApi.verifyOtp.addQuery = { key: \"id\", payload: id };\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.verifyOtp, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message } = response;\r\n          // Toast({ type: \"success\", message });\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n// Forgot password common\r\nexport const resetPassword =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      authApi.resetPassword.addQuery = { key: \"id\", payload: id };\r\n      api({ ...authApi.resetPassword, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message } = response;\r\n          // Toast({ type: \"success\", message });\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get method for token verification\r\nexport const getTokenVerify =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.getTokenVerify, body })\r\n        .then(({ data, message }) => {\r\n          resolve(true);\r\n          //resolve(Toast({ type: \"success\", message }));\r\n          localStorage.setItem(\"AuthToken\", data.jwtToken);\r\n        })\r\n        .catch(({ message }) => {\r\n          history.push(\"/\");\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// Change Password after forgot password\r\nexport const changePassword =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.changePassword, body })\r\n        .then(({ message }) => {\r\n          resolve(true);\r\n          // resolve(Toast({ type: \"success\", message }));\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// Logout using loged user\r\nexport const Logout =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...authApi.logout, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message } = response;\r\n          //Toast({ type: \"success\", message });\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}