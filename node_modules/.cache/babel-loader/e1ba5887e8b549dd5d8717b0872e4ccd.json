{"ast":null,"code":"import { WorkOrderInvoiceActionType } from \"redux/actions/actionType\";\nimport { workorderinvoice } from \"../../service/apiVariables\";\nexport const updateWorkorderinvoice = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    workorderinvoice.updateWorkorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...workorderinvoice.updateWorkorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const createWorkorderinvoice = body => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  console.log(\"inside createWorkorderinvoice inside action file\", { ...workorderinvoice.addworkorderinvoice\n  });\n  return new Promise((resolve, reject) => {\n    api({ ...workorderinvoice.addworkorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: StaffActionType.getStaffDetail, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n}; // get customer action\n\nexport const getWorkorderinvoice = id => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    workorderinvoice.getworkorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...workorderinvoice.getworkorderinvoice\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status,\n        data\n      } = response;\n\n      if (status === 200 || status === 201) {\n        dispatch({\n          type: WorkOrderInvoiceActionType.getProjectListing,\n          payload: data\n        }); // Toast({ type: 'success', message })\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};\nexport const deleteWorkorderinvoice = (id, body) => (dispatch, getState, {\n  api,\n  Toast\n}) => {\n  return new Promise((resolve, reject) => {\n    workorderinvoice.deleteworkorderinvoice.addQuery = {\n      key: \"id\",\n      payload: id\n    };\n    api({ ...workorderinvoice.deleteworkorderinvoice,\n      body\n    }).then(response => {\n      resolve(response);\n      let {\n        message,\n        status\n      } = response;\n\n      if (status === 200 || status === 201) {// dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\n        //  Toast({ type: 'success', message });\n      } else {\n        reject(Toast({\n          type: \"error\",\n          message\n        }));\n      }\n    }).catch(({\n      message\n    }) => {\n      reject(Toast({\n        type: \"error\",\n        message\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/hp/Downloads/quantumCode20082022/src/redux/actions/workorderinvoice.js"],"names":["WorkOrderInvoiceActionType","workorderinvoice","updateWorkorderinvoice","id","body","dispatch","getState","api","Toast","Promise","resolve","reject","addQuery","key","payload","then","response","message","status","type","catch","createWorkorderinvoice","console","log","addworkorderinvoice","data","getWorkorderinvoice","getworkorderinvoice","getProjectListing","deleteWorkorderinvoice","deleteworkorderinvoice"],"mappings":"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","sourcesContent":["import { WorkOrderInvoiceActionType } from \"redux/actions/actionType\";\r\nimport { workorderinvoice } from \"../../service/apiVariables\";\r\n\r\nexport const updateWorkorderinvoice =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      workorderinvoice.updateWorkorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...workorderinvoice.updateWorkorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const createWorkorderinvoice =\r\n  body =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    console.log(\"inside createWorkorderinvoice inside action file\",{ ...workorderinvoice.addworkorderinvoice })\r\n\r\n    return new Promise((resolve, reject) => {\r\n      api({ ...workorderinvoice.addworkorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: StaffActionType.getStaffDetail, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\n// get customer action\r\nexport const getWorkorderinvoice =\r\n  id =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      workorderinvoice.getworkorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n\r\n      api({ ...workorderinvoice.getworkorderinvoice })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status, data } = response;\r\n          if (status === 200 || status === 201) {\r\n            dispatch({\r\n              type: WorkOrderInvoiceActionType.getProjectListing,\r\n              payload: data,\r\n            });\r\n            // Toast({ type: 'success', message })\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n\r\nexport const deleteWorkorderinvoice =\r\n  (id, body) =>\r\n  (dispatch, getState, { api, Toast }) => {\r\n    return new Promise((resolve, reject) => {\r\n      workorderinvoice.deleteworkorderinvoice.addQuery = {\r\n        key: \"id\",\r\n        payload: id,\r\n      };\r\n      api({ ...workorderinvoice.deleteworkorderinvoice, body })\r\n        .then(response => {\r\n          resolve(response);\r\n          let { message, status } = response;\r\n          if (status === 200 || status === 201) {\r\n            // dispatch({ type: ArticalsActionType.getArticalsDetails, payload: data });\r\n            //  Toast({ type: 'success', message });\r\n          } else {\r\n            reject(Toast({ type: \"error\", message }));\r\n          }\r\n        })\r\n        .catch(({ message }) => {\r\n          reject(Toast({ type: \"error\", message }));\r\n        });\r\n    });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}