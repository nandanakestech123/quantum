{"ast":null,"code":"import _defineProperty from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"F:\\\\webfe\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{NormalInput,NormalButton}from\"component/common\";import{connect}from\"react-redux\";import{bindActionCreators}from\"redux\";import SimpleReactValidator from\"simple-react-validator\";import{resetPassword,getTokenVerify}from\"redux/actions/auth\";export var ChangePasswordClass=/*#__PURE__*/function(_Component){_inherits(ChangePasswordClass,_Component);var _super=_createSuper(ChangePasswordClass);function ChangePasswordClass(){var _this;_classCallCheck(this,ChangePasswordClass);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={formDetails:{newPassword:\"\",reEnterPassword:\"\"},newPasswordVisible:false,reEnterPasswordVisible:false};_this.toggle=function(key){_this.setState(function(prevState){return _defineProperty({},key,!prevState[key]);});};_this.handleInput=function(_ref2){var _ref2$target=_ref2.target,value=_ref2$target.value,name=_ref2$target.name;var formDetails=Object.assign({},_this.state.formDetails);formDetails[name]=value;_this.setState({formDetails:formDetails});};_this.handleChangePsssword=function(event){event.preventDefault();if(_this.validator.allValid()){var newPassword=_this.state.formDetails.newPassword;var data={new_password:newPassword};_this.props.resetPassword(\"?emp_name=\".concat(_this.props.match.params.name),data).then(function(){_this.props.history.push(\"/auth/login\");});}else{_this.validator.showMessages();}};return _this;}_createClass(ChangePasswordClass,[{key:\"componentWillMount\",value:function componentWillMount(){this.validator=new SimpleReactValidator({validators:{// password: {\n//   message: 'The :attribute must be a valid format.',\n//   rule: (val, params, validator) => {\n//     return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\n//   },\n//   messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\n//   required: true\n// },\ncheckPassword:{message:\"Given :attribute does not match\",rule:function rule(val,params){return val===params[0];}}},element:function element(message){return/*#__PURE__*/React.createElement(\"span\",{className:\"error-message font-md\"},message);},autoForceUpdate:this});}},{key:\"componentDidMount\",value:function componentDidMount(){// this.props.getTokenVerify({ token: getUrlParameter(\"token\") });\n}},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,newPasswordVisible=_this$state.newPasswordVisible,reEnterPasswordVisible=_this$state.reEnterPasswordVisible;var _this$state$formDetai=this.state.formDetails,newPassword=_this$state$formDetai.newPassword,reEnterPassword=_this$state$formDetai.reEnterPassword;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{id:\"changePassword\",className:\"h-100 py-5\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"text-left common-heading pb-5 fs-28\"},\"Reset Password\"),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group mb-4 pb-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"input-group\"},/*#__PURE__*/React.createElement(NormalInput,{type:newPasswordVisible?\"text\":\"password\",name:\"newPassword\",placeholder:\"New Password\",value:newPassword,onChange:this.handleInput}),/*#__PURE__*/React.createElement(\"div\",{className:\"input-group-addon right fs-14\"},/*#__PURE__*/React.createElement(\"span\",{onClick:function onClick(){return _this2.toggle(\"newPasswordVisible\");},className:\"icon-\".concat(newPasswordVisible?\"eye\":\"eye-blocked\",\" cursor-pointer fs-24\")}))),this.validator.message(\"password\",newPassword,\"required|password\")),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group mb-5 pb-5\"},/*#__PURE__*/React.createElement(\"div\",{className:\"input-group\"},/*#__PURE__*/React.createElement(NormalInput,{type:reEnterPasswordVisible?\"text\":\"password\",name:\"reEnterPassword\",placeholder:\"Confirm  New Password\",value:reEnterPassword,onChange:this.handleInput}),/*#__PURE__*/React.createElement(\"div\",{className:\"input-group-addon right fs-14\"},/*#__PURE__*/React.createElement(\"span\",{onClick:function onClick(){return _this2.toggle(\"reEnterPasswordVisible\");},className:\"icon-\".concat(reEnterPasswordVisible?\"eye\":\"eye-blocked\",\" cursor-pointer fs-24\")}))),this.validator.message(\"Password\",reEnterPassword,\"required|checkPassword:\".concat(newPassword))),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group mb-0 pt-5 d-flex justify-content-center\"},/*#__PURE__*/React.createElement(NormalButton,{onClick:this.handleChangePsssword,mainbg:true,className:\"mr-2 col-12\",label:\"continue\"}))));}}]);return ChangePasswordClass;}(Component);var mapDispatchToProps=function mapDispatchToProps(dispatch){return bindActionCreators({resetPassword:resetPassword,getTokenVerify:getTokenVerify},dispatch);};var component=ChangePasswordClass;export var ChangePassword=connect(null,mapDispatchToProps)(component);","map":{"version":3,"sources":["F:/webfe/src/pages/Auth/ChangePassword.js"],"names":["React","Component","NormalInput","NormalButton","connect","bindActionCreators","SimpleReactValidator","resetPassword","getTokenVerify","ChangePasswordClass","state","formDetails","newPassword","reEnterPassword","newPasswordVisible","reEnterPasswordVisible","toggle","key","setState","prevState","handleInput","target","value","name","Object","assign","handleChangePsssword","event","preventDefault","validator","allValid","data","new_password","props","match","params","then","history","push","showMessages","validators","checkPassword","message","rule","val","element","autoForceUpdate","mapDispatchToProps","dispatch","component","ChangePassword"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NormalInput, NormalButton } from \"component/common\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport { resetPassword, getTokenVerify } from \"redux/actions/auth\";\r\n\r\nexport class ChangePasswordClass extends Component {\r\n  state = {\r\n    formDetails: {\r\n      newPassword: \"\",\r\n      reEnterPassword: \"\"\r\n    },\r\n    newPasswordVisible: false,\r\n    reEnterPasswordVisible: false\r\n  };\r\n\r\n  toggle = key => {\r\n    this.setState(prevState => ({\r\n      [key]: !prevState[key]\r\n    }));\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.validator = new SimpleReactValidator({\r\n      validators: {\r\n        // password: {\r\n        //   message: 'The :attribute must be a valid format.',\r\n        //   rule: (val, params, validator) => {\r\n        //     return validator.helpers.testRegex(val, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,20}$/) && params.indexOf(val) === -1\r\n        //   },\r\n        //   messageReplace: (message, params) => message.replace('', this.helpers.toSentence(params)),\r\n        //   required: true\r\n        // },\r\n        checkPassword: {\r\n          message: \"Given :attribute does not match\",\r\n          rule: function (val, params) {\r\n            return val === params[0];\r\n          }\r\n        }\r\n      },\r\n      element: message => (\r\n        <span className=\"error-message font-md\">{message}</span>\r\n      ),\r\n      autoForceUpdate: this,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.props.getTokenVerify({ token: getUrlParameter(\"token\") });\r\n  }\r\n\r\n  handleInput = ({ target: { value, name } }) => {\r\n    let formDetails = Object.assign({}, this.state.formDetails);\r\n\r\n    formDetails[name] = value;\r\n\r\n    this.setState({\r\n      formDetails\r\n    });\r\n  };\r\n\r\n  handleChangePsssword = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.validator.allValid()) {\r\n      let { newPassword } = this.state.formDetails;\r\n      let data = {\r\n        new_password : newPassword\r\n      }\r\n      this.props.resetPassword(`?emp_name=${this.props.match.params.name}`, data).then(() => {\r\n        this.props.history.push(\"/auth/login\");\r\n      });\r\n    } else {\r\n      this.validator.showMessages();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { newPasswordVisible, reEnterPasswordVisible } = this.state;\r\n\r\n    let { newPassword, reEnterPassword } = this.state.formDetails;\r\n\r\n    return (\r\n      <>\r\n        <div id=\"changePassword\" className=\"h-100 py-5\">\r\n          <h1 className=\"text-left common-heading pb-5 fs-28\">Reset Password</h1>\r\n          <div className=\"form-group mb-4 pb-3\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                type={newPasswordVisible ? \"text\" : \"password\"}\r\n                name=\"newPassword\"\r\n                placeholder=\"New Password\"\r\n                value={newPassword}\r\n                onChange={this.handleInput}\r\n              />\r\n              <div className=\"input-group-addon right fs-14\">\r\n                <span\r\n                  onClick={() => this.toggle(\"newPasswordVisible\")}\r\n                  className={`icon-${newPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`}\r\n                ></span>\r\n              </div>\r\n            </div>\r\n            {this.validator.message(\r\n              \"password\",\r\n              newPassword,\r\n              \"required|password\"\r\n            )}\r\n          </div>\r\n          <div className=\"form-group mb-5 pb-5\">\r\n            <div className=\"input-group\">\r\n              <NormalInput\r\n                type={reEnterPasswordVisible ? \"text\" : \"password\"}\r\n                name=\"reEnterPassword\"\r\n                placeholder=\"Confirm  New Password\"\r\n                value={reEnterPassword}\r\n                onChange={this.handleInput}\r\n              />\r\n              <div className=\"input-group-addon right fs-14\">\r\n                <span\r\n                  onClick={() => this.toggle(\"reEnterPasswordVisible\")}\r\n                  className={`icon-${reEnterPasswordVisible ? \"eye\" : \"eye-blocked\"} cursor-pointer fs-24`}\r\n                ></span>\r\n              </div>\r\n            </div>\r\n            {this.validator.message(\r\n              \"Password\",\r\n              reEnterPassword,\r\n              `required|checkPassword:${newPassword}`\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"form-group mb-0 pt-5 d-flex justify-content-center\">\r\n            <NormalButton\r\n              onClick={this.handleChangePsssword}\r\n              mainbg={true}\r\n              className=\"mr-2 col-12\"\r\n              label=\"continue\"\r\n              />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      resetPassword,\r\n      getTokenVerify\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nlet component = ChangePasswordClass;\r\n\r\nexport const ChangePassword = connect(null, mapDispatchToProps)(component);\r\n"]},"metadata":{},"sourceType":"module"}