{"ast":null,"code":"var _jsxFileName = \"F:\\\\webfe\\\\src\\\\multiLanguage.js\";\nimport React, { Component } from \"react\";\nimport { Routes } from \"routes\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { getMultiLanguage } from \"redux/actions/multiLanguage\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nclass MultiLanguageClass extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLanguageReady: false\n    };\n\n    this.getData = async () => {\n      let res = await this.props.getMultiLanguage();\n      console.log(res, \"translations\");\n      let resources = {\n        en: {\n          translation: {}\n        },\n        zh_sg: {\n          translation: {}\n        }\n      };\n      resources.en.translation = res.language.ENGLISH.reduce((a, e) => {\n        return { ...a,\n          [e.word]: e.word\n        };\n      }, {});\n      resources.zh_sg.translation = res.language.CHINESE.reduce((a, e) => {\n        return { ...a,\n          [res.language.ENGLISH.find(e2 => e2.wordCode == e.wordCode).word]: e.word\n        };\n      }, {});\n      console.log(resources, \"lang obj\");\n      localStorage.setItem(\"translations\", JSON.stringify(resources));\n      this.init();\n    };\n\n    this.init = () => {\n      var _localStorage$getItem;\n\n      i18n.use(initReactI18next) // passes i18n down to react-i18next\n      .init({\n        // the translations\n        // (tip move them in a JSON file and import them,\n        // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n        resources: JSON.parse(localStorage.getItem(\"translations\")),\n        lng: (_localStorage$getItem = localStorage.getItem(\"lang\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"en\",\n        // if you're using a language detector, do not define the lng option\n        fallbackLng: \"en\"\n      });\n      this.setState({\n        isLanguageReady: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"translations\") == null) {\n      this.getData();\n    } else {\n      this.getData();\n      this.init();\n    }\n  }\n\n  render() {\n    let {\n      isLanguageReady\n    } = this.state;\n    return isLanguageReady ? /*#__PURE__*/React.createElement(Routes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 43\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    getMultiLanguage\n  }, dispatch);\n};\n\nexport const MultiLanguage = connect(mapStateToProps, mapDispatchToProps)(MultiLanguageClass);","map":{"version":3,"sources":["F:/webfe/src/multiLanguage.js"],"names":["React","Component","Routes","i18n","initReactI18next","getMultiLanguage","connect","bindActionCreators","MultiLanguageClass","state","isLanguageReady","getData","res","props","console","log","resources","en","translation","zh_sg","language","ENGLISH","reduce","a","e","word","CHINESE","find","e2","wordCode","localStorage","setItem","JSON","stringify","init","use","parse","getItem","lng","fallbackLng","setState","componentDidMount","render","mapStateToProps","mapDispatchToProps","dispatch","MultiLanguage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Routes } from \"routes\";\r\nimport i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { getMultiLanguage } from \"redux/actions/multiLanguage\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nclass MultiLanguageClass extends Component {\r\n  state = {\r\n    isLanguageReady: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem(\"translations\") == null) {\r\n      this.getData();\r\n    } else {\r\n      this.getData();\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  getData = async () => {\r\n    let res = await this.props.getMultiLanguage();\r\n    console.log(res, \"translations\");\r\n    let resources = { en: { translation: {} }, zh_sg: { translation: {} } };\r\n    resources.en.translation = res.language.ENGLISH.reduce((a, e) => {\r\n      return { ...a, [e.word]: e.word };\r\n    }, {});\r\n    resources.zh_sg.translation = res.language.CHINESE.reduce((a, e) => {\r\n      return {\r\n        ...a,\r\n        [res.language.ENGLISH.find(e2 => e2.wordCode == e.wordCode).word]:\r\n          e.word,\r\n      };\r\n    }, {});\r\n    console.log(resources, \"lang obj\");\r\n    localStorage.setItem(\"translations\", JSON.stringify(resources));\r\n    this.init();\r\n  };\r\n\r\n  init = () => {\r\n    i18n\r\n      .use(initReactI18next) // passes i18n down to react-i18next\r\n      .init({\r\n        // the translations\r\n        // (tip move them in a JSON file and import them,\r\n        // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\r\n        resources: JSON.parse(localStorage.getItem(\"translations\")),\r\n        lng: localStorage.getItem(\"lang\") ?? \"en\", // if you're using a language detector, do not define the lng option\r\n        fallbackLng: \"en\",\r\n      });\r\n    this.setState({ isLanguageReady: true });\r\n  };\r\n\r\n  render() {\r\n    let { isLanguageReady } = this.state;\r\n    return isLanguageReady ? <Routes /> : <div></div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      getMultiLanguage,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport const MultiLanguage = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MultiLanguageClass);\r\n"]},"metadata":{},"sourceType":"module"}