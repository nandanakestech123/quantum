{"ast":null,"code":"/**\r\n * DevExtreme (viz/sparklines/sparkline.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _base_sparkline = _interopRequireDefault(require(\"./base_sparkline\"));\n\nvar _data_validator = require(\"../components/data_validator\");\n\nvar _base_series = require(\"../series/base_series\");\n\nvar _utils = require(\"../core/utils\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _component_registrator = _interopRequireDefault(require(\"../../core/component_registrator\"));\n\nvar _data_source = require(\"../core/data_source\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MIN_BAR_WIDTH = 1;\nvar MAX_BAR_WIDTH = 50;\nvar DEFAULT_BAR_INTERVAL = 4;\nvar DEFAULT_CANVAS_WIDTH = 250;\nvar DEFAULT_CANVAS_HEIGHT = 30;\nvar DEFAULT_POINT_BORDER = 2;\nvar ALLOWED_TYPES = {\n  line: true,\n  spline: true,\n  stepline: true,\n  area: true,\n  steparea: true,\n  splinearea: true,\n  bar: true,\n  winloss: true\n};\nvar _math = Math;\nvar _abs = _math.abs;\nvar _round = _math.round;\nvar _max = _math.max;\nvar _min = _math.min;\nvar _isFinite = isFinite;\nvar _Number = Number;\nvar _String = String;\n\nfunction findMinMax(data, valField) {\n  var firstItem = data[0] || {};\n  var firstValue = firstItem[valField] || 0;\n  var min = firstValue;\n  var max = firstValue;\n  var minIndexes = [0];\n  var maxIndexes = [0];\n  var dataLength = data.length;\n  var value;\n  var i;\n\n  for (i = 1; i < dataLength; i++) {\n    value = data[i][valField];\n\n    if (value < min) {\n      min = value;\n      minIndexes = [i];\n    } else {\n      if (value === min) {\n        minIndexes.push(i);\n      }\n    }\n\n    if (value > max) {\n      max = value;\n      maxIndexes = [i];\n    } else {\n      if (value === max) {\n        maxIndexes.push(i);\n      }\n    }\n  }\n\n  if (max === min) {\n    minIndexes = maxIndexes = [];\n  }\n\n  return {\n    minIndexes: minIndexes,\n    maxIndexes: maxIndexes\n  };\n}\n\nfunction parseNumericDataSource(data, argField, valField, ignoreEmptyPoints) {\n  return (0, _utils.map)(data, function (dataItem, index) {\n    var item = null;\n    var isDataNumber;\n    var value;\n\n    if (void 0 !== dataItem) {\n      item = {};\n      isDataNumber = _isFinite(dataItem);\n      item[argField] = isDataNumber ? _String(index) : dataItem[argField];\n      value = isDataNumber ? dataItem : dataItem[valField];\n      item[valField] = null === value ? ignoreEmptyPoints ? void 0 : value : _Number(value);\n      item = void 0 !== item[argField] && void 0 !== item[valField] ? item : null;\n    }\n\n    return item;\n  });\n}\n\nfunction parseWinlossDataSource(data, argField, valField, target) {\n  var lowBarValue = -1;\n  var zeroBarValue = 0;\n  var highBarValue = 1;\n  var delta = 1e-4;\n  return (0, _utils.map)(data, function (dataItem) {\n    var item = {};\n    item[argField] = dataItem[argField];\n\n    if (_abs(dataItem[valField] - target) < delta) {\n      item[valField] = zeroBarValue;\n    } else {\n      if (dataItem[valField] > target) {\n        item[valField] = highBarValue;\n      } else {\n        item[valField] = lowBarValue;\n      }\n    }\n\n    return item;\n  });\n}\n\nfunction selectPointColor(color, options, index, pointIndexes) {\n  if (index === pointIndexes.first || index === pointIndexes.last) {\n    color = options.firstLastColor;\n  }\n\n  if ((pointIndexes.min || []).indexOf(index) >= 0) {\n    color = options.minColor;\n  }\n\n  if ((pointIndexes.max || []).indexOf(index) >= 0) {\n    color = options.maxColor;\n  }\n\n  return color;\n}\n\nfunction createLineCustomizeFunction(pointIndexes, options) {\n  return function () {\n    var color = selectPointColor(void 0, options, this.index, pointIndexes);\n    return color ? {\n      visible: true,\n      border: {\n        color: color\n      }\n    } : {};\n  };\n}\n\nfunction createBarCustomizeFunction(pointIndexes, options, winlossData) {\n  return function () {\n    var index = this.index;\n    var isWinloss = \"winloss\" === options.type;\n    var target = isWinloss ? options.winlossThreshold : 0;\n    var value = isWinloss ? winlossData[index][options.valueField] : this.value;\n    var positiveColor = isWinloss ? options.winColor : options.barPositiveColor;\n    var negativeColor = isWinloss ? options.lossColor : options.barNegativeColor;\n    return {\n      color: selectPointColor(value >= target ? positiveColor : negativeColor, options, index, pointIndexes)\n    };\n  };\n}\n\nvar dxSparkline = _base_sparkline.default.inherit({\n  _rootClassPrefix: \"dxsl\",\n  _rootClass: \"dxsl-sparkline\",\n  _themeSection: \"sparkline\",\n  _defaultSize: {\n    width: DEFAULT_CANVAS_WIDTH,\n    height: DEFAULT_CANVAS_HEIGHT\n  },\n  _initCore: function () {\n    this.callBase();\n\n    this._createSeries();\n  },\n  _initialChanges: [\"DATA_SOURCE\"],\n  _dataSourceChangedHandler: function () {\n    this._requestChange([\"UPDATE\"]);\n  },\n  _updateWidgetElements: function () {\n    this._updateSeries();\n\n    this.callBase();\n  },\n  _disposeWidgetElements: function () {\n    var that = this;\n    that._series && that._series.dispose();\n    that._series = that._seriesGroup = that._seriesLabelGroup = null;\n  },\n  _cleanWidgetElements: function () {\n    this._seriesGroup.remove();\n\n    this._seriesLabelGroup.remove();\n\n    this._seriesGroup.clear();\n\n    this._seriesLabelGroup.clear();\n  },\n  _drawWidgetElements: function () {\n    if (this._dataIsLoaded()) {\n      this._drawSeries();\n\n      this._drawn();\n    }\n  },\n  _getCorrectCanvas: function () {\n    var options = this._allOptions;\n    var canvas = this._canvas;\n    var halfPointSize = options.pointSize && Math.ceil(options.pointSize / 2) + DEFAULT_POINT_BORDER;\n    var type = options.type;\n\n    if (\"bar\" !== type && \"winloss\" !== type && (options.showFirstLast || options.showMinMax)) {\n      return {\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left + halfPointSize,\n        right: canvas.right + halfPointSize,\n        top: canvas.top + halfPointSize,\n        bottom: canvas.bottom + halfPointSize\n      };\n    }\n\n    return canvas;\n  },\n  _prepareOptions: function () {\n    var that = this;\n    that._allOptions = that.callBase();\n    that._allOptions.type = (0, _utils.normalizeEnum)(that._allOptions.type);\n\n    if (!ALLOWED_TYPES[that._allOptions.type]) {\n      that._allOptions.type = \"line\";\n    }\n  },\n  _createHtmlElements: function () {\n    this._seriesGroup = this._renderer.g().attr({\n      \"class\": \"dxsl-series\"\n    });\n    this._seriesLabelGroup = this._renderer.g().attr({\n      \"class\": \"dxsl-series-labels\"\n    });\n  },\n  _createSeries: function () {\n    this._series = new _base_series.Series({\n      renderer: this._renderer,\n      seriesGroup: this._seriesGroup,\n      labelsGroup: this._seriesLabelGroup,\n      argumentAxis: this._argumentAxis,\n      valueAxis: this._valueAxis\n    }, {\n      widgetType: \"chart\",\n      type: \"line\"\n    });\n  },\n  _updateSeries: function () {\n    var that = this;\n    var singleSeries = that._series;\n\n    that._prepareDataSource();\n\n    var seriesOptions = that._prepareSeriesOptions();\n\n    singleSeries.updateOptions(seriesOptions);\n    var groupsData = {\n      groups: [{\n        series: [singleSeries]\n      }]\n    };\n    groupsData.argumentOptions = {\n      type: \"bar\" === seriesOptions.type ? \"discrete\" : void 0\n    };\n    that._simpleDataSource = (0, _data_validator.validateData)(that._simpleDataSource, groupsData, that._incidentOccurred, {\n      checkTypeForAllData: false,\n      convertToAxisDataType: true,\n      sortingMethod: true\n    })[singleSeries.getArgumentField()];\n    seriesOptions.customizePoint = that._getCustomizeFunction();\n    singleSeries.updateData(that._simpleDataSource);\n    singleSeries.createPoints();\n    that._groupsDataCategories = groupsData.categories;\n  },\n  _optionChangesMap: {\n    dataSource: \"DATA_SOURCE\"\n  },\n  _optionChangesOrder: [\"DATA_SOURCE\"],\n  _change_DATA_SOURCE: function () {\n    this._updateDataSource();\n  },\n  _prepareDataSource: function () {\n    var that = this;\n    var options = that._allOptions;\n    var argField = options.argumentField;\n    var valField = options.valueField;\n    var dataSource = that._dataSourceItems() || [];\n    var data = parseNumericDataSource(dataSource, argField, valField, that.option(\"ignoreEmptyPoints\"));\n\n    if (\"winloss\" === options.type) {\n      that._winlossDataSource = data;\n      that._simpleDataSource = parseWinlossDataSource(data, argField, valField, options.winlossThreshold);\n    } else {\n      that._simpleDataSource = data;\n    }\n  },\n  _prepareSeriesOptions: function () {\n    var that = this;\n    var options = that._allOptions;\n    var type = \"winloss\" === options.type ? \"bar\" : options.type;\n    return {\n      visible: true,\n      argumentField: options.argumentField,\n      valueField: options.valueField,\n      color: options.lineColor,\n      width: options.lineWidth,\n      widgetType: \"chart\",\n      type: type,\n      opacity: type.indexOf(\"area\") !== -1 ? that._allOptions.areaOpacity : void 0,\n      point: {\n        size: options.pointSize,\n        symbol: options.pointSymbol,\n        border: {\n          visible: true,\n          width: DEFAULT_POINT_BORDER\n        },\n        color: options.pointColor,\n        visible: false,\n        hoverStyle: {\n          border: {}\n        },\n        selectionStyle: {\n          border: {}\n        }\n      },\n      border: {\n        color: options.lineColor,\n        width: options.lineWidth,\n        visible: \"bar\" !== type\n      }\n    };\n  },\n  _getCustomizeFunction: function () {\n    var that = this;\n    var options = that._allOptions;\n    var dataSource = that._winlossDataSource || that._simpleDataSource;\n\n    var drawnPointIndexes = that._getExtremumPointsIndexes(dataSource);\n\n    var customizeFunction;\n\n    if (\"winloss\" === options.type || \"bar\" === options.type) {\n      customizeFunction = createBarCustomizeFunction(drawnPointIndexes, options, that._winlossDataSource);\n    } else {\n      customizeFunction = createLineCustomizeFunction(drawnPointIndexes, options);\n    }\n\n    return customizeFunction;\n  },\n  _getExtremumPointsIndexes: function (data) {\n    var that = this;\n    var options = that._allOptions;\n    var lastIndex = data.length - 1;\n    var indexes = {};\n    that._minMaxIndexes = findMinMax(data, options.valueField);\n\n    if (options.showFirstLast) {\n      indexes.first = 0;\n      indexes.last = lastIndex;\n    }\n\n    if (options.showMinMax) {\n      indexes.min = that._minMaxIndexes.minIndexes;\n      indexes.max = that._minMaxIndexes.maxIndexes;\n    }\n\n    return indexes;\n  },\n  _getStick: function () {\n    return {\n      stick: \"bar\" !== this._series.type\n    };\n  },\n  _updateRange: function () {\n    var that = this;\n    var series = that._series;\n    var type = series.type;\n    var isBarType = \"bar\" === type;\n    var isWinlossType = \"winloss\" === type;\n    var DEFAULT_VALUE_RANGE_MARGIN = .15;\n    var DEFAULT_ARGUMENT_RANGE_MARGIN = .1;\n    var WINLOSS_MAX_RANGE = 1;\n    var WINLOSS_MIN_RANGE = -1;\n    var rangeData = series.getRangeData();\n    var minValue = that._allOptions.minValue;\n\n    var hasMinY = (0, _type.isDefined)(minValue) && _isFinite(minValue);\n\n    var maxValue = that._allOptions.maxValue;\n\n    var hasMaxY = (0, _type.isDefined)(maxValue) && _isFinite(maxValue);\n\n    var argCoef;\n    var valCoef = (rangeData.val.max - rangeData.val.min) * DEFAULT_VALUE_RANGE_MARGIN;\n\n    if (isBarType || isWinlossType || \"area\" === type) {\n      if (0 !== rangeData.val.min) {\n        rangeData.val.min -= valCoef;\n      }\n\n      if (0 !== rangeData.val.max) {\n        rangeData.val.max += valCoef;\n      }\n    } else {\n      rangeData.val.min -= valCoef;\n      rangeData.val.max += valCoef;\n    }\n\n    if (hasMinY || hasMaxY) {\n      if (hasMinY && hasMaxY) {\n        rangeData.val.minVisible = _min(minValue, maxValue);\n        rangeData.val.maxVisible = _max(minValue, maxValue);\n      } else {\n        rangeData.val.minVisible = hasMinY ? _Number(minValue) : void 0;\n        rangeData.val.maxVisible = hasMaxY ? _Number(maxValue) : void 0;\n      }\n\n      if (isWinlossType) {\n        rangeData.val.minVisible = hasMinY ? _max(rangeData.val.minVisible, WINLOSS_MIN_RANGE) : void 0;\n        rangeData.val.maxVisible = hasMaxY ? _min(rangeData.val.maxVisible, WINLOSS_MAX_RANGE) : void 0;\n      }\n    }\n\n    if (series.getPoints().length > 1) {\n      if (isBarType) {\n        argCoef = (rangeData.arg.max - rangeData.arg.min) * DEFAULT_ARGUMENT_RANGE_MARGIN;\n        rangeData.arg.min = rangeData.arg.min - argCoef;\n        rangeData.arg.max = rangeData.arg.max + argCoef;\n      }\n    }\n\n    rangeData.arg.categories = that._groupsDataCategories;\n    that._ranges = rangeData;\n  },\n  _getBarWidth: function (pointsCount) {\n    var that = this;\n    var canvas = that._canvas;\n    var intervalWidth = pointsCount * DEFAULT_BAR_INTERVAL;\n    var rangeWidth = canvas.width - canvas.left - canvas.right - intervalWidth;\n\n    var width = _round(rangeWidth / pointsCount);\n\n    if (width < MIN_BAR_WIDTH) {\n      width = MIN_BAR_WIDTH;\n    }\n\n    if (width > MAX_BAR_WIDTH) {\n      width = MAX_BAR_WIDTH;\n    }\n\n    return width;\n  },\n  _correctPoints: function () {\n    var that = this;\n    var seriesType = that._allOptions.type;\n\n    var seriesPoints = that._series.getPoints();\n\n    var pointsLength = seriesPoints.length;\n    var barWidth;\n    var i;\n\n    if (\"bar\" === seriesType || \"winloss\" === seriesType) {\n      barWidth = that._getBarWidth(pointsLength);\n\n      for (i = 0; i < pointsLength; i++) {\n        seriesPoints[i].correctCoordinates({\n          width: barWidth,\n          offset: 0\n        });\n      }\n    }\n  },\n  _drawSeries: function () {\n    var that = this;\n\n    if (that._simpleDataSource.length > 0) {\n      that._correctPoints();\n\n      that._series.draw();\n\n      that._seriesGroup.append(that._renderer.root);\n    }\n  },\n  _isTooltipEnabled: function () {\n    return !!this._simpleDataSource.length;\n  },\n  _getTooltipData: function () {\n    var that = this;\n    var options = that._allOptions;\n    var dataSource = that._winlossDataSource || that._simpleDataSource;\n    var tooltip = that._tooltip;\n\n    if (0 === dataSource.length) {\n      return {};\n    }\n\n    var minMax = that._minMaxIndexes;\n    var valueField = options.valueField;\n    var first = dataSource[0][valueField];\n    var last = dataSource[dataSource.length - 1][valueField];\n    var min = (0, _type.isDefined)(minMax.minIndexes[0]) ? dataSource[minMax.minIndexes[0]][valueField] : first;\n    var max = (0, _type.isDefined)(minMax.maxIndexes[0]) ? dataSource[minMax.maxIndexes[0]][valueField] : first;\n    var formattedFirst = tooltip.formatValue(first);\n    var formattedLast = tooltip.formatValue(last);\n    var formattedMin = tooltip.formatValue(min);\n    var formattedMax = tooltip.formatValue(max);\n    var customizeObject = {\n      firstValue: formattedFirst,\n      lastValue: formattedLast,\n      minValue: formattedMin,\n      maxValue: formattedMax,\n      originalFirstValue: first,\n      originalLastValue: last,\n      originalMinValue: min,\n      originalMaxValue: max,\n      valueText: [\"Start:\", formattedFirst, \"End:\", formattedLast, \"Min:\", formattedMin, \"Max:\", formattedMax]\n    };\n\n    if (\"winloss\" === options.type) {\n      customizeObject.originalThresholdValue = options.winlossThreshold;\n      customizeObject.thresholdValue = tooltip.formatValue(options.winlossThreshold);\n    }\n\n    return customizeObject;\n  }\n});\n\n(0, _utils.map)([\"lineColor\", \"lineWidth\", \"areaOpacity\", \"minColor\", \"maxColor\", \"barPositiveColor\", \"barNegativeColor\", \"winColor\", \"lessColor\", \"firstLastColor\", \"pointSymbol\", \"pointColor\", \"pointSize\", \"type\", \"argumentField\", \"valueField\", \"winlossThreshold\", \"showFirstLast\", \"showMinMax\", \"ignoreEmptyPoints\", \"minValue\", \"maxValue\"], function (name) {\n  dxSparkline.prototype._optionChangesMap[name] = \"OPTIONS\";\n});\n(0, _component_registrator.default)(\"dxSparkline\", dxSparkline);\nvar _default = dxSparkline;\nexports.default = _default;\ndxSparkline.addPlugin(_data_source.plugin);\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/viz/sparklines/sparkline.js"],"names":["exports","default","_base_sparkline","_interopRequireDefault","require","_data_validator","_base_series","_utils","_type","_component_registrator","_data_source","obj","__esModule","MIN_BAR_WIDTH","MAX_BAR_WIDTH","DEFAULT_BAR_INTERVAL","DEFAULT_CANVAS_WIDTH","DEFAULT_CANVAS_HEIGHT","DEFAULT_POINT_BORDER","ALLOWED_TYPES","line","spline","stepline","area","steparea","splinearea","bar","winloss","_math","Math","_abs","abs","_round","round","_max","max","_min","min","_isFinite","isFinite","_Number","Number","_String","String","findMinMax","data","valField","firstItem","firstValue","minIndexes","maxIndexes","dataLength","length","value","i","push","parseNumericDataSource","argField","ignoreEmptyPoints","map","dataItem","index","item","isDataNumber","parseWinlossDataSource","target","lowBarValue","zeroBarValue","highBarValue","delta","selectPointColor","color","options","pointIndexes","first","last","firstLastColor","indexOf","minColor","maxColor","createLineCustomizeFunction","visible","border","createBarCustomizeFunction","winlossData","isWinloss","type","winlossThreshold","valueField","positiveColor","winColor","barPositiveColor","negativeColor","lossColor","barNegativeColor","dxSparkline","inherit","_rootClassPrefix","_rootClass","_themeSection","_defaultSize","width","height","_initCore","callBase","_createSeries","_initialChanges","_dataSourceChangedHandler","_requestChange","_updateWidgetElements","_updateSeries","_disposeWidgetElements","that","_series","dispose","_seriesGroup","_seriesLabelGroup","_cleanWidgetElements","remove","clear","_drawWidgetElements","_dataIsLoaded","_drawSeries","_drawn","_getCorrectCanvas","_allOptions","canvas","_canvas","halfPointSize","pointSize","ceil","showFirstLast","showMinMax","left","right","top","bottom","_prepareOptions","normalizeEnum","_createHtmlElements","_renderer","g","attr","Series","renderer","seriesGroup","labelsGroup","argumentAxis","_argumentAxis","valueAxis","_valueAxis","widgetType","singleSeries","_prepareDataSource","seriesOptions","_prepareSeriesOptions","updateOptions","groupsData","groups","series","argumentOptions","_simpleDataSource","validateData","_incidentOccurred","checkTypeForAllData","convertToAxisDataType","sortingMethod","getArgumentField","customizePoint","_getCustomizeFunction","updateData","createPoints","_groupsDataCategories","categories","_optionChangesMap","dataSource","_optionChangesOrder","_change_DATA_SOURCE","_updateDataSource","argumentField","_dataSourceItems","option","_winlossDataSource","lineColor","lineWidth","opacity","areaOpacity","point","size","symbol","pointSymbol","pointColor","hoverStyle","selectionStyle","drawnPointIndexes","_getExtremumPointsIndexes","customizeFunction","lastIndex","indexes","_minMaxIndexes","_getStick","stick","_updateRange","isBarType","isWinlossType","DEFAULT_VALUE_RANGE_MARGIN","DEFAULT_ARGUMENT_RANGE_MARGIN","WINLOSS_MAX_RANGE","WINLOSS_MIN_RANGE","rangeData","getRangeData","minValue","hasMinY","isDefined","maxValue","hasMaxY","argCoef","valCoef","val","minVisible","maxVisible","getPoints","arg","_ranges","_getBarWidth","pointsCount","intervalWidth","rangeWidth","_correctPoints","seriesType","seriesPoints","pointsLength","barWidth","correctCoordinates","offset","draw","append","root","_isTooltipEnabled","_getTooltipData","tooltip","_tooltip","minMax","formattedFirst","formatValue","formattedLast","formattedMin","formattedMax","customizeObject","lastValue","originalFirstValue","originalLastValue","originalMinValue","originalMaxValue","valueText","originalThresholdValue","thresholdValue","name","prototype","_default","addPlugin","plugin","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAIC,eAAe,GAAGC,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,8BAAD,CAA7B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,uBAAD,CAA1B;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIK,sBAAsB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,kCAAD,CAAR,CAAnD;;AACA,IAAIM,YAAY,GAAGN,OAAO,CAAC,qBAAD,CAA1B;;AAEA,SAASD,sBAAT,CAAgCQ,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,aAAa,GAAG,CAApB;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,oBAAoB,GAAG,CAA3B;AACA,IAAIC,oBAAoB,GAAG,GAA3B;AACA,IAAIC,qBAAqB,GAAG,EAA5B;AACA,IAAIC,oBAAoB,GAAG,CAA3B;AACA,IAAIC,aAAa,GAAG;AAChBC,EAAAA,IAAI,EAAE,IADU;AAEhBC,EAAAA,MAAM,EAAE,IAFQ;AAGhBC,EAAAA,QAAQ,EAAE,IAHM;AAIhBC,EAAAA,IAAI,EAAE,IAJU;AAKhBC,EAAAA,QAAQ,EAAE,IALM;AAMhBC,EAAAA,UAAU,EAAE,IANI;AAOhBC,EAAAA,GAAG,EAAE,IAPW;AAQhBC,EAAAA,OAAO,EAAE;AARO,CAApB;AAUA,IAAIC,KAAK,GAAGC,IAAZ;AACA,IAAIC,IAAI,GAAGF,KAAK,CAACG,GAAjB;AACA,IAAIC,MAAM,GAAGJ,KAAK,CAACK,KAAnB;AACA,IAAIC,IAAI,GAAGN,KAAK,CAACO,GAAjB;AACA,IAAIC,IAAI,GAAGR,KAAK,CAACS,GAAjB;AACA,IAAIC,SAAS,GAAGC,QAAhB;AACA,IAAIC,OAAO,GAAGC,MAAd;AACA,IAAIC,OAAO,GAAGC,MAAd;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AAChC,MAAIC,SAAS,GAAGF,IAAI,CAAC,CAAD,CAAJ,IAAW,EAA3B;AACA,MAAIG,UAAU,GAAGD,SAAS,CAACD,QAAD,CAAT,IAAuB,CAAxC;AACA,MAAIT,GAAG,GAAGW,UAAV;AACA,MAAIb,GAAG,GAAGa,UAAV;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAC,CAAD,CAAjB;AACA,MAAIC,UAAU,GAAGN,IAAI,CAACO,MAAtB;AACA,MAAIC,KAAJ;AACA,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,UAAhB,EAA4BG,CAAC,EAA7B,EAAiC;AAC7BD,IAAAA,KAAK,GAAGR,IAAI,CAACS,CAAD,CAAJ,CAAQR,QAAR,CAAR;;AACA,QAAIO,KAAK,GAAGhB,GAAZ,EAAiB;AACbA,MAAAA,GAAG,GAAGgB,KAAN;AACAJ,MAAAA,UAAU,GAAG,CAACK,CAAD,CAAb;AACH,KAHD,MAGO;AACH,UAAID,KAAK,KAAKhB,GAAd,EAAmB;AACfY,QAAAA,UAAU,CAACM,IAAX,CAAgBD,CAAhB;AACH;AACJ;;AACD,QAAID,KAAK,GAAGlB,GAAZ,EAAiB;AACbA,MAAAA,GAAG,GAAGkB,KAAN;AACAH,MAAAA,UAAU,GAAG,CAACI,CAAD,CAAb;AACH,KAHD,MAGO;AACH,UAAID,KAAK,KAAKlB,GAAd,EAAmB;AACfe,QAAAA,UAAU,CAACK,IAAX,CAAgBD,CAAhB;AACH;AACJ;AACJ;;AACD,MAAInB,GAAG,KAAKE,GAAZ,EAAiB;AACbY,IAAAA,UAAU,GAAGC,UAAU,GAAG,EAA1B;AACH;;AACD,SAAO;AACHD,IAAAA,UAAU,EAAEA,UADT;AAEHC,IAAAA,UAAU,EAAEA;AAFT,GAAP;AAIH;;AAED,SAASM,sBAAT,CAAgCX,IAAhC,EAAsCY,QAAtC,EAAgDX,QAAhD,EAA0DY,iBAA1D,EAA6E;AACzE,SAAO,CAAC,GAAGnD,MAAM,CAACoD,GAAX,EAAgBd,IAAhB,EAAsB,UAASe,QAAT,EAAmBC,KAAnB,EAA0B;AACnD,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,YAAJ;AACA,QAAIV,KAAJ;;AACA,QAAI,KAAK,CAAL,KAAWO,QAAf,EAAyB;AACrBE,MAAAA,IAAI,GAAG,EAAP;AACAC,MAAAA,YAAY,GAAGzB,SAAS,CAACsB,QAAD,CAAxB;AACAE,MAAAA,IAAI,CAACL,QAAD,CAAJ,GAAiBM,YAAY,GAAGrB,OAAO,CAACmB,KAAD,CAAV,GAAoBD,QAAQ,CAACH,QAAD,CAAzD;AACAJ,MAAAA,KAAK,GAAGU,YAAY,GAAGH,QAAH,GAAcA,QAAQ,CAACd,QAAD,CAA1C;AACAgB,MAAAA,IAAI,CAAChB,QAAD,CAAJ,GAAiB,SAASO,KAAT,GAAiBK,iBAAiB,GAAG,KAAK,CAAR,GAAYL,KAA9C,GAAsDb,OAAO,CAACa,KAAD,CAA9E;AACAS,MAAAA,IAAI,GAAG,KAAK,CAAL,KAAWA,IAAI,CAACL,QAAD,CAAf,IAA6B,KAAK,CAAL,KAAWK,IAAI,CAAChB,QAAD,CAA5C,GAAyDgB,IAAzD,GAAgE,IAAvE;AACH;;AACD,WAAOA,IAAP;AACH,GAbM,CAAP;AAcH;;AAED,SAASE,sBAAT,CAAgCnB,IAAhC,EAAsCY,QAAtC,EAAgDX,QAAhD,EAA0DmB,MAA1D,EAAkE;AAC9D,MAAIC,WAAW,GAAG,CAAC,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,SAAO,CAAC,GAAG9D,MAAM,CAACoD,GAAX,EAAgBd,IAAhB,EAAsB,UAASe,QAAT,EAAmB;AAC5C,QAAIE,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAACL,QAAD,CAAJ,GAAiBG,QAAQ,CAACH,QAAD,CAAzB;;AACA,QAAI3B,IAAI,CAAC8B,QAAQ,CAACd,QAAD,CAAR,GAAqBmB,MAAtB,CAAJ,GAAoCI,KAAxC,EAA+C;AAC3CP,MAAAA,IAAI,CAAChB,QAAD,CAAJ,GAAiBqB,YAAjB;AACH,KAFD,MAEO;AACH,UAAIP,QAAQ,CAACd,QAAD,CAAR,GAAqBmB,MAAzB,EAAiC;AAC7BH,QAAAA,IAAI,CAAChB,QAAD,CAAJ,GAAiBsB,YAAjB;AACH,OAFD,MAEO;AACHN,QAAAA,IAAI,CAAChB,QAAD,CAAJ,GAAiBoB,WAAjB;AACH;AACJ;;AACD,WAAOJ,IAAP;AACH,GAbM,CAAP;AAcH;;AAED,SAASQ,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CX,KAA1C,EAAiDY,YAAjD,EAA+D;AAC3D,MAAIZ,KAAK,KAAKY,YAAY,CAACC,KAAvB,IAAgCb,KAAK,KAAKY,YAAY,CAACE,IAA3D,EAAiE;AAC7DJ,IAAAA,KAAK,GAAGC,OAAO,CAACI,cAAhB;AACH;;AACD,MAAI,CAACH,YAAY,CAACpC,GAAb,IAAoB,EAArB,EAAyBwC,OAAzB,CAAiChB,KAAjC,KAA2C,CAA/C,EAAkD;AAC9CU,IAAAA,KAAK,GAAGC,OAAO,CAACM,QAAhB;AACH;;AACD,MAAI,CAACL,YAAY,CAACtC,GAAb,IAAoB,EAArB,EAAyB0C,OAAzB,CAAiChB,KAAjC,KAA2C,CAA/C,EAAkD;AAC9CU,IAAAA,KAAK,GAAGC,OAAO,CAACO,QAAhB;AACH;;AACD,SAAOR,KAAP;AACH;;AAED,SAASS,2BAAT,CAAqCP,YAArC,EAAmDD,OAAnD,EAA4D;AACxD,SAAO,YAAW;AACd,QAAID,KAAK,GAAGD,gBAAgB,CAAC,KAAK,CAAN,EAASE,OAAT,EAAkB,KAAKX,KAAvB,EAA8BY,YAA9B,CAA5B;AACA,WAAOF,KAAK,GAAG;AACXU,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,MAAM,EAAE;AACJX,QAAAA,KAAK,EAAEA;AADH;AAFG,KAAH,GAKR,EALJ;AAMH,GARD;AASH;;AAED,SAASY,0BAAT,CAAoCV,YAApC,EAAkDD,OAAlD,EAA2DY,WAA3D,EAAwE;AACpE,SAAO,YAAW;AACd,QAAIvB,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIwB,SAAS,GAAG,cAAcb,OAAO,CAACc,IAAtC;AACA,QAAIrB,MAAM,GAAGoB,SAAS,GAAGb,OAAO,CAACe,gBAAX,GAA8B,CAApD;AACA,QAAIlC,KAAK,GAAGgC,SAAS,GAAGD,WAAW,CAACvB,KAAD,CAAX,CAAmBW,OAAO,CAACgB,UAA3B,CAAH,GAA4C,KAAKnC,KAAtE;AACA,QAAIoC,aAAa,GAAGJ,SAAS,GAAGb,OAAO,CAACkB,QAAX,GAAsBlB,OAAO,CAACmB,gBAA3D;AACA,QAAIC,aAAa,GAAGP,SAAS,GAAGb,OAAO,CAACqB,SAAX,GAAuBrB,OAAO,CAACsB,gBAA5D;AACA,WAAO;AACHvB,MAAAA,KAAK,EAAED,gBAAgB,CAACjB,KAAK,IAAIY,MAAT,GAAkBwB,aAAlB,GAAkCG,aAAnC,EAAkDpB,OAAlD,EAA2DX,KAA3D,EAAkEY,YAAlE;AADpB,KAAP;AAGH,GAVD;AAWH;;AACD,IAAIsB,WAAW,GAAG7F,eAAe,CAACD,OAAhB,CAAwB+F,OAAxB,CAAgC;AAC9CC,EAAAA,gBAAgB,EAAE,MAD4B;AAE9CC,EAAAA,UAAU,EAAE,gBAFkC;AAG9CC,EAAAA,aAAa,EAAE,WAH+B;AAI9CC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAErF,oBADG;AAEVsF,IAAAA,MAAM,EAAErF;AAFE,GAJgC;AAQ9CsF,EAAAA,SAAS,EAAE,YAAW;AAClB,SAAKC,QAAL;;AACA,SAAKC,aAAL;AACH,GAX6C;AAY9CC,EAAAA,eAAe,EAAE,CAAC,aAAD,CAZ6B;AAa9CC,EAAAA,yBAAyB,EAAE,YAAW;AAClC,SAAKC,cAAL,CAAoB,CAAC,QAAD,CAApB;AACH,GAf6C;AAgB9CC,EAAAA,qBAAqB,EAAE,YAAW;AAC9B,SAAKC,aAAL;;AACA,SAAKN,QAAL;AACH,GAnB6C;AAoB9CO,EAAAA,sBAAsB,EAAE,YAAW;AAC/B,QAAIC,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAaC,OAAb,EAAhB;AACAF,IAAAA,IAAI,CAACC,OAAL,GAAeD,IAAI,CAACG,YAAL,GAAoBH,IAAI,CAACI,iBAAL,GAAyB,IAA5D;AACH,GAxB6C;AAyB9CC,EAAAA,oBAAoB,EAAE,YAAW;AAC7B,SAAKF,YAAL,CAAkBG,MAAlB;;AACA,SAAKF,iBAAL,CAAuBE,MAAvB;;AACA,SAAKH,YAAL,CAAkBI,KAAlB;;AACA,SAAKH,iBAAL,CAAuBG,KAAvB;AACH,GA9B6C;AA+B9CC,EAAAA,mBAAmB,EAAE,YAAW;AAC5B,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,WAAKC,WAAL;;AACA,WAAKC,MAAL;AACH;AACJ,GApC6C;AAqC9CC,EAAAA,iBAAiB,EAAE,YAAW;AAC1B,QAAIpD,OAAO,GAAG,KAAKqD,WAAnB;AACA,QAAIC,MAAM,GAAG,KAAKC,OAAlB;AACA,QAAIC,aAAa,GAAGxD,OAAO,CAACyD,SAAR,IAAqBpG,IAAI,CAACqG,IAAL,CAAU1D,OAAO,CAACyD,SAAR,GAAoB,CAA9B,IAAmC/G,oBAA5E;AACA,QAAIoE,IAAI,GAAGd,OAAO,CAACc,IAAnB;;AACA,QAAI,UAAUA,IAAV,IAAkB,cAAcA,IAAhC,KAAyCd,OAAO,CAAC2D,aAAR,IAAyB3D,OAAO,CAAC4D,UAA1E,CAAJ,EAA2F;AACvF,aAAO;AACH/B,QAAAA,KAAK,EAAEyB,MAAM,CAACzB,KADX;AAEHC,QAAAA,MAAM,EAAEwB,MAAM,CAACxB,MAFZ;AAGH+B,QAAAA,IAAI,EAAEP,MAAM,CAACO,IAAP,GAAcL,aAHjB;AAIHM,QAAAA,KAAK,EAAER,MAAM,CAACQ,KAAP,GAAeN,aAJnB;AAKHO,QAAAA,GAAG,EAAET,MAAM,CAACS,GAAP,GAAaP,aALf;AAMHQ,QAAAA,MAAM,EAAEV,MAAM,CAACU,MAAP,GAAgBR;AANrB,OAAP;AAQH;;AACD,WAAOF,MAAP;AACH,GArD6C;AAsD9CW,EAAAA,eAAe,EAAE,YAAW;AACxB,QAAIzB,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACa,WAAL,GAAmBb,IAAI,CAACR,QAAL,EAAnB;AACAQ,IAAAA,IAAI,CAACa,WAAL,CAAiBvC,IAAjB,GAAwB,CAAC,GAAG/E,MAAM,CAACmI,aAAX,EAA0B1B,IAAI,CAACa,WAAL,CAAiBvC,IAA3C,CAAxB;;AACA,QAAI,CAACnE,aAAa,CAAC6F,IAAI,CAACa,WAAL,CAAiBvC,IAAlB,CAAlB,EAA2C;AACvC0B,MAAAA,IAAI,CAACa,WAAL,CAAiBvC,IAAjB,GAAwB,MAAxB;AACH;AACJ,GA7D6C;AA8D9CqD,EAAAA,mBAAmB,EAAE,YAAW;AAC5B,SAAKxB,YAAL,GAAoB,KAAKyB,SAAL,CAAeC,CAAf,GAAmBC,IAAnB,CAAwB;AACxC,eAAS;AAD+B,KAAxB,CAApB;AAGA,SAAK1B,iBAAL,GAAyB,KAAKwB,SAAL,CAAeC,CAAf,GAAmBC,IAAnB,CAAwB;AAC7C,eAAS;AADoC,KAAxB,CAAzB;AAGH,GArE6C;AAsE9CrC,EAAAA,aAAa,EAAE,YAAW;AACtB,SAAKQ,OAAL,GAAe,IAAI3G,YAAY,CAACyI,MAAjB,CAAwB;AACnCC,MAAAA,QAAQ,EAAE,KAAKJ,SADoB;AAEnCK,MAAAA,WAAW,EAAE,KAAK9B,YAFiB;AAGnC+B,MAAAA,WAAW,EAAE,KAAK9B,iBAHiB;AAInC+B,MAAAA,YAAY,EAAE,KAAKC,aAJgB;AAKnCC,MAAAA,SAAS,EAAE,KAAKC;AALmB,KAAxB,EAMZ;AACCC,MAAAA,UAAU,EAAE,OADb;AAECjE,MAAAA,IAAI,EAAE;AAFP,KANY,CAAf;AAUH,GAjF6C;AAkF9CwB,EAAAA,aAAa,EAAE,YAAW;AACtB,QAAIE,IAAI,GAAG,IAAX;AACA,QAAIwC,YAAY,GAAGxC,IAAI,CAACC,OAAxB;;AACAD,IAAAA,IAAI,CAACyC,kBAAL;;AACA,QAAIC,aAAa,GAAG1C,IAAI,CAAC2C,qBAAL,EAApB;;AACAH,IAAAA,YAAY,CAACI,aAAb,CAA2BF,aAA3B;AACA,QAAIG,UAAU,GAAG;AACbC,MAAAA,MAAM,EAAE,CAAC;AACLC,QAAAA,MAAM,EAAE,CAACP,YAAD;AADH,OAAD;AADK,KAAjB;AAKAK,IAAAA,UAAU,CAACG,eAAX,GAA6B;AACzB1E,MAAAA,IAAI,EAAE,UAAUoE,aAAa,CAACpE,IAAxB,GAA+B,UAA/B,GAA4C,KAAK;AAD9B,KAA7B;AAGA0B,IAAAA,IAAI,CAACiD,iBAAL,GAAyB,CAAC,GAAG5J,eAAe,CAAC6J,YAApB,EAAkClD,IAAI,CAACiD,iBAAvC,EAA0DJ,UAA1D,EAAsE7C,IAAI,CAACmD,iBAA3E,EAA8F;AACnHC,MAAAA,mBAAmB,EAAE,KAD8F;AAEnHC,MAAAA,qBAAqB,EAAE,IAF4F;AAGnHC,MAAAA,aAAa,EAAE;AAHoG,KAA9F,EAItBd,YAAY,CAACe,gBAAb,EAJsB,CAAzB;AAKAb,IAAAA,aAAa,CAACc,cAAd,GAA+BxD,IAAI,CAACyD,qBAAL,EAA/B;AACAjB,IAAAA,YAAY,CAACkB,UAAb,CAAwB1D,IAAI,CAACiD,iBAA7B;AACAT,IAAAA,YAAY,CAACmB,YAAb;AACA3D,IAAAA,IAAI,CAAC4D,qBAAL,GAA6Bf,UAAU,CAACgB,UAAxC;AACH,GAzG6C;AA0G9CC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,UAAU,EAAE;AADG,GA1G2B;AA6G9CC,EAAAA,mBAAmB,EAAE,CAAC,aAAD,CA7GyB;AA8G9CC,EAAAA,mBAAmB,EAAE,YAAW;AAC5B,SAAKC,iBAAL;AACH,GAhH6C;AAiH9CzB,EAAAA,kBAAkB,EAAE,YAAW;AAC3B,QAAIzC,IAAI,GAAG,IAAX;AACA,QAAIxC,OAAO,GAAGwC,IAAI,CAACa,WAAnB;AACA,QAAIpE,QAAQ,GAAGe,OAAO,CAAC2G,aAAvB;AACA,QAAIrI,QAAQ,GAAG0B,OAAO,CAACgB,UAAvB;AACA,QAAIuF,UAAU,GAAG/D,IAAI,CAACoE,gBAAL,MAA2B,EAA5C;AACA,QAAIvI,IAAI,GAAGW,sBAAsB,CAACuH,UAAD,EAAatH,QAAb,EAAuBX,QAAvB,EAAiCkE,IAAI,CAACqE,MAAL,CAAY,mBAAZ,CAAjC,CAAjC;;AACA,QAAI,cAAc7G,OAAO,CAACc,IAA1B,EAAgC;AAC5B0B,MAAAA,IAAI,CAACsE,kBAAL,GAA0BzI,IAA1B;AACAmE,MAAAA,IAAI,CAACiD,iBAAL,GAAyBjG,sBAAsB,CAACnB,IAAD,EAAOY,QAAP,EAAiBX,QAAjB,EAA2B0B,OAAO,CAACe,gBAAnC,CAA/C;AACH,KAHD,MAGO;AACHyB,MAAAA,IAAI,CAACiD,iBAAL,GAAyBpH,IAAzB;AACH;AACJ,GA9H6C;AA+H9C8G,EAAAA,qBAAqB,EAAE,YAAW;AAC9B,QAAI3C,IAAI,GAAG,IAAX;AACA,QAAIxC,OAAO,GAAGwC,IAAI,CAACa,WAAnB;AACA,QAAIvC,IAAI,GAAG,cAAcd,OAAO,CAACc,IAAtB,GAA6B,KAA7B,GAAqCd,OAAO,CAACc,IAAxD;AACA,WAAO;AACHL,MAAAA,OAAO,EAAE,IADN;AAEHkG,MAAAA,aAAa,EAAE3G,OAAO,CAAC2G,aAFpB;AAGH3F,MAAAA,UAAU,EAAEhB,OAAO,CAACgB,UAHjB;AAIHjB,MAAAA,KAAK,EAAEC,OAAO,CAAC+G,SAJZ;AAKHlF,MAAAA,KAAK,EAAE7B,OAAO,CAACgH,SALZ;AAMHjC,MAAAA,UAAU,EAAE,OANT;AAOHjE,MAAAA,IAAI,EAAEA,IAPH;AAQHmG,MAAAA,OAAO,EAAEnG,IAAI,CAACT,OAAL,CAAa,MAAb,MAAyB,CAAC,CAA1B,GAA8BmC,IAAI,CAACa,WAAL,CAAiB6D,WAA/C,GAA6D,KAAK,CARxE;AASHC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAEpH,OAAO,CAACyD,SADX;AAEH4D,QAAAA,MAAM,EAAErH,OAAO,CAACsH,WAFb;AAGH5G,QAAAA,MAAM,EAAE;AACJD,UAAAA,OAAO,EAAE,IADL;AAEJoB,UAAAA,KAAK,EAAEnF;AAFH,SAHL;AAOHqD,QAAAA,KAAK,EAAEC,OAAO,CAACuH,UAPZ;AAQH9G,QAAAA,OAAO,EAAE,KARN;AASH+G,QAAAA,UAAU,EAAE;AACR9G,UAAAA,MAAM,EAAE;AADA,SATT;AAYH+G,QAAAA,cAAc,EAAE;AACZ/G,UAAAA,MAAM,EAAE;AADI;AAZb,OATJ;AAyBHA,MAAAA,MAAM,EAAE;AACJX,QAAAA,KAAK,EAAEC,OAAO,CAAC+G,SADX;AAEJlF,QAAAA,KAAK,EAAE7B,OAAO,CAACgH,SAFX;AAGJvG,QAAAA,OAAO,EAAE,UAAUK;AAHf;AAzBL,KAAP;AA+BH,GAlK6C;AAmK9CmF,EAAAA,qBAAqB,EAAE,YAAW;AAC9B,QAAIzD,IAAI,GAAG,IAAX;AACA,QAAIxC,OAAO,GAAGwC,IAAI,CAACa,WAAnB;AACA,QAAIkD,UAAU,GAAG/D,IAAI,CAACsE,kBAAL,IAA2BtE,IAAI,CAACiD,iBAAjD;;AACA,QAAIiC,iBAAiB,GAAGlF,IAAI,CAACmF,yBAAL,CAA+BpB,UAA/B,CAAxB;;AACA,QAAIqB,iBAAJ;;AACA,QAAI,cAAc5H,OAAO,CAACc,IAAtB,IAA8B,UAAUd,OAAO,CAACc,IAApD,EAA0D;AACtD8G,MAAAA,iBAAiB,GAAGjH,0BAA0B,CAAC+G,iBAAD,EAAoB1H,OAApB,EAA6BwC,IAAI,CAACsE,kBAAlC,CAA9C;AACH,KAFD,MAEO;AACHc,MAAAA,iBAAiB,GAAGpH,2BAA2B,CAACkH,iBAAD,EAAoB1H,OAApB,CAA/C;AACH;;AACD,WAAO4H,iBAAP;AACH,GA/K6C;AAgL9CD,EAAAA,yBAAyB,EAAE,UAAStJ,IAAT,EAAe;AACtC,QAAImE,IAAI,GAAG,IAAX;AACA,QAAIxC,OAAO,GAAGwC,IAAI,CAACa,WAAnB;AACA,QAAIwE,SAAS,GAAGxJ,IAAI,CAACO,MAAL,GAAc,CAA9B;AACA,QAAIkJ,OAAO,GAAG,EAAd;AACAtF,IAAAA,IAAI,CAACuF,cAAL,GAAsB3J,UAAU,CAACC,IAAD,EAAO2B,OAAO,CAACgB,UAAf,CAAhC;;AACA,QAAIhB,OAAO,CAAC2D,aAAZ,EAA2B;AACvBmE,MAAAA,OAAO,CAAC5H,KAAR,GAAgB,CAAhB;AACA4H,MAAAA,OAAO,CAAC3H,IAAR,GAAe0H,SAAf;AACH;;AACD,QAAI7H,OAAO,CAAC4D,UAAZ,EAAwB;AACpBkE,MAAAA,OAAO,CAACjK,GAAR,GAAc2E,IAAI,CAACuF,cAAL,CAAoBtJ,UAAlC;AACAqJ,MAAAA,OAAO,CAACnK,GAAR,GAAc6E,IAAI,CAACuF,cAAL,CAAoBrJ,UAAlC;AACH;;AACD,WAAOoJ,OAAP;AACH,GA/L6C;AAgM9CE,EAAAA,SAAS,EAAE,YAAW;AAClB,WAAO;AACHC,MAAAA,KAAK,EAAE,UAAU,KAAKxF,OAAL,CAAa3B;AAD3B,KAAP;AAGH,GApM6C;AAqM9CoH,EAAAA,YAAY,EAAE,YAAW;AACrB,QAAI1F,IAAI,GAAG,IAAX;AACA,QAAI+C,MAAM,GAAG/C,IAAI,CAACC,OAAlB;AACA,QAAI3B,IAAI,GAAGyE,MAAM,CAACzE,IAAlB;AACA,QAAIqH,SAAS,GAAG,UAAUrH,IAA1B;AACA,QAAIsH,aAAa,GAAG,cAActH,IAAlC;AACA,QAAIuH,0BAA0B,GAAG,GAAjC;AACA,QAAIC,6BAA6B,GAAG,EAApC;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,iBAAiB,GAAG,CAAC,CAAzB;AACA,QAAIC,SAAS,GAAGlD,MAAM,CAACmD,YAAP,EAAhB;AACA,QAAIC,QAAQ,GAAGnG,IAAI,CAACa,WAAL,CAAiBsF,QAAhC;;AACA,QAAIC,OAAO,GAAG,CAAC,GAAG5M,KAAK,CAAC6M,SAAV,EAAqBF,QAArB,KAAkC7K,SAAS,CAAC6K,QAAD,CAAzD;;AACA,QAAIG,QAAQ,GAAGtG,IAAI,CAACa,WAAL,CAAiByF,QAAhC;;AACA,QAAIC,OAAO,GAAG,CAAC,GAAG/M,KAAK,CAAC6M,SAAV,EAAqBC,QAArB,KAAkChL,SAAS,CAACgL,QAAD,CAAzD;;AACA,QAAIE,OAAJ;AACA,QAAIC,OAAO,GAAG,CAACR,SAAS,CAACS,GAAV,CAAcvL,GAAd,GAAoB8K,SAAS,CAACS,GAAV,CAAcrL,GAAnC,IAA0CwK,0BAAxD;;AACA,QAAIF,SAAS,IAAIC,aAAb,IAA8B,WAAWtH,IAA7C,EAAmD;AAC/C,UAAI,MAAM2H,SAAS,CAACS,GAAV,CAAcrL,GAAxB,EAA6B;AACzB4K,QAAAA,SAAS,CAACS,GAAV,CAAcrL,GAAd,IAAqBoL,OAArB;AACH;;AACD,UAAI,MAAMR,SAAS,CAACS,GAAV,CAAcvL,GAAxB,EAA6B;AACzB8K,QAAAA,SAAS,CAACS,GAAV,CAAcvL,GAAd,IAAqBsL,OAArB;AACH;AACJ,KAPD,MAOO;AACHR,MAAAA,SAAS,CAACS,GAAV,CAAcrL,GAAd,IAAqBoL,OAArB;AACAR,MAAAA,SAAS,CAACS,GAAV,CAAcvL,GAAd,IAAqBsL,OAArB;AACH;;AACD,QAAIL,OAAO,IAAIG,OAAf,EAAwB;AACpB,UAAIH,OAAO,IAAIG,OAAf,EAAwB;AACpBN,QAAAA,SAAS,CAACS,GAAV,CAAcC,UAAd,GAA2BvL,IAAI,CAAC+K,QAAD,EAAWG,QAAX,CAA/B;AACAL,QAAAA,SAAS,CAACS,GAAV,CAAcE,UAAd,GAA2B1L,IAAI,CAACiL,QAAD,EAAWG,QAAX,CAA/B;AACH,OAHD,MAGO;AACHL,QAAAA,SAAS,CAACS,GAAV,CAAcC,UAAd,GAA2BP,OAAO,GAAG5K,OAAO,CAAC2K,QAAD,CAAV,GAAuB,KAAK,CAA9D;AACAF,QAAAA,SAAS,CAACS,GAAV,CAAcE,UAAd,GAA2BL,OAAO,GAAG/K,OAAO,CAAC8K,QAAD,CAAV,GAAuB,KAAK,CAA9D;AACH;;AACD,UAAIV,aAAJ,EAAmB;AACfK,QAAAA,SAAS,CAACS,GAAV,CAAcC,UAAd,GAA2BP,OAAO,GAAGlL,IAAI,CAAC+K,SAAS,CAACS,GAAV,CAAcC,UAAf,EAA2BX,iBAA3B,CAAP,GAAuD,KAAK,CAA9F;AACAC,QAAAA,SAAS,CAACS,GAAV,CAAcE,UAAd,GAA2BL,OAAO,GAAGnL,IAAI,CAAC6K,SAAS,CAACS,GAAV,CAAcE,UAAf,EAA2Bb,iBAA3B,CAAP,GAAuD,KAAK,CAA9F;AACH;AACJ;;AACD,QAAIhD,MAAM,CAAC8D,SAAP,GAAmBzK,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,UAAIuJ,SAAJ,EAAe;AACXa,QAAAA,OAAO,GAAG,CAACP,SAAS,CAACa,GAAV,CAAc3L,GAAd,GAAoB8K,SAAS,CAACa,GAAV,CAAczL,GAAnC,IAA0CyK,6BAApD;AACAG,QAAAA,SAAS,CAACa,GAAV,CAAczL,GAAd,GAAoB4K,SAAS,CAACa,GAAV,CAAczL,GAAd,GAAoBmL,OAAxC;AACAP,QAAAA,SAAS,CAACa,GAAV,CAAc3L,GAAd,GAAoB8K,SAAS,CAACa,GAAV,CAAc3L,GAAd,GAAoBqL,OAAxC;AACH;AACJ;;AACDP,IAAAA,SAAS,CAACa,GAAV,CAAcjD,UAAd,GAA2B7D,IAAI,CAAC4D,qBAAhC;AACA5D,IAAAA,IAAI,CAAC+G,OAAL,GAAed,SAAf;AACH,GAvP6C;AAwP9Ce,EAAAA,YAAY,EAAE,UAASC,WAAT,EAAsB;AAChC,QAAIjH,IAAI,GAAG,IAAX;AACA,QAAIc,MAAM,GAAGd,IAAI,CAACe,OAAlB;AACA,QAAImG,aAAa,GAAGD,WAAW,GAAGlN,oBAAlC;AACA,QAAIoN,UAAU,GAAGrG,MAAM,CAACzB,KAAP,GAAeyB,MAAM,CAACO,IAAtB,GAA6BP,MAAM,CAACQ,KAApC,GAA4C4F,aAA7D;;AACA,QAAI7H,KAAK,GAAGrE,MAAM,CAACmM,UAAU,GAAGF,WAAd,CAAlB;;AACA,QAAI5H,KAAK,GAAGxF,aAAZ,EAA2B;AACvBwF,MAAAA,KAAK,GAAGxF,aAAR;AACH;;AACD,QAAIwF,KAAK,GAAGvF,aAAZ,EAA2B;AACvBuF,MAAAA,KAAK,GAAGvF,aAAR;AACH;;AACD,WAAOuF,KAAP;AACH,GArQ6C;AAsQ9C+H,EAAAA,cAAc,EAAE,YAAW;AACvB,QAAIpH,IAAI,GAAG,IAAX;AACA,QAAIqH,UAAU,GAAGrH,IAAI,CAACa,WAAL,CAAiBvC,IAAlC;;AACA,QAAIgJ,YAAY,GAAGtH,IAAI,CAACC,OAAL,CAAa4G,SAAb,EAAnB;;AACA,QAAIU,YAAY,GAAGD,YAAY,CAAClL,MAAhC;AACA,QAAIoL,QAAJ;AACA,QAAIlL,CAAJ;;AACA,QAAI,UAAU+K,UAAV,IAAwB,cAAcA,UAA1C,EAAsD;AAClDG,MAAAA,QAAQ,GAAGxH,IAAI,CAACgH,YAAL,CAAkBO,YAAlB,CAAX;;AACA,WAAKjL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiL,YAAhB,EAA8BjL,CAAC,EAA/B,EAAmC;AAC/BgL,QAAAA,YAAY,CAAChL,CAAD,CAAZ,CAAgBmL,kBAAhB,CAAmC;AAC/BpI,UAAAA,KAAK,EAAEmI,QADwB;AAE/BE,UAAAA,MAAM,EAAE;AAFuB,SAAnC;AAIH;AACJ;AACJ,GAtR6C;AAuR9ChH,EAAAA,WAAW,EAAE,YAAW;AACpB,QAAIV,IAAI,GAAG,IAAX;;AACA,QAAIA,IAAI,CAACiD,iBAAL,CAAuB7G,MAAvB,GAAgC,CAApC,EAAuC;AACnC4D,MAAAA,IAAI,CAACoH,cAAL;;AACApH,MAAAA,IAAI,CAACC,OAAL,CAAa0H,IAAb;;AACA3H,MAAAA,IAAI,CAACG,YAAL,CAAkByH,MAAlB,CAAyB5H,IAAI,CAAC4B,SAAL,CAAeiG,IAAxC;AACH;AACJ,GA9R6C;AA+R9CC,EAAAA,iBAAiB,EAAE,YAAW;AAC1B,WAAO,CAAC,CAAC,KAAK7E,iBAAL,CAAuB7G,MAAhC;AACH,GAjS6C;AAkS9C2L,EAAAA,eAAe,EAAE,YAAW;AACxB,QAAI/H,IAAI,GAAG,IAAX;AACA,QAAIxC,OAAO,GAAGwC,IAAI,CAACa,WAAnB;AACA,QAAIkD,UAAU,GAAG/D,IAAI,CAACsE,kBAAL,IAA2BtE,IAAI,CAACiD,iBAAjD;AACA,QAAI+E,OAAO,GAAGhI,IAAI,CAACiI,QAAnB;;AACA,QAAI,MAAMlE,UAAU,CAAC3H,MAArB,EAA6B;AACzB,aAAO,EAAP;AACH;;AACD,QAAI8L,MAAM,GAAGlI,IAAI,CAACuF,cAAlB;AACA,QAAI/G,UAAU,GAAGhB,OAAO,CAACgB,UAAzB;AACA,QAAId,KAAK,GAAGqG,UAAU,CAAC,CAAD,CAAV,CAAcvF,UAAd,CAAZ;AACA,QAAIb,IAAI,GAAGoG,UAAU,CAACA,UAAU,CAAC3H,MAAX,GAAoB,CAArB,CAAV,CAAkCoC,UAAlC,CAAX;AACA,QAAInD,GAAG,GAAG,CAAC,GAAG7B,KAAK,CAAC6M,SAAV,EAAqB6B,MAAM,CAACjM,UAAP,CAAkB,CAAlB,CAArB,IAA6C8H,UAAU,CAACmE,MAAM,CAACjM,UAAP,CAAkB,CAAlB,CAAD,CAAV,CAAiCuC,UAAjC,CAA7C,GAA4Fd,KAAtG;AACA,QAAIvC,GAAG,GAAG,CAAC,GAAG3B,KAAK,CAAC6M,SAAV,EAAqB6B,MAAM,CAAChM,UAAP,CAAkB,CAAlB,CAArB,IAA6C6H,UAAU,CAACmE,MAAM,CAAChM,UAAP,CAAkB,CAAlB,CAAD,CAAV,CAAiCsC,UAAjC,CAA7C,GAA4Fd,KAAtG;AACA,QAAIyK,cAAc,GAAGH,OAAO,CAACI,WAAR,CAAoB1K,KAApB,CAArB;AACA,QAAI2K,aAAa,GAAGL,OAAO,CAACI,WAAR,CAAoBzK,IAApB,CAApB;AACA,QAAI2K,YAAY,GAAGN,OAAO,CAACI,WAAR,CAAoB/M,GAApB,CAAnB;AACA,QAAIkN,YAAY,GAAGP,OAAO,CAACI,WAAR,CAAoBjN,GAApB,CAAnB;AACA,QAAIqN,eAAe,GAAG;AAClBxM,MAAAA,UAAU,EAAEmM,cADM;AAElBM,MAAAA,SAAS,EAAEJ,aAFO;AAGlBlC,MAAAA,QAAQ,EAAEmC,YAHQ;AAIlBhC,MAAAA,QAAQ,EAAEiC,YAJQ;AAKlBG,MAAAA,kBAAkB,EAAEhL,KALF;AAMlBiL,MAAAA,iBAAiB,EAAEhL,IAND;AAOlBiL,MAAAA,gBAAgB,EAAEvN,GAPA;AAQlBwN,MAAAA,gBAAgB,EAAE1N,GARA;AASlB2N,MAAAA,SAAS,EAAE,CAAC,QAAD,EAAWX,cAAX,EAA2B,MAA3B,EAAmCE,aAAnC,EAAkD,MAAlD,EAA0DC,YAA1D,EAAwE,MAAxE,EAAgFC,YAAhF;AATO,KAAtB;;AAWA,QAAI,cAAc/K,OAAO,CAACc,IAA1B,EAAgC;AAC5BkK,MAAAA,eAAe,CAACO,sBAAhB,GAAyCvL,OAAO,CAACe,gBAAjD;AACAiK,MAAAA,eAAe,CAACQ,cAAhB,GAAiChB,OAAO,CAACI,WAAR,CAAoB5K,OAAO,CAACe,gBAA5B,CAAjC;AACH;;AACD,WAAOiK,eAAP;AACH;AApU6C,CAAhC,CAAlB;;AAsUA,CAAC,GAAGjP,MAAM,CAACoD,GAAX,EAAgB,CAAC,WAAD,EAAc,WAAd,EAA2B,aAA3B,EAA0C,UAA1C,EAAsD,UAAtD,EAAkE,kBAAlE,EAAsF,kBAAtF,EAA0G,UAA1G,EAAsH,WAAtH,EAAmI,gBAAnI,EAAqJ,aAArJ,EAAoK,YAApK,EAAkL,WAAlL,EAA+L,MAA/L,EAAuM,eAAvM,EAAwN,YAAxN,EAAsO,kBAAtO,EAA0P,eAA1P,EAA2Q,YAA3Q,EAAyR,mBAAzR,EAA8S,UAA9S,EAA0T,UAA1T,CAAhB,EAAuV,UAASsM,IAAT,EAAe;AAClWlK,EAAAA,WAAW,CAACmK,SAAZ,CAAsBpF,iBAAtB,CAAwCmF,IAAxC,IAAgD,SAAhD;AACH,CAFD;AAGA,CAAC,GAAGxP,sBAAsB,CAACR,OAA3B,EAAoC,aAApC,EAAmD8F,WAAnD;AACA,IAAIoK,QAAQ,GAAGpK,WAAf;AACA/F,OAAO,CAACC,OAAR,GAAkBkQ,QAAlB;AACApK,WAAW,CAACqK,SAAZ,CAAsB1P,YAAY,CAAC2P,MAAnC;AACAC,MAAM,CAACtQ,OAAP,GAAiBA,OAAO,CAACC,OAAzB","sourcesContent":["/**\r\n * DevExtreme (viz/sparklines/sparkline.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _base_sparkline = _interopRequireDefault(require(\"./base_sparkline\"));\r\nvar _data_validator = require(\"../components/data_validator\");\r\nvar _base_series = require(\"../series/base_series\");\r\nvar _utils = require(\"../core/utils\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _component_registrator = _interopRequireDefault(require(\"../../core/component_registrator\"));\r\nvar _data_source = require(\"../core/data_source\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar MIN_BAR_WIDTH = 1;\r\nvar MAX_BAR_WIDTH = 50;\r\nvar DEFAULT_BAR_INTERVAL = 4;\r\nvar DEFAULT_CANVAS_WIDTH = 250;\r\nvar DEFAULT_CANVAS_HEIGHT = 30;\r\nvar DEFAULT_POINT_BORDER = 2;\r\nvar ALLOWED_TYPES = {\r\n    line: true,\r\n    spline: true,\r\n    stepline: true,\r\n    area: true,\r\n    steparea: true,\r\n    splinearea: true,\r\n    bar: true,\r\n    winloss: true\r\n};\r\nvar _math = Math;\r\nvar _abs = _math.abs;\r\nvar _round = _math.round;\r\nvar _max = _math.max;\r\nvar _min = _math.min;\r\nvar _isFinite = isFinite;\r\nvar _Number = Number;\r\nvar _String = String;\r\n\r\nfunction findMinMax(data, valField) {\r\n    var firstItem = data[0] || {};\r\n    var firstValue = firstItem[valField] || 0;\r\n    var min = firstValue;\r\n    var max = firstValue;\r\n    var minIndexes = [0];\r\n    var maxIndexes = [0];\r\n    var dataLength = data.length;\r\n    var value;\r\n    var i;\r\n    for (i = 1; i < dataLength; i++) {\r\n        value = data[i][valField];\r\n        if (value < min) {\r\n            min = value;\r\n            minIndexes = [i]\r\n        } else {\r\n            if (value === min) {\r\n                minIndexes.push(i)\r\n            }\r\n        }\r\n        if (value > max) {\r\n            max = value;\r\n            maxIndexes = [i]\r\n        } else {\r\n            if (value === max) {\r\n                maxIndexes.push(i)\r\n            }\r\n        }\r\n    }\r\n    if (max === min) {\r\n        minIndexes = maxIndexes = []\r\n    }\r\n    return {\r\n        minIndexes: minIndexes,\r\n        maxIndexes: maxIndexes\r\n    }\r\n}\r\n\r\nfunction parseNumericDataSource(data, argField, valField, ignoreEmptyPoints) {\r\n    return (0, _utils.map)(data, function(dataItem, index) {\r\n        var item = null;\r\n        var isDataNumber;\r\n        var value;\r\n        if (void 0 !== dataItem) {\r\n            item = {};\r\n            isDataNumber = _isFinite(dataItem);\r\n            item[argField] = isDataNumber ? _String(index) : dataItem[argField];\r\n            value = isDataNumber ? dataItem : dataItem[valField];\r\n            item[valField] = null === value ? ignoreEmptyPoints ? void 0 : value : _Number(value);\r\n            item = void 0 !== item[argField] && void 0 !== item[valField] ? item : null\r\n        }\r\n        return item\r\n    })\r\n}\r\n\r\nfunction parseWinlossDataSource(data, argField, valField, target) {\r\n    var lowBarValue = -1;\r\n    var zeroBarValue = 0;\r\n    var highBarValue = 1;\r\n    var delta = 1e-4;\r\n    return (0, _utils.map)(data, function(dataItem) {\r\n        var item = {};\r\n        item[argField] = dataItem[argField];\r\n        if (_abs(dataItem[valField] - target) < delta) {\r\n            item[valField] = zeroBarValue\r\n        } else {\r\n            if (dataItem[valField] > target) {\r\n                item[valField] = highBarValue\r\n            } else {\r\n                item[valField] = lowBarValue\r\n            }\r\n        }\r\n        return item\r\n    })\r\n}\r\n\r\nfunction selectPointColor(color, options, index, pointIndexes) {\r\n    if (index === pointIndexes.first || index === pointIndexes.last) {\r\n        color = options.firstLastColor\r\n    }\r\n    if ((pointIndexes.min || []).indexOf(index) >= 0) {\r\n        color = options.minColor\r\n    }\r\n    if ((pointIndexes.max || []).indexOf(index) >= 0) {\r\n        color = options.maxColor\r\n    }\r\n    return color\r\n}\r\n\r\nfunction createLineCustomizeFunction(pointIndexes, options) {\r\n    return function() {\r\n        var color = selectPointColor(void 0, options, this.index, pointIndexes);\r\n        return color ? {\r\n            visible: true,\r\n            border: {\r\n                color: color\r\n            }\r\n        } : {}\r\n    }\r\n}\r\n\r\nfunction createBarCustomizeFunction(pointIndexes, options, winlossData) {\r\n    return function() {\r\n        var index = this.index;\r\n        var isWinloss = \"winloss\" === options.type;\r\n        var target = isWinloss ? options.winlossThreshold : 0;\r\n        var value = isWinloss ? winlossData[index][options.valueField] : this.value;\r\n        var positiveColor = isWinloss ? options.winColor : options.barPositiveColor;\r\n        var negativeColor = isWinloss ? options.lossColor : options.barNegativeColor;\r\n        return {\r\n            color: selectPointColor(value >= target ? positiveColor : negativeColor, options, index, pointIndexes)\r\n        }\r\n    }\r\n}\r\nvar dxSparkline = _base_sparkline.default.inherit({\r\n    _rootClassPrefix: \"dxsl\",\r\n    _rootClass: \"dxsl-sparkline\",\r\n    _themeSection: \"sparkline\",\r\n    _defaultSize: {\r\n        width: DEFAULT_CANVAS_WIDTH,\r\n        height: DEFAULT_CANVAS_HEIGHT\r\n    },\r\n    _initCore: function() {\r\n        this.callBase();\r\n        this._createSeries()\r\n    },\r\n    _initialChanges: [\"DATA_SOURCE\"],\r\n    _dataSourceChangedHandler: function() {\r\n        this._requestChange([\"UPDATE\"])\r\n    },\r\n    _updateWidgetElements: function() {\r\n        this._updateSeries();\r\n        this.callBase()\r\n    },\r\n    _disposeWidgetElements: function() {\r\n        var that = this;\r\n        that._series && that._series.dispose();\r\n        that._series = that._seriesGroup = that._seriesLabelGroup = null\r\n    },\r\n    _cleanWidgetElements: function() {\r\n        this._seriesGroup.remove();\r\n        this._seriesLabelGroup.remove();\r\n        this._seriesGroup.clear();\r\n        this._seriesLabelGroup.clear()\r\n    },\r\n    _drawWidgetElements: function() {\r\n        if (this._dataIsLoaded()) {\r\n            this._drawSeries();\r\n            this._drawn()\r\n        }\r\n    },\r\n    _getCorrectCanvas: function() {\r\n        var options = this._allOptions;\r\n        var canvas = this._canvas;\r\n        var halfPointSize = options.pointSize && Math.ceil(options.pointSize / 2) + DEFAULT_POINT_BORDER;\r\n        var type = options.type;\r\n        if (\"bar\" !== type && \"winloss\" !== type && (options.showFirstLast || options.showMinMax)) {\r\n            return {\r\n                width: canvas.width,\r\n                height: canvas.height,\r\n                left: canvas.left + halfPointSize,\r\n                right: canvas.right + halfPointSize,\r\n                top: canvas.top + halfPointSize,\r\n                bottom: canvas.bottom + halfPointSize\r\n            }\r\n        }\r\n        return canvas\r\n    },\r\n    _prepareOptions: function() {\r\n        var that = this;\r\n        that._allOptions = that.callBase();\r\n        that._allOptions.type = (0, _utils.normalizeEnum)(that._allOptions.type);\r\n        if (!ALLOWED_TYPES[that._allOptions.type]) {\r\n            that._allOptions.type = \"line\"\r\n        }\r\n    },\r\n    _createHtmlElements: function() {\r\n        this._seriesGroup = this._renderer.g().attr({\r\n            \"class\": \"dxsl-series\"\r\n        });\r\n        this._seriesLabelGroup = this._renderer.g().attr({\r\n            \"class\": \"dxsl-series-labels\"\r\n        })\r\n    },\r\n    _createSeries: function() {\r\n        this._series = new _base_series.Series({\r\n            renderer: this._renderer,\r\n            seriesGroup: this._seriesGroup,\r\n            labelsGroup: this._seriesLabelGroup,\r\n            argumentAxis: this._argumentAxis,\r\n            valueAxis: this._valueAxis\r\n        }, {\r\n            widgetType: \"chart\",\r\n            type: \"line\"\r\n        })\r\n    },\r\n    _updateSeries: function() {\r\n        var that = this;\r\n        var singleSeries = that._series;\r\n        that._prepareDataSource();\r\n        var seriesOptions = that._prepareSeriesOptions();\r\n        singleSeries.updateOptions(seriesOptions);\r\n        var groupsData = {\r\n            groups: [{\r\n                series: [singleSeries]\r\n            }]\r\n        };\r\n        groupsData.argumentOptions = {\r\n            type: \"bar\" === seriesOptions.type ? \"discrete\" : void 0\r\n        };\r\n        that._simpleDataSource = (0, _data_validator.validateData)(that._simpleDataSource, groupsData, that._incidentOccurred, {\r\n            checkTypeForAllData: false,\r\n            convertToAxisDataType: true,\r\n            sortingMethod: true\r\n        })[singleSeries.getArgumentField()];\r\n        seriesOptions.customizePoint = that._getCustomizeFunction();\r\n        singleSeries.updateData(that._simpleDataSource);\r\n        singleSeries.createPoints();\r\n        that._groupsDataCategories = groupsData.categories\r\n    },\r\n    _optionChangesMap: {\r\n        dataSource: \"DATA_SOURCE\"\r\n    },\r\n    _optionChangesOrder: [\"DATA_SOURCE\"],\r\n    _change_DATA_SOURCE: function() {\r\n        this._updateDataSource()\r\n    },\r\n    _prepareDataSource: function() {\r\n        var that = this;\r\n        var options = that._allOptions;\r\n        var argField = options.argumentField;\r\n        var valField = options.valueField;\r\n        var dataSource = that._dataSourceItems() || [];\r\n        var data = parseNumericDataSource(dataSource, argField, valField, that.option(\"ignoreEmptyPoints\"));\r\n        if (\"winloss\" === options.type) {\r\n            that._winlossDataSource = data;\r\n            that._simpleDataSource = parseWinlossDataSource(data, argField, valField, options.winlossThreshold)\r\n        } else {\r\n            that._simpleDataSource = data\r\n        }\r\n    },\r\n    _prepareSeriesOptions: function() {\r\n        var that = this;\r\n        var options = that._allOptions;\r\n        var type = \"winloss\" === options.type ? \"bar\" : options.type;\r\n        return {\r\n            visible: true,\r\n            argumentField: options.argumentField,\r\n            valueField: options.valueField,\r\n            color: options.lineColor,\r\n            width: options.lineWidth,\r\n            widgetType: \"chart\",\r\n            type: type,\r\n            opacity: type.indexOf(\"area\") !== -1 ? that._allOptions.areaOpacity : void 0,\r\n            point: {\r\n                size: options.pointSize,\r\n                symbol: options.pointSymbol,\r\n                border: {\r\n                    visible: true,\r\n                    width: DEFAULT_POINT_BORDER\r\n                },\r\n                color: options.pointColor,\r\n                visible: false,\r\n                hoverStyle: {\r\n                    border: {}\r\n                },\r\n                selectionStyle: {\r\n                    border: {}\r\n                }\r\n            },\r\n            border: {\r\n                color: options.lineColor,\r\n                width: options.lineWidth,\r\n                visible: \"bar\" !== type\r\n            }\r\n        }\r\n    },\r\n    _getCustomizeFunction: function() {\r\n        var that = this;\r\n        var options = that._allOptions;\r\n        var dataSource = that._winlossDataSource || that._simpleDataSource;\r\n        var drawnPointIndexes = that._getExtremumPointsIndexes(dataSource);\r\n        var customizeFunction;\r\n        if (\"winloss\" === options.type || \"bar\" === options.type) {\r\n            customizeFunction = createBarCustomizeFunction(drawnPointIndexes, options, that._winlossDataSource)\r\n        } else {\r\n            customizeFunction = createLineCustomizeFunction(drawnPointIndexes, options)\r\n        }\r\n        return customizeFunction\r\n    },\r\n    _getExtremumPointsIndexes: function(data) {\r\n        var that = this;\r\n        var options = that._allOptions;\r\n        var lastIndex = data.length - 1;\r\n        var indexes = {};\r\n        that._minMaxIndexes = findMinMax(data, options.valueField);\r\n        if (options.showFirstLast) {\r\n            indexes.first = 0;\r\n            indexes.last = lastIndex\r\n        }\r\n        if (options.showMinMax) {\r\n            indexes.min = that._minMaxIndexes.minIndexes;\r\n            indexes.max = that._minMaxIndexes.maxIndexes\r\n        }\r\n        return indexes\r\n    },\r\n    _getStick: function() {\r\n        return {\r\n            stick: \"bar\" !== this._series.type\r\n        }\r\n    },\r\n    _updateRange: function() {\r\n        var that = this;\r\n        var series = that._series;\r\n        var type = series.type;\r\n        var isBarType = \"bar\" === type;\r\n        var isWinlossType = \"winloss\" === type;\r\n        var DEFAULT_VALUE_RANGE_MARGIN = .15;\r\n        var DEFAULT_ARGUMENT_RANGE_MARGIN = .1;\r\n        var WINLOSS_MAX_RANGE = 1;\r\n        var WINLOSS_MIN_RANGE = -1;\r\n        var rangeData = series.getRangeData();\r\n        var minValue = that._allOptions.minValue;\r\n        var hasMinY = (0, _type.isDefined)(minValue) && _isFinite(minValue);\r\n        var maxValue = that._allOptions.maxValue;\r\n        var hasMaxY = (0, _type.isDefined)(maxValue) && _isFinite(maxValue);\r\n        var argCoef;\r\n        var valCoef = (rangeData.val.max - rangeData.val.min) * DEFAULT_VALUE_RANGE_MARGIN;\r\n        if (isBarType || isWinlossType || \"area\" === type) {\r\n            if (0 !== rangeData.val.min) {\r\n                rangeData.val.min -= valCoef\r\n            }\r\n            if (0 !== rangeData.val.max) {\r\n                rangeData.val.max += valCoef\r\n            }\r\n        } else {\r\n            rangeData.val.min -= valCoef;\r\n            rangeData.val.max += valCoef\r\n        }\r\n        if (hasMinY || hasMaxY) {\r\n            if (hasMinY && hasMaxY) {\r\n                rangeData.val.minVisible = _min(minValue, maxValue);\r\n                rangeData.val.maxVisible = _max(minValue, maxValue)\r\n            } else {\r\n                rangeData.val.minVisible = hasMinY ? _Number(minValue) : void 0;\r\n                rangeData.val.maxVisible = hasMaxY ? _Number(maxValue) : void 0\r\n            }\r\n            if (isWinlossType) {\r\n                rangeData.val.minVisible = hasMinY ? _max(rangeData.val.minVisible, WINLOSS_MIN_RANGE) : void 0;\r\n                rangeData.val.maxVisible = hasMaxY ? _min(rangeData.val.maxVisible, WINLOSS_MAX_RANGE) : void 0\r\n            }\r\n        }\r\n        if (series.getPoints().length > 1) {\r\n            if (isBarType) {\r\n                argCoef = (rangeData.arg.max - rangeData.arg.min) * DEFAULT_ARGUMENT_RANGE_MARGIN;\r\n                rangeData.arg.min = rangeData.arg.min - argCoef;\r\n                rangeData.arg.max = rangeData.arg.max + argCoef\r\n            }\r\n        }\r\n        rangeData.arg.categories = that._groupsDataCategories;\r\n        that._ranges = rangeData\r\n    },\r\n    _getBarWidth: function(pointsCount) {\r\n        var that = this;\r\n        var canvas = that._canvas;\r\n        var intervalWidth = pointsCount * DEFAULT_BAR_INTERVAL;\r\n        var rangeWidth = canvas.width - canvas.left - canvas.right - intervalWidth;\r\n        var width = _round(rangeWidth / pointsCount);\r\n        if (width < MIN_BAR_WIDTH) {\r\n            width = MIN_BAR_WIDTH\r\n        }\r\n        if (width > MAX_BAR_WIDTH) {\r\n            width = MAX_BAR_WIDTH\r\n        }\r\n        return width\r\n    },\r\n    _correctPoints: function() {\r\n        var that = this;\r\n        var seriesType = that._allOptions.type;\r\n        var seriesPoints = that._series.getPoints();\r\n        var pointsLength = seriesPoints.length;\r\n        var barWidth;\r\n        var i;\r\n        if (\"bar\" === seriesType || \"winloss\" === seriesType) {\r\n            barWidth = that._getBarWidth(pointsLength);\r\n            for (i = 0; i < pointsLength; i++) {\r\n                seriesPoints[i].correctCoordinates({\r\n                    width: barWidth,\r\n                    offset: 0\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _drawSeries: function() {\r\n        var that = this;\r\n        if (that._simpleDataSource.length > 0) {\r\n            that._correctPoints();\r\n            that._series.draw();\r\n            that._seriesGroup.append(that._renderer.root)\r\n        }\r\n    },\r\n    _isTooltipEnabled: function() {\r\n        return !!this._simpleDataSource.length\r\n    },\r\n    _getTooltipData: function() {\r\n        var that = this;\r\n        var options = that._allOptions;\r\n        var dataSource = that._winlossDataSource || that._simpleDataSource;\r\n        var tooltip = that._tooltip;\r\n        if (0 === dataSource.length) {\r\n            return {}\r\n        }\r\n        var minMax = that._minMaxIndexes;\r\n        var valueField = options.valueField;\r\n        var first = dataSource[0][valueField];\r\n        var last = dataSource[dataSource.length - 1][valueField];\r\n        var min = (0, _type.isDefined)(minMax.minIndexes[0]) ? dataSource[minMax.minIndexes[0]][valueField] : first;\r\n        var max = (0, _type.isDefined)(minMax.maxIndexes[0]) ? dataSource[minMax.maxIndexes[0]][valueField] : first;\r\n        var formattedFirst = tooltip.formatValue(first);\r\n        var formattedLast = tooltip.formatValue(last);\r\n        var formattedMin = tooltip.formatValue(min);\r\n        var formattedMax = tooltip.formatValue(max);\r\n        var customizeObject = {\r\n            firstValue: formattedFirst,\r\n            lastValue: formattedLast,\r\n            minValue: formattedMin,\r\n            maxValue: formattedMax,\r\n            originalFirstValue: first,\r\n            originalLastValue: last,\r\n            originalMinValue: min,\r\n            originalMaxValue: max,\r\n            valueText: [\"Start:\", formattedFirst, \"End:\", formattedLast, \"Min:\", formattedMin, \"Max:\", formattedMax]\r\n        };\r\n        if (\"winloss\" === options.type) {\r\n            customizeObject.originalThresholdValue = options.winlossThreshold;\r\n            customizeObject.thresholdValue = tooltip.formatValue(options.winlossThreshold)\r\n        }\r\n        return customizeObject\r\n    }\r\n});\r\n(0, _utils.map)([\"lineColor\", \"lineWidth\", \"areaOpacity\", \"minColor\", \"maxColor\", \"barPositiveColor\", \"barNegativeColor\", \"winColor\", \"lessColor\", \"firstLastColor\", \"pointSymbol\", \"pointColor\", \"pointSize\", \"type\", \"argumentField\", \"valueField\", \"winlossThreshold\", \"showFirstLast\", \"showMinMax\", \"ignoreEmptyPoints\", \"minValue\", \"maxValue\"], function(name) {\r\n    dxSparkline.prototype._optionChangesMap[name] = \"OPTIONS\"\r\n});\r\n(0, _component_registrator.default)(\"dxSparkline\", dxSparkline);\r\nvar _default = dxSparkline;\r\nexports.default = _default;\r\ndxSparkline.addPlugin(_data_source.plugin);\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}