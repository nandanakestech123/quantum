{"ast":null,"code":"/**\r\n * DevExtreme (ui/color_box/color_view.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _color = _interopRequireDefault(require(\"../../color\"));\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\n\nvar _component_registrator = _interopRequireDefault(require(\"../../core/component_registrator\"));\n\nvar _editor = _interopRequireDefault(require(\"../editor/editor\"));\n\nvar _number_box = _interopRequireDefault(require(\"../number_box\"));\n\nvar _text_box = _interopRequireDefault(require(\"../text_box\"));\n\nvar _draggable = _interopRequireDefault(require(\"../draggable\"));\n\nvar _click = require(\"../../events/click\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\n\nvar ColorView = _editor.default.inherit({\n  _supportedKeys: function () {\n    var isRTL = this.option(\"rtlEnabled\");\n    var that = this;\n\n    var getHorizontalPaletteStep = function (e) {\n      var step = 100 / that._paletteWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateHorizontalPaletteValue = function (step) {\n      var value = that._currentColor.hsv.s + step;\n\n      if (value > 100) {\n        value = 100;\n      } else {\n        if (value < 0) {\n          value = 0;\n        }\n      }\n\n      that._currentColor.hsv.s = value;\n      updatePaletteValue();\n    };\n\n    var getVerticalPaletteStep = function (e) {\n      var step = 100 / that._paletteHeight;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateVerticalPaletteValue = function (step) {\n      var value = that._currentColor.hsv.v + step;\n\n      if (value > 100) {\n        value = 100;\n      } else {\n        if (value < 0) {\n          value = 0;\n        }\n      }\n\n      that._currentColor.hsv.v = value;\n      updatePaletteValue();\n    };\n\n    function updatePaletteValue() {\n      that._placePaletteHandle();\n\n      that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v);\n    }\n\n    var getHueScaleStep = function (e) {\n      var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return step;\n    };\n\n    var updateHueScaleValue = function (step) {\n      that._currentColor.hsv.h += step;\n\n      that._placeHueScaleHandle();\n\n      var handleLocation = (0, _translator.locate)(that._$hueScaleHandle);\n\n      that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2);\n    };\n\n    var getAlphaScaleStep = function (e) {\n      var step = 1 / that._alphaChannelScaleWorkWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > .01 ? step : .01;\n      step = isRTL ? -step : step;\n      return step;\n    };\n\n    var updateAlphaScaleValue = function (step) {\n      that._currentColor.a += step;\n\n      that._placeAlphaChannelHandle();\n\n      var handleLocation = (0, _translator.locate)(that._$alphaChannelHandle);\n\n      that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2);\n    };\n\n    return (0, _extend.extend)(this.callBase(), {\n      upArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\n            updateHueScaleValue(getHueScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.v < 100) {\n            updateVerticalPaletteValue(getVerticalPaletteStep(e));\n          }\n        }\n      },\n      downArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (this._currentColor.hsv.h >= 0) {\n            if (this._isTopColorHue) {\n              this._currentColor.hsv.h = 360;\n            }\n\n            updateHueScaleValue(-getHueScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.v > 0) {\n            updateVerticalPaletteValue(-getVerticalPaletteStep(e));\n          }\n        }\n      },\n      rightArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\n            updateAlphaScaleValue(-getAlphaScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.s < 100) {\n            updateHorizontalPaletteValue(getHorizontalPaletteStep(e));\n          }\n        }\n      },\n      leftArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\n            updateAlphaScaleValue(getAlphaScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.s > 0) {\n            updateHorizontalPaletteValue(-getHorizontalPaletteStep(e));\n          }\n        }\n      },\n      enter: function (e) {\n        this._fireEnterKeyPressed(e);\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      value: null,\n      matchValue: null,\n      onEnterKeyPressed: void 0,\n      editAlphaChannel: false,\n      keyStep: 1,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === _devices.default.real().deviceType && !_devices.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initColorAndOpacity();\n\n    this._initEnterKeyPressedAction();\n  },\n  _initEnterKeyPressedAction: function () {\n    this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\");\n  },\n  _fireEnterKeyPressed: function (e) {\n    if (!this._onEnterKeyPressedAction) {\n      return;\n    }\n\n    this._onEnterKeyPressedAction({\n      event: e\n    });\n  },\n  _initColorAndOpacity: function () {\n    this._setCurrentColor(this.option(\"value\"));\n  },\n  _setCurrentColor: function (value) {\n    value = value || \"#000000\";\n    var newColor = new _color.default(value);\n\n    if (!newColor.colorIsInvalid) {\n      if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\n        this._currentColor = newColor;\n\n        if (this._$currentColor) {\n          this._makeTransparentBackground(this._$currentColor, newColor);\n        }\n      }\n    } else {\n      this.option(\"value\", this._currentColor.baseColor);\n    }\n  },\n  _setBaseColor: function (value) {\n    var color = value || \"#000000\";\n    var newColor = new _color.default(color);\n\n    if (!newColor.colorIsInvalid) {\n      var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\n\n      if (isBaseColorChanged) {\n        if (this._$baseColor) {\n          this._makeTransparentBackground(this._$baseColor, newColor);\n        }\n      }\n    }\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(COLOR_VIEW_CLASS);\n\n    this._renderColorPickerContainer();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderPalette();\n\n    this._renderHueScale();\n\n    this._renderControlsContainer();\n\n    this._renderControls();\n\n    this._renderAlphaChannelElements();\n  },\n  _makeTransparentBackground: function ($el, color) {\n    if (!(color instanceof _color.default)) {\n      color = new _color.default(color);\n    }\n\n    $el.css(\"backgroundColor\", this._makeRgba(color));\n  },\n  _makeRgba: function (color) {\n    if (!(color instanceof _color.default)) {\n      color = new _color.default(color);\n    }\n\n    return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\";\n  },\n  _renderValue: function () {\n    this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"));\n  },\n  _renderColorPickerContainer: function () {\n    var $parent = this.$element();\n    this._$colorPickerContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\n\n    this._renderHtmlRows();\n  },\n  _renderHtmlRows: function (updatedOption) {\n    var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\n\n    var renderedRowsCount = $renderedRows.length;\n    var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\n    var delta = renderedRowsCount - rowCount;\n\n    if (delta > 0) {\n      $renderedRows.eq(-1).remove();\n    }\n\n    if (delta < 0) {\n      delta = Math.abs(delta);\n      var rows = [];\n      var i;\n\n      for (i = 0; i < delta; i++) {\n        rows.push((0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS));\n      }\n\n      if (renderedRowsCount) {\n        for (i = 0; i < rows.length; i++) {\n          $renderedRows.eq(0).after(rows[i]);\n        }\n      } else {\n        this._$colorPickerContainer.append(rows);\n      }\n    }\n  },\n  _renderHtmlCellInsideRow: function (index, $rowParent, additionalClass) {\n    return (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index));\n  },\n  _renderPalette: function () {\n    var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\n\n    var $paletteGradientWhite = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\n    var $paletteGradientBlack = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\n    this._$palette = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\n    this._paletteHeight = this._$palette.height();\n    this._paletteWidth = this._$palette.width();\n\n    this._renderPaletteHandle();\n\n    this._$palette.append([$paletteGradientWhite, $paletteGradientBlack]);\n  },\n  _renderPaletteHandle: function () {\n    this._$paletteHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\n\n    this._createComponent(this._$paletteHandle, _draggable.default, {\n      contentTemplate: null,\n      boundary: this._$palette,\n      allowMoveByClick: true,\n      boundOffset: function () {\n        return -this._paletteHandleHeight / 2;\n      }.bind(this),\n      onDragMove: function () {\n        var paletteHandlePosition = (0, _translator.locate)(this._$paletteHandle);\n        this._updateByDrag = true;\n\n        this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition));\n      }.bind(this)\n    });\n\n    this._paletteHandleWidth = this._$paletteHandle.width();\n    this._paletteHandleHeight = this._$paletteHandle.height();\n\n    this._placePaletteHandle();\n  },\n  _placePaletteHandle: function () {\n    (0, _translator.move)(this._$paletteHandle, {\n      left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\n      top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\n    });\n  },\n  _calculateColorValue: function (paletteHandlePosition) {\n    var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\n    return 100 - Math.round(100 * value / this._paletteHeight);\n  },\n  _calculateColorSaturation: function (paletteHandlePosition) {\n    var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\n    return Math.round(100 * saturation / this._paletteWidth);\n  },\n  _updateColorFromHsv: function (hue, saturation, value) {\n    var a = this._currentColor.a;\n    this._currentColor = new _color.default(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\n    this._currentColor.a = a;\n\n    this._updateColorParamsAndColorPreview();\n\n    this.applyColor();\n  },\n  _renderHueScale: function () {\n    var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\n\n    this._$hueScaleWrapper = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\n    this._$hueScale = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\n    this._hueScaleHeight = this._$hueScale.height();\n    this._hueScaleWrapperHeight = this._$hueScaleWrapper.outerHeight();\n\n    this._renderHueScaleHandle();\n  },\n  _renderHueScaleHandle: function () {\n    this._$hueScaleHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\n\n    this._createComponent(this._$hueScaleHandle, _draggable.default, {\n      contentTemplate: null,\n      boundary: this._$hueScaleWrapper,\n      allowMoveByClick: true,\n      dragDirection: \"vertical\",\n      onDragMove: function () {\n        this._updateByDrag = true;\n\n        this._updateColorHue((0, _translator.locate)(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2);\n      }.bind(this)\n    });\n\n    this._hueScaleHandleHeight = this._$hueScaleHandle.height();\n\n    this._placeHueScaleHandle();\n  },\n  _placeHueScaleHandle: function () {\n    var hueScaleHeight = this._hueScaleWrapperHeight;\n    var handleHeight = this._hueScaleHandleHeight;\n    var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\n\n    if (hueScaleHeight < top + handleHeight) {\n      top = hueScaleHeight - handleHeight;\n    }\n\n    if (top < 0) {\n      top = 0;\n    }\n\n    (0, _translator.move)(this._$hueScaleHandle, {\n      top: Math.round(top)\n    });\n  },\n  _updateColorHue: function (handlePosition) {\n    var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\n    var saturation = this._currentColor.hsv.s;\n    var value = this._currentColor.hsv.v;\n    this._isTopColorHue = false;\n    hue = hue < 0 ? 0 : hue;\n\n    if (hue >= 360) {\n      this._isTopColorHue = true;\n      hue = 0;\n    }\n\n    this._updateColorFromHsv(hue, saturation, value);\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n  },\n  _renderControlsContainer: function () {\n    var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\n\n    this._$controlsContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell);\n  },\n  _renderControls: function () {\n    this._renderColorsPreview();\n\n    this._renderRgbInputs();\n\n    this._renderHexInput();\n  },\n  _renderColorsPreview: function () {\n    var $colorsPreviewContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\n    var $colorsPreviewContainerInner = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\n    this._$currentColor = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\n    this._$baseColor = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\n\n    this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor]);\n  },\n  _renderAlphaChannelElements: function () {\n    if (this.option(\"editAlphaChannel\")) {\n      this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\n\n      this._renderAlphaChannelScale();\n\n      this._renderAlphaChannelInput();\n    }\n  },\n  _renderRgbInputs: function () {\n    this._rgbInputsWithLabels = [this._renderEditorWithLabel({\n      editorType: _number_box.default,\n      value: this._currentColor.r,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"R\",\n      labelAriaText: _message.default.format(\"dxColorView-ariaRed\"),\n      labelClass: COLOR_VIEW_RED_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: _number_box.default,\n      value: this._currentColor.g,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"G\",\n      labelAriaText: _message.default.format(\"dxColorView-ariaGreen\"),\n      labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: _number_box.default,\n      value: this._currentColor.b,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"B\",\n      labelAriaText: _message.default.format(\"dxColorView-ariaBlue\"),\n      labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\n    })];\n\n    this._$controlsContainer.append(this._rgbInputsWithLabels);\n\n    this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")];\n  },\n  _renderEditorWithLabel: function (options) {\n    var _this = this;\n\n    var $editor = (0, _renderer.default)(\"<div>\");\n    var $label = (0, _renderer.default)(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\n\n    _events_engine.default.off($label, _click.name);\n\n    _events_engine.default.on($label, _click.name, function (e) {\n      e.preventDefault();\n    });\n\n    var editorType = options.editorType;\n    var editorOptions = (0, _extend.extend)({\n      value: options.value,\n      onValueChanged: options.onValueChanged,\n      onKeyboardHandled: function (opts) {\n        return _this._keyboardHandler(opts);\n      }\n    }, {\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    if (editorType === _number_box.default) {\n      editorOptions.min = options.min || 0;\n      editorOptions.max = options.max || 255;\n      editorOptions.step = options.step || 1;\n    }\n\n    var editor = new editorType($editor, editorOptions);\n    editor.registerKeyHandler(\"enter\", function (e) {\n      this._fireEnterKeyPressed(e);\n    }.bind(this));\n    this.setAria(\"label\", options.labelAriaText, $editor);\n    return $label;\n  },\n  hexInputOptions: function () {\n    return {\n      editorType: _text_box.default,\n      value: this._currentColor.toHex().replace(\"#\", \"\"),\n      onValueChanged: this._updateColor.bind(this, true),\n      labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\n      labelText: \"#\",\n      labelAriaText: _message.default.format(\"dxColorView-ariaHex\")\n    };\n  },\n  _renderHexInput: function () {\n    this._hexInput = _text_box.default.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"));\n  },\n  _renderAlphaChannelScale: function () {\n    var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\n\n    var $alphaChannelBorder = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\n    var $alphaChannelScaleWrapper = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\n    this._$alphaChannelScale = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\n\n    this._makeCSSLinearGradient(this._$alphaChannelScale);\n\n    this._renderAlphaChannelHandle($alphaChannelScaleCell);\n  },\n  _makeCSSLinearGradient: function ($el) {\n    var color = this._currentColor;\n    var colorAsRgb = [color.r, color.g, color.b].join(\",\");\n    var colorAsHex = color.toHex().replace(\"#\", \"\");\n\n    var combineGradientString = function (colorAsRgb, colorAsHex) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\n      var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\n      var startColorIE = \"'#\" + (rtlEnabled ? \"00\" : \"\") + colorAsHex + \"'\";\n      var finishColorIE = \"'#\" + (rtlEnabled ? \"\" : \"00\") + colorAsHex + \"'\";\n      return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=\" + startColorIE + \", endColorstr=\" + finishColorIE + \")\"].join(\";\");\n    };\n\n    $el.attr(\"style\", combineGradientString.call(this, colorAsRgb, colorAsHex));\n  },\n  _renderAlphaChannelInput: function () {\n    var that = this;\n\n    var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\n\n    that._alphaChannelInput = this._renderEditorWithLabel({\n      editorType: _number_box.default,\n      value: this._currentColor.a,\n      max: 1,\n      step: .1,\n      onValueChanged: function (e) {\n        var value = e.value;\n        value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\n\n        that._updateColorTransparency(value);\n\n        that._placeAlphaChannelHandle();\n      },\n      labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\n      labelText: \"Alpha\",\n      labelAriaText: _message.default.format(\"dxColorView-ariaAlpha\")\n    }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\");\n  },\n  _updateColorTransparency: function (transparency) {\n    this._currentColor.a = transparency;\n    this.applyColor();\n  },\n  _renderAlphaChannelHandle: function ($parent) {\n    this._$alphaChannelHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\n\n    this._createComponent(this._$alphaChannelHandle, _draggable.default, {\n      contentTemplate: null,\n      boundary: $parent,\n      allowMoveByClick: true,\n      dragDirection: \"horizontal\",\n      onDragMove: function () {\n        this._updateByDrag = true;\n        var $alphaChannelHandle = this._$alphaChannelHandle;\n        var alphaChannelHandlePosition = (0, _translator.locate)($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\n\n        this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition);\n      }.bind(this)\n    });\n\n    this._alphaChannelHandleWidth = this._$alphaChannelHandle.width();\n    this._alphaChannelScaleWorkWidth = $parent.width() - this._alphaChannelHandleWidth;\n\n    this._placeAlphaChannelHandle();\n  },\n  _calculateColorTransparencyByScaleWidth: function (handlePosition) {\n    var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    transparency = rtlEnabled ? transparency : 1 - transparency;\n\n    if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\n      transparency = rtlEnabled ? 1 : 0;\n    } else {\n      if (transparency < 1) {\n        transparency = transparency.toFixed(2);\n      }\n    }\n\n    transparency = Math.max(transparency, 0);\n    transparency = Math.min(transparency, 1);\n\n    this._alphaChannelInput.option(\"value\", transparency);\n  },\n  _placeAlphaChannelHandle: function () {\n    var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\n\n    if (left < 0) {\n      left = 0;\n    }\n\n    if (this._alphaChannelScaleWorkWidth < left) {\n      left = this._alphaChannelScaleWorkWidth;\n    }\n\n    (0, _translator.move)(this._$alphaChannelHandle, {\n      left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\n    });\n  },\n  applyColor: function () {\n    var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    this.option(\"value\", colorValue);\n  },\n  cancelColor: function () {\n    this._initColorAndOpacity();\n\n    this._refreshMarkup();\n  },\n  _updateColor: function (isHex, e) {\n    var rgba;\n    var newColor;\n\n    if (isHex) {\n      newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"));\n    } else {\n      rgba = this._validateRgb();\n\n      if (this._alphaChannelInput) {\n        rgba.push(this._alphaChannelInput.option(\"value\"));\n        newColor = \"rgba(\" + rgba.join(\", \") + \")\";\n      } else {\n        newColor = \"rgb(\" + rgba.join(\", \") + \")\";\n      }\n    }\n\n    if (!this._suppressEditorsValueUpdating) {\n      this._currentColor = new _color.default(newColor);\n      this.applyColor();\n\n      this._refreshMarkup();\n    }\n  },\n  _validateHex: function (hex) {\n    return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex();\n  },\n  _validateRgb: function () {\n    var r = this._rgbInputs[0].option(\"value\");\n\n    var g = this._rgbInputs[1].option(\"value\");\n\n    var b = this._rgbInputs[2].option(\"value\");\n\n    if (!this._currentColor.isValidRGB(r, g, b)) {\n      r = this._currentColor.r;\n      g = this._currentColor.g;\n      b = this._currentColor.b;\n    }\n\n    return [r, g, b];\n  },\n  _refreshMarkup: function () {\n    this._placeHueScaleHandle();\n\n    this._placePaletteHandle();\n\n    this._updateColorParamsAndColorPreview();\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n\n    if (this._$alphaChannelHandle) {\n      this._updateColorTransparency(this._currentColor.a);\n\n      this._placeAlphaChannelHandle();\n    }\n  },\n  _updateColorParamsAndColorPreview: function () {\n    this._suppressEditorsValueUpdating = true;\n\n    this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\n\n    this._rgbInputs[0].option(\"value\", this._currentColor.r);\n\n    this._rgbInputs[1].option(\"value\", this._currentColor.g);\n\n    this._rgbInputs[2].option(\"value\", this._currentColor.b);\n\n    this._suppressEditorsValueUpdating = false;\n\n    if (this.option(\"editAlphaChannel\")) {\n      this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\n\n      this._alphaChannelInput.option(\"value\", this._currentColor.a);\n    }\n  },\n  _optionChanged: function (args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"value\":\n        this._setCurrentColor(value);\n\n        if (!this._updateByDrag) {\n          this._refreshMarkup();\n        }\n\n        this._updateByDrag = false;\n        this.callBase(args);\n        break;\n\n      case \"matchValue\":\n        this._setBaseColor(value);\n\n        break;\n\n      case \"onEnterKeyPressed\":\n        this._initEnterKeyPressedAction();\n\n        break;\n\n      case \"editAlphaChannel\":\n        if (this._$colorPickerContainer) {\n          this._renderHtmlRows(\"editAlphaChannel\");\n\n          this._renderAlphaChannelElements();\n        }\n\n        break;\n\n      case \"keyStep\":\n        break;\n\n      case \"stylingMode\":\n        this._renderControls();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\n(0, _component_registrator.default)(\"dxColorView\", ColorView);\nvar _default = ColorView;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/newfrontend/webfe/node_modules/devextreme/ui/color_box/color_view.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_events_engine","_translator","_extend","_color","_message","_devices","_component_registrator","_editor","_number_box","_text_box","_draggable","_click","obj","__esModule","COLOR_VIEW_CLASS","COLOR_VIEW_CONTAINER_CLASS","COLOR_VIEW_ROW_CLASS","COLOR_VIEW_CELL_CLASS","COLOR_VIEW_PALETTE_CLASS","COLOR_VIEW_PALETTE_CELL_CLASS","COLOR_VIEW_PALETTE_HANDLE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_CLASS","COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS","COLOR_VIEW_HUE_SCALE_CLASS","COLOR_VIEW_HUE_SCALE_CELL_CLASS","COLOR_VIEW_HUE_SCALE_HANDLE_CLASS","COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS","COLOR_VIEW_CONTROLS_CONTAINER_CLASS","COLOR_VIEW_RED_LABEL_CLASS","COLOR_VIEW_GREEN_LABEL_CLASS","COLOR_VIEW_BLUE_LABEL_CLASS","COLOR_VIEW_HEX_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS","COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS","COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS","COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS","COLOR_VIEW_COLOR_PREVIEW","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS","COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT","COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW","ColorView","inherit","_supportedKeys","isRTL","option","that","getHorizontalPaletteStep","e","step","_paletteWidth","shiftKey","Math","round","updateHorizontalPaletteValue","value","_currentColor","hsv","s","updatePaletteValue","getVerticalPaletteStep","_paletteHeight","updateVerticalPaletteValue","v","_placePaletteHandle","_updateColorFromHsv","h","getHueScaleStep","_hueScaleWrapperHeight","_hueScaleHandleHeight","updateHueScaleValue","_placeHueScaleHandle","handleLocation","locate","_$hueScaleHandle","_updateColorHue","top","getAlphaScaleStep","_alphaChannelScaleWorkWidth","updateAlphaScaleValue","a","_placeAlphaChannelHandle","_$alphaChannelHandle","_calculateColorTransparencyByScaleWidth","left","_alphaChannelHandleWidth","extend","callBase","upArrow","preventDefault","stopPropagation","ctrlKey","_isTopColorHue","downArrow","rightArrow","leftArrow","enter","_fireEnterKeyPressed","_getDefaultOptions","matchValue","onEnterKeyPressed","editAlphaChannel","keyStep","stylingMode","_defaultOptionsRules","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","_init","_initColorAndOpacity","_initEnterKeyPressedAction","_onEnterKeyPressedAction","_createActionByOption","event","_setCurrentColor","newColor","colorIsInvalid","_makeRgba","_$currentColor","_makeTransparentBackground","baseColor","_setBaseColor","color","isBaseColorChanged","_$baseColor","_initMarkup","$element","addClass","_renderColorPickerContainer","_render","_renderPalette","_renderHueScale","_renderControlsContainer","_renderControls","_renderAlphaChannelElements","$el","css","r","g","b","join","_renderValue","$parent","_$colorPickerContainer","appendTo","_renderHtmlRows","updatedOption","$renderedRows","find","renderedRowsCount","length","rowCount","delta","eq","remove","abs","rows","i","push","after","append","_renderHtmlCellInsideRow","index","$rowParent","additionalClass","$paletteCell","$paletteGradientWhite","$paletteGradientBlack","_$palette","getPureColor","toHex","height","width","_renderPaletteHandle","_$paletteHandle","_createComponent","contentTemplate","boundary","allowMoveByClick","boundOffset","_paletteHandleHeight","bind","onDragMove","paletteHandlePosition","_updateByDrag","_calculateColorSaturation","_calculateColorValue","_paletteHandleWidth","move","floor","saturation","hue","_updateColorParamsAndColorPreview","applyColor","$hueScaleCell","_$hueScaleWrapper","_$hueScale","_hueScaleHeight","outerHeight","_renderHueScaleHandle","dragDirection","hueScaleHeight","handleHeight","handlePosition","$controlsContainerCell","_$controlsContainer","_renderColorsPreview","_renderRgbInputs","_renderHexInput","$colorsPreviewContainer","$colorsPreviewContainerInner","_renderAlphaChannelScale","_renderAlphaChannelInput","_rgbInputsWithLabels","_renderEditorWithLabel","editorType","onValueChanged","_updateColor","labelText","labelAriaText","format","labelClass","_rgbInputs","dxNumberBox","_this","$editor","$label","text","off","name","on","editorOptions","onKeyboardHandled","opts","_keyboardHandler","min","max","editor","registerKeyHandler","setAria","hexInputOptions","replace","_hexInput","getInstance","$alphaChannelScaleCell","$alphaChannelBorder","$alphaChannelScaleWrapper","_$alphaChannelScale","_makeCSSLinearGradient","_renderAlphaChannelHandle","colorAsRgb","colorAsHex","combineGradientString","rtlEnabled","startColor","finishColor","startColorIE","finishColorIE","attr","call","$alphaChannelInputCell","_alphaChannelInput","isValidAlpha","_updateColorTransparency","transparency","$alphaChannelHandle","alphaChannelHandlePosition","toFixed","colorValue","cancelColor","_refreshMarkup","isHex","rgba","_validateHex","_validateRgb","_suppressEditorsValueUpdating","hex","isValidHex","isValidRGB","_optionChanged","args","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/color_box/color_view.js)\r\n * Version: 20.2.5\r\n * Build date: Fri Jan 15 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _translator = require(\"../../animation/translator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _color = _interopRequireDefault(require(\"../../color\"));\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\r\nvar _component_registrator = _interopRequireDefault(require(\"../../core/component_registrator\"));\r\nvar _editor = _interopRequireDefault(require(\"../editor/editor\"));\r\nvar _number_box = _interopRequireDefault(require(\"../number_box\"));\r\nvar _text_box = _interopRequireDefault(require(\"../text_box\"));\r\nvar _draggable = _interopRequireDefault(require(\"../draggable\"));\r\nvar _click = require(\"../../events/click\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\r\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\r\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\r\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\r\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\r\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\r\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\r\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\r\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\r\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\r\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\r\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\r\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\r\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\r\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\r\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\r\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\r\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\r\nvar ColorView = _editor.default.inherit({\r\n    _supportedKeys: function() {\r\n        var isRTL = this.option(\"rtlEnabled\");\r\n        var that = this;\r\n        var getHorizontalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateHorizontalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.s + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else {\r\n                if (value < 0) {\r\n                    value = 0\r\n                }\r\n            }\r\n            that._currentColor.hsv.s = value;\r\n            updatePaletteValue()\r\n        };\r\n        var getVerticalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteHeight;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateVerticalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.v + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else {\r\n                if (value < 0) {\r\n                    value = 0\r\n                }\r\n            }\r\n            that._currentColor.hsv.v = value;\r\n            updatePaletteValue()\r\n        };\r\n\r\n        function updatePaletteValue() {\r\n            that._placePaletteHandle();\r\n            that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v)\r\n        }\r\n        var getHueScaleStep = function(e) {\r\n            var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return step\r\n        };\r\n        var updateHueScaleValue = function(step) {\r\n            that._currentColor.hsv.h += step;\r\n            that._placeHueScaleHandle();\r\n            var handleLocation = (0, _translator.locate)(that._$hueScaleHandle);\r\n            that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2)\r\n        };\r\n        var getAlphaScaleStep = function(e) {\r\n            var step = 1 / that._alphaChannelScaleWorkWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > .01 ? step : .01;\r\n            step = isRTL ? -step : step;\r\n            return step\r\n        };\r\n        var updateAlphaScaleValue = function(step) {\r\n            that._currentColor.a += step;\r\n            that._placeAlphaChannelHandle();\r\n            var handleLocation = (0, _translator.locate)(that._$alphaChannelHandle);\r\n            that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2)\r\n        };\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\r\n                        updateHueScaleValue(getHueScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.v < 100) {\r\n                        updateVerticalPaletteValue(getVerticalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (this._currentColor.hsv.h >= 0) {\r\n                        if (this._isTopColorHue) {\r\n                            this._currentColor.hsv.h = 360\r\n                        }\r\n                        updateHueScaleValue(-getHueScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.v > 0) {\r\n                        updateVerticalPaletteValue(-getVerticalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            rightArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\r\n                        updateAlphaScaleValue(-getAlphaScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.s < 100) {\r\n                        updateHorizontalPaletteValue(getHorizontalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            leftArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\r\n                        updateAlphaScaleValue(getAlphaScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.s > 0) {\r\n                        updateHorizontalPaletteValue(-getHorizontalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            enter: function(e) {\r\n                this._fireEnterKeyPressed(e)\r\n            }\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            value: null,\r\n            matchValue: null,\r\n            onEnterKeyPressed: void 0,\r\n            editAlphaChannel: false,\r\n            keyStep: 1,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return \"desktop\" === _devices.default.real().deviceType && !_devices.default.isSimulator()\r\n            },\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initColorAndOpacity();\r\n        this._initEnterKeyPressedAction()\r\n    },\r\n    _initEnterKeyPressedAction: function() {\r\n        this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\")\r\n    },\r\n    _fireEnterKeyPressed: function(e) {\r\n        if (!this._onEnterKeyPressedAction) {\r\n            return\r\n        }\r\n        this._onEnterKeyPressedAction({\r\n            event: e\r\n        })\r\n    },\r\n    _initColorAndOpacity: function() {\r\n        this._setCurrentColor(this.option(\"value\"))\r\n    },\r\n    _setCurrentColor: function(value) {\r\n        value = value || \"#000000\";\r\n        var newColor = new _color.default(value);\r\n        if (!newColor.colorIsInvalid) {\r\n            if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\r\n                this._currentColor = newColor;\r\n                if (this._$currentColor) {\r\n                    this._makeTransparentBackground(this._$currentColor, newColor)\r\n                }\r\n            }\r\n        } else {\r\n            this.option(\"value\", this._currentColor.baseColor)\r\n        }\r\n    },\r\n    _setBaseColor: function(value) {\r\n        var color = value || \"#000000\";\r\n        var newColor = new _color.default(color);\r\n        if (!newColor.colorIsInvalid) {\r\n            var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\r\n            if (isBaseColorChanged) {\r\n                if (this._$baseColor) {\r\n                    this._makeTransparentBackground(this._$baseColor, newColor)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        this.$element().addClass(COLOR_VIEW_CLASS);\r\n        this._renderColorPickerContainer()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderPalette();\r\n        this._renderHueScale();\r\n        this._renderControlsContainer();\r\n        this._renderControls();\r\n        this._renderAlphaChannelElements()\r\n    },\r\n    _makeTransparentBackground: function($el, color) {\r\n        if (!(color instanceof _color.default)) {\r\n            color = new _color.default(color)\r\n        }\r\n        $el.css(\"backgroundColor\", this._makeRgba(color))\r\n    },\r\n    _makeRgba: function(color) {\r\n        if (!(color instanceof _color.default)) {\r\n            color = new _color.default(color)\r\n        }\r\n        return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\"\r\n    },\r\n    _renderValue: function() {\r\n        this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"))\r\n    },\r\n    _renderColorPickerContainer: function() {\r\n        var $parent = this.$element();\r\n        this._$colorPickerContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\r\n        this._renderHtmlRows()\r\n    },\r\n    _renderHtmlRows: function(updatedOption) {\r\n        var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\r\n        var renderedRowsCount = $renderedRows.length;\r\n        var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\r\n        var delta = renderedRowsCount - rowCount;\r\n        if (delta > 0) {\r\n            $renderedRows.eq(-1).remove()\r\n        }\r\n        if (delta < 0) {\r\n            delta = Math.abs(delta);\r\n            var rows = [];\r\n            var i;\r\n            for (i = 0; i < delta; i++) {\r\n                rows.push((0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS))\r\n            }\r\n            if (renderedRowsCount) {\r\n                for (i = 0; i < rows.length; i++) {\r\n                    $renderedRows.eq(0).after(rows[i])\r\n                }\r\n            } else {\r\n                this._$colorPickerContainer.append(rows)\r\n            }\r\n        }\r\n    },\r\n    _renderHtmlCellInsideRow: function(index, $rowParent, additionalClass) {\r\n        return (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index))\r\n    },\r\n    _renderPalette: function() {\r\n        var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\r\n        var $paletteGradientWhite = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\r\n        var $paletteGradientBlack = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\r\n        this._$palette = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\r\n        this._paletteHeight = this._$palette.height();\r\n        this._paletteWidth = this._$palette.width();\r\n        this._renderPaletteHandle();\r\n        this._$palette.append([$paletteGradientWhite, $paletteGradientBlack])\r\n    },\r\n    _renderPaletteHandle: function() {\r\n        this._$paletteHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\r\n        this._createComponent(this._$paletteHandle, _draggable.default, {\r\n            contentTemplate: null,\r\n            boundary: this._$palette,\r\n            allowMoveByClick: true,\r\n            boundOffset: function() {\r\n                return -this._paletteHandleHeight / 2\r\n            }.bind(this),\r\n            onDragMove: function() {\r\n                var paletteHandlePosition = (0, _translator.locate)(this._$paletteHandle);\r\n                this._updateByDrag = true;\r\n                this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition))\r\n            }.bind(this)\r\n        });\r\n        this._paletteHandleWidth = this._$paletteHandle.width();\r\n        this._paletteHandleHeight = this._$paletteHandle.height();\r\n        this._placePaletteHandle()\r\n    },\r\n    _placePaletteHandle: function() {\r\n        (0, _translator.move)(this._$paletteHandle, {\r\n            left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\r\n            top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\r\n        })\r\n    },\r\n    _calculateColorValue: function(paletteHandlePosition) {\r\n        var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\r\n        return 100 - Math.round(100 * value / this._paletteHeight)\r\n    },\r\n    _calculateColorSaturation: function(paletteHandlePosition) {\r\n        var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\r\n        return Math.round(100 * saturation / this._paletteWidth)\r\n    },\r\n    _updateColorFromHsv: function(hue, saturation, value) {\r\n        var a = this._currentColor.a;\r\n        this._currentColor = new _color.default(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\r\n        this._currentColor.a = a;\r\n        this._updateColorParamsAndColorPreview();\r\n        this.applyColor()\r\n    },\r\n    _renderHueScale: function() {\r\n        var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\r\n        this._$hueScaleWrapper = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\r\n        this._$hueScale = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._hueScaleHeight = this._$hueScale.height();\r\n        this._hueScaleWrapperHeight = this._$hueScaleWrapper.outerHeight();\r\n        this._renderHueScaleHandle()\r\n    },\r\n    _renderHueScaleHandle: function() {\r\n        this._$hueScaleHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._createComponent(this._$hueScaleHandle, _draggable.default, {\r\n            contentTemplate: null,\r\n            boundary: this._$hueScaleWrapper,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"vertical\",\r\n            onDragMove: function() {\r\n                this._updateByDrag = true;\r\n                this._updateColorHue((0, _translator.locate)(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2)\r\n            }.bind(this)\r\n        });\r\n        this._hueScaleHandleHeight = this._$hueScaleHandle.height();\r\n        this._placeHueScaleHandle()\r\n    },\r\n    _placeHueScaleHandle: function() {\r\n        var hueScaleHeight = this._hueScaleWrapperHeight;\r\n        var handleHeight = this._hueScaleHandleHeight;\r\n        var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\r\n        if (hueScaleHeight < top + handleHeight) {\r\n            top = hueScaleHeight - handleHeight\r\n        }\r\n        if (top < 0) {\r\n            top = 0\r\n        }(0, _translator.move)(this._$hueScaleHandle, {\r\n            top: Math.round(top)\r\n        })\r\n    },\r\n    _updateColorHue: function(handlePosition) {\r\n        var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\r\n        var saturation = this._currentColor.hsv.s;\r\n        var value = this._currentColor.hsv.v;\r\n        this._isTopColorHue = false;\r\n        hue = hue < 0 ? 0 : hue;\r\n        if (hue >= 360) {\r\n            this._isTopColorHue = true;\r\n            hue = 0\r\n        }\r\n        this._updateColorFromHsv(hue, saturation, value);\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex())\r\n    },\r\n    _renderControlsContainer: function() {\r\n        var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\r\n        this._$controlsContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell)\r\n    },\r\n    _renderControls: function() {\r\n        this._renderColorsPreview();\r\n        this._renderRgbInputs();\r\n        this._renderHexInput()\r\n    },\r\n    _renderColorsPreview: function() {\r\n        var $colorsPreviewContainer = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\r\n        var $colorsPreviewContainerInner = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\r\n        this._$currentColor = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\r\n        this._$baseColor = (0, _renderer.default)(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\r\n        this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor])\r\n    },\r\n    _renderAlphaChannelElements: function() {\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\r\n            this._renderAlphaChannelScale();\r\n            this._renderAlphaChannelInput()\r\n        }\r\n    },\r\n    _renderRgbInputs: function() {\r\n        this._rgbInputsWithLabels = [this._renderEditorWithLabel({\r\n            editorType: _number_box.default,\r\n            value: this._currentColor.r,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"R\",\r\n            labelAriaText: _message.default.format(\"dxColorView-ariaRed\"),\r\n            labelClass: COLOR_VIEW_RED_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: _number_box.default,\r\n            value: this._currentColor.g,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"G\",\r\n            labelAriaText: _message.default.format(\"dxColorView-ariaGreen\"),\r\n            labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: _number_box.default,\r\n            value: this._currentColor.b,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"B\",\r\n            labelAriaText: _message.default.format(\"dxColorView-ariaBlue\"),\r\n            labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\r\n        })];\r\n        this._$controlsContainer.append(this._rgbInputsWithLabels);\r\n        this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")]\r\n    },\r\n    _renderEditorWithLabel: function(options) {\r\n        var _this = this;\r\n        var $editor = (0, _renderer.default)(\"<div>\");\r\n        var $label = (0, _renderer.default)(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\r\n        _events_engine.default.off($label, _click.name);\r\n        _events_engine.default.on($label, _click.name, function(e) {\r\n            e.preventDefault()\r\n        });\r\n        var editorType = options.editorType;\r\n        var editorOptions = (0, _extend.extend)({\r\n            value: options.value,\r\n            onValueChanged: options.onValueChanged,\r\n            onKeyboardHandled: function(opts) {\r\n                return _this._keyboardHandler(opts)\r\n            }\r\n        }, {\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        if (editorType === _number_box.default) {\r\n            editorOptions.min = options.min || 0;\r\n            editorOptions.max = options.max || 255;\r\n            editorOptions.step = options.step || 1\r\n        }\r\n        var editor = new editorType($editor, editorOptions);\r\n        editor.registerKeyHandler(\"enter\", function(e) {\r\n            this._fireEnterKeyPressed(e)\r\n        }.bind(this));\r\n        this.setAria(\"label\", options.labelAriaText, $editor);\r\n        return $label\r\n    },\r\n    hexInputOptions: function() {\r\n        return {\r\n            editorType: _text_box.default,\r\n            value: this._currentColor.toHex().replace(\"#\", \"\"),\r\n            onValueChanged: this._updateColor.bind(this, true),\r\n            labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\r\n            labelText: \"#\",\r\n            labelAriaText: _message.default.format(\"dxColorView-ariaHex\")\r\n        }\r\n    },\r\n    _renderHexInput: function() {\r\n        this._hexInput = _text_box.default.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"))\r\n    },\r\n    _renderAlphaChannelScale: function() {\r\n        var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\r\n        var $alphaChannelBorder = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\r\n        var $alphaChannelScaleWrapper = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\r\n        this._$alphaChannelScale = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\r\n        this._makeCSSLinearGradient(this._$alphaChannelScale);\r\n        this._renderAlphaChannelHandle($alphaChannelScaleCell)\r\n    },\r\n    _makeCSSLinearGradient: function($el) {\r\n        var color = this._currentColor;\r\n        var colorAsRgb = [color.r, color.g, color.b].join(\",\");\r\n        var colorAsHex = color.toHex().replace(\"#\", \"\");\r\n        var combineGradientString = function(colorAsRgb, colorAsHex) {\r\n            var rtlEnabled = this.option(\"rtlEnabled\");\r\n            var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\r\n            var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\r\n            var startColorIE = \"'#\" + (rtlEnabled ? \"00\" : \"\") + colorAsHex + \"'\";\r\n            var finishColorIE = \"'#\" + (rtlEnabled ? \"\" : \"00\") + colorAsHex + \"'\";\r\n            return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=\" + startColorIE + \", endColorstr=\" + finishColorIE + \")\"].join(\";\")\r\n        };\r\n        $el.attr(\"style\", combineGradientString.call(this, colorAsRgb, colorAsHex))\r\n    },\r\n    _renderAlphaChannelInput: function() {\r\n        var that = this;\r\n        var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\r\n        that._alphaChannelInput = this._renderEditorWithLabel({\r\n            editorType: _number_box.default,\r\n            value: this._currentColor.a,\r\n            max: 1,\r\n            step: .1,\r\n            onValueChanged: function(e) {\r\n                var value = e.value;\r\n                value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\r\n                that._updateColorTransparency(value);\r\n                that._placeAlphaChannelHandle()\r\n            },\r\n            labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\r\n            labelText: \"Alpha\",\r\n            labelAriaText: _message.default.format(\"dxColorView-ariaAlpha\")\r\n        }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\")\r\n    },\r\n    _updateColorTransparency: function(transparency) {\r\n        this._currentColor.a = transparency;\r\n        this.applyColor()\r\n    },\r\n    _renderAlphaChannelHandle: function($parent) {\r\n        this._$alphaChannelHandle = (0, _renderer.default)(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\r\n        this._createComponent(this._$alphaChannelHandle, _draggable.default, {\r\n            contentTemplate: null,\r\n            boundary: $parent,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"horizontal\",\r\n            onDragMove: function() {\r\n                this._updateByDrag = true;\r\n                var $alphaChannelHandle = this._$alphaChannelHandle;\r\n                var alphaChannelHandlePosition = (0, _translator.locate)($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\r\n                this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition)\r\n            }.bind(this)\r\n        });\r\n        this._alphaChannelHandleWidth = this._$alphaChannelHandle.width();\r\n        this._alphaChannelScaleWorkWidth = $parent.width() - this._alphaChannelHandleWidth;\r\n        this._placeAlphaChannelHandle()\r\n    },\r\n    _calculateColorTransparencyByScaleWidth: function(handlePosition) {\r\n        var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\r\n        var rtlEnabled = this.option(\"rtlEnabled\");\r\n        transparency = rtlEnabled ? transparency : 1 - transparency;\r\n        if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\r\n            transparency = rtlEnabled ? 1 : 0\r\n        } else {\r\n            if (transparency < 1) {\r\n                transparency = transparency.toFixed(2)\r\n            }\r\n        }\r\n        transparency = Math.max(transparency, 0);\r\n        transparency = Math.min(transparency, 1);\r\n        this._alphaChannelInput.option(\"value\", transparency)\r\n    },\r\n    _placeAlphaChannelHandle: function() {\r\n        var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\r\n        if (left < 0) {\r\n            left = 0\r\n        }\r\n        if (this._alphaChannelScaleWorkWidth < left) {\r\n            left = this._alphaChannelScaleWorkWidth\r\n        }(0, _translator.move)(this._$alphaChannelHandle, {\r\n            left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\r\n        })\r\n    },\r\n    applyColor: function() {\r\n        var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        this.option(\"value\", colorValue)\r\n    },\r\n    cancelColor: function() {\r\n        this._initColorAndOpacity();\r\n        this._refreshMarkup()\r\n    },\r\n    _updateColor: function(isHex, e) {\r\n        var rgba;\r\n        var newColor;\r\n        if (isHex) {\r\n            newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"))\r\n        } else {\r\n            rgba = this._validateRgb();\r\n            if (this._alphaChannelInput) {\r\n                rgba.push(this._alphaChannelInput.option(\"value\"));\r\n                newColor = \"rgba(\" + rgba.join(\", \") + \")\"\r\n            } else {\r\n                newColor = \"rgb(\" + rgba.join(\", \") + \")\"\r\n            }\r\n        }\r\n        if (!this._suppressEditorsValueUpdating) {\r\n            this._currentColor = new _color.default(newColor);\r\n            this.applyColor();\r\n            this._refreshMarkup()\r\n        }\r\n    },\r\n    _validateHex: function(hex) {\r\n        return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex()\r\n    },\r\n    _validateRgb: function() {\r\n        var r = this._rgbInputs[0].option(\"value\");\r\n        var g = this._rgbInputs[1].option(\"value\");\r\n        var b = this._rgbInputs[2].option(\"value\");\r\n        if (!this._currentColor.isValidRGB(r, g, b)) {\r\n            r = this._currentColor.r;\r\n            g = this._currentColor.g;\r\n            b = this._currentColor.b\r\n        }\r\n        return [r, g, b]\r\n    },\r\n    _refreshMarkup: function() {\r\n        this._placeHueScaleHandle();\r\n        this._placePaletteHandle();\r\n        this._updateColorParamsAndColorPreview();\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\r\n        if (this._$alphaChannelHandle) {\r\n            this._updateColorTransparency(this._currentColor.a);\r\n            this._placeAlphaChannelHandle()\r\n        }\r\n    },\r\n    _updateColorParamsAndColorPreview: function() {\r\n        this._suppressEditorsValueUpdating = true;\r\n        this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\r\n        this._rgbInputs[0].option(\"value\", this._currentColor.r);\r\n        this._rgbInputs[1].option(\"value\", this._currentColor.g);\r\n        this._rgbInputs[2].option(\"value\", this._currentColor.b);\r\n        this._suppressEditorsValueUpdating = false;\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\r\n            this._alphaChannelInput.option(\"value\", this._currentColor.a)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        var value = args.value;\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._setCurrentColor(value);\r\n                if (!this._updateByDrag) {\r\n                    this._refreshMarkup()\r\n                }\r\n                this._updateByDrag = false;\r\n                this.callBase(args);\r\n                break;\r\n            case \"matchValue\":\r\n                this._setBaseColor(value);\r\n                break;\r\n            case \"onEnterKeyPressed\":\r\n                this._initEnterKeyPressedAction();\r\n                break;\r\n            case \"editAlphaChannel\":\r\n                if (this._$colorPickerContainer) {\r\n                    this._renderHtmlRows(\"editAlphaChannel\");\r\n                    this._renderAlphaChannelElements()\r\n                }\r\n                break;\r\n            case \"keyStep\":\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderControls();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\n(0, _component_registrator.default)(\"dxColorView\", ColorView);\r\nvar _default = ColorView;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}